{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React useDebounce Hook",
  "description": "In this lab, we will learn how to create a custom React hook called useDebounce that helps debounce user input. Debouncing is a technique that delays the invocation of a function until a certain amount of time has passed since the last time it was called. This technique is commonly used in scenarios where the user input triggers frequent updates to the application state, as it can help reduce unnecessary re-renders and improve performance.",
  "meta": {
    "title": "Discover the Power of React's useDebounce Hook",
    "description": "Learn how to create a custom React hook that helps debounce user input for improved performance.",
    "keywords": "user input, hook, react, usedebounce, debouncing"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React useDebounce Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "react/event_handling",
          "react/hooks",
          "react/jsx",
          "react/use_state_reducer"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React useDebounce 钩子",
      "description": "在本实验中，我们将学习如何创建一个名为 useDebounce 的自定义 React 钩子，它有助于防抖用户输入。防抖是一种技术，它会延迟函数的调用，直到自上次调用以来已经过了一定的时间。这种技术通常用于用户输入触发应用程序状态频繁更新的场景，因为它有助于减少不必要的重新渲染并提高性能。",
      "meta": {
        "title": "探索 React 的 useDebounce 钩子的强大功能",
        "description": "了解如何创建一个自定义 React 钩子，以帮助防抖用户输入，从而提高性能。",
        "keywords": "用户输入, 钩子, React, useDebounce, 防抖"
      },
      "details": {
        "steps": [
          {
            "title": "React useDebounce 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证网络服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“上线”以在端口 8080 上运行网络服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改的状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
