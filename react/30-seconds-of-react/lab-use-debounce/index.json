{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React useDebounce Hook",
  "description": "In this lab, we will learn how to create a custom React hook called useDebounce that helps debounce user input. Debouncing is a technique that delays the invocation of a function until a certain amount of time has passed since the last time it was called. This technique is commonly used in scenarios where the user input triggers frequent updates to the application state, as it can help reduce unnecessary re-renders and improve performance.",
  "meta": {
    "title": "Discover the Power of React's useDebounce Hook",
    "description": "Learn how to create a custom React hook that helps debounce user input for improved performance.",
    "keywords": "user input, hook, react, usedebounce, debouncing"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React useDebounce Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React useDebounce 钩子",
      "description": "在本实验中，我们将学习如何创建一个名为 useDebounce 的自定义 React 钩子，它有助于防抖用户输入。防抖是一种技术，它会延迟函数的调用，直到自上次调用以来已经过了一定的时间。这种技术通常用于用户输入触发应用程序状态频繁更新的场景，因为它有助于减少不必要的重新渲染并提高性能。",
      "meta": {
        "title": "探索 React 的 useDebounce 钩子的强大功能",
        "description": "了解如何创建一个自定义 React 钩子，以帮助防抖用户输入，从而提高性能。",
        "keywords": "用户输入，钩子，React, useDebounce, 防抖"
      },
      "details": {
        "steps": [
          {
            "title": "React useDebounce 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证网络服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“上线”以在端口 8080 上运行网络服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改的状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Hook useDebounce de React",
      "description": "En este laboratorio, aprenderemos cómo crear un hook personalizado de React llamado useDebounce que ayuda a debounce la entrada del usuario. El debounce es una técnica que retrasa la invocación de una función hasta que ha pasado un cierto tiempo desde la última vez que se llamó. Esta técnica se utiliza comúnmente en escenarios donde la entrada del usuario desencadena actualizaciones frecuentes del estado de la aplicación, ya que puede ayudar a reducir los re-renders innecesarios y mejorar el rendimiento.",
      "meta": {
        "title": "Descubre el poder del Hook useDebounce de React",
        "description": "Aprende cómo crear un hook personalizado de React que ayuda a debounce la entrada del usuario para mejorar el rendimiento.",
        "keywords": "entrada del usuario, hook, react, usedebounce, debounce"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useDebounce de React",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "React useDebounce Hook",
      "description": "Dans ce laboratoire, nous allons apprendre à créer un hook React personnalisé appelé useDebounce qui permet de gérer le rebondissement de l'entrée de l'utilisateur. Le rebondissement est une technique qui retarde l'appel d'une fonction jusqu'à ce qu'un certain laps de temps soit écoulé depuis la dernière fois qu'elle a été appelée. Cette technique est couramment utilisée dans les scénarios où l'entrée de l'utilisateur déclenche des mises à jour fréquentes de l'état de l'application, car elle peut aider à réduire les re-rendu inutiles et à améliorer les performances.",
      "meta": {
        "title": "Découvrez le pouvoir du hook useDebounce de React",
        "description": "Apprenez à créer un hook React personnalisé qui permet de gérer le rebondissement de l'entrée de l'utilisateur pour améliorer les performances.",
        "keywords": "entrée utilisateur, hook, react, usedebounce, rebondissement"
      },
      "details": {
        "steps": [
          {
            "title": "React useDebounce Hook",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez le statut d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez rafraîchir l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifiez le statut de la modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "React useDebounce-Hook",
      "description": "In diesem Lab werden wir lernen, wie wir einen benutzerdefinierten React-Hook namens useDebounce erstellen, der das Debouncing von Benutzereingaben unterstützt. Debouncing ist eine Technik, die das Aufrufen einer Funktion verzögert, bis eine bestimmte Zeit seit der letzten Aufrufzeit verstrichen ist. Diese Technik wird häufig in Szenarien eingesetzt, in denen die Benutzereingabe häufige Aktualisierungen des Anwendungsstatus auslöst, da sie dazu beitragen kann, unnötige Neuerstellungen zu reduzieren und die Leistung zu verbessern.",
      "meta": {
        "title": "Entdecken Sie die Macht des React useDebounce-Hooks",
        "description": "Lernen Sie, wie Sie einen benutzerdefinierten React-Hook erstellen, der das Debouncing von Benutzereingaben unterstützt, um die Leistung zu verbessern.",
        "keywords": "Benutzereingabe, Hook, React, usedebounce, Debouncing"
      },
      "details": {
        "steps": [
          {
            "title": "React useDebounce-Hook",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen des Laufzustands des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie in der unteren rechten Ecke auf 'Go Live', um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzuschauen."
              },
              {
                "name": "Überprüfen des Status der Änderungen an script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "React の useDebounce フック",
      "description": "この実験では、ユーザー入力のデバウンス処理を行うためのカスタム React フックである useDebounce を作成する方法を学びます。デバウンス処理とは、関数の呼び出しを遅延させる技術であり、最後に呼び出されてから一定時間が経過するまで、関数の呼び出しを遅らせます。この技術は、ユーザー入力がアプリケーションの状態を頻繁に更新するシナリオで一般的に使用され、不要な再レンダリングを減らし、パフォーマンスを向上させるのに役立ちます。",
      "meta": {
        "title": "React の useDebounce フックの力を発見する",
        "description": "ユーザー入力のデバウンス処理を行い、パフォーマンスを向上させるためのカスタム React フックの作成方法を学びましょう。",
        "keywords": "ユーザー入力，フック，React, useDebounce, デバウンス処理"
      },
      "details": {
        "steps": [
          {
            "title": "React の useDebounce フック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ウェブサービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして、ポート 8080 でウェブサービスを実行してください。その後、**Web 8080**タブを更新して、ウェブページをプレビューできます。"
              },
              {
                "name": "script.js の変更状態を確認する",
                "file": "verify1-2.sh",
                "hint": "実験を完了するための手順に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "React хук useDebounce",
      "description": "В этом практическом занятии мы научимся создавать пользовательский хук React под названием useDebounce, который помогает подавлять (демпфировать) ввод пользователя. Демпфирование - это техника, которая откладывает вызов функции до тех пор, пока не пройдет определенное количество времени с момента последнего вызова. Эта техника широко используется в сценариях, когда ввод пользователя вызывает частые обновления состояния приложения, так как она может помочь уменьшить ненужные перерендеры и повысить производительность.",
      "meta": {
        "title": "Откройте силу React хука useDebounce",
        "description": "Изучите, как создать пользовательский хук React, который помогает демпфировать ввод пользователя для повышения производительности.",
        "keywords": "ввод пользователя, хук, react, useDebounce, демпфирование"
      },
      "details": {
        "steps": [
          {
            "title": "React хук useDebounce",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить статус работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить статус изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам, чтобы завершить практическое занятие."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "React useDebounce Hook",
      "description": "이 랩에서는 사용자 입력을 디바운싱하는 데 도움이 되는 useDebounce 라는 사용자 지정 React 훅을 만드는 방법을 배웁니다. 디바운싱은 함수가 마지막으로 호출된 이후 일정 시간이 경과할 때까지 함수의 호출을 지연시키는 기술입니다. 이 기술은 사용자 입력이 애플리케이션 상태에 대한 빈번한 업데이트를 트리거하는 시나리오에서 일반적으로 사용되며, 불필요한 재렌더링을 줄이고 성능을 향상시키는 데 도움이 될 수 있습니다.",
      "meta": {
        "title": "React 의 useDebounce Hook 의 강력한 기능 탐구",
        "description": "성능 향상을 위해 사용자 입력을 디바운싱하는 데 도움이 되는 사용자 지정 React 훅을 만드는 방법을 알아보세요.",
        "keywords": "사용자 입력, 훅 (hook), 리액트 (React), usedebounce, 디바운싱 (debouncing), React 훅"
      },
      "details": {
        "steps": [
          {
            "title": "React useDebounce Hook",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "웹 서비스 실행 상태 확인",
                "file": "verify1-1.sh",
                "hint": "오른쪽 하단의 'Go Live'를 클릭하여 포트 8080 에서 웹 서비스를 실행하세요. 그런 다음 **Web 8080** 탭을 새로 고쳐 웹 페이지를 미리 볼 수 있습니다."
              },
              {
                "name": "script.js 수정 상태 확인",
                "file": "verify1-2.sh",
                "hint": "랩을 완료하려면 단계를 따르세요."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "React useDebounce Hook",
      "description": "Neste laboratório, aprenderemos como criar um custom React hook chamado useDebounce que ajuda a debouncer a entrada do usuário. Debouncing é uma técnica que atrasa a invocação de uma função até que uma certa quantidade de tempo tenha passado desde a última vez que foi chamada. Essa técnica é comumente usada em cenários onde a entrada do usuário aciona atualizações frequentes no estado da aplicação, pois pode ajudar a reduzir re-renders desnecessários e melhorar o desempenho.",
      "meta": {
        "title": "Descubra o Poder do useDebounce Hook do React",
        "description": "Aprenda como criar um custom React hook que ajuda a debouncer a entrada do usuário para melhorar o desempenho.",
        "keywords": "entrada do usuário, hook, react, usedebounce, debouncing, debounce, React.js"
      },
      "details": {
        "steps": [
          {
            "title": "React useDebounce Hook",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verifique o status de execução do serviço web",
                "file": "verify1-1.sh",
                "hint": "Por favor, clique em 'Go Live' no canto inferior direito para executar o serviço web na porta 8080. Em seguida, você pode atualizar a aba **Web 8080** para visualizar a página web."
              },
              {
                "name": "Verifique o status da modificação do script.js",
                "file": "verify1-2.sh",
                "hint": "Por favor, siga os passos para completar o laboratório."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
