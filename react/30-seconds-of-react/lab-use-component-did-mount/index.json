{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React useComponentDidMount Hook",
  "description": "In this lab, we will be learning how to use the useComponentDidMount hook in React. This hook allows us to execute a callback immediately after a component is mounted, similar to the componentDidMount() method of class components. By the end of this lab, you will have a better understanding of how to use this hook and how it can be useful in your React projects.",
  "meta": {
    "title": "Mastering React useComponentDidMount Hook",
    "description": "Learn how to use the useComponentDidMount hook in React to execute a callback immediately after a component is mounted.",
    "keywords": "usecomponentdidmount, react, component lifecycle, web development, hooks"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React useComponentDidMount Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": ["react/hooks", "react/jsx"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React 的 useComponentDidMount 钩子",
      "description": "在本实验中，我们将学习如何在 React 中使用 useComponentDidMount 钩子。这个钩子允许我们在组件挂载后立即执行一个回调函数，类似于类组件的 componentDidMount() 方法。在本实验结束时，你将更好地理解如何使用这个钩子以及它在你的 React 项目中如何发挥作用。",
      "meta": {
        "title": "掌握 React 的 useComponentDidMount 钩子",
        "description": "学习如何在 React 中使用 useComponentDidMount 钩子，以便在组件挂载后立即执行回调函数。",
        "keywords": "usecomponentdidmount, React, 组件生命周期，网页开发，钩子"
      },
      "details": {
        "steps": [
          {
            "title": "React 的 useComponentDidMount 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证网络服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“上线”以在端口 8080 上运行网络服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改的状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "React useComponentDidMount Hook",
      "description": "En este laboratorio, aprenderemos a usar el hook useComponentDidMount en React. Este hook nos permite ejecutar una devolución de llamada inmediatamente después de que un componente se monta, similar al método componentDidMount() de los componentes de clase. Al final de este laboratorio, tendrás una mejor comprensión de cómo usar este hook y cómo puede ser útil en tus proyectos de React.",
      "meta": {
        "title": "Dominando el hook React useComponentDidMount",
        "description": "Aprende a usar el hook useComponentDidMount en React para ejecutar una devolución de llamada inmediatamente después de que un componente se monta.",
        "keywords": "usecomponentdidmount, react, ciclo de vida del componente, desarrollo web, hooks"
      },
      "details": {
        "steps": [
          {
            "title": "React useComponentDidMount Hook",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "React useComponentDidMount Hook",
      "description": "Dans ce laboratoire, nous allons apprendre à utiliser le hook useComponentDidMount dans React. Ce hook nous permet d'exécuter une fonction de rappel immédiatement après qu'un composant est monté, de manière similaire à la méthode componentDidMount() des composants de classe. À la fin de ce laboratoire, vous aurez une meilleure compréhension de la manière d'utiliser ce hook et de sa utilité dans vos projets React.",
      "meta": {
        "title": "Maîtriser le hook React useComponentDidMount",
        "description": "Apprenez à utiliser le hook useComponentDidMount dans React pour exécuter une fonction de rappel immédiatement après qu'un composant est monté.",
        "keywords": "usecomponentdidmount, react, cycle de vie du composant, développement web, hooks"
      },
      "details": {
        "steps": [
          {
            "title": "React useComponentDidMount Hook",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier l'état d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez rafraîchir l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifier l'état de la modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "React useComponentDidMount-Hook",
      "description": "In diesem Lab lernen wir, wie wir den useComponentDidMount-Hook in React verwenden. Dieser Hook ermöglicht es uns, einen Callback sofort nach dem Mounten eines Komponenten auszuführen, ähnlich wie die componentDidMount()-Methode von Klassenkomponenten. Am Ende dieses Labs werden Sie ein besseres Verständnis dafür haben, wie man diesen Hook verwendet und wie er in Ihren React-Projekten nützlich sein kann.",
      "meta": {
        "title": "Meisterhaftigkeit im React useComponentDidMount-Hook",
        "description": "Lernen Sie, wie Sie den useComponentDidMount-Hook in React verwenden, um einen Callback sofort nach dem Mounten eines Komponenten auszuführen.",
        "keywords": "usecomponentdidmount, react, komponentenlebenszyklus, webentwicklung, hooks"
      },
      "details": {
        "steps": [
          {
            "title": "React useComponentDidMount-Hook",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren des Laufzustands des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie auf 'Go Live' in der unteren rechten Ecke, um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzuschauen."
              },
              {
                "name": "Verifizieren des Status der Änderungen an script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "React の useComponentDidMount フック",
      "description": "この実験では、React における useComponentDidMount フックの使い方を学びます。このフックを使うと、コンポーネントがマウントされた直後にコールバックを実行できます。これは、クラスコンポーネントの componentDidMount() メソッドと似ています。この実験が終わるとき、このフックの使い方と、React プロジェクトでどのように役立つかをより深く理解しているでしょう。",
      "meta": {
        "title": "React の useComponentDidMount フックをマスターする",
        "description": "React において、コンポーネントがマウントされた直後にコールバックを実行するための useComponentDidMount フックの使い方を学びましょう。",
        "keywords": "usecomponentdidmount, react, コンポーネントライフサイクル，ウェブ開発，フック"
      },
      "details": {
        "steps": [
          {
            "title": "React の useComponentDidMount フック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ウェブサービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして、ポート 8080 でウェブサービスを実行してください。その後、**Web 8080**タブを更新して、ウェブページをプレビューできます。"
              },
              {
                "name": "script.js の変更状態を確認する",
                "file": "verify1-2.sh",
                "hint": "実験を完了するための手順に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "React хук useComponentDidMount",
      "description": "В этом практическом занятии мы научимся использовать хук useComponentDidMount в React. Этот хук позволяет нам выполнять обратный вызов сразу после монтирования компонента, аналогично методу componentDidMount() классовых компонентов. В конце этого практического занятия вы будете лучше понимать, как использовать этот хук и как он может быть полезен в ваших проектах на React.",
      "meta": {
        "title": "Мастерство в использовании хука useComponentDidMount в React",
        "description": "Изучите, как использовать хук useComponentDidMount в React для выполнения обратного вызова сразу после монтирования компонента.",
        "keywords": "usecomponentdidmount, react, жизненный цикл компонента, веб-разработка, хуки"
      },
      "details": {
        "steps": [
          {
            "title": "React хук useComponentDidMount",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить статус работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить статус изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам, чтобы завершить практическое занятие."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
