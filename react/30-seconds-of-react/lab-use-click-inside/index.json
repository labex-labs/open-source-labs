{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React useClickInside Hook",
  "description": "In this lab, we will learn how to create a custom React hook called useClickInside. This hook will handle the event of clicking inside a wrapped component and trigger a callback function. We will use useEffect() and useRef() hooks to append and clean up the click event. By the end of this lab, you will have a better understanding of how to create custom hooks and handle events in React.",
  "meta": {
    "title": "Create a Powerful React Hook for Click Event Handling",
    "description": "Learn how to build a custom React hook called useClickInside to handle click events inside a component.",
    "keywords": "custom hook, event handling, react, click event, web development"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React useClickInside Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "react/css_in_react",
          "react/event_handling",
          "react/hooks",
          "react/jsx"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React useClickInside 钩子",
      "description": "在本实验中，我们将学习如何创建一个名为 useClickInside 的自定义 React 钩子。这个钩子将处理在包裹组件内部的点击事件，并触发一个回调函数。我们将使用 useEffect() 和 useRef() 钩子来附加和清理点击事件。在本实验结束时，你将对如何在 React 中创建自定义钩子和处理事件有更深入的理解。",
      "meta": {
        "title": "创建强大的 React 点击事件处理钩子",
        "description": "学习如何构建一个名为 useClickInside 的自定义 React 钩子，以处理组件内部的点击事件。",
        "keywords": "自定义钩子，事件处理，React, 点击事件，网页开发"
      },
      "details": {
        "steps": [
          {
            "title": "React useClickInside 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证网络服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“Go Live”以在端口 8080 上运行网络服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Hook useClickInside de React",
      "description": "En este laboratorio, aprenderemos cómo crear un hook personalizado de React llamado useClickInside. Este hook manejará el evento de hacer clic dentro de un componente envuelto y desencadenará una función de devolución de llamada. Usaremos useEffect() y useRef() hooks para adjuntar y limpiar el evento click. Al final de este laboratorio, tendrás una mejor comprensión de cómo crear hooks personalizados y manejar eventos en React.",
      "meta": {
        "title": "Crea un Potente Hook de React para el Manejo de Eventos de Clic",
        "description": "Aprende cómo construir un hook personalizado de React llamado useClickInside para manejar eventos de clic dentro de un componente.",
        "keywords": "hook personalizado, manejo de eventos, react, evento de clic, desarrollo web"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useClickInside de React",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Hook React useClickInside",
      "description": "Dans ce laboratoire, nous allons apprendre à créer un hook React personnalisé appelé useClickInside. Ce hook gérera l'événement de clic à l'intérieur d'un composant emballé et déclenchera une fonction de rappel. Nous utiliserons les hooks useEffect() et useRef() pour ajouter et nettoyer l'événement click. À la fin de ce laboratoire, vous aurez une meilleure compréhension de la création de hooks personnalisés et de la gestion des événements dans React.",
      "meta": {
        "title": "Créer un puissant hook React pour la gestion des événements de clic",
        "description": "Apprenez à construire un hook React personnalisé appelé useClickInside pour gérer les événements de clic à l'intérieur d'un composant.",
        "keywords": "hook personnalisé, gestion des événements, react, événement de clic, développement web"
      },
      "details": {
        "steps": [
          {
            "title": "Hook React useClickInside",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier l'état d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez rafraîchir l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifier l'état de la modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "React useClickInside-Hook",
      "description": "In diesem Lab werden wir lernen, wie wir einen benutzerdefinierten React-Hook namens useClickInside erstellen. Dieser Hook wird das Ereignis des Klickens innerhalb eines umschlossenen Komponenten verarbeiten und eine Callback-Funktion auslösen. Wir werden die Hooks useEffect() und useRef() verwenden, um das click-Ereignis hinzuzufügen und aufzuräumen. Am Ende dieses Labs werden Sie ein besseres Verständnis dafür haben, wie man benutzerdefinierte Hooks erstellt und Ereignisse in React behandelt.",
      "meta": {
        "title": "Erstellen Sie einen leistungsstarken React-Hook für die Behandlung von Klickereignissen",
        "description": "Lernen Sie, wie Sie einen benutzerdefinierten React-Hook namens useClickInside erstellen, um Klickereignisse innerhalb einer Komponente zu behandeln.",
        "keywords": "benutzerdefinierter Hook, Ereignisbehandlung, React, Klickereignis, Webentwicklung"
      },
      "details": {
        "steps": [
          {
            "title": "React useClickInside-Hook",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen des Laufzustands des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie in der unteren rechten Ecke auf 'Go Live', um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzuschauen."
              },
              {
                "name": "Überprüfen des Status der Änderungen an script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "React の useClickInside フック",
      "description": "この実験では、useClickInside と呼ばれるカスタム React フックを作成する方法を学びます。このフックは、ラップされたコンポーネント内でのクリックイベントを処理し、コールバック関数をトリガーします。useEffect() と useRef() フックを使用して、クリックイベントを追加およびクリーンアップします。この実験が終了するとき、React でカスタムフックを作成し、イベントを処理する方法をより深く理解しているでしょう。",
      "meta": {
        "title": "クリックイベント処理に強力な React フックを作成する",
        "description": "コンポーネント内のクリックイベントを処理するための useClickInside と呼ばれるカスタム React フックを作成する方法を学びます。",
        "keywords": "カスタムフック，イベント処理，React, クリックイベント，ウェブ開発"
      },
      "details": {
        "steps": [
          {
            "title": "React の useClickInside フック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ウェブサービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして、ポート 8080 でウェブサービスを実行してください。その後、**Web 8080** タブを更新してウェブページをプレビューできます。"
              },
              {
                "name": "script.js の変更状態を確認する",
                "file": "verify1-2.sh",
                "hint": "実験を完了するための手順に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "React хук useClickInside",
      "description": "В этом практическом занятии мы научимся создавать пользовательский хук React под названием useClickInside. Этот хук будет обрабатывать событие клика внутри обёрнутого компонента и запускать функцию обратного вызова. Мы будем использовать useEffect() и useRef() хуки для добавления и очистки события click. В конце этого практического занятия вы будете лучше понимать, как создавать пользовательские хуки и обрабатывать события в React.",
      "meta": {
        "title": "Создайте мощный React хук для обработки события клика",
        "description": "Изучите, как создать пользовательский React хук под названием useClickInside для обработки событий клика внутри компонента.",
        "keywords": "пользовательский хук, обработка событий, react, событие клика, веб-разработка"
      },
      "details": {
        "steps": [
          {
            "title": "React хук useClickInside",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить статус работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите на кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить статус изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам, чтобы завершить практическое занятие."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "React useClickInside 훅",
      "description": "이 랩에서는 useClickInside 라는 사용자 정의 React 훅을 만드는 방법을 배웁니다. 이 훅은 래핑된 컴포넌트 내부의 클릭 이벤트를 처리하고 콜백 함수를 트리거합니다. useEffect() 및 useRef() 훅을 사용하여 클릭 이벤트를 추가하고 정리합니다. 이 랩을 마치면 사용자 정의 훅을 만들고 React 에서 이벤트를 처리하는 방법에 대한 이해도가 높아질 것입니다.",
      "meta": {
        "title": "클릭 이벤트 처리를 위한 강력한 React 훅 만들기",
        "description": "useClickInside 라는 사용자 정의 React 훅을 사용하여 컴포넌트 내부의 클릭 이벤트를 처리하는 방법을 알아보세요.",
        "keywords": "사용자 정의 훅, 이벤트 처리, react, 클릭 이벤트, 웹 개발"
      },
      "details": {
        "steps": [
          {
            "title": "React useClickInside 훅",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "웹 서비스 실행 상태 확인",
                "file": "verify1-1.sh",
                "hint": "오른쪽 하단의 'Go Live'를 클릭하여 웹 서비스를 포트 8080 에서 실행하세요. 그런 다음 **Web 8080** 탭을 새로 고쳐 웹 페이지를 미리 볼 수 있습니다."
              },
              {
                "name": "script.js 수정 상태 확인",
                "file": "verify1-2.sh",
                "hint": "랩을 완료하려면 단계를 따르세요."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "React useClickInside Hook",
      "description": "Neste laboratório, aprenderemos como criar um custom hook React chamado useClickInside. Este hook lidará com o evento de clique dentro de um componente encapsulado e acionará uma função de callback. Usaremos os hooks useEffect() e useRef() para anexar e limpar o evento de clique. Ao final deste laboratório, você terá uma melhor compreensão de como criar custom hooks e lidar com eventos em React.",
      "meta": {
        "title": "Crie um Hook React Poderoso para Manipulação de Eventos de Clique",
        "description": "Aprenda a construir um custom hook React chamado useClickInside para lidar com eventos de clique dentro de um componente. Otimize a interação do usuário e a performance da sua aplicação React.",
        "keywords": "custom hook, manipulação de eventos, react, evento de clique, desenvolvimento web, hooks react, useClickInside"
      },
      "details": {
        "steps": [
          {
            "title": "React useClickInside Hook",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar o status de execução do serviço web",
                "file": "verify1-1.sh",
                "hint": "Por favor, clique em 'Go Live' no canto inferior direito para executar o serviço web na porta 8080. Em seguida, você pode atualizar a aba **Web 8080** para visualizar a página web."
              },
              {
                "name": "Verificar o status da modificação do script.js",
                "file": "verify1-2.sh",
                "hint": "Por favor, siga os passos para completar o laboratório."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
