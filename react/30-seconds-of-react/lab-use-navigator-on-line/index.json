{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React useNavigatorOnLine Hook",
  "description": "In this lab, we will learn how to use the useNavigatorOnLine hook in React to check whether a client is online or offline. We will create a function to get the online status of the client using the Navigator.onLine web API, use the useState() hook to create an appropriate state variable, and add listeners for appropriate events using the useEffect() hook to update the state and clean up those listeners when unmounting. Finally, we will return the online status state variable to display a message based on the current online status.",
  "meta": {
    "title": "Mastering the useNavigatorOnLine Hook in React",
    "description": "Learn how to use the useNavigatorOnLine hook to check the online status of your React application.",
    "keywords": "online status, usenavigatoronline, programming tutorial, react, web development"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React useNavigatorOnLine Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "react/conditional_render",
          "react/event_handling",
          "react/hooks",
          "react/jsx",
          "react/use_state_reducer"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React 的 useNavigatorOnLine 钩子",
      "description": "在本实验中，我们将学习如何在 React 中使用 useNavigatorOnLine 钩子来检查客户端是在线还是离线。我们将创建一个函数，使用 Navigator.onLine Web API 获取客户端的在线状态，使用 useState() 钩子创建一个合适的状态变量，并使用 useEffect() 钩子为适当的事件添加监听器，以更新状态并在卸载时清理这些监听器。最后，我们将返回在线状态状态变量，以根据当前在线状态显示一条消息。",
      "meta": {
        "title": "掌握 React 中的 useNavigatorOnLine 钩子",
        "description": "学习如何使用 useNavigatorOnLine 钩子检查 React 应用程序的在线状态。",
        "keywords": "在线状态，useNavigatorOnLine, 编程教程，React, 网页开发"
      },
      "details": {
        "steps": [
          {
            "title": "React 的 useNavigatorOnLine 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Web 服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“上线”以在端口 8080 上运行 Web 服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改的状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "React useNavigatorOnLine Hook",
      "description": "En este laboratorio, aprenderemos a usar el hook useNavigatorOnLine en React para comprobar si un cliente está en línea o fuera de línea. Crearemos una función para obtener el estado de conexión del cliente usando la API web Navigator.onLine, usaremos el hook useState() para crear una variable de estado adecuada y agregaremos listeners para los eventos adecuados usando el hook useEffect() para actualizar el estado y limpiar esos listeners cuando se desmonte. Finalmente, devolveremos la variable de estado del estado de conexión para mostrar un mensaje basado en el estado de conexión actual.",
      "meta": {
        "title": "Dominando el hook useNavigatorOnLine en React",
        "description": "Aprende a usar el hook useNavigatorOnLine para comprobar el estado de conexión de tu aplicación React.",
        "keywords": "estado de conexión, usenavigatoronline, tutorial de programación, react, desarrollo web"
      },
      "details": {
        "steps": [
          {
            "title": "React useNavigatorOnLine Hook",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Hook useNavigatorOnLine de React",
      "description": "Dans ce laboratoire, nous allons apprendre à utiliser le hook useNavigatorOnLine dans React pour vérifier si un client est en ligne ou hors ligne. Nous allons créer une fonction pour obtenir l'état de connexion en ligne du client à l'aide de l'API web Navigator.onLine, utiliser le hook useState() pour créer une variable d'état appropriée et ajouter des écouteurs pour les événements appropriés à l'aide du hook useEffect() pour mettre à jour l'état et nettoyer ces écouteurs lors du démontage. Enfin, nous allons renvoyer la variable d'état de l'état de connexion en ligne pour afficher un message en fonction de l'état de connexion en ligne actuel.",
      "meta": {
        "title": "Maîtriser le hook useNavigatorOnLine en React",
        "description": "Apprenez à utiliser le hook useNavigatorOnLine pour vérifier l'état de connexion en ligne de votre application React.",
        "keywords": "état de connexion en ligne, usenavigatoronline, tutoriel de programmation, react, développement web"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useNavigatorOnLine de React",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez le statut d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez rafraîchir l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifiez le statut de modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "React useNavigatorOnLine-Hook",
      "description": "In diesem Lab werden wir lernen, wie man den useNavigatorOnLine-Hook in React verwendet, um zu überprüfen, ob ein Client online oder offline ist. Wir werden eine Funktion erstellen, um den Online-Zustand des Clients mithilfe der Navigator.onLine-Web-API zu erhalten, den useState()-Hook verwenden, um eine passende Zustandsvariable zu erstellen, und Listener für passende Ereignisse mithilfe des useEffect()-Hooks hinzufügen, um den Zustand zu aktualisieren und diese Listener beim Entfernen zu bereinigen. Schließlich werden wir den Online-Zustands-Zustandsvariablen zurückgeben, um eine Nachricht basierend auf dem aktuellen Online-Zustand anzuzeigen.",
      "meta": {
        "title": "Das useNavigatorOnLine-Hook in React beherrschen",
        "description": "Lernen Sie, wie man den useNavigatorOnLine-Hook verwendet, um den Online-Zustand Ihrer React-Anwendung zu überprüfen.",
        "keywords": "Online-Zustand, usenavigatoronline, Programmier-Tutorial, React, Webentwicklung"
      },
      "details": {
        "steps": [
          {
            "title": "React useNavigatorOnLine-Hook",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen des Laufzustands des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie in der unteren rechten Ecke auf 'Go Live', um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzuschauen."
              },
              {
                "name": "Überprüfen der Änderungen in script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "React の useNavigatorOnLine フック",
      "description": "この実験では、React における useNavigatorOnLine フックを使ってクライアントがオンラインかオフラインかを確認する方法を学びます。Navigator.onLine ウェブ API を使ってクライアントのオンライン状態を取得する関数を作成し、useState() フックを使って適切な状態変数を作成し、useEffect() フックを使って適切なイベントのリスナーを追加して状態を更新し、マウント解除時にそれらのリスナーをクリーンアップします。最後に、オンライン状態の状態変数を返して、現在のオンライン状態に基づいたメッセージを表示します。",
      "meta": {
        "title": "React における useNavigatorOnLine フックのマスター",
        "description": "React アプリケーションのオンライン状態を確認するための useNavigatorOnLine フックの使い方を学びましょう。",
        "keywords": "オンライン状態，usenavigatoronline, プログラミングチュートリアル，React, ウェブ開発"
      },
      "details": {
        "steps": [
          {
            "title": "React の useNavigatorOnLine フック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ウェブサービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして、ポート 8080 でウェブサービスを実行してください。その後、**Web 8080** タブを更新してウェブページをプレビューできます。"
              },
              {
                "name": "script.js の変更内容を確認する",
                "file": "verify1-2.sh",
                "hint": "実験を完了するための手順に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "React useNavigatorOnLine Хук",
      "description": "В этом практическом занятии мы узнаем, как использовать хук useNavigatorOnLine в React для проверки, находится ли клиент в сети или оффлайн. Мы создадим функцию для получения статуса подключения клиента с использованием веб-API Navigator.onLine, используем хук useState() для создания соответствующей переменной состояния и добавим слушатели для соответствующих событий с использованием хука useEffect() для обновления состояния и очистки этих слушателей при демонтировании. Наконец, мы вернем переменную состояния статуса подключения для отображения сообщения в зависимости от текущего статуса подключения.",
      "meta": {
        "title": "Мастерство в использовании хука useNavigatorOnLine в React",
        "description": "Изучите, как использовать хук useNavigatorOnLine для проверки статуса подключения вашего React-приложения.",
        "keywords": "статус подключения, usenavigatoronline, учебник по программированию, react, веб-разработка"
      },
      "details": {
        "steps": [
          {
            "title": "React useNavigatorOnLine Хук",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить статус работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить статус изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам для завершения практического занятия."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
