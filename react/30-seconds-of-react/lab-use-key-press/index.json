{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React useKeyPress Hook",
  "description": "In this lab, we will learn how to create a custom React hook called useKeyPress that listens for changes in the pressed state of a given key. This hook will be useful in scenarios where we need to detect whether a specific key is being pressed by the user. We will use the useState and useEffect hooks to handle state and event listeners, respectively.",
  "meta": {
    "title": "Mastering the React useKeyPress Hook",
    "description": "Learn how to create a custom React hook that detects key presses, perfect for building interactive web applications.",
    "keywords": "usekeypress, event handling, react, web development, hooks"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React useKeyPress Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "react/conditional_render",
          "react/hooks",
          "react/jsx",
          "react/use_state_reducer"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React useKeyPress 钩子",
      "description": "在本实验中，我们将学习如何创建一个名为 useKeyPress 的自定义 React 钩子，它会监听给定按键按下状态的变化。在需要检测用户是否按下特定按键的场景中，这个钩子会很有用。我们将分别使用 useState 和 useEffect 钩子来处理状态和事件监听器。",
      "meta": {
        "title": "掌握 React useKeyPress 钩子",
        "description": "学习如何创建一个检测按键按下的自定义 React 钩子，非常适合构建交互式 Web 应用程序。",
        "keywords": "usekeypress, 事件处理，React, 网页开发，钩子"
      },
      "details": {
        "steps": [
          {
            "title": "React useKeyPress 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证网络服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“Go Live”以在端口 8080 上运行网络服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Hook useKeyPress de React",
      "description": "En este laboratorio, aprenderemos a crear un hook personalizado de React llamado useKeyPress que escuche los cambios en el estado presionado de una tecla dada. Este hook será útil en escenarios donde necesitemos detectar si el usuario está presionando una tecla específica. Usaremos los hooks useState y useEffect para manejar el estado y los oyentes de eventos, respectivamente.",
      "meta": {
        "title": "Dominando el Hook useKeyPress de React",
        "description": "Aprende a crear un hook personalizado de React que detecta pulsaciones de teclas, ideal para construir aplicaciones web interactivas.",
        "keywords": "usekeypress, manejo de eventos, react, desarrollo web, hooks"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useKeyPress de React",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "React useKeyPress Hook",
      "description": "Dans ce laboratoire, nous allons apprendre à créer un hook React personnalisé appelé useKeyPress qui écoute les changements de l'état appuyé d'une touche donnée. Ce hook sera utile dans des scénarios où nous devons détecter si une touche spécifique est enfoncée par l'utilisateur. Nous utiliserons les hooks useState et useEffect pour gérer l'état et les écouteurs d'événements respectivement.",
      "meta": {
        "title": "Maîtriser le hook React useKeyPress",
        "description": "Découvrez comment créer un hook React personnalisé qui détecte les pressions de touches, parfait pour construire des applications web interactives.",
        "keywords": "usekeypress, gestion d'événements, react, développement web, hooks"
      },
      "details": {
        "steps": [
          {
            "title": "React useKeyPress Hook",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez le statut d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez actualiser l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifiez l'état de la modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "React useKeyPress-Hook",
      "description": "In diesem Lab werden wir lernen, wie wir einen benutzerdefinierten React-Hook namens useKeyPress erstellen, der Änderungen im gedrückten Zustand einer bestimmten Taste überwacht. Dieser Hook wird in Situationen nützlich sein, in denen wir feststellen müssen, ob der Benutzer eine bestimmte Taste drückt. Wir werden die useState- und useEffect-Hooks verwenden, um den Zustand und die Ereignislistener respective zu behandeln.",
      "meta": {
        "title": "Meisterhaftigkeit beim React useKeyPress-Hook",
        "description": "Lernen Sie, wie Sie einen benutzerdefinierten React-Hook erstellen, der Tasteingaben erkennt, ideal für die Entwicklung interaktiver Webanwendungen.",
        "keywords": "usekeypress, Ereignisbehandlung, React, Webentwicklung, Hooks"
      },
      "details": {
        "steps": [
          {
            "title": "React useKeyPress-Hook",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen des Laufzustands des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie in der unteren rechten Ecke auf 'Go Live', um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzuschauen."
              },
              {
                "name": "Überprüfen des Status der Änderungen in script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "React useKeyPress フック",
      "description": "この実験では、特定のキーの押下状態の変化を監視するカスタム React フック `useKeyPress` を作成する方法を学びます。このフックは、ユーザーが特定のキーを押しているかどうかを検出する必要があるシナリオで役立ちます。それぞれの状態とイベントリスナーを処理するために、`useState` と `useEffect` フックを使用します。",
      "meta": {
        "title": "React useKeyPress フックをマスターする",
        "description": "キー入力を検出するカスタム React フックの作成方法を学び、インタラクティブなウェブアプリケーションの構築に最適。",
        "keywords": "usekeypress, イベントハンドリング，react, ウェブ開発，フック"
      },
      "details": {
        "steps": [
          {
            "title": "React useKeyPress フック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ウェブサービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして、ポート 8080 でウェブサービスを実行してください。その後、**Web 8080** タブを更新してウェブページをプレビューできます。"
              },
              {
                "name": "script.js の変更状態を確認する",
                "file": "verify1-2.sh",
                "hint": "実験を完了するための手順に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "React хук useKeyPress",
      "description": "В этом практическом занятии мы научимся создавать пользовательский React хук под названием useKeyPress, который слушает изменения состояния нажатой определенной клавиши. Этот хук будет полезен в ситуациях, когда нам нужно определить, нажимается ли определенная клавиша пользователем. Мы будем использовать хуки useState и useEffect для обработки состояния и слушателей событий соответственно.",
      "meta": {
        "title": "Мастерство в React хукe useKeyPress",
        "description": "Изучите, как создать пользовательский React хук, который определяет нажатия клавиш, идеально подходит для создания интерактивных веб-приложений.",
        "keywords": "usekeypress, обработка событий, react, веб-разработка, хуки"
      },
      "details": {
        "steps": [
          {
            "title": "React хук useKeyPress",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить статус работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем можно обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить статус изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам, чтобы завершить практическое занятие."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
