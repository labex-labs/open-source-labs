{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React useTimeout Hook",
  "description": "In this lab, we will explore how to implement the setTimeout() function in a declarative manner using the useTimeout custom hook in React. This hook allows us to set up a timeout and clean it up easily, while also remembering the latest callback function. We will also see an example of using the useTimeout hook to create a one-second timer that updates the state of a component every second.",
  "meta": {
    "title": "Mastering the useTimeout Hook in React",
    "description": "Explore the declarative implementation of setTimeout() in React using the useTimeout custom hook.",
    "keywords": "custom hook, react, state management, declarative programming, usetimeout"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React useTimeout Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React useTimeout 钩子",
      "description": "在本实验中，我们将探索如何使用 React 中的 useTimeout 自定义钩子以声明式方式实现 setTimeout() 函数。这个钩子使我们能够轻松地设置一个超时并清理它，同时还能记住最新的回调函数。我们还将看到一个使用 useTimeout 钩子创建一个每秒更新组件状态的一秒定时器的示例。",
      "meta": {
        "title": "掌握 React 中的 useTimeout 钩子",
        "description": "探索使用 useTimeout 自定义钩子在 React 中声明式实现 setTimeout()。",
        "keywords": "自定义钩子，React, 状态管理，声明式编程，useTimeout"
      },
      "details": {
        "steps": [
          {
            "title": "React useTimeout 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证网络服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“Go Live”以在端口 8080 上运行网络服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Hook useTimeout de React",
      "description": "En este laboratorio, exploraremos cómo implementar la función setTimeout() de manera declarativa utilizando el hook personalizado useTimeout en React. Este hook nos permite configurar un temporizador y eliminarlo fácilmente, mientras también recuerda la última función de devolución de llamada. También veremos un ejemplo de cómo utilizar el hook useTimeout para crear un temporizador de un segundo que actualiza el estado de un componente cada segundo.",
      "meta": {
        "title": "Dominando el hook useTimeout en React",
        "description": "Explora la implementación declarativa de setTimeout() en React utilizando el hook personalizado useTimeout.",
        "keywords": "hook personalizado, react, gestión de estado, programación declarativa, usetimeout"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useTimeout de React",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Hook useTimeout de React",
      "description": "Dans ce laboratoire, nous allons explorer comment implémenter la fonction setTimeout() de manière déclarative en utilisant le hook personnalisé useTimeout dans React. Ce hook nous permet de configurer un délai d'attente et de le nettoyer facilement, tout en gardant en mémoire la dernière fonction de rappel. Nous verrons également un exemple d'utilisation du hook useTimeout pour créer un minuteur d'une seconde qui met à jour l'état d'un composant toutes les secondes.",
      "meta": {
        "title": "Maîtriser le hook useTimeout en React",
        "description": "Explorez l'implémentation déclarative de setTimeout() en React en utilisant le hook personnalisé useTimeout.",
        "keywords": "hook personnalisé, react, gestion d'état, programmation déclarative, usetimeout"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useTimeout de React",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez le statut d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez rafraîchir l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifiez l'état de la modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "React useTimeout-Hook",
      "description": "In diesem Lab werden wir untersuchen, wie man die setTimeout()-Funktion auf deklarative Weise mithilfe des useTimeout benutzerdefinierten Hooks in React implementiert. Dieser Hook ermöglicht es uns, einen Zeitüberschuss einzurichten und ihn einfach wieder aufzuräumen, während er auch die neueste Callback-Funktion merkt. Wir werden auch ein Beispiel sehen, wie der useTimeout-Hook verwendet wird, um einen einen-Sekunden-Zähler zu erstellen, der den Zustand eines Komponenten 每秒 aktualisiert.",
      "meta": {
        "title": "Meisterhaftigkeit mit dem useTimeout-Hook in React",
        "description": "Entdecken Sie die deklarative Implementierung von setTimeout() in React mithilfe des useTimeout benutzerdefinierten Hooks.",
        "keywords": "benutzerdefinierter Hook, React, Zustandsverwaltung, deklaratives Programmieren, usetimeout"
      },
      "details": {
        "steps": [
          {
            "title": "React useTimeout-Hook",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen des Laufzustands des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie auf 'Go Live' in der unteren rechten Ecke, um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzuschauen."
              },
              {
                "name": "Überprüfen des Status der Änderungen in script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Labor abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "React の useTimeout フック",
      "description": "この実験では、React の useTimeout カスタムフックを使って宣言的に setTimeout() 関数を実装する方法を探ります。このフックを使うと、タイムアウトを設定して簡単にクリーンアップできるだけでなく、最新のコールバック関数も覚えておくことができます。また、useTimeout フックを使って 1 秒間隔でコンポーネントの状態を更新する 1 秒タイマーを作成する例も見てみましょう。",
      "meta": {
        "title": "React における useTimeout フックのマスター",
        "description": "useTimeout カスタムフックを使って React における setTimeout() の宣言的な実装を探ります。",
        "keywords": "カスタムフック，React, 状態管理，宣言的プログラミング，useTimeout"
      },
      "details": {
        "steps": [
          {
            "title": "React の useTimeout フック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ウェブサービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして 8080 ポートでウェブサービスを実行してください。その後、**Web 8080** タブを更新してウェブページをプレビューできます。"
              },
              {
                "name": "script.js の変更状態を確認する",
                "file": "verify1-2.sh",
                "hint": "実験を完了するための手順に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "React useTimeout Hook",
      "description": "В этом лабораторном задании мы изучим, как реализовать функцию setTimeout() в декларативном стиле с использованием пользовательского хука useTimeout в React. Этот хук позволяет нам устанавливать таймаут и легко очищать его, а также запоминать последнюю функцию обратного вызова. Мы также рассмотрим пример использования хука useTimeout для создания таймера в одну секунду, который обновляет состояние компонента каждую секунду.",
      "meta": {
        "title": "Мастерство в использовании хука useTimeout в React",
        "description": "Изучите декларативную реализацию setTimeout() в React с использованием пользовательского хука useTimeout.",
        "keywords": "пользовательский хук, react, управление состоянием, декларативное программирование, usetimeout"
      },
      "details": {
        "steps": [
          {
            "title": "React useTimeout Hook",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить статус работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить статус изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам, чтобы завершить лабораторную работу."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "React useTimeout 훅",
      "description": "이 랩에서는 React 에서 useTimeout 커스텀 훅을 사용하여 setTimeout() 함수를 선언적으로 구현하는 방법을 살펴봅니다. 이 훅을 사용하면 타임아웃을 쉽게 설정하고 정리할 수 있으며, 최신 콜백 함수도 기억할 수 있습니다. 또한 useTimeout 훅을 사용하여 매 초마다 컴포넌트의 상태를 업데이트하는 1 초 타이머를 만드는 예시도 살펴봅니다.",
      "meta": {
        "title": "React 에서 useTimeout 훅 마스터하기",
        "description": "useTimeout 커스텀 훅을 사용하여 React 에서 setTimeout() 의 선언적 구현을 살펴보세요.",
        "keywords": "커스텀 훅, react, 상태 관리, 선언적 프로그래밍, usetimeout, 리액트 훅, 타이머"
      },
      "details": {
        "steps": [
          {
            "title": "React useTimeout 훅",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "웹 서비스 실행 상태 확인",
                "file": "verify1-1.sh",
                "hint": "오른쪽 하단의 'Go Live'를 클릭하여 웹 서비스를 포트 8080 에서 실행하세요. 그런 다음 **Web 8080** 탭을 새로 고쳐 웹 페이지를 미리 볼 수 있습니다."
              },
              {
                "name": "script.js 수정 상태 확인",
                "file": "verify1-2.sh",
                "hint": "랩을 완료하려면 단계를 따르세요."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "React useTimeout Hook",
      "description": "Neste laboratório, exploraremos como implementar a função setTimeout() de forma declarativa usando o custom hook useTimeout em React. Este hook nos permite configurar um timeout e limpá-lo facilmente, além de lembrar a última função de callback. Veremos também um exemplo de como usar o hook useTimeout para criar um temporizador de um segundo que atualiza o estado de um componente a cada segundo.",
      "meta": {
        "title": "Dominando o useTimeout Hook em React - Tutorial e Exemplos",
        "description": "Explore a implementação declarativa de setTimeout() em React usando o custom hook useTimeout. Aprenda a criar temporizadores e gerenciar callbacks de forma eficiente.",
        "keywords": "custom hook, react, gerenciamento de estado, programação declarativa, usetimeout, temporizador react, setTimeout react"
      },
      "details": {
        "steps": [
          {
            "title": "React useTimeout Hook",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar o status de execução do serviço web",
                "file": "verify1-1.sh",
                "hint": "Por favor, clique em 'Go Live' no canto inferior direito para executar o serviço web na porta 8080. Em seguida, você pode atualizar a aba **Web 8080** para visualizar a página web."
              },
              {
                "name": "Verificar o status da modificação do script.js",
                "file": "verify1-2.sh",
                "hint": "Por favor, siga os passos para completar o laboratório."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
