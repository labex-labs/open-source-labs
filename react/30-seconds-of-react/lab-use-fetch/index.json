{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React useFetch Hook",
  "description": "In this lab, we will learn about the useFetch hook in React. This hook allows us to implement the fetch() method in a declarative manner, making it easier to fetch data from APIs and update the component state. We will create a custom hook that takes a URL and options, and asynchronously calls fetch() to update the response, error, and abort state variables.",
  "meta": {
    "title": "Mastering React useFetch Hook",
    "description": "Explore the power of the useFetch hook in React, a declarative way to fetch data from APIs and update component state.",
    "keywords": "usefetch, react, api, fetch, hooks"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React useFetch Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": ["react/hooks", "react/jsx", "react/use_state_reducer"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React 的 useFetch 钩子",
      "description": "在本实验中，我们将学习 React 中的 useFetch 钩子。这个钩子使我们能够以声明式的方式实现 fetch() 方法，从而更轻松地从 API 获取数据并更新组件状态。我们将创建一个自定义钩子，它接受一个 URL 和选项，并异步调用 fetch() 来更新响应、错误和中止状态变量。",
      "meta": {
        "title": "掌握 React 的 useFetch 钩子",
        "description": "探索 React 中 useFetch 钩子的强大功能，这是一种从 API 获取数据并更新组件状态的声明式方法。",
        "keywords": "usefetch, react, api, fetch, 钩子"
      },
      "details": {
        "steps": [
          {
            "title": "React 的 useFetch 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证网络服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“Go Live”在端口 8080 上运行网络服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改的状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "React useFetch Hook",
      "description": "En este laboratorio, aprenderemos sobre el hook useFetch en React. Este hook nos permite implementar el método fetch() de manera declarativa, lo que facilita la recuperación de datos de APIs y la actualización del estado del componente. Crearemos un hook personalizado que tome una URL y opciones, y llame asincrónicamente a fetch() para actualizar las variables de estado de respuesta, error y aborto.",
      "meta": {
        "title": "Dominando el hook useFetch de React",
        "description": "Explora el poder del hook useFetch en React, una forma declarativa de recuperar datos de APIs y actualizar el estado del componente.",
        "keywords": "usefetch, react, api, fetch, hooks"
      },
      "details": {
        "steps": [
          {
            "title": "React useFetch Hook",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Hook useFetch de React",
      "description": "Dans ce laboratoire, nous allons apprendre à utiliser le hook useFetch en React. Ce hook nous permet d'implémenter la méthode fetch() de manière déclarative, ce qui facilite la récupération de données à partir d'APIs et la mise à jour de l'état du composant. Nous allons créer un hook personnalisé qui prend une URL et des options, et appelle asynchronement fetch() pour mettre à jour les variables d'état de la réponse, de l'erreur et de l'annulation.",
      "meta": {
        "title": "Maîtriser le hook useFetch de React",
        "description": "Explorez le pouvoir du hook useFetch en React, une manière déclarative de récupérer des données à partir d'APIs et de mettre à jour l'état du composant.",
        "keywords": "usefetch, react, api, fetch, hooks"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useFetch de React",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez le statut d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez actualiser l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifiez l'état de la modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "React useFetch-Hook",
      "description": "In diesem Lab werden wir uns mit dem useFetch-Hook in React befassen. Dieser Hook ermöglicht es uns, die fetch()-Methode auf deklarative Weise zu implementieren, was es einfacher macht, Daten von APIs abzurufen und den Zustand der Komponente zu aktualisieren. Wir werden einen benutzerdefinierten Hook erstellen, der eine URL und Optionen übernimmt und asynchron fetch() aufruft, um die Response-, Error- und Abort-Zustandsvariablen zu aktualisieren.",
      "meta": {
        "title": "Meisterhaft mit dem React useFetch-Hook umgehen",
        "description": "Erkunden Sie die Macht des useFetch-Hooks in React, eine deklarative Methode, um Daten von APIs abzurufen und den Zustand der Komponente zu aktualisieren.",
        "keywords": "usefetch, react, api, fetch, hooks"
      },
      "details": {
        "steps": [
          {
            "title": "React useFetch-Hook",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen des Laufzustands des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie auf 'Go Live' in der unteren rechten Ecke, um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzuschauen."
              },
              {
                "name": "Überprüfen des Status der Änderungen in script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "ReactのuseFetchフック",
      "description": "この実験では、ReactのuseFetchフックについて学びます。このフックを使うことで、fetch()メソッドを宣言的に実装でき、APIからデータを取得してコンポーネントの状態を更新するのが簡単になります。URLとオプションを受け取り、fetch()を非同期で呼び出してレスポンス、エラー、および中止状態変数を更新するカスタムフックを作成します。",
      "meta": {
        "title": "ReactのuseFetchフックをマスターする",
        "description": "ReactにおけるuseFetchフックの力を探求し、APIからデータを取得してコンポーネントの状態を更新する宣言的な方法を学びましょう。",
        "keywords": "usefetch, react, api, fetch, hooks"
      },
      "details": {
        "steps": [
          {
            "title": "ReactのuseFetchフック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Webサービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして8080ポートでWebサービスを実行してください。その後、**Web 8080**タブを更新してWebページをプレビューできます。"
              },
              {
                "name": "script.jsの変更状態を確認する",
                "file": "verify1-2.sh",
                "hint": "実験を完了するための手順に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "React useFetch хук",
      "description": "В этом лабораторном занятии мы узнаем о хуке useFetch в React. Этот хук позволяет нам реализовать метод fetch() в декларативном стиле, что делает получение данных из API и обновление состояния компонента проще. Мы создадим пользовательский хук, который принимает URL и параметры, и асинхронно вызывает fetch() для обновления переменных состояния ответа, ошибки и отмены.",
      "meta": {
        "title": "Мастерство в React useFetch хук",
        "description": "Изучите мощь хука useFetch в React, декларативный способ получения данных из API и обновления состояния компонента.",
        "keywords": "usefetch, react, api, fetch, хуки"
      },
      "details": {
        "steps": [
          {
            "title": "React useFetch хук",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить статус работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить статус изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам, чтобы завершить лабораторную работу."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
