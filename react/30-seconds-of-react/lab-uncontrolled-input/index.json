{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Uncontrolled Input Field",
  "description": "In this lab, we will explore how to create an uncontrolled input field using React. An uncontrolled input field is a simple and flexible way to capture user input without managing the value state in the parent component. We will use a callback function to inform the parent about value updates, making it easy to integrate with other components and APIs.",
  "meta": {
    "title": "Mastering Uncontrolled Input Fields with React",
    "description": "Learn how to create flexible and dynamic uncontrolled input fields in React, enabling seamless user interaction and integration with other components.",
    "keywords": "user input, uncontrolled input field, react, state management, callback function"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Uncontrolled Input Field",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": ["react/event_handling"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "不受控输入字段",
      "description": "在本实验中，我们将探索如何使用 React 创建一个不受控输入字段。不受控输入字段是一种简单且灵活的捕获用户输入的方式，无需在父组件中管理值状态。我们将使用回调函数通知父组件有关值更新的信息，从而便于与其他组件和 API 集成。",
      "meta": {
        "title": "用 React 掌握不受控输入字段",
        "description": "学习如何在 React 中创建灵活且动态的不受控输入字段，实现无缝的用户交互以及与其他组件的集成。",
        "keywords": "用户输入，不受控输入字段，React, 状态管理，回调函数"
      },
      "details": {
        "steps": [
          {
            "title": "不受控输入字段",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Web 服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“Go Live”以在端口 8080 上运行 Web 服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Campo de entrada no controlado",
      "description": "En este laboratorio, exploraremos cómo crear un campo de entrada no controlado utilizando React. Un campo de entrada no controlado es una forma simple y flexible de capturar la entrada del usuario sin gestionar el estado del valor en el componente padre. Utilizaremos una función de devolución de llamada para informar al padre sobre las actualizaciones de valor, lo que facilita la integración con otros componentes y APIs.",
      "meta": {
        "title": "Dominando los campos de entrada no controlados con React",
        "description": "Aprende a crear campos de entrada no controlados flexibles y dinámicos en React, lo que permite una interacción de usuario sin problemas y la integración con otros componentes.",
        "keywords": "entrada de usuario, campo de entrada no controlado, react, gestión de estado, función de devolución de llamada"
      },
      "details": {
        "steps": [
          {
            "title": "Campo de entrada no controlado",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Champ d'entrée non contrôlé",
      "description": "Dans ce laboratoire, nous allons explorer la manière de créer un champ d'entrée non contrôlé à l'aide de React. Un champ d'entrée non contrôlé est un moyen simple et flexible de capturer l'entrée de l'utilisateur sans gérer l'état de la valeur dans le composant parent. Nous utiliserons une fonction de rappel pour informer le parent des mises à jour de valeur, ce qui facilite l'intégration avec d'autres composants et API.",
      "meta": {
        "title": "Maîtriser les champs d'entrée non contrôlés avec React",
        "description": "Découvrez comment créer des champs d'entrée non contrôlés flexibles et dynamiques dans React, permettant une interaction utilisateur transparente et une intégration avec d'autres composants.",
        "keywords": "entrée utilisateur, champ d'entrée non contrôlé, react, gestion d'état, fonction de rappel"
      },
      "details": {
        "steps": [
          {
            "title": "Champ d'entrée non contrôlé",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez le statut d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez actualiser l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifiez le statut de la modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Unkontrolliertes Eingabefeld",
      "description": "In diesem Lab werden wir untersuchen, wie man ein unkontrolliertes Eingabefeld mit React erstellt. Ein unkontrolliertes Eingabefeld ist eine einfache und flexible Möglichkeit, Benutzer-Eingaben zu erfassen, ohne den Werteszustand in der übergeordneten Komponente zu verwalten. Wir werden eine Callback-Funktion verwenden, um der übergeordneten Komponente über Wertesaktualisierungen zu informieren, was es einfacher macht, mit anderen Komponenten und APIs zu integrieren.",
      "meta": {
        "title": "Meisterei von unkontrollierten Eingabefeldern mit React",
        "description": "Lernen Sie, wie Sie in React flexible und dynamische unkontrollierte Eingabefelder erstellen, um eine nahtlose Benutzerinteraktion und Integration mit anderen Komponenten zu ermöglichen.",
        "keywords": "Benutzer-Eingabe, unkontrolliertes Eingabefeld, React, Zustandsverwaltung, Callback-Funktion"
      },
      "details": {
        "steps": [
          {
            "title": "Unkontrolliertes Eingabefeld",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen des Laufzustands des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie auf 'Go Live' in der unteren rechten Ecke, um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzuschauen."
              },
              {
                "name": "Überprüfen des Status der Änderungen an script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "制御されていない入力フィールド",
      "description": "この実験では、React を使って制御されていない入力フィールドを作成する方法を探ります。制御されていない入力フィールドは、親コンポーネントで値の状態を管理せずにユーザー入力をキャプチャするためのシンプルで柔軟な方法です。値の更新について親に通知するためにコールバック関数を使い、他のコンポーネントや API との統合を容易にします。",
      "meta": {
        "title": "React を使った制御されていない入力フィールドのマスター",
        "description": "React で柔軟で動的な制御されていない入力フィールドを作成する方法を学び、円滑なユーザーインタラクションと他のコンポーネントとの統合を可能にします。",
        "keywords": "ユーザー入力，制御されていない入力フィールド，React, 状態管理，コールバック関数"
      },
      "details": {
        "steps": [
          {
            "title": "制御されていない入力フィールド",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ウェブサービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして、ポート 8080 でウェブサービスを実行してください。その後、**Web 8080**タブを更新して、ウェブページをプレビューできます。"
              },
              {
                "name": "script.js の変更状態を確認する",
                "file": "verify1-2.sh",
                "hint": "実験を完了するための手順に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Неуправляемое поле ввода",
      "description": "В этом лабораторном занятии мы изучим, как создать неуправляемое поле ввода с использованием React. Неуправляемое поле ввода представляет собой простой и гибкий способ захвата ввода пользователя без управления состоянием значения в родительском компоненте. Мы будем использовать обратный вызов-функцию для информирования родителя о обновлениях значения, что упрощает интеграцию с другими компонентами и API.",
      "meta": {
        "title": "Мастерство в использовании неуправляемых полей ввода с React",
        "description": "Изучите, как создавать гибкие и динамические неуправляемые поля ввода в React, обеспечивая беспрепятственный взаимодействие пользователя и интеграцию с другими компонентами.",
        "keywords": "ввод пользователя, неуправляемое поле ввода, react, управление состоянием, обратный вызов-функция"
      },
      "details": {
        "steps": [
          {
            "title": "Неуправляемое поле ввода",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить состояние работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить состояние изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам для завершения лабораторной работы."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "제어되지 않는 입력 필드",
      "description": "이 랩에서는 React 를 사용하여 제어되지 않는 입력 필드를 만드는 방법을 살펴봅니다. 제어되지 않는 입력 필드는 부모 컴포넌트에서 값 상태를 관리하지 않고 사용자 입력을 캡처하는 간단하고 유연한 방법입니다. 콜백 함수를 사용하여 값 업데이트에 대해 부모에게 알리고 다른 컴포넌트 및 API 와 쉽게 통합할 수 있습니다.",
      "meta": {
        "title": "React 로 제어되지 않는 입력 필드 마스터하기",
        "description": "React 에서 유연하고 동적인 제어되지 않는 입력 필드를 만드는 방법을 배우고, 원활한 사용자 상호 작용과 다른 컴포넌트와의 통합을 가능하게 합니다.",
        "keywords": "사용자 입력, 제어되지 않는 입력 필드, react, 상태 관리, 콜백 함수"
      },
      "details": {
        "steps": [
          {
            "title": "제어되지 않는 입력 필드",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "웹 서비스 실행 상태 확인",
                "file": "verify1-1.sh",
                "hint": "오른쪽 하단의 'Go Live'를 클릭하여 웹 서비스를 포트 8080 에서 실행하십시오. 그런 다음 **Web 8080** 탭을 새로 고쳐 웹 페이지를 미리 볼 수 있습니다."
              },
              {
                "name": "script.js 수정 상태 확인",
                "file": "verify1-2.sh",
                "hint": "랩을 완료하려면 단계를 따르십시오."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Campo de Entrada Não Controlado",
      "description": "Neste laboratório, exploraremos como criar um campo de entrada não controlado usando React. Um campo de entrada não controlado é uma maneira simples e flexível de capturar a entrada do usuário sem gerenciar o estado do valor no componente pai. Usaremos uma função de callback para informar o pai sobre as atualizações de valor, facilitando a integração com outros componentes e APIs.",
      "meta": {
        "title": "Dominando Campos de Entrada Não Controlados com React",
        "description": "Aprenda a criar campos de entrada não controlados flexíveis e dinâmicos em React, permitindo uma interação perfeita com o usuário e integração com outros componentes.",
        "keywords": "entrada do usuário, campo de entrada não controlado, react, gerenciamento de estado, função de callback"
      },
      "details": {
        "steps": [
          {
            "title": "Campo de Entrada Não Controlado",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar o status de execução do serviço web",
                "file": "verify1-1.sh",
                "hint": "Por favor, clique em 'Go Live' no canto inferior direito para executar o serviço web na porta 8080. Em seguida, você pode atualizar a aba **Web 8080** para visualizar a página web."
              },
              {
                "name": "Verificar o status da modificação do script.js",
                "file": "verify1-2.sh",
                "hint": "Por favor, siga os passos para completar o laboratório."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
