{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Controlled Input Field",
  "description": "In this lab, we will learn how to create a controlled input field in React. The controlled input field is a common pattern used to manage form input values in React applications. By using a callback function to inform the parent component of any value updates, we can ensure that the input field's value is always in sync with the state of the parent component. This lab will guide us through the creation and usage of a controlled input field component in React.",
  "meta": {
    "title": "Mastering Controlled Input Fields in React",
    "description": "Learn how to create and use controlled input fields in React applications to manage form input values.",
    "keywords": "user interaction, react, state management, controlled input field, form management"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Controlled Input Field",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "react/event_handling",
          "react/hooks",
          "react/jsx",
          "react/use_state_reducer"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "受控输入字段",
      "description": "在本实验中，我们将学习如何在 React 中创建一个受控输入字段。受控输入字段是 React 应用程序中用于管理表单输入值的常见模式。通过使用回调函数将任何值更新通知父组件，我们可以确保输入字段的值始终与父组件的状态同步。本实验将指导我们完成 React 中受控输入字段组件的创建和使用。",
      "meta": {
        "title": "掌握 React 中的受控输入字段",
        "description": "了解如何在 React 应用程序中创建和使用受控输入字段来管理表单输入值。",
        "keywords": "用户交互，React, 状态管理，受控输入字段，表单管理"
      },
      "details": {
        "steps": [
          {
            "title": "受控输入字段",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证网络服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“Go Live”以在端口 8080 上运行网络服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改的状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Campo de entrada controlado",
      "description": "En este laboratorio, aprenderemos cómo crear un campo de entrada controlado en React. El campo de entrada controlado es un patrón común utilizado para administrar los valores de entrada de formularios en aplicaciones React. Al utilizar una función de devolución de llamada para informar al componente padre de cualquier actualización de valor, podemos garantizar que el valor del campo de entrada siempre esté en sincronía con el estado del componente padre. Este laboratorio nos guiará a través de la creación y uso de un componente de campo de entrada controlado en React.",
      "meta": {
        "title": "Dominando los campos de entrada controlados en React",
        "description": "Aprende cómo crear y usar campos de entrada controlados en aplicaciones React para administrar los valores de entrada de formularios.",
        "keywords": "interacción de usuario, react, gestión de estado, campo de entrada controlado, gestión de formularios"
      },
      "details": {
        "steps": [
          {
            "title": "Campo de entrada controlado",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Champ de saisie contrôlé",
      "description": "Dans ce laboratoire, nous allons apprendre à créer un champ de saisie contrôlé en React. Le champ de saisie contrôlé est un modèle courant utilisé pour gérer les valeurs d'entrée de formulaire dans les applications React. En utilisant une fonction de rappel pour informer le composant parent de tout changement de valeur, nous pouvons nous assurer que la valeur du champ de saisie est toujours synchronisée avec l'état du composant parent. Ce laboratoire nous guidera dans la création et l'utilisation d'un composant de champ de saisie contrôlé en React.",
      "meta": {
        "title": "Maîtriser les champs de saisie contrôlés en React",
        "description": "Apprenez à créer et utiliser des champs de saisie contrôlés dans les applications React pour gérer les valeurs d'entrée de formulaire.",
        "keywords": "interaction utilisateur, react, gestion d'état, champ de saisie contrôlé, gestion de formulaire"
      },
      "details": {
        "steps": [
          {
            "title": "Champ de saisie contrôlé",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez le statut d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez actualiser l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifiez l'état de la modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Kontrolliertes Eingabefeld",
      "description": "In diesem Lab werden wir lernen, wie man in React ein kontrolliertes Eingabefeld erstellt. Ein kontrolliertes Eingabefeld ist ein häufiges Muster, das zur Verwaltung von Formular-Eingabewerten in React-Anwendungen verwendet wird. Indem wir eine Callback-Funktion verwenden, um dem übergeordneten Komponenten von allen Wertaktualisierungen mitzuteilen, können wir sicherstellen, dass der Wert des Eingabefelds immer mit dem Zustand der übergeordneten Komponente synchron ist. In diesem Lab wird uns der Prozess der Erstellung und Verwendung eines kontrollierten Eingabefeldkomponenten in React geleiten.",
      "meta": {
        "title": "Meisterei von kontrollierten Eingabefeldern in React",
        "description": "Lernen Sie, wie Sie kontrollierte Eingabefelder in React-Anwendungen erstellen und verwenden, um Formular-Eingabewerte zu verwalten.",
        "keywords": "Benutzerinteraktion, React, Zustandsverwaltung, kontrolliertes Eingabefeld, Formularverwaltung"
      },
      "details": {
        "steps": [
          {
            "title": "Kontrolliertes Eingabefeld",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen des Laufzustands des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie auf 'Go Live' in der unteren rechten Ecke, um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzuschauen."
              },
              {
                "name": "Überprüfen des Status der Änderungen an script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "コントロールされた入力フィールド",
      "description": "この実験では、React においてコントロールされた入力フィールドを作成する方法を学びます。コントロールされた入力フィールドは、React アプリケーションにおいてフォーム入力値を管理するために使用される一般的なパターンです。コールバック関数を使用して親コンポーネントに値の更新を通知することで、入力フィールドの値が常に親コンポーネントの状態と同期することを確認できます。この実験では、React におけるコントロールされた入力フィールドコンポーネントの作成と使用方法を案内します。",
      "meta": {
        "title": "React におけるコントロールされた入力フィールドのマスター",
        "description": "React アプリケーションでコントロールされた入力フィールドを作成して使用して、フォーム入力値を管理する方法を学びましょう。",
        "keywords": "ユーザーインタラクション，React, 状態管理，コントロールされた入力フィールド，フォーム管理"
      },
      "details": {
        "steps": [
          {
            "title": "コントロールされた入力フィールド",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ウェブ サービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして、ポート 8080 でウェブ サービスを実行してください。その後、**Web 8080** タブを更新して、ウェブ ページをプレビューできます。"
              },
              {
                "name": "script.js の変更状態を確認する",
                "file": "verify1-2.sh",
                "hint": "実験を完了するための手順に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Контролируемое поле ввода",
      "description": "В этом практическом занятии мы узнаем, как создавать контролируемое поле ввода в React. Контролируемое поле ввода - это распространенная схема, используемая для управления значениями ввода форм в React-приложениях. С помощью обратного вызова функции для информирования родительского компонента обо всех обновлениях значений мы можем гарантировать, что значение поля ввода всегда синхронизировано с состоянием родительского компонента. В этом практическом занятии мы пройдемся по созданию и использованию компонента контролируемого поля ввода в React.",
      "meta": {
        "title": "Мастерство в управлении контролируемыми полями ввода в React",
        "description": "Изучите, как создавать и использовать контролируемые поля ввода в React-приложениях для управления значениями ввода форм.",
        "keywords": "пользовательский взаимодействие, react, управление состоянием, контролируемое поле ввода, управление формой"
      },
      "details": {
        "steps": [
          {
            "title": "Контролируемое поле ввода",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить статус работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить статус изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам, чтобы завершить практическое занятие."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "제어된 입력 필드",
      "description": "이 랩에서는 React 에서 제어된 입력 필드를 만드는 방법을 배웁니다. 제어된 입력 필드는 React 애플리케이션에서 폼 입력 값을 관리하는 데 사용되는 일반적인 패턴입니다. 콜백 함수를 사용하여 부모 컴포넌트에 값 업데이트를 알림으로써 입력 필드의 값이 항상 부모 컴포넌트의 상태와 동기화되도록 할 수 있습니다. 이 랩에서는 React 에서 제어된 입력 필드 컴포넌트를 생성하고 사용하는 방법을 안내합니다.",
      "meta": {
        "title": "React 에서 제어된 입력 필드 마스터하기 - 폼 입력 관리",
        "description": "React 애플리케이션에서 폼 입력 값을 관리하기 위해 제어된 입력 필드를 만들고 사용하는 방법을 알아보세요. React 폼 관리, 입력 필드 제어",
        "keywords": "사용자 상호 작용, React, 상태 관리, 제어된 입력 필드, 폼 관리, React 폼, 입력 값 제어"
      },
      "details": {
        "steps": [
          {
            "title": "제어된 입력 필드",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "웹 서비스 실행 상태 확인",
                "file": "verify1-1.sh",
                "hint": "오른쪽 하단의 'Go Live'를 클릭하여 웹 서비스를 포트 8080 에서 실행하세요. 그런 다음, **Web 8080** 탭을 새로 고쳐 웹 페이지를 미리 볼 수 있습니다."
              },
              {
                "name": "script.js 수정 상태 확인",
                "file": "verify1-2.sh",
                "hint": "랩을 완료하려면 단계를 따르세요."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Campo de Entrada Controlado",
      "description": "Neste laboratório, aprenderemos como criar um campo de entrada controlado em React. O campo de entrada controlado é um padrão comum usado para gerenciar valores de entrada de formulário em aplicações React. Ao usar uma função de callback para informar o componente pai sobre quaisquer atualizações de valor, podemos garantir que o valor do campo de entrada esteja sempre sincronizado com o estado do componente pai. Este laboratório nos guiará pela criação e uso de um componente de campo de entrada controlado em React.",
      "meta": {
        "title": "Dominando Campos de Entrada Controlados em React",
        "description": "Aprenda a criar e usar campos de entrada controlados em aplicações React para gerenciar os valores de entrada de formulário.",
        "keywords": "interação do usuário, react, gerenciamento de estado, campo de entrada controlado, gerenciamento de formulários"
      },
      "details": {
        "steps": [
          {
            "title": "Campo de Entrada Controlado",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar o status de execução do serviço web",
                "file": "verify1-1.sh",
                "hint": "Por favor, clique em 'Go Live' no canto inferior direito para executar o serviço web na porta 8080. Em seguida, você pode atualizar a aba **Web 8080** para visualizar a página web."
              },
              {
                "name": "Verificar o status da modificação do script.js",
                "file": "verify1-2.sh",
                "hint": "Por favor, siga os passos para completar o laboratório."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
