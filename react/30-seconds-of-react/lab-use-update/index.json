{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React useUpdate Hook",
  "description": "In this lab, we will explore the use of the useUpdate hook in React. This hook allows us to force a component to re-render when called, which can be useful for updating the UI with new data or changes. By the end of this lab, you will have a better understanding of how to implement this hook in your React projects to improve the performance and functionality of your applications.",
  "meta": {
    "title": "Mastering the React useUpdate Hook",
    "description": "Explore the power of the useUpdate hook in React to enhance your application's performance and functionality.",
    "keywords": "useupdate, react, performance, hooks, ui updates"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React useUpdate Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "react/event_handling",
          "react/hooks",
          "react/jsx",
          "react/use_state_reducer"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React useUpdate 钩子",
      "description": "在本实验中，我们将探索如何在 React 中使用 useUpdate 钩子。调用此钩子时，它会强制组件重新渲染，这对于使用新数据或更改更新用户界面很有用。完成本实验后，你将更好地理解如何在 React 项目中实现此钩子，以提高应用程序的性能和功能。",
      "meta": {
        "title": "掌握 React useUpdate 钩子",
        "description": "探索 React 中 useUpdate 钩子的强大功能，以提升应用程序的性能和功能。",
        "keywords": "useupdate, react, 性能，钩子，用户界面更新"
      },
      "details": {
        "steps": [
          {
            "title": "React useUpdate 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Web 服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“Go Live”以在端口 8080 上运行 Web 服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "React useUpdate Hook",
      "description": "En este laboratorio, exploraremos el uso del hook useUpdate en React. Este hook nos permite forzar la re-renderización de un componente cuando es llamado, lo que puede ser útil para actualizar la interfaz de usuario con nuevos datos o cambios. Al final de este laboratorio, tendrás una mejor comprensión de cómo implementar este hook en tus proyectos de React para mejorar el rendimiento y la funcionalidad de tus aplicaciones.",
      "meta": {
        "title": "Dominando el hook useUpdate de React",
        "description": "Explora el poder del hook useUpdate en React para mejorar el rendimiento y la funcionalidad de tu aplicación.",
        "keywords": "useupdate, react, rendimiento, hooks, actualizaciones de interfaz de usuario"
      },
      "details": {
        "steps": [
          {
            "title": "React useUpdate Hook",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Hook useUpdate de React",
      "description": "Dans ce laboratoire, nous allons explorer l'utilisation du hook useUpdate dans React. Ce hook nous permet de forcer un composant à se re-rendre lorsqu'il est appelé, ce qui peut être utile pour mettre à jour l'interface utilisateur avec de nouvelles données ou des modifications. À la fin de ce laboratoire, vous aurez une meilleure compréhension de la manière d'implementer ce hook dans vos projets React pour améliorer les performances et la fonctionnalité de vos applications.",
      "meta": {
        "title": "Maîtriser le hook useUpdate de React",
        "description": "Explorez le pouvoir du hook useUpdate dans React pour améliorer les performances et la fonctionnalité de votre application.",
        "keywords": "useupdate, react, performances, hooks, mises à jour d'interface utilisateur"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useUpdate de React",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier l'état d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez actualiser l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifier l'état de la modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "React useUpdate-Hook",
      "description": "In diesem Lab werden wir die Verwendung des useUpdate-Hooks in React erkunden. Dieser Hook ermöglicht es uns, einen Komponenten dazu zu zwingen, sich neu zu rendern, wenn er aufgerufen wird, was nützlich sein kann, um die Benutzeroberfläche mit neuen Daten oder Änderungen zu aktualisieren. Am Ende dieses Labs werden Sie ein besseres Verständnis dafür haben, wie Sie diesen Hook in Ihren React-Projekten implementieren, um die Leistung und Funktionalität Ihrer Anwendungen zu verbessern.",
      "meta": {
        "title": "Meisterhaft mit dem React useUpdate-Hook umgehen",
        "description": "Erkunden Sie die Macht des useUpdate-Hooks in React, um die Leistung und Funktionalität Ihrer Anwendung zu verbessern.",
        "keywords": "useupdate, react, leistung, hooks, ui-updates"
      },
      "details": {
        "steps": [
          {
            "title": "React useUpdate-Hook",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen des Laufzustands des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie auf 'Go Live' in der unteren rechten Ecke, um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzuschauen."
              },
              {
                "name": "Überprüfen des Status der Änderungen an script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "React の useUpdate フック",
      "description": "この実験では、React における useUpdate フックの使用方法を探ります。このフックを使用すると、呼び出されたときにコンポーネントを再レンダリングさせることができ、新しいデータや変更によって UI を更新する際に役立ちます。この実験が終了するとき、React プロジェクトでこのフックを実装する方法を理解し、アプリケーションのパフォーマンスと機能性を向上させることができます。",
      "meta": {
        "title": "React の useUpdate フックをマスターする",
        "description": "React における useUpdate フックの力を探求して、アプリケーションのパフォーマンスと機能性を向上させましょう。",
        "keywords": "useupdate, react, パフォーマンス，フック，ui 更新"
      },
      "details": {
        "steps": [
          {
            "title": "React の useUpdate フック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ウェブサービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして、ポート 8080 でウェブサービスを実行してください。その後、**Web 8080** タブを更新して、ウェブページをプレビューすることができます。"
              },
              {
                "name": "script.js の変更状態を確認する",
                "file": "verify1-2.sh",
                "hint": "実験を完了するための手順に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "React useUpdate хук",
      "description": "В этом практическом занятии мы изучим использование хука useUpdate в React. Этот хук позволяет принудительно перерендерить компонент при вызове, что может быть полезно для обновления интерфейса пользователя новыми данными или изменениями. В конце этого практического занятия вы лучше поймете, как реализовать этот хук в своих проектах React для улучшения производительности и функциональности ваших приложений.",
      "meta": {
        "title": "Мастерство в React useUpdate хук",
        "description": "Исследуйте мощь хука useUpdate в React, чтобы повысить производительность и функциональность вашего приложения.",
        "keywords": "useupdate, react, производительность, хуки, обновления интерфейса"
      },
      "details": {
        "steps": [
          {
            "title": "React useUpdate хук",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить статус работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить статус изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам, чтобы завершить практическое занятие."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "React useUpdate 훅",
      "description": "이 랩에서는 React 에서 useUpdate 훅의 사용법을 살펴봅니다. 이 훅을 사용하면 호출 시 컴포넌트를 강제로 다시 렌더링할 수 있으며, 이는 새로운 데이터 또는 변경 사항으로 UI 를 업데이트하는 데 유용합니다. 이 랩을 마치면 React 프로젝트에서 이 훅을 구현하여 애플리케이션의 성능과 기능을 향상시키는 방법에 대한 이해도를 높일 수 있습니다.",
      "meta": {
        "title": "React useUpdate 훅 마스터하기 - 성능 향상 팁",
        "description": "React 의 useUpdate 훅을 활용하여 애플리케이션의 성능과 기능을 향상시키는 방법을 알아보세요. UI 업데이트 및 렌더링 최적화 기술.",
        "keywords": "useupdate, react, 성능, 훅, UI 업데이트, 리액트 훅, 렌더링 최적화"
      },
      "details": {
        "steps": [
          {
            "title": "React useUpdate 훅",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "웹 서비스 실행 상태 확인",
                "file": "verify1-1.sh",
                "hint": "오른쪽 하단의 'Go Live'를 클릭하여 웹 서비스를 포트 8080 에서 실행하세요. 그런 다음, **Web 8080** 탭을 새로 고쳐 웹 페이지를 미리 볼 수 있습니다."
              },
              {
                "name": "script.js 수정 상태 확인",
                "file": "verify1-2.sh",
                "hint": "랩을 완료하려면 단계를 따르세요."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "React useUpdate Hook",
      "description": "Neste laboratório, exploraremos o uso do hook useUpdate no React. Este hook nos permite forçar um componente a re-renderizar quando chamado, o que pode ser útil para atualizar a interface do usuário (UI) com novos dados ou alterações. Ao final deste laboratório, você terá uma melhor compreensão de como implementar este hook em seus projetos React para melhorar o desempenho e a funcionalidade de suas aplicações.",
      "meta": {
        "title": "Dominando o React useUpdate Hook: Otimize o Desempenho da sua Aplicação",
        "description": "Explore o poder do hook useUpdate no React para aprimorar o desempenho e a funcionalidade da sua aplicação. Aprenda a forçar re-renders e otimizar a UI.",
        "keywords": "useupdate, react, desempenho, hooks, atualizações da UI, otimização react"
      },
      "details": {
        "steps": [
          {
            "title": "React useUpdate Hook",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar o status de execução do serviço web",
                "file": "verify1-1.sh",
                "hint": "Por favor, clique em 'Go Live' no canto inferior direito para executar o serviço web na porta 8080. Em seguida, você pode atualizar a aba **Web 8080** para visualizar a página web."
              },
              {
                "name": "Verificar o status da modificação do script.js",
                "file": "verify1-2.sh",
                "hint": "Por favor, siga os passos para completar o laboratório."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
