{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React useToggler Hook",
  "description": "In this lab, we will explore the useToggler hook in React. This hook provides a simple and efficient way to create a boolean state variable that can be toggled between its two states. By the end of this lab, you will have a better understanding of how to use this hook in your React applications to create toggle functionality for your components.",
  "meta": {
    "title": "Mastering the React useToggler Hook",
    "description": "Discover the power of the React useToggler hook and learn how to create efficient toggle functionality in your applications.",
    "keywords": "hook, toggle, usetoggler, react, state management"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React useToggler Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "react/conditional_render",
          "react/event_handling",
          "react/hooks",
          "react/jsx",
          "react/use_state_reducer"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React useToggler 钩子",
      "description": "在本实验中，我们将探索 React 中的 useToggler 钩子。这个钩子提供了一种简单而有效的方法来创建一个布尔状态变量，该变量可以在其两种状态之间切换。在本实验结束时，你将更好地理解如何在你的 React 应用程序中使用这个钩子，为你的组件创建切换功能。",
      "meta": {
        "title": "掌握 React useToggler 钩子",
        "description": "探索 React useToggler 钩子的强大功能，并学习如何在应用程序中创建高效的切换功能。",
        "keywords": "钩子，切换，useToggler, React, 状态管理"
      },
      "details": {
        "steps": [
          {
            "title": "React useToggler 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Web 服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“Go Live”以在端口 8080 上运行 Web 服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "React useToggler Hook",
      "description": "En este laboratorio, exploraremos el hook useToggler en React. Este hook proporciona una forma simple y eficiente de crear una variable de estado booleana que se puede alternar entre sus dos estados. Al final de este laboratorio, tendrás una mejor comprensión de cómo usar este hook en tus aplicaciones React para crear la funcionalidad de alternancia para tus componentes.",
      "meta": {
        "title": "Dominando el hook React useToggler",
        "description": "Descubre el poder del hook React useToggler y aprende a crear una funcionalidad de alternancia eficiente en tus aplicaciones.",
        "keywords": "hook, alternar, usetoggler, react, gestión de estado"
      },
      "details": {
        "steps": [
          {
            "title": "React useToggler Hook",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Hook useToggler de React",
      "description": "Dans ce laboratoire, nous allons explorer le hook useToggler dans React. Ce hook fournit un moyen simple et efficace de créer une variable d'état booléenne qui peut être basculée entre ses deux états. À la fin de ce laboratoire, vous aurez une meilleure compréhension de la manière d'utiliser ce hook dans vos applications React pour créer une fonctionnalité de basculement pour vos composants.",
      "meta": {
        "title": "Maîtriser le hook useToggler de React",
        "description": "Découvrez le pouvoir du hook useToggler de React et apprenez à créer une fonctionnalité de basculement efficace dans vos applications.",
        "keywords": "hook, basculement, usetoggler, react, gestion d'état"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useToggler de React",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez le statut d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez actualiser l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifiez l'état de la modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "React useToggler-Hook",
      "description": "In diesem Lab werden wir die Verwendung des useToggler-Hooks in React erkunden. Dieser Hook bietet eine einfache und effiziente Möglichkeit, eine boolesche Zustandsvariable zu erstellen, die zwischen ihren beiden Zuständen umgeschaltet werden kann. Am Ende dieses Labs werden Sie ein besseres Verständnis dafür haben, wie Sie diesen Hook in Ihren React-Anwendungen verwenden, um eine Umschaltfunktion für Ihre Komponenten zu erstellen.",
      "meta": {
        "title": "Meisterhaftigkeit mit dem React useToggler-Hook",
        "description": "Entdecken Sie die Macht des React useToggler-Hooks und lernen Sie, wie Sie effiziente Umschaltfunktionen in Ihren Anwendungen erstellen.",
        "keywords": "Hook, Umschaltung, useToggler, React, Zustandsverwaltung"
      },
      "details": {
        "steps": [
          {
            "title": "React useToggler-Hook",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen des Laufzustands des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie auf 'Go Live' in der unteren rechten Ecke, um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzuschauen."
              },
              {
                "name": "Überprüfen des Status der Änderungen in script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "React の useToggler フック",
      "description": "この実験では、React の useToggler フックを調べます。このフックは、2 つの状態の間で切り替えられるブール型の状態変数を作成するための、簡単で効率的な方法を提供します。この実験が終わるとき、React アプリケーションでこのフックを使ってコンポーネントの切り替え機能を作成する方法をより深く理解しているでしょう。",
      "meta": {
        "title": "React の useToggler フックをマスターする",
        "description": "React の useToggler フックの力を発見し、アプリケーションで効率的な切り替え機能を作成する方法を学びましょう。",
        "keywords": "フック，切り替え，usetoggler, react, 状態管理"
      },
      "details": {
        "steps": [
          {
            "title": "React の useToggler フック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ウェブサービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして 8080 番ポートでウェブサービスを実行してください。その後、**Web 8080** タブを更新してウェブページをプレビューできます。"
              },
              {
                "name": "script.js の変更状態を確認する",
                "file": "verify1-2.sh",
                "hint": "実験を完了する手順に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "React хук useToggler",
      "description": "В этом практическом занятии мы изучим хук useToggler в React. Этот хук предоставляет простой и эффективный способ создания переменной состояния типа boolean, которая может переключаться между двумя состояниями. В конце этого практического занятия вы будете лучше понимать, как использовать этот хук в своих React-приложениях для создания функциональности переключения для своих компонентов.",
      "meta": {
        "title": "Мастерство в использовании React хука useToggler",
        "description": "Откройте силу React хука useToggler и узнайте, как создавать эффективную функциональность переключения в своих приложениях.",
        "keywords": "хук, переключение, useToggler, react, управление состоянием"
      },
      "details": {
        "steps": [
          {
            "title": "React хук useToggler",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить статус работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить статус изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам, чтобы завершить практическое занятие."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
