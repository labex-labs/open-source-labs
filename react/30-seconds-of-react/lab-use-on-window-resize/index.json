{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React useOnWindowResize Hook",
  "description": "In this lab, we will learn how to create a custom React Hook called useOnWindowResize that will execute a callback whenever the window is resized. We will use the useRef() and useEffect() hooks to listen to the 'resize' event of the Window global object and clean up when the component unmounts. This Hook can be useful for creating responsive web applications that need to adjust to different screen sizes.",
  "meta": {
    "title": "Create a Custom React Hook for Window Resize Events",
    "description": "Learn how to build a reusable React Hook that executes a callback function whenever the window is resized.",
    "keywords": "window resize, custom hook, responsive design, react, event listener"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React useOnWindowResize Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React useOnWindowResize Hook",
      "description": "在本实验中，我们将学习如何创建一个名为 useOnWindowResize 的自定义 React Hook，它会在窗口大小改变时执行一个回调函数。我们将使用 useRef() 和 useEffect() Hook 来监听 Window 全局对象的'resize' 事件，并在组件卸载时进行清理。这个 Hook 对于创建需要适应不同屏幕尺寸的响应式 Web 应用程序很有用。",
      "meta": {
        "title": "创建用于窗口大小调整事件的自定义 React Hook",
        "description": "学习如何构建一个可复用的 React Hook，它在窗口大小改变时执行回调函数。",
        "keywords": "窗口大小调整，自定义 Hook, 响应式设计，React, 事件监听器"
      },
      "details": {
        "steps": [
          {
            "title": "React useOnWindowResize Hook",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Web 服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“Go Live”以在端口 8080 上运行 Web 服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改的状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Hook useOnWindowResize de React",
      "description": "En este laboratorio, aprenderemos a crear un Hook personalizado de React llamado useOnWindowResize que ejecutará una devolución de llamada cada vez que se redimensione la ventana. Utilizaremos los Hooks useRef() y useEffect() para escuchar el evento'resize' del objeto global Window y limpiar cuando el componente se desmonte. Este Hook puede ser útil para crear aplicaciones web responsivas que necesiten ajustarse a diferentes tamaños de pantalla.",
      "meta": {
        "title": "Crea un Hook personalizado de React para eventos de redimensión de ventana",
        "description": "Aprende cómo construir un Hook reutilizable de React que ejecuta una función de devolución de llamada cada vez que se redimensiona la ventana.",
        "keywords": "redimensión de ventana, Hook personalizado, diseño responsivo, react, oyente de eventos"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useOnWindowResize de React",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Hook React useOnWindowResize",
      "description": "Dans ce laboratoire, nous allons apprendre à créer un Hook React personnalisé appelé useOnWindowResize qui exécutera une fonction de rappel chaque fois que la fenêtre est redimensionnée. Nous utiliserons les hooks useRef() et useEffect() pour écouter l'événement 'resize' de l'objet global Window et nettoyer lorsque le composant est démonté. Ce Hook peut être utile pour créer des applications web réactives qui doivent s'adapter à différentes tailles d'écran.",
      "meta": {
        "title": "Créer un Hook React personnalisé pour les événements de redimensionnement de fenêtre",
        "description": "Découvrez comment construire un Hook React réutilisable qui exécute une fonction de rappel chaque fois que la fenêtre est redimensionnée.",
        "keywords": "redimensionnement de fenêtre, hook personnalisé, conception responsive, react, écouteur d'événements"
      },
      "details": {
        "steps": [
          {
            "title": "Hook React useOnWindowResize",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez le statut d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez actualiser l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifiez l'état de la modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "React useOnWindowResize-Hook",
      "description": "In diesem Lab werden wir lernen, wie wir einen benutzerdefinierten React-Hook namens useOnWindowResize erstellen, der einen Callback ausführt, wenn das Fenster vergrößert oder verkleinert wird. Wir werden die Hooks useRef() und useEffect() verwenden, um das 'resize'-Ereignis des globalen Window-Objekts zu hören und aufzuräumen, wenn die Komponente abmontiert wird. Dieser Hook kann nützlich sein, um responsive Webanwendungen zu erstellen, die an verschiedene Bildschirmgrößen anpassen müssen.",
      "meta": {
        "title": "Erstellen Sie einen benutzerdefinierten React-Hook für Fenstergrößenänderungen",
        "description": "Lernen Sie, wie Sie einen wiederverwendbaren React-Hook erstellen, der eine Callback-Funktion ausführt, wenn das Fenster vergrößert oder verkleinert wird.",
        "keywords": "Fenstergröße ändern, benutzerdefinierter Hook, responsives Design, React, Ereignislistener"
      },
      "details": {
        "steps": [
          {
            "title": "React useOnWindowResize-Hook",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen des Laufzustands des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie auf 'Go Live' in der unteren rechten Ecke, um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite im Vorschau zu sehen."
              },
              {
                "name": "Überprüfen des Status der Änderungen an script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "React の useOnWindowResize フック",
      "description": "この実験では、ウィンドウがリサイズされるたびにコールバックを実行する useOnWindowResize と呼ばれるカスタム React フックを作成する方法を学びます。Window グローバルオブジェクトの'resize'イベントをリッスンし、コンポーネントがアンマウントされたときにクリーンアップするために、useRef() と useEffect() フックを使用します。このフックは、さまざまな画面サイズに対応する必要がある応答型の Web アプリケーションを作成する際に役立ちます。",
      "meta": {
        "title": "ウィンドウリサイズイベント用のカスタム React フックを作成する",
        "description": "ウィンドウがリサイズされるたびにコールバック関数を実行する再利用可能な React フックを作成する方法を学ぶ。",
        "keywords": "ウィンドウリサイズ，カスタムフック，応答型デザイン，React, イベントリスナー"
      },
      "details": {
        "steps": [
          {
            "title": "React の useOnWindowResize フック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ウェブサービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして、ポート 8080 でウェブサービスを実行してください。その後、**Web 8080** タブを更新してウェブページをプレビューできます。"
              },
              {
                "name": "script.js の変更状態を確認する",
                "file": "verify1-2.sh",
                "hint": "実験を完了するための手順に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "React-хук useOnWindowResize",
      "description": "В этом практическом занятии мы научимся создавать пользовательский React-хук под названием useOnWindowResize, который будет выполнять обратный вызов при любом изменении размеров окна. Мы будем использовать хуки useRef() и useEffect() для прослушивания события 'resize' глобального объекта Window и очистки ресурсов при размонтировании компонента. Этот хук может быть полезен для создания отзывчивых веб-приложений, которые должны адаптироваться к различным размерам экрана.",
      "meta": {
        "title": "Создайте пользовательский React-хук для событий изменения размеров окна",
        "description": "Изучите, как создать повторно используемый React-хук, который выполняет функцию обратного вызова при любом изменении размеров окна.",
        "keywords": "изменение размеров окна, пользовательский хук, отзывчивый дизайн, react, слушатель событий"
      },
      "details": {
        "steps": [
          {
            "title": "React-хук useOnWindowResize",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить состояние работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить состояние изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам для завершения практического занятия."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "React useOnWindowResize Hook",
      "description": "이 랩에서는 윈도우 크기가 변경될 때마다 콜백을 실행하는 useOnWindowResize 라는 사용자 정의 React Hook 을 만드는 방법을 배웁니다. useRef() 및 useEffect() 훅을 사용하여 Window 전역 객체의 'resize' 이벤트를 수신하고 컴포넌트가 언마운트될 때 정리합니다. 이 Hook 은 다양한 화면 크기에 맞춰 조정해야 하는 반응형 웹 애플리케이션을 만드는 데 유용할 수 있습니다.",
      "meta": {
        "title": "윈도우 리사이즈 이벤트용 사용자 정의 React Hook 생성",
        "description": "윈도우 크기가 변경될 때마다 콜백 함수를 실행하는 재사용 가능한 React Hook 을 만드는 방법을 알아보세요.",
        "keywords": "윈도우 리사이즈, 사용자 정의 훅, 반응형 디자인, react, 이벤트 리스너"
      },
      "details": {
        "steps": [
          {
            "title": "React useOnWindowResize Hook",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "웹 서비스 실행 상태 확인",
                "file": "verify1-1.sh",
                "hint": "오른쪽 하단의 'Go Live'를 클릭하여 포트 8080 에서 웹 서비스를 실행하세요. 그런 다음 **Web 8080** 탭을 새로 고쳐 웹 페이지를 미리 볼 수 있습니다."
              },
              {
                "name": "script.js 수정 상태 확인",
                "file": "verify1-2.sh",
                "hint": "랩을 완료하려면 단계를 따르세요."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "React useOnWindowResize Hook",
      "description": "Neste laboratório, aprenderemos como criar um Hook React personalizado chamado useOnWindowResize que executará um callback sempre que a janela for redimensionada. Usaremos os hooks useRef() e useEffect() para escutar o evento 'resize' do objeto global Window e fazer a limpeza quando o componente for desmontado. Este Hook pode ser útil para criar aplicações web responsivas que precisam se ajustar a diferentes tamanhos de tela.",
      "meta": {
        "title": "Criar um Hook React Personalizado para Eventos de Redimensionamento da Janela",
        "description": "Aprenda a construir um Hook React reutilizável que executa uma função de callback sempre que a janela é redimensionada.",
        "keywords": "redimensionar janela, custom hook (hook personalizado), design responsivo, react, event listener (ouvinte de eventos)"
      },
      "details": {
        "steps": [
          {
            "title": "React useOnWindowResize Hook",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar o status de execução do serviço web",
                "file": "verify1-1.sh",
                "hint": "Por favor, clique em 'Go Live' no canto inferior direito para executar o serviço web na porta 8080. Em seguida, você pode atualizar a aba **Web 8080** para visualizar a página web."
              },
              {
                "name": "Verificar o status da modificação do script.js",
                "file": "verify1-2.sh",
                "hint": "Por favor, siga os passos para completar o laboratório."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
