{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React useMutationObserver Hook",
  "description": "In this lab, we will learn how to use the useMutationObserver hook in React to watch for changes made to the DOM tree using a MutationObserver. The hook allows us to specify a callback function to be executed when a change is observed, and we can also provide options to customize the observer's behavior. Through this lab, we will be able to understand how to implement the useMutationObserver hook in our React applications.",
  "meta": {
    "title": "React useMutationObserver Hook: Mastering DOM Observation in React",
    "description": "Learn how to use the useMutationObserver hook in React to watch for changes made to the DOM tree and implement dynamic functionality in your applications.",
    "keywords": "dom, usemutationobserver, react, hooks, mutation observer"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React useMutationObserver Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "react/css_in_react",
          "react/event_handling",
          "react/hooks",
          "react/jsx",
          "react/use_state_reducer"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React 的 useMutationObserver 钩子",
      "description": "在本实验中，我们将学习如何在 React 中使用 useMutationObserver 钩子，通过 MutationObserver 来监听 DOM 树的变化。该钩子允许我们指定一个在观察到变化时执行的回调函数，还能提供选项来自定义观察者的行为。通过本实验，我们将理解如何在 React 应用程序中实现 useMutationObserver 钩子。",
      "meta": {
        "title": "React 的 useMutationObserver 钩子：掌握 React 中的 DOM 观察",
        "description": "学习如何在 React 中使用 useMutationObserver 钩子来监听 DOM 树的变化，并在应用程序中实现动态功能。",
        "keywords": "DOM, useMutationObserver, React, 钩子，MutationObserver"
      },
      "details": {
        "steps": [
          {
            "title": "React 的 useMutationObserver 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Web 服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“Go Live”以在端口 8080 上运行 Web 服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Hook useMutationObserver de React",
      "description": "En este laboratorio, aprenderemos cómo utilizar el hook useMutationObserver en React para monitorear los cambios realizados en el árbol DOM utilizando un MutationObserver. El hook nos permite especificar una función de devolución de llamada (callback) que se ejecutará cuando se observe un cambio, y también podemos proporcionar opciones para personalizar el comportamiento del observador. A través de este laboratorio, podremos entender cómo implementar el hook useMutationObserver en nuestras aplicaciones React.",
      "meta": {
        "title": "Hook useMutationObserver de React: Dominando la observación del DOM en React",
        "description": "Aprende cómo utilizar el hook useMutationObserver en React para monitorear los cambios realizados en el árbol DOM e implementar funcionalidad dinámica en tus aplicaciones.",
        "keywords": "dom, usemutationobserver, react, hooks, mutation observer"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useMutationObserver de React",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haz clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puedes actualizar la pestaña **Web 8080** para ver una vista previa de la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Sigue los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Hook useMutationObserver de React",
      "description": "Dans ce laboratoire, nous allons apprendre à utiliser le hook useMutationObserver dans React pour surveiller les modifications apportées à l'arbre DOM à l'aide d'un MutationObserver. Ce hook nous permet de spécifier une fonction de rappel (callback) à exécuter lorsqu'une modification est détectée, et nous pouvons également fournir des options pour personnaliser le comportement de l'observateur. Grâce à ce laboratoire, nous serons en mesure de comprendre comment implémenter le hook useMutationObserver dans nos applications React.",
      "meta": {
        "title": "Hook useMutationObserver de React : Maîtriser l'observation du DOM dans React",
        "description": "Apprenez à utiliser le hook useMutationObserver dans React pour surveiller les modifications apportées à l'arbre DOM et implémenter des fonctionnalités dynamiques dans vos applications.",
        "keywords": "dom, useMutationObserver, react, hooks, mutation observer"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useMutationObserver de React",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier le statut d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez actualiser l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifier le statut de modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "React useMutationObserver-Hook",
      "description": "In diesem Lab werden wir lernen, wie man den useMutationObserver-Hook in React verwendet, um mithilfe eines MutationObserver Änderungen am DOM-Baum zu überwachen. Mit diesem Hook können wir eine Callback-Funktion angeben, die ausgeführt wird, wenn eine Änderung beobachtet wird. Außerdem können wir Optionen angeben, um das Verhalten des Beobachters anzupassen. Durch dieses Lab werden wir verstehen, wie man den useMutationObserver-Hook in unseren React-Anwendungen implementiert.",
      "meta": {
        "title": "React useMutationObserver-Hook: Beherrschen der DOM-Überwachung in React",
        "description": "Lernen Sie, wie Sie den useMutationObserver-Hook in React nutzen, um Änderungen am DOM-Baum zu überwachen und dynamische Funktionen in Ihren Anwendungen zu implementieren.",
        "keywords": "dom, usemutationobserver, react, hooks, mutation observer"
      },
      "details": {
        "steps": [
          {
            "title": "React useMutationObserver-Hook",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen Sie den Laufstatus des Web-Services",
                "file": "verify1-1.sh",
                "hint": "Klicken Sie unten rechts auf 'Go Live', um den Web-Service auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzusehen."
              },
              {
                "name": "Überprüfen Sie den Status der Änderungen in script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte befolgen Sie die Schritte, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "React の useMutationObserver フック",
      "description": "この実験では、MutationObserver を使用して DOM ツリーに加えられた変更を監視するために、React で useMutationObserver フックをどのように使用するかを学びます。このフックを使用すると、変更が検出されたときに実行するコールバック関数を指定でき、オブザーバーの動作をカスタマイズするためのオプションも提供できます。この実験を通じて、React アプリケーションで useMutationObserver フックをどのように実装するかを理解できるようになります。",
      "meta": {
        "title": "React の useMutationObserver フック：React での DOM 監視の習得",
        "description": "React で useMutationObserver フックを使用して DOM ツリーの変更を監視し、アプリケーションに動的な機能を実装する方法を学びましょう。",
        "keywords": "DOM, useMutationObserver, React, フック，Mutation Observer"
      },
      "details": {
        "steps": [
          {
            "title": "React の useMutationObserver フック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Web サービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅にある「Go Live」をクリックして、ポート 8080 で Web サービスを実行してください。その後、**Web 8080** タブを更新すると、Web ページをプレビューできます。"
              },
              {
                "name": "script.js の変更状態を確認する",
                "file": "verify1-2.sh",
                "hint": "手順に従って実験を完了してください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Хук React useMutationObserver",
      "description": "В этом практическом занятии (lab) мы узнаем, как использовать хук useMutationObserver в React для отслеживания изменений в DOM-дереве с помощью MutationObserver. Этот хук позволяет нам указать функцию обратного вызова (callback function), которая будет выполняться при обнаружении изменений, а также предоставить параметры (options), чтобы настроить поведение наблюдателя. В рамках этого практического занятия мы сможем понять, как реализовать хук useMutationObserver в наших React-приложениях.",
      "meta": {
        "title": "Хук React useMutationObserver: овладение наблюдением за DOM в React",
        "description": "Узнайте, как использовать хук useMutationObserver в React для отслеживания изменений в DOM-дереве и реализации динамической функциональности в своих приложениях.",
        "keywords": "dom, usemutationobserver, react, hooks, mutation observer"
      },
      "details": {
        "steps": [
          {
            "title": "Хук React useMutationObserver",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить состояние запуска веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Нажмите на кнопку 'Go Live' в правом нижнем углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы предварительно просмотреть веб-страницу."
              },
              {
                "name": "Проверить состояние изменения файла script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте инструкциям, чтобы завершить практическое занятие."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
