{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React usePersistedState Hook",
  "description": "In this lab, we will learn about the usePersistedState hook in React, which allows us to persist a stateful value in localStorage. We will explore how to initialize and update the stored value, as well as how to handle changes to the key name. By the end of this lab, you will be able to use this hook in your React applications to ensure that certain data is stored and can be retrieved even after a page refresh.",
  "meta": {
    "title": "Mastering React's usePersistedState Hook",
    "description": "Learn how to use the powerful usePersistedState hook to persist state in your React applications and ensure data is retained even after page refreshes.",
    "keywords": "localstorage, usepersistedstate, react, state management, data persistence"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React usePersistedState Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "react/event_handling",
          "react/hooks",
          "react/jsx",
          "react/use_state_reducer"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React 的 usePersistedState 钩子",
      "description": "在本实验中，我们将学习 React 中的 usePersistedState 钩子，它允许我们在 localStorage 中持久化一个有状态的值。我们将探讨如何初始化和更新存储的值，以及如何处理键名的更改。在本实验结束时，你将能够在你的 React 应用程序中使用这个钩子，以确保某些数据被存储，并且即使在页面刷新后也能被检索到。",
      "meta": {
        "title": "掌握 React 的 usePersistedState 钩子",
        "description": "学习如何使用强大的 usePersistedState 钩子在你的 React 应用程序中持久化状态，并确保即使在页面刷新后数据也能保留。",
        "keywords": "localstorage, usepersistedstate, react, 状态管理，数据持久化"
      },
      "details": {
        "steps": [
          {
            "title": "React 的 usePersistedState 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Web 服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“Go Live”以在端口 8080 上运行 Web 服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改的状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Hook usePersistedState de React",
      "description": "En este laboratorio, aprenderemos sobre el hook usePersistedState en React, que nos permite persistir un valor con estado en localStorage. Exploraremos cómo inicializar y actualizar el valor almacenado, así como cómo manejar los cambios en el nombre de la clave. Al final de este laboratorio, serás capaz de usar este hook en tus aplicaciones React para garantizar que ciertos datos se almacenen y puedan recuperarse incluso después de actualizar la página.",
      "meta": {
        "title": "Dominando el hook usePersistedState de React",
        "description": "Aprende cómo usar el poderoso hook usePersistedState para persistir el estado en tus aplicaciones React y asegurar que los datos se conserven incluso después de actualizar la página.",
        "keywords": "localstorage, usepersistedstate, react, gestión de estado, persistencia de datos"
      },
      "details": {
        "steps": [
          {
            "title": "Hook usePersistedState de React",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Hook usePersistedState de React",
      "description": "Dans ce laboratoire, nous allons apprendre à utiliser le hook usePersistedState dans React, qui nous permet de conserver une valeur d'état dans localStorage. Nous allons explorer comment initialiser et mettre à jour la valeur stockée, ainsi que comment gérer les modifications du nom de la clé. À la fin de ce laboratoire, vous serez capable d'utiliser ce hook dans vos applications React pour vous assurer que certaines données sont stockées et peuvent être récupérées même après un rafraîchissement de page.",
      "meta": {
        "title": "Maîtriser le hook usePersistedState de React",
        "description": "Découvrez comment utiliser le puissant hook usePersistedState pour conserver l'état dans vos applications React et vous assurer que les données sont conservées même après les rafraîchissements de page.",
        "keywords": "localstorage, usepersistedstate, react, gestion d'état, persistance de données"
      },
      "details": {
        "steps": [
          {
            "title": "Hook usePersistedState de React",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez le statut d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez rafraîchir l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifiez le statut de la modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "React usePersistedState-Hook",
      "description": "In diesem Lab werden wir uns mit dem usePersistedState-Hook in React beschäftigen, der uns ermöglicht, einen zustandsbehafteten Wert in localStorage zu speichern. Wir werden untersuchen, wie wir den gespeicherten Wert initialisieren und aktualisieren, sowie wie wir Änderungen am Schlüsselnamen behandeln. Am Ende dieses Labs sollten Sie in der Lage sein, diesen Hook in Ihren React-Anwendungen zu verwenden, um sicherzustellen, dass bestimmte Daten gespeichert und auch nach einem Seitenrefresh abgerufen werden können.",
      "meta": {
        "title": "Meisterhaftes Verwenden des React usePersistedState-Hooks",
        "description": "Lernen Sie, wie Sie den leistungsstarken usePersistedState-Hook verwenden, um den Zustand in Ihren React-Anwendungen zu speichern und sicherzustellen, dass die Daten auch nach einem Seitenrefresh beibehalten werden.",
        "keywords": "localstorage, usepersistedstate, react, zustandsverwaltung, Datenspeicherung"
      },
      "details": {
        "steps": [
          {
            "title": "React usePersistedState-Hook",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen des Laufzustands des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie auf 'Go Live' in der unteren rechten Ecke, um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzuschauen."
              },
              {
                "name": "Überprüfen des Status der Änderungen an script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "React の usePersistedState フック",
      "description": "この実験では、React の usePersistedState フックについて学びます。このフックを使うことで、状態値を localStorage に永続化することができます。保存された値の初期化と更新方法、キー名の変更に対応する方法を調べます。この実験を終えると、React アプリケーションでこのフックを使って、特定のデータを保存し、ページをリフレッシュした後でも取得できるようになります。",
      "meta": {
        "title": "React の usePersistedState フックをマスターする",
        "description": "強力な usePersistedState フックを使って React アプリケーションの状態を永続化し、ページをリフレッシュした後でもデータを保持する方法を学びましょう。",
        "keywords": "localstorage, usepersistedstate, react, 状態管理，データ永続化"
      },
      "details": {
        "steps": [
          {
            "title": "React の usePersistedState フック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ウェブサービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして、ポート 8080 でウェブサービスを実行してください。その後、**Web 8080**タブを更新してウェブページをプレビューできます。"
              },
              {
                "name": "script.js の変更状態を確認する",
                "file": "verify1-2.sh",
                "hint": "実験を完了するための手順に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "React usePersistedState Hook",
      "description": "В этом лабе мы узнаем о хуке usePersistedState в React, который позволяет сохранять состояние в localStorage. Мы изучим, как инициализировать и обновлять сохраненное значение, а также как обрабатывать изменения имени ключа. В конце этого лабе вы сможете использовать этот хук в своих React-приложениях, чтобы обеспечить сохранение определенных данных и их получение даже после обновления страницы.",
      "meta": {
        "title": "Мастерство над хуком usePersistedState React",
        "description": "Изучите, как использовать мощный хук usePersistedState для сохранения состояния в своих React-приложениях и обеспечить сохранение данных даже после обновления страниц.",
        "keywords": "localstorage, usepersistedstate, react, управление состоянием, сохранение данных"
      },
      "details": {
        "steps": [
          {
            "title": "React usePersistedState Hook",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить статус работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить статус изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам, чтобы завершить лабу."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
