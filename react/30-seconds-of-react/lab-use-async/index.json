{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React useAsync Hook",
  "description": "In this lab, we will learn how to use the useAsync hook in React to handle asynchronous calls. This custom hook allows us to define a handler function and then run it asynchronously while updating the state of our component using the useReducer hook. By the end of this lab, you will be able to create reusable code for handling asynchronous data in your React applications.",
  "meta": {
    "title": "Mastering Asynchronous React with the useAsync Hook",
    "description": "Learn how to use the powerful useAsync hook to handle asynchronous data in your React applications.",
    "keywords": "asynchronous, data fetching, useasync, react, hooks"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React useAsync Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "react/event_handling",
          "react/hooks",
          "react/jsx",
          "react/use_state_reducer"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React useAsync 钩子",
      "description": "在本实验中，我们将学习如何在 React 中使用 useAsync 钩子来处理异步调用。这个自定义钩子允许我们定义一个处理函数，然后在使用 useReducer 钩子更新组件状态的同时异步运行它。在本实验结束时，你将能够在 React 应用程序中创建用于处理异步数据的可重用代码。",
      "meta": {
        "title": "使用 useAsync 钩子掌握异步 React",
        "description": "学习如何使用强大的 useAsync 钩子在 React 应用程序中处理异步数据。",
        "keywords": "异步, 数据获取, useasync, React, 钩子"
      },
      "details": {
        "steps": [
          {
            "title": "React useAsync 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证网络服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“启动实时服务器”以在端口 8080 上运行网络服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Hook useAsync de React",
      "description": "En este laboratorio, aprenderemos a usar el hook useAsync en React para manejar llamadas asincrónicas. Este hook personalizado nos permite definir una función manejadora y luego ejecutarla de manera asincrónica mientras actualizamos el estado de nuestro componente usando el hook useReducer. Al final de este laboratorio, serás capaz de crear código reusable para manejar datos asincrónicos en tus aplicaciones React.",
      "meta": {
        "title": "Dominando la programación asíncrona en React con el hook useAsync",
        "description": "Aprende a usar el poderoso hook useAsync para manejar datos asincrónicos en tus aplicaciones React.",
        "keywords": "asíncrono, recuperación de datos, useasync, react, hooks"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useAsync de React",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Hook useAsync de React",
      "description": "Dans ce laboratoire, nous allons apprendre à utiliser le hook useAsync dans React pour gérer les appels asynchrones. Ce hook personnalisé nous permet de définir une fonction de gestionnaire et de l'exécuter de manière asynchrone tout en mettant à jour l'état de notre composant à l'aide du hook useReducer. À la fin de ce laboratoire, vous serez capable de créer du code réutilisable pour gérer les données asynchrones dans vos applications React.",
      "meta": {
        "title": "Maîtriser l'asynchrone en React avec le hook useAsync",
        "description": "Apprenez à utiliser le puissant hook useAsync pour gérer les données asynchrones dans vos applications React.",
        "keywords": "asynchrone, récupération de données, useasync, react, hooks"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useAsync de React",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier le statut d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez actualiser l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifier le statut de la modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "React useAsync-Hook",
      "description": "In diesem Lab werden wir lernen, wie man den useAsync-Hook in React verwendet, um asynchrone Aufrufe zu behandeln. Dieser benutzerdefinierte Hook ermöglicht es uns, eine Handler-Funktion zu definieren und dann asynchron auszuführen, während wir den Zustand unseres Components mit dem useReducer-Hook aktualisieren. Am Ende dieses Labs sollten Sie in der Lage sein, wiederverwendbaren Code zum Verarbeiten asynchroner Daten in Ihren React-Anwendungen zu erstellen.",
      "meta": {
        "title": "Meisterhaftes asynchrones React mit dem useAsync-Hook",
        "description": "Lernen Sie, wie man den leistungsstarken useAsync-Hook verwendet, um asynchrone Daten in Ihren React-Anwendungen zu verarbeiten.",
        "keywords": "asynchron, Datenabruf, useasync, react, hooks"
      },
      "details": {
        "steps": [
          {
            "title": "React useAsync-Hook",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren des Laufzustands des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie auf 'Go Live' in der unteren rechten Ecke, um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzuschauen."
              },
              {
                "name": "Verifizieren der Änderungen in script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "ReactのuseAsyncフック",
      "description": "この実験では、ReactにおけるuseAsyncフックを使って非同期コールを処理する方法を学びます。このカスタムフックを使うと、ハンドラ関数を定義し、useReducerフックを使ってコンポーネントの状態を更新しながら非同期で実行することができます。この実験が終了すると、Reactアプリケーションで非同期データを処理するための再利用可能なコードを作成できるようになります。",
      "meta": {
        "title": "useAsyncフックを使った非同期Reactのマスター",
        "description": "Reactアプリケーションで非同期データを処理するための強力なuseAsyncフックの使い方を学びましょう。",
        "keywords": "非同期, データ取得, useasync, react, フック"
      },
      "details": {
        "steps": [
          {
            "title": "ReactのuseAsyncフック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ウェブサービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして、ポート8080でウェブサービスを実行してください。その後、**Web 8080** タブを更新してウェブページをプレビューできます。"
              },
              {
                "name": "script.jsの変更状態を確認する",
                "file": "verify1-2.sh",
                "hint": "実験を完了するための手順に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "React хук useAsync",
      "description": "В этом практическом занятии мы научимся использовать хук useAsync в React для обработки асинхронных вызовов. Этот пользовательский хук позволяет определить функцию обработчика и затем запускать ее асинхронно, обновляя состояние нашего компонента с использованием хука useReducer. В конце этого практического занятия вы сможете создать повторно используемый код для обработки асинхронных данных в своих React-приложениях.",
      "meta": {
        "title": "Мастерство в асинхронном React с использованием хука useAsync",
        "description": "Изучите, как использовать мощный хук useAsync для обработки асинхронных данных в своих React-приложениях.",
        "keywords": "асинхронность, получение данных, useasync, react, хуки"
      },
      "details": {
        "steps": [
          {
            "title": "React хук useAsync",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить статус работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить статус изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам, чтобы завершить практическое занятие."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
