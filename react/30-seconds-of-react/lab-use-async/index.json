{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React useAsync Hook",
  "description": "In this lab, we will learn how to use the useAsync hook in React to handle asynchronous calls. This custom hook allows us to define a handler function and then run it asynchronously while updating the state of our component using the useReducer hook. By the end of this lab, you will be able to create reusable code for handling asynchronous data in your React applications.",
  "meta": {
    "title": "Mastering Asynchronous React with the useAsync Hook",
    "description": "Learn how to use the powerful useAsync hook to handle asynchronous data in your React applications.",
    "keywords": "asynchronous, data fetching, useasync, react, hooks"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React useAsync Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "react/event_handling",
          "react/hooks",
          "react/jsx",
          "react/use_state_reducer"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React useAsync 钩子",
      "description": "在本实验中，我们将学习如何在 React 中使用 useAsync 钩子来处理异步调用。这个自定义钩子允许我们定义一个处理函数，然后在使用 useReducer 钩子更新组件状态的同时异步运行它。在本实验结束时，你将能够在 React 应用程序中创建用于处理异步数据的可重用代码。",
      "meta": {
        "title": "使用 useAsync 钩子掌握异步 React",
        "description": "学习如何使用强大的 useAsync 钩子在 React 应用程序中处理异步数据。",
        "keywords": "异步, 数据获取, useasync, React, 钩子"
      },
      "details": {
        "steps": [
          {
            "title": "React useAsync 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证网络服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“启动实时服务器”以在端口 8080 上运行网络服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
