{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React useComponentWillUnmount Hook",
  "description": "In this lab, we will explore the useComponentWillUnmount hook in React, which allows us to execute a callback function right before a component is unmounted and destroyed. By using this hook, we can perform any necessary cleanup tasks, such as removing event listeners or cancelling any pending requests. This lab will provide hands-on experience in using this hook and understanding its behavior, which is similar to the componentWillUnmount() lifecycle method in class components.",
  "meta": {
    "title": "Mastering React's useComponentWillUnmount Hook",
    "description": "Explore the power of the useComponentWillUnmount hook in React for seamless component lifecycle management.",
    "keywords": "react, usecomponentwillunmount, component lifecycle, cleanup, hooks"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React useComponentWillUnmount Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React 的 useComponentWillUnmount 钩子",
      "description": "在本实验中，我们将探索 React 中的 useComponentWillUnmount 钩子，它使我们能够在组件卸载和销毁之前立即执行一个回调函数。通过使用此钩子，我们可以执行任何必要的清理任务，例如移除事件监听器或取消任何挂起的请求。本实验将提供使用此钩子的实践经验，并理解其行为，这类似于类组件中的 componentWillUnmount() 生命周期方法。",
      "meta": {
        "title": "掌握 React 的 useComponentWillUnmount 钩子",
        "description": "探索 React 中 useComponentWillUnmount 钩子在无缝组件生命周期管理方面的强大功能。",
        "keywords": "react, usecomponentwillunmount, 组件生命周期，清理，钩子"
      },
      "details": {
        "steps": [
          {
            "title": "React 的 useComponentWillUnmount 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Web 服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“Go Live”以在端口 8080 上运行 Web 服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "React useComponentWillUnmount Hook",
      "description": "En este laboratorio, exploraremos el hook useComponentWillUnmount en React, que nos permite ejecutar una función de devolución de llamada justo antes de que un componente sea desmontado y destruido. Al usar este hook, podemos realizar cualquier tarea de limpieza necesaria, como eliminar los oyentes de eventos o cancelar cualquier solicitud pendiente. Este laboratorio proporcionará experiencia práctica en el uso de este hook y en la comprensión de su comportamiento, que es similar al método de ciclo de vida componentWillUnmount() en los componentes de clase.",
      "meta": {
        "title": "Dominando el hook useComponentWillUnmount de React",
        "description": "Explora el poder del hook useComponentWillUnmount en React para una gestión sin problemas del ciclo de vida de los componentes.",
        "keywords": "react, usecomponentwillunmount, ciclo de vida del componente, limpieza, hooks"
      },
      "details": {
        "steps": [
          {
            "title": "React useComponentWillUnmount Hook",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Hook useComponentWillUnmount de React",
      "description": "Dans ce laboratoire, nous allons explorer le hook useComponentWillUnmount dans React, qui nous permet d'exécuter une fonction de rappel juste avant qu'un composant ne soit démonté et détruit. En utilisant ce hook, nous pouvons effectuer toutes les tâches de nettoyage nécessaires, telles que la suppression des écouteurs d'événements ou l'annulation de toutes les requêtes en attente. Ce laboratoire vous donnera une expérience pratique dans l'utilisation de ce hook et la compréhension de son comportement, qui est similaire à la méthode de cycle de vie componentWillUnmount() dans les composants de classe.",
      "meta": {
        "title": "Maîtriser le hook useComponentWillUnmount de React",
        "description": "Explorez le pouvoir du hook useComponentWillUnmount dans React pour une gestion sans friction du cycle de vie des composants.",
        "keywords": "react, usecomponentwillunmount, cycle de vie des composants, nettoyage, hooks"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useComponentWillUnmount de React",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez le statut d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez actualiser l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifiez l'état de modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "React useComponentWillUnmount-Hook",
      "description": "In diesem Lab werden wir den useComponentWillUnmount-Hook in React erkunden, mit dem wir eine Callback-Funktion direkt vor dem Entfernen und Zerstören eines Komponenten ausführen können. Mit diesem Hook können wir alle erforderlichen Bereinigungstasks ausführen, wie z. B. das Entfernen von Event-Listenern oder das Abbrechen von laufenden Anforderungen. In diesem Lab erhalten Sie praktische Erfahrungen beim Verwenden dieses Hooks und beim Verständnis seines Verhaltens, das ähnlich der componentWillUnmount()-Lebenszyklusmethode in Klassenkomponenten ist.",
      "meta": {
        "title": "Meisterhaftes Verwenden des React useComponentWillUnmount-Hooks",
        "description": "Erkunden Sie die Macht des useComponentWillUnmount-Hooks in React für eine nahtlose Verwaltung des Komponentenlebenszyklus.",
        "keywords": "react, usecomponentwillunmount, komponentenlebenszyklus, bereinigung, hooks"
      },
      "details": {
        "steps": [
          {
            "title": "React useComponentWillUnmount-Hook",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen des Laufzustands des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie auf 'Go Live' in der unteren rechten Ecke, um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzuschauen."
              },
              {
                "name": "Überprüfen des Status der Änderungen an script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "React の useComponentWillUnmount フック",
      "description": "この実験では、React の useComponentWillUnmount フックを調べます。このフックを使うと、コンポーネントがアンマウントされ破棄される直前にコールバック関数を実行できます。このフックを使うことで、イベントリスナーの削除や保留中のリクエストのキャンセルなど、必要なクリーンアップタスクを行うことができます。この実験では、このフックの使い方と動作を理解するための実践的な経験を提供します。この動作は、クラスコンポーネントの componentWillUnmount() ライフサイクルメソッドと似ています。",
      "meta": {
        "title": "React の useComponentWillUnmount フックをマスターする",
        "description": "React における useComponentWillUnmount フックの力を探求して、シームレスなコンポーネントライフサイクル管理を行いましょう。",
        "keywords": "react, usecomponentwillunmount, コンポーネントライフサイクル，クリーンアップ，フック"
      },
      "details": {
        "steps": [
          {
            "title": "React の useComponentWillUnmount フック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ウェブサービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして、ポート 8080 でウェブサービスを実行してください。その後、**Web 8080** タブを更新してウェブページをプレビューできます。"
              },
              {
                "name": "script.js の変更状態を確認する",
                "file": "verify1-2.sh",
                "hint": "実験を完了する手順に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "React useComponentWillUnmount Hook",
      "description": "В этом лабораторном задании мы изучим хук useComponentWillUnmount в React, который позволяет нам выполнить функцию обратного вызова непосредственно перед демонтажом и уничтожением компонента. Используя этот хук, мы можем выполнять любые необходимые задачи по очистке, такие как удаление слушателей событий или отмену любых ожидающих запросов. В этом лабораторном задании мы получим практический опыт в использовании этого хука и поймем его поведение, которое аналогично методу жизненного цикла componentWillUnmount() в классовых компонентах.",
      "meta": {
        "title": "Осваиваем хук useComponentWillUnmount React",
        "description": "Исследуйте мощь хука useComponentWillUnmount в React для бесперебойного управления жизненным циклом компонентов.",
        "keywords": "react, usecomponentwillunmount, жизненный цикл компонента, очистка, хуки"
      },
      "details": {
        "steps": [
          {
            "title": "React useComponentWillUnmount Hook",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить статус работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить статус изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам, чтобы завершить лабораторную работу."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "React useComponentWillUnmount 훅",
      "description": "이 랩에서는 컴포넌트가 언마운트 (unmount) 되고 파괴되기 직전에 콜백 함수를 실행할 수 있게 해주는 React 의 useComponentWillUnmount 훅을 살펴봅니다. 이 훅을 사용하여 이벤트 리스너를 제거하거나 보류 중인 요청을 취소하는 등 필요한 정리 작업을 수행할 수 있습니다. 이 랩은 이 훅을 사용하고 동작을 이해하는 실질적인 경험을 제공하며, 이는 클래스 컴포넌트의 componentWillUnmount() 라이프사이클 메서드와 유사합니다.",
      "meta": {
        "title": "React useComponentWillUnmount 훅 마스터하기 - 컴포넌트 정리 (React useComponentWillUnmount)",
        "description": "React 에서 useComponentWillUnmount 훅을 사용하여 컴포넌트 라이프사이클을 원활하게 관리하는 방법을 알아보세요. 컴포넌트 언마운트 시 정리 작업 수행 (React 훅)",
        "keywords": "react, usecomponentwillunmount, 컴포넌트 라이프사이클, 정리, 훅, React 훅, 컴포넌트 언마운트"
      },
      "details": {
        "steps": [
          {
            "title": "React useComponentWillUnmount 훅",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "웹 서비스 실행 상태 확인",
                "file": "verify1-1.sh",
                "hint": "오른쪽 하단의 'Go Live'를 클릭하여 포트 8080 에서 웹 서비스를 실행하세요. 그런 다음 **Web 8080** 탭을 새로 고쳐 웹 페이지를 미리 볼 수 있습니다."
              },
              {
                "name": "script.js 수정 상태 확인",
                "file": "verify1-2.sh",
                "hint": "랩을 완료하려면 단계를 따르세요."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "React useComponentWillUnmount Hook",
      "description": "Neste laboratório, exploraremos o hook useComponentWillUnmount no React, que nos permite executar uma função de callback logo antes que um componente seja desmontado e destruído. Ao usar este hook, podemos realizar quaisquer tarefas de limpeza necessárias, como remover listeners de eventos ou cancelar quaisquer requisições pendentes. Este laboratório fornecerá experiência prática no uso deste hook e na compreensão de seu comportamento, que é semelhante ao método de ciclo de vida componentWillUnmount() em componentes de classe.",
      "meta": {
        "title": "Dominando o Hook useComponentWillUnmount do React",
        "description": "Explore o poder do hook useComponentWillUnmount no React para um gerenciamento de ciclo de vida de componentes sem problemas.",
        "keywords": "react, usecomponentwillunmount, ciclo de vida do componente, limpeza, hooks"
      },
      "details": {
        "steps": [
          {
            "title": "React useComponentWillUnmount Hook",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar o status de execução do serviço web",
                "file": "verify1-1.sh",
                "hint": "Por favor, clique em 'Go Live' no canto inferior direito para executar o serviço web na porta 8080. Em seguida, você pode atualizar a aba **Web 8080** para visualizar a página web."
              },
              {
                "name": "Verificar o status da modificação do script.js",
                "file": "verify1-2.sh",
                "hint": "Por favor, siga os passos para completar o laboratório."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
