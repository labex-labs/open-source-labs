{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React useOnWindowScroll Hook",
  "description": "In this lab, we will explore how to use the useOnWindowScroll hook in React to execute a callback whenever the window is scrolled. This hook allows us to add a scroll listener to the Window global object and remove it when the component unmounts. By using this hook, we can easily add custom scroll behavior to our React components.",
  "meta": {
    "title": "Mastering Window Scroll with React useOnWindowScroll Hook",
    "description": "Discover how to utilize the useOnWindowScroll hook in React to add custom scroll behavior to your components.",
    "keywords": "window scroll, custom scroll behavior, react, web development, useonwindowscroll"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React useOnWindowScroll Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": ["react/css_in_react", "react/hooks", "react/jsx"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React useOnWindowScroll 钩子",
      "description": "在本实验中，我们将探索如何在 React 中使用 useOnWindowScroll 钩子，以便在窗口滚动时执行回调。这个钩子使我们能够向 Window 全局对象添加一个滚动监听器，并在组件卸载时将其移除。通过使用这个钩子，我们可以轻松地为我们的 React 组件添加自定义滚动行为。",
      "meta": {
        "title": "使用 React useOnWindowScroll 钩子掌握窗口滚动",
        "description": "探索如何在 React 中利用 useOnWindowScroll 钩子为你的组件添加自定义滚动行为。",
        "keywords": "窗口滚动，自定义滚动行为，React, 网页开发，useonwindowscroll"
      },
      "details": {
        "steps": [
          {
            "title": "React useOnWindowScroll 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证网络服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“Go Live”以在端口 8080 上运行网络服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改的状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Hook useOnWindowScroll de React",
      "description": "En este laboratorio, exploraremos cómo usar el hook useOnWindowScroll en React para ejecutar una devolución de llamada cada vez que se desplace la ventana. Este hook nos permite agregar un oyente de desplazamiento al objeto global Window y eliminarlo cuando el componente se desmonte. Al usar este hook, podemos agregar fácilmente un comportamiento de desplazamiento personalizado a nuestros componentes React.",
      "meta": {
        "title": "Dominando el desplazamiento de ventana con el hook useOnWindowScroll de React",
        "description": "Descubre cómo utilizar el hook useOnWindowScroll en React para agregar un comportamiento de desplazamiento personalizado a tus componentes.",
        "keywords": "desplazamiento de ventana, comportamiento de desplazamiento personalizado, react, desarrollo web, useonwindowscroll"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useOnWindowScroll de React",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Hook useOnWindowScroll de React",
      "description": "Dans ce laboratoire, nous allons explorer comment utiliser le hook useOnWindowScroll en React pour exécuter une fonction de rappel chaque fois que la fenêtre est défilée. Ce hook nous permet d'ajouter un écouteur de défilement à l'objet global Window et de le supprimer lorsque le composant est démonté. En utilisant ce hook, nous pouvons facilement ajouter un comportement de défilement personnalisé à nos composants React.",
      "meta": {
        "title": "Maîtriser le défilement de fenêtre avec le hook useOnWindowScroll de React",
        "description": "Découvrez comment utiliser le hook useOnWindowScroll en React pour ajouter un comportement de défilement personnalisé à vos composants.",
        "keywords": "défilement de fenêtre, comportement de défilement personnalisé, react, développement web, useonwindowscroll"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useOnWindowScroll de React",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier l'état d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez rafraîchir l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifier l'état de la modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "React useOnWindowScroll-Hook",
      "description": "In diesem Lab werden wir untersuchen, wie man den useOnWindowScroll-Hook in React verwendet, um einen Callback auszuführen, wenn das Fenster scrollt. Dieser Hook ermöglicht es uns, einen Scroll-Listener zum globalen Window-Objekt hinzuzufügen und ihn zu entfernen, wenn die Komponente entladen wird. Mit diesem Hook können wir unserer React-Komponenten leicht benutzerdefiniertes Scrollverhalten hinzufügen.",
      "meta": {
        "title": "Das React useOnWindowScroll-Hook für das perfekte Fenster-Scrolling beherrschen",
        "description": "Entdecken Sie, wie Sie den useOnWindowScroll-Hook in React nutzen, um benutzerdefiniertes Scrollverhalten zu Ihren Komponenten hinzuzufügen.",
        "keywords": "Fenster-Scroll, benutzerdefiniertes Scrollverhalten, React, Webentwicklung, useonwindowscroll"
      },
      "details": {
        "steps": [
          {
            "title": "React useOnWindowScroll-Hook",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen des Laufzustands des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie auf 'Go Live' in der unteren rechten Ecke, um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzuschauen."
              },
              {
                "name": "Überprüfen des Status der Änderungen in script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "React の useOnWindowScroll フック",
      "description": "この実験では、React における useOnWindowScroll フックをどのように使用するかを検討します。このフックを使用することで、ウィンドウがスクロールされるたびにコールバックを実行することができます。このフックを使用することで、Window グローバルオブジェクトにスクロールリスナーを追加し、コンポーネントがアンマウントされたときにそれを削除することができます。このフックを使用することで、React コンポーネントにカスタムスクロール動作を簡単に追加することができます。",
      "meta": {
        "title": "React の useOnWindowScroll フックでウィンドウスクロールをマスターする",
        "description": "React における useOnWindowScroll フックを利用して、コンポーネントにカスタムスクロール動作を追加する方法を学びましょう。",
        "keywords": "ウィンドウスクロール，カスタムスクロール動作，React, ウェブ開発，useonwindowscroll"
      },
      "details": {
        "steps": [
          {
            "title": "React の useOnWindowScroll フック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ウェブサービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして、ポート 8080 でウェブサービスを実行してください。その後、**Web 8080**タブを更新して、ウェブページをプレビューできます。"
              },
              {
                "name": "script.js の変更状態を確認する",
                "file": "verify1-2.sh",
                "hint": "実験を完了するための手順に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "React useOnWindowScroll Хук",
      "description": "В этом лабораторном задании мы изучим, как использовать хук useOnWindowScroll в React для выполнения обратного вызова при каждом скроллинге окна. Этот хук позволяет нам добавить слушатель скроллинга к глобальному объекту Window и удалить его при демонтировании компонента. Используя этот хук, мы можем легко добавить пользовательское поведение при скроллинге к нашим компонентам React.",
      "meta": {
        "title": "Мастерство в управлении скроллингом окна с использованием React useOnWindowScroll Хука",
        "description": "Откройте, как использовать хук useOnWindowScroll в React для добавления пользовательского поведения при скроллинге к вашим компонентам.",
        "keywords": "скроллинг окна, пользовательское поведение при скроллинге, react, веб-разработка, useonwindowscroll"
      },
      "details": {
        "steps": [
          {
            "title": "React useOnWindowScroll Хук",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить статус работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить статус изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам для завершения лабораторной работы."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
