{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React useDelayedState Hook",
  "description": "In this lab, we will learn how to use the useDelayedState hook in React to delay the creation of a stateful value until a certain condition is met. This hook is useful when we need to wait for data or props to load before creating a stateful value, and can help improve the performance of our application. Through practical examples, we will see how this hook can be implemented and how it can be used to update stateful values in our React components.",
  "meta": {
    "title": "Mastering React's useDelayedState Hook",
    "description": "Learn how to use the powerful useDelayedState hook in React to improve your application's performance and user experience.",
    "keywords": "react, performance, usedelayedstate, state management, hooks"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React useDelayedState Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "react/event_handling",
          "react/hooks",
          "react/jsx",
          "react/list_keys",
          "react/state_lifecycle",
          "react/use_state_reducer"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React useDelayedState 钩子",
      "description": "在本实验中，我们将学习如何在 React 中使用 useDelayedState 钩子，以便在满足特定条件之前延迟创建有状态值。当我们需要在创建有状态值之前等待数据或属性加载时，此钩子非常有用，并且可以帮助提高应用程序的性能。通过实际示例，我们将了解如何实现此钩子以及如何在 React 组件中使用它来更新有状态值。",
      "meta": {
        "title": "掌握 React 的 useDelayedState 钩子",
        "description": "学习如何在 React 中使用强大的 useDelayedState 钩子来提升应用程序的性能和用户体验。",
        "keywords": "react, 性能，usedelayedstate, 状态管理，钩子"
      },
      "details": {
        "steps": [
          {
            "title": "React useDelayedState 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Web 服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“Go Live”以在端口 8080 上运行 Web 服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Hook useDelayedState de React",
      "description": "En este laboratorio, aprenderemos a usar el hook useDelayedState en React para retrasar la creación de un valor con estado hasta que se cumpla una cierta condición. Este hook es útil cuando necesitamos esperar a que se carguen datos o props antes de crear un valor con estado, y puede ayudar a mejorar el rendimiento de nuestra aplicación. A través de ejemplos prácticos, veremos cómo se puede implementar este hook y cómo se puede usar para actualizar valores con estado en nuestros componentes React.",
      "meta": {
        "title": "Dominando el hook useDelayedState de React",
        "description": "Aprende a usar el poderoso hook useDelayedState en React para mejorar el rendimiento y la experiencia de usuario de tu aplicación.",
        "keywords": "react, rendimiento, usedelayedstate, gestión de estado, hooks"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useDelayedState de React",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Hook useDelayedState de React",
      "description": "Dans ce laboratoire, nous allons apprendre à utiliser le hook useDelayedState dans React pour retarder la création d'une valeur avec état jusqu'à ce qu'une certaine condition soit remplie. Ce hook est utile lorsque nous avons besoin d'attendre que des données ou des props soient chargées avant de créer une valeur avec état, et peut aider à améliorer les performances de notre application. Par des exemples pratiques, nous verrons comment ce hook peut être implémenté et comment il peut être utilisé pour mettre à jour les valeurs avec état dans nos composants React.",
      "meta": {
        "title": "Maîtriser le hook useDelayedState de React",
        "description": "Découvrez comment utiliser le puissant hook useDelayedState dans React pour améliorer les performances et l'expérience utilisateur de votre application.",
        "keywords": "react, performances, usedelayedstate, gestion d'état, hooks"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useDelayedState de React",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez le statut d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez rafraîchir l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifiez le statut de la modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "React useDelayedState-Hook",
      "description": "In diesem Lab werden wir lernen, wie man den useDelayedState-Hook in React verwendet, um die Erstellung eines zustandsbehafteten Werts bis zu einem bestimmten Zeitpunkt zu verzögern, bis eine bestimmte Bedingung erfüllt ist. Dieser Hook ist nützlich, wenn wir auf Daten oder Props warten müssen, bevor wir einen zustandsbehafteten Wert erstellen, und kann die Leistung unserer Anwendung verbessern. Anhand von praktischen Beispielen werden wir sehen, wie dieser Hook implementiert werden kann und wie er verwendet werden kann, um zustandsbehaftete Werte in unseren React-Komponenten zu aktualisieren.",
      "meta": {
        "title": "Meisterung des React useDelayedState-Hooks",
        "description": "Lernen Sie, wie man den leistungsstarken useDelayedState-Hook in React verwendet, um die Leistung und die Benutzererfahrung Ihrer Anwendung zu verbessern.",
        "keywords": "react, leistung, usedelayedstate, zustandsverwaltung, hooks"
      },
      "details": {
        "steps": [
          {
            "title": "React useDelayedState-Hook",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen des Laufzustands des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie in der unteren rechten Ecke auf 'Go Live', um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzuschauen."
              },
              {
                "name": "Überprüfen des Status der Änderungen in script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Labor abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "React の useDelayedState フック",
      "description": "この実験では、React における useDelayedState フックを使って、特定の条件が満たされるまで状態付き値の作成を遅らせる方法を学びます。このフックは、状態付き値を作成する前にデータや props の読み込みを待つ必要がある場合に便利で、アプリケーションのパフォーマンスを向上させるのに役立ちます。実際のサンプルを通じて、このフックをどのように実装するか、および React コンポーネントで状態付き値を更新するためにどのように使うかを見ていきます。",
      "meta": {
        "title": "React の useDelayedState フックをマスターする",
        "description": "React で強力な useDelayedState フックを使って、アプリケーションのパフォーマンスとユーザーエクスペリエンスを向上させる方法を学びましょう。",
        "keywords": "react, パフォーマンス，usedelayedstate, 状態管理，フック"
      },
      "details": {
        "steps": [
          {
            "title": "React の useDelayedState フック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ウェブサービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして、ポート 8080 でウェブサービスを実行してください。その後、**Web 8080**タブを更新してウェブページをプレビューできます。"
              },
              {
                "name": "script.js の変更状態を確認する",
                "file": "verify1-2.sh",
                "hint": "実験を完了するための手順に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "React хук useDelayedState",
      "description": "В этом лабораторном занятии мы узнаем, как использовать хук useDelayedState в React для задержки создания состояние-значения до тех пор, пока не будут выполнены определенные условия. Этот хук полезен, когда нам нужно подождать, пока загрузятся данные или свойства, прежде чем создать состояние-значение, и может помочь улучшить производительность нашего приложения. С помощью практических примеров мы увидим, как можно реализовать этот хук и как его можно использовать для обновления состояние-значений в наших компонентах React.",
      "meta": {
        "title": "Мастерство в использовании хука useDelayedState React",
        "description": "Изучите, как использовать мощный хук useDelayedState в React, чтобы улучшить производительность и опыт пользования вашего приложения.",
        "keywords": "react, производительность, usedelayedstate, управление состоянием, хуки"
      },
      "details": {
        "steps": [
          {
            "title": "React хук useDelayedState",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить статус работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить статус изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам, чтобы завершить лабораторную работу."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
