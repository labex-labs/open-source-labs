{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React useSessionStorage Hook",
  "description": "In this lab, we will be learning how to use the useSessionStorage hook in React to persist stateful values to sessionStorage. We will learn how to initialize the value lazily, retrieve and store values using Storage.getItem() and Storage.setItem(), and how to update the state variable using the defined function. By the end of this lab, you will have a better understanding of how to use sessionStorage to store and retrieve data within a React application.",
  "meta": {
    "title": "React useSessionStorage Hook: Persist State in sessionStorage",
    "description": "Learn how to use the useSessionStorage hook in React to store and retrieve data in sessionStorage, with lazy initialization and update functions.",
    "keywords": "sessionstorage, react, state management, web development, usesessionstorage"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React useSessionStorage Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "react/event_handling",
          "react/hooks",
          "react/jsx",
          "react/use_state_reducer"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React useSessionStorage 钩子",
      "description": "在本实验中，我们将学习如何在 React 中使用 useSessionStorage 钩子将有状态的值持久化到 sessionStorage。我们将学习如何延迟初始化值，如何使用 Storage.getItem() 和 Storage.setItem() 检索和存储值，以及如何使用定义的函数更新状态变量。在本实验结束时，你将更好地理解如何在 React 应用程序中使用 sessionStorage 来存储和检索数据。",
      "meta": {
        "title": "React useSessionStorage 钩子：在 sessionStorage 中持久化状态",
        "description": "学习如何在 React 中使用 useSessionStorage 钩子在 sessionStorage 中存储和检索数据，包括延迟初始化和更新函数。",
        "keywords": "sessionstorage, react, 状态管理，网页开发，usesessionstorage"
      },
      "details": {
        "steps": [
          {
            "title": "React useSessionStorage 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Web 服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“Go Live”以在端口 8080 上运行 Web 服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Hook useSessionStorage de React",
      "description": "En este laboratorio, aprenderemos a usar el hook useSessionStorage en React para persistir valores con estado en sessionStorage. Aprenderemos a inicializar el valor de manera perezosa, recuperar y almacenar valores usando Storage.getItem() y Storage.setItem(), y cómo actualizar la variable de estado usando la función definida. Al final de este laboratorio, tendrás una mejor comprensión de cómo usar sessionStorage para almacenar y recuperar datos dentro de una aplicación React.",
      "meta": {
        "title": "Hook useSessionStorage de React: Persistir el Estado en sessionStorage",
        "description": "Aprende a usar el hook useSessionStorage en React para almacenar y recuperar datos en sessionStorage, con inicialización perezosa y funciones de actualización.",
        "keywords": "sessionstorage, react, gestión de estado, desarrollo web, usesessionstorage"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useSessionStorage de React",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Hook React useSessionStorage",
      "description": "Dans ce laboratoire, nous allons apprendre à utiliser le hook useSessionStorage dans React pour persister des valeurs d'état dans sessionStorage. Nous apprendrons comment initialiser la valeur de manière paresseuse, récupérer et stocker des valeurs à l'aide de Storage.getItem() et Storage.setItem(), et comment mettre à jour la variable d'état à l'aide de la fonction définie. À la fin de ce laboratoire, vous aurez une meilleure compréhension de la manière d'utiliser sessionStorage pour stocker et récupérer des données dans une application React.",
      "meta": {
        "title": "Hook React useSessionStorage : Persister l'état dans sessionStorage",
        "description": "Apprenez à utiliser le hook useSessionStorage dans React pour stocker et récupérer des données dans sessionStorage, avec une initialisation paresseuse et des fonctions de mise à jour.",
        "keywords": "sessionstorage, react, gestion d'état, développement web, usesessionstorage"
      },
      "details": {
        "steps": [
          {
            "title": "Hook React useSessionStorage",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez le statut d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez actualiser l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifiez l'état de la modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "React useSessionStorage-Hook",
      "description": "In diesem Lab lernen wir, wie wir den useSessionStorage-Hook in React verwenden, um zustandsbezogene Werte in den sessionStorage zu speichern. Wir werden lernen, wie wir den Wert träge initialisieren, Werte mithilfe von Storage.getItem() und Storage.setItem() abrufen und speichern und wie wir die Zustandsvariable mithilfe der definierten Funktion aktualisieren. Am Ende dieses Labs werden Sie ein besseres Verständnis dafür haben, wie Sie den sessionStorage verwenden, um Daten in einer React-Anwendung zu speichern und abzurufen.",
      "meta": {
        "title": "React useSessionStorage-Hook: Zustand in sessionStorage speichern",
        "description": "Lernen Sie, wie Sie den useSessionStorage-Hook in React verwenden, um Daten im sessionStorage zu speichern und abzurufen, mit träger Initialisierung und Aktualisierungsfunktionen.",
        "keywords": "sessionstorage, react, Zustandsverwaltung, Webentwicklung, usesessionstorage"
      },
      "details": {
        "steps": [
          {
            "title": "React useSessionStorage-Hook",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen des Laufzustands des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie in der unteren rechten Ecke auf 'Go Live', um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzuschauen."
              },
              {
                "name": "Überprüfen des Status der Änderungen in script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "React の useSessionStorage フック",
      "description": "この実験では、React における useSessionStorage フックを使って状態値を sessionStorage に永続化する方法を学びます。値を遅延初期化する方法、Storage.getItem() と Storage.setItem() を使って値を取得および保存する方法、および定義された関数を使って状態変数を更新する方法を学びます。この実験が終了するとき、React アプリケーション内で sessionStorage を使ってデータを保存および取得する方法をより深く理解しているでしょう。",
      "meta": {
        "title": "React の useSessionStorage フック：sessionStorage に状態を永続化する",
        "description": "React における useSessionStorage フックを使って sessionStorage にデータを保存および取得する方法を学びましょう。遅延初期化と更新関数付きです。",
        "keywords": "sessionstorage, react, 状態管理，ウェブ開発，usesessionstorage"
      },
      "details": {
        "steps": [
          {
            "title": "React の useSessionStorage フック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ウェブサービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして、ポート 8080 でウェブサービスを実行してください。その後、**Web 8080** タブを更新してウェブページをプレビューできます。"
              },
              {
                "name": "script.js の変更状態を確認する",
                "file": "verify1-2.sh",
                "hint": "実験を完了するための手順に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "React useSessionStorage Hook",
      "description": "В этом практическом занятии мы научимся использовать хук useSessionStorage в React для сохранения значений с состоянием в sessionStorage. Мы узнаем, как инициализировать значение лениво, получать и хранить значения с использованием Storage.getItem() и Storage.setItem(), а также как обновлять переменную состояния с использованием определенной функции. В конце этого практического занятия у вас будет лучше понимание, как использовать sessionStorage для хранения и извлечения данных в React-приложении.",
      "meta": {
        "title": "React useSessionStorage Hook: Сохранять состояние в sessionStorage",
        "description": "Изучите, как использовать хук useSessionStorage в React для хранения и извлечения данных в sessionStorage, с ленивой инициализацией и функциями обновления.",
        "keywords": "sessionstorage, react, управление состоянием, веб-разработка, usesessionstorage"
      },
      "details": {
        "steps": [
          {
            "title": "React useSessionStorage Hook",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить статус работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить статус изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам, чтобы завершить практическое занятие."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "React useSessionStorage 훅",
      "description": "이 랩에서는 React 에서 useSessionStorage 훅을 사용하여 상태 값을 sessionStorage 에 지속적으로 저장하는 방법을 배웁니다. 값을 지연 초기화하고, Storage.getItem() 및 Storage.setItem() 을 사용하여 값을 검색하고 저장하며, 정의된 함수를 사용하여 상태 변수를 업데이트하는 방법을 배웁니다. 이 랩을 마치면 React 애플리케이션 내에서 sessionStorage 를 사용하여 데이터를 저장하고 검색하는 방법에 대한 이해도가 높아질 것입니다.",
      "meta": {
        "title": "React useSessionStorage 훅: sessionStorage 에 상태 지속",
        "description": "React 에서 useSessionStorage 훅을 사용하여 sessionStorage 에 데이터를 저장하고 검색하는 방법을 배우세요. 지연 초기화 및 업데이트 함수를 활용합니다.",
        "keywords": "sessionStorage, 리액트, 상태 관리, 웹 개발, useSessionStorage, 세션 스토리지, 리액트 훅"
      },
      "details": {
        "steps": [
          {
            "title": "React useSessionStorage 훅",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "웹 서비스 실행 상태 확인",
                "file": "verify1-1.sh",
                "hint": "오른쪽 하단의 'Go Live'를 클릭하여 웹 서비스를 포트 8080 에서 실행하세요. 그런 다음 **Web 8080** 탭을 새로 고쳐 웹 페이지를 미리 볼 수 있습니다."
              },
              {
                "name": "script.js 수정 상태 확인",
                "file": "verify1-2.sh",
                "hint": "랩을 완료하려면 단계를 따르세요."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Hook React useSessionStorage",
      "description": "Neste laboratório, aprenderemos como usar o hook useSessionStorage no React para persistir valores de estado no sessionStorage. Aprenderemos como inicializar o valor de forma preguiçosa (lazily), recuperar e armazenar valores usando Storage.getItem() e Storage.setItem(), e como atualizar a variável de estado usando a função definida. Ao final deste laboratório, você terá uma melhor compreensão de como usar o sessionStorage para armazenar e recuperar dados dentro de uma aplicação React.",
      "meta": {
        "title": "Hook React useSessionStorage: Persistir Estado no sessionStorage",
        "description": "Aprenda como usar o hook useSessionStorage no React para armazenar e recuperar dados no sessionStorage, com inicialização preguiçosa (lazy) e funções de atualização.",
        "keywords": "sessionStorage, react, gerenciamento de estado, desenvolvimento web, useSessionStorage, armazenamento de sessão, React.js"
      },
      "details": {
        "steps": [
          {
            "title": "Hook React useSessionStorage",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar o status de execução do serviço web",
                "file": "verify1-1.sh",
                "hint": "Por favor, clique em 'Go Live' no canto inferior direito para executar o serviço web na porta 8080. Em seguida, você pode atualizar a aba **Web 8080** para visualizar a página web."
              },
              {
                "name": "Verificar o status da modificação do script.js",
                "file": "verify1-2.sh",
                "hint": "Por favor, siga os passos para completar o laboratório."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
