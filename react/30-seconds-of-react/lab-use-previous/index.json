{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React usePrevious Hook",
  "description": "In this lab, we will explore the use of the usePrevious hook in React. This custom hook allows us to store the previous state or props of a component, which can be useful in a variety of scenarios. By creating a simple counter component and using the usePrevious hook, we will demonstrate how to implement this functionality in your React projects.",
  "meta": {
    "title": "Mastering the usePrevious Hook in React",
    "description": "Explore the power of the usePrevious hook in React, a versatile tool for managing component state and props.",
    "keywords": "useprevious, component, hook, react, state management"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React usePrevious Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "react/event_handling",
          "react/hooks",
          "react/jsx",
          "react/use_state_reducer"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React usePrevious 钩子",
      "description": "在本实验中，我们将探索在 React 中使用 usePrevious 钩子。这个自定义钩子使我们能够存储组件的上一个状态或属性，这在各种场景中都很有用。通过创建一个简单的计数器组件并使用 usePrevious 钩子，我们将演示如何在你的 React 项目中实现此功能。",
      "meta": {
        "title": "掌握 React 中的 usePrevious 钩子",
        "description": "探索 React 中 usePrevious 钩子的强大功能，这是一个用于管理组件状态和属性的多功能工具。",
        "keywords": "useprevious, 组件，钩子，React, 状态管理"
      },
      "details": {
        "steps": [
          {
            "title": "React usePrevious 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证网络服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“上线”以在端口 8080 上运行网络服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Hook usePrevious de React",
      "description": "En este laboratorio, exploraremos el uso del hook usePrevious en React. Este hook personalizado nos permite almacenar el estado o las propiedades anteriores de un componente, lo que puede resultar útil en una variedad de escenarios. Al crear un componente de contador simple y utilizar el hook usePrevious, demostraremos cómo implementar esta funcionalidad en tus proyectos de React.",
      "meta": {
        "title": "Dominando el hook usePrevious en React",
        "description": "Explora el poder del hook usePrevious en React, una herramienta versátil para el manejo del estado y las propiedades de los componentes.",
        "keywords": "useprevious, componente, hook, react, gestión de estado"
      },
      "details": {
        "steps": [
          {
            "title": "Hook usePrevious de React",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "React usePrevious Hook",
      "description": "Dans ce laboratoire, nous allons explorer l'utilisation du hook usePrevious dans React. Ce hook personnalisé nous permet de stocker l'état ou les props précédents d'un composant, ce qui peut s'avérer utile dans diverses situations. En créant un composant de compteur simple et en utilisant le hook usePrevious, nous allons démontrer comment implémenter cette fonctionnalité dans vos projets React.",
      "meta": {
        "title": "Maîtriser le hook usePrevious dans React",
        "description": "Explorez le pouvoir du hook usePrevious dans React, un outil polyvalent pour gérer l'état et les props des composants.",
        "keywords": "useprevious, composant, hook, react, gestion d'état"
      },
      "details": {
        "steps": [
          {
            "title": "React usePrevious Hook",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier le statut d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez rafraîchir l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifier le statut de la modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "React usePrevious-Hook",
      "description": "In diesem Lab werden wir die Verwendung des usePrevious-Hooks in React untersuchen. Dieser benutzerdefinierte Hook ermöglicht es uns, den vorherigen Zustand oder die vorherigen Props eines Components zu speichern, was in einer Vielzahl von Szenarien nützlich sein kann. Indem wir einen einfachen Zähler-Component erstellen und den usePrevious-Hook verwenden, werden wir demonstrieren, wie diese Funktionalität in Ihren React-Projekten implementiert werden kann.",
      "meta": {
        "title": "Das usePrevious-Hook in React beherrschen",
        "description": "Entdecken Sie die Macht des usePrevious-Hooks in React, ein vielseitiges Tool zur Verwaltung von Component-Zustand und -Props.",
        "keywords": "useprevious, Component, Hook, React, Zustandsverwaltung"
      },
      "details": {
        "steps": [
          {
            "title": "React usePrevious-Hook",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen des Laufzustands des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie auf 'Go Live' in der unteren rechten Ecke, um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzuschauen."
              },
              {
                "name": "Überprüfen des Status der Änderungen an script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "React の usePrevious フック",
      "description": "この実験では、React における usePrevious フックの使用方法を検討します。このカスタムフックを使用することで、コンポーネントの前の状態や props を保存でき、さまざまなシナリオで役立ちます。単純なカウンターコンポーネントを作成して usePrevious フックを使用することで、React プロジェクトでこの機能を実装する方法を示します。",
      "meta": {
        "title": "React における usePrevious フックのマスター",
        "description": "React における usePrevious フックの力を探求しましょう。コンポーネントの状態と props を管理するための万能なツールです。",
        "keywords": "useprevious, コンポーネント，フック，React, 状態管理"
      },
      "details": {
        "steps": [
          {
            "title": "React の usePrevious フック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ウェブサービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして、ポート 8080 でウェブサービスを実行してください。その後、**Web 8080** タブを更新して、ウェブページをプレビューできます。"
              },
              {
                "name": "script.js の変更状態を確認する",
                "file": "verify1-2.sh",
                "hint": "実験を完了するための手順に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "React хук usePrevious",
      "description": "В этом лабораторном занятии мы будем изучать использование хука usePrevious в React. Этот пользовательский хук позволяет нам хранить предыдущее состояние или свойства компонента, что может быть полезно в различных сценариях. Создав простой компонент счетчика и используя хук usePrevious, мы покажем, как реализовать эту функциональность в ваших проектах React.",
      "meta": {
        "title": "Мастерство в использовании хука usePrevious в React",
        "description": "Исследуйте мощь хука usePrevious в React, универсального инструмента для управления состоянием и свойствами компонента.",
        "keywords": "useprevious, компонент, хук, react, управление состоянием"
      },
      "details": {
        "steps": [
          {
            "title": "React хук usePrevious",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить статус работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить статус изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам, чтобы завершить лабораторную работу."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
