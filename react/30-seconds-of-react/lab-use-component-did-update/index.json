{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React useComponentDidUpdate Hook",
  "description": "In this lab, we will learn about the useComponentDidUpdate hook in React. This hook allows us to execute a callback immediately after a component is updated, similar to the componentDidUpdate() lifecycle method of class components. We will explore how to use this hook to track changes to specific state variables and run custom logic accordingly.",
  "meta": {
    "title": "React useComponentDidUpdate Hook: Mastering Component Updates",
    "description": "Explore the React useComponentDidUpdate hook and learn how to execute custom logic when your component updates.",
    "keywords": "component updates, usecomponentdidupdate, react, web development, hooks"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React useComponentDidUpdate Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "react/event_handling",
          "react/hooks",
          "react/jsx",
          "react/use_state_reducer"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React 的 useComponentDidUpdate 钩子",
      "description": "在本实验中，我们将学习 React 中的 useComponentDidUpdate 钩子。这个钩子允许我们在组件更新后立即执行一个回调函数，类似于类组件的 componentDidUpdate() 生命周期方法。我们将探讨如何使用这个钩子来跟踪特定状态变量的变化，并相应地运行自定义逻辑。",
      "meta": {
        "title": "React 的 useComponentDidUpdate 钩子：掌握组件更新",
        "description": "探索 React 的 useComponentDidUpdate 钩子，并了解如何在组件更新时执行自定义逻辑。",
        "keywords": "组件更新，usecomponentdidupdate, React, 网页开发，钩子"
      },
      "details": {
        "steps": [
          {
            "title": "React 的 useComponentDidUpdate 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证网络服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“Go Live”以在端口 8080 上运行网络服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改的状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "React useComponentDidUpdate Hook",
      "description": "En este laboratorio, aprenderemos sobre el hook useComponentDidUpdate en React. Este hook nos permite ejecutar una devolución de llamada inmediatamente después de que un componente se actualiza, similar al método de ciclo de vida componentDidUpdate() de los componentes de clase. Exploraremos cómo usar este hook para rastrear cambios en variables de estado específicas y ejecutar lógica personalizada en consecuencia.",
      "meta": {
        "title": "React useComponentDidUpdate Hook: Dominando las Actualizaciones de Componentes",
        "description": "Explora el hook React useComponentDidUpdate y aprende cómo ejecutar lógica personalizada cuando tu componente se actualiza.",
        "keywords": "actualizaciones de componentes, usecomponentdidupdate, react, desarrollo web, hooks"
      },
      "details": {
        "steps": [
          {
            "title": "React useComponentDidUpdate Hook",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Hook useComponentDidUpdate de React",
      "description": "Dans ce laboratoire, nous allons apprendre à utiliser le hook useComponentDidUpdate dans React. Ce hook nous permet d'exécuter une fonction de rappel immédiatement après qu'un composant a été mis à jour, de manière similaire à la méthode de cycle de vie componentDidUpdate() des composants de classe. Nous allons explorer comment utiliser ce hook pour suivre les modifications de variables d'état spécifiques et exécuter une logique personnalisée en conséquence.",
      "meta": {
        "title": "Hook useComponentDidUpdate de React : Maîtriser les mises à jour de composants",
        "description": "Explorez le hook useComponentDidUpdate de React et apprenez à exécuter une logique personnalisée lorsque votre composant est mis à jour.",
        "keywords": "mises à jour de composants, usecomponentdidupdate, react, développement web, hooks"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useComponentDidUpdate de React",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez l'état d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez actualiser l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifiez l'état de la modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "React useComponentDidUpdate Hook",
      "description": "In diesem Lab werden wir uns mit dem Hook useComponentDidUpdate in React befassen. Dieser Hook ermöglicht es uns, einen Callback sofort nach dem Aktualisieren eines Komponenten auszuführen, ähnlich wie die Lebenszyklusmethode componentDidUpdate() von Klassenkomponenten. Wir werden untersuchen, wie wir diesen Hook verwenden, um Änderungen an bestimmten Zustandsvariablen zu verfolgen und entsprechend benutzerdefinierte Logik auszuführen.",
      "meta": {
        "title": "React useComponentDidUpdate Hook: Mastering Component Updates",
        "description": "Entdecken Sie den React useComponentDidUpdate Hook und lernen Sie, wie Sie benutzerdefinierte Logik ausführen, wenn Ihre Komponente aktualisiert wird.",
        "keywords": "Komponentenupdates, usecomponentdidupdate, react, Webentwicklung, Hooks"
      },
      "details": {
        "steps": [
          {
            "title": "React useComponentDidUpdate Hook",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren des Laufzustands des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie auf 'Go Live' in der unteren rechten Ecke, um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzuschauen."
              },
              {
                "name": "Verifizieren des Status der Änderungen an script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "React の useComponentDidUpdate フック",
      "description": "この実験では、React の useComponentDidUpdate フックについて学びます。このフックを使うと、コンポーネントが更新された直後にコールバックを実行できます。これは、クラスコンポーネントの componentDidUpdate() ライフサイクルメソッドに似ています。このフックを使って特定の状態変数の変化を追跡し、それに応じてカスタムロジックを実行する方法を探ります。",
      "meta": {
        "title": "React の useComponentDidUpdate フック：コンポーネント更新のマスター",
        "description": "React の useComponentDidUpdate フックを探り、コンポーネントが更新されたときにカスタムロジックを実行する方法を学びましょう。",
        "keywords": "コンポーネント更新，usecomponentdidupdate, React, ウェブ開発，フック"
      },
      "details": {
        "steps": [
          {
            "title": "React の useComponentDidUpdate フック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ウェブサービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして、ポート 8080 でウェブサービスを実行してください。その後、**Web 8080** タブを更新してウェブページをプレビューできます。"
              },
              {
                "name": "script.js の変更状態を確認する",
                "file": "verify1-2.sh",
                "hint": "実験を完了する手順に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "React useComponentDidUpdate Hook",
      "description": "В этом лабораторном занятии мы узнаем о хуке useComponentDidUpdate в React. Этот хук позволяет нам выполнять обратный вызов сразу после обновления компонента, аналогично методу жизненного цикла componentDidUpdate() классовых компонентов. Мы исследуем, как использовать этот хук для отслеживания изменений в конкретных переменных состояния и запуска соответствующей пользовательской логики.",
      "meta": {
        "title": "React useComponentDidUpdate Hook: Mastering Component Updates",
        "description": "Explore the React useComponentDidUpdate hook and learn how to execute custom logic when your component updates.",
        "keywords": "component updates, usecomponentdidupdate, react, web development, hooks"
      },
      "details": {
        "steps": [
          {
            "title": "React useComponentDidUpdate Hook",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить статус работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить статус изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам, чтобы завершить лабораторную работу."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
