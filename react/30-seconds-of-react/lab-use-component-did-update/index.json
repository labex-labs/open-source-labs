{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React useComponentDidUpdate Hook",
  "description": "In this lab, we will learn about the useComponentDidUpdate hook in React. This hook allows us to execute a callback immediately after a component is updated, similar to the componentDidUpdate() lifecycle method of class components. We will explore how to use this hook to track changes to specific state variables and run custom logic accordingly.",
  "meta": {
    "title": "React useComponentDidUpdate Hook: Mastering Component Updates",
    "description": "Explore the React useComponentDidUpdate hook and learn how to execute custom logic when your component updates.",
    "keywords": "component updates, usecomponentdidupdate, react, web development, hooks"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React useComponentDidUpdate Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "react/event_handling",
          "react/hooks",
          "react/jsx",
          "react/use_state_reducer"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React 的 useComponentDidUpdate 钩子",
      "description": "在本实验中，我们将学习 React 中的 useComponentDidUpdate 钩子。这个钩子允许我们在组件更新后立即执行一个回调函数，类似于类组件的 componentDidUpdate() 生命周期方法。我们将探讨如何使用这个钩子来跟踪特定状态变量的变化，并相应地运行自定义逻辑。",
      "meta": {
        "title": "React 的 useComponentDidUpdate 钩子：掌握组件更新",
        "description": "探索 React 的 useComponentDidUpdate 钩子，并了解如何在组件更新时执行自定义逻辑。",
        "keywords": "组件更新, usecomponentdidupdate, React, 网页开发, 钩子"
      },
      "details": {
        "steps": [
          {
            "title": "React 的 useComponentDidUpdate 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证网络服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“Go Live”以在端口 8080 上运行网络服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改的状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
