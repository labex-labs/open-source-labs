{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Reusable React Toggle Component",
  "description": "In this lab, we will explore how to implement a toggle component using React. The toggle component is a common UI element used to switch between two states. We will use the useState() hook to manage the component's state and apply different CSS classes based on its state. By the end of this lab, you will have a better understanding of how to create reusable UI components in React.",
  "meta": {
    "title": "React Toggle Component | Hands-on Programming Tutorial",
    "description": "Learn how to implement a reusable toggle component using React and the useState() hook. Gain practical experience in building interactive UI elements.",
    "keywords": "React, Toggle Component, UI Development, useState, Interactive UI, Programming Tutorial"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Toggle",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of style.css modification",
            "file": "verify1-3.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "react/conditional_render",
          "react/event_handling",
          "react/hooks",
          "react/jsx",
          "react/use_state_reducer"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "style.css",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "可复用的 React 切换组件",
      "description": "在本实验中，我们将探索如何使用 React 实现一个切换组件。切换组件是一种常见的用户界面 (UI) 元素，用于在两种状态之间进行切换。我们将使用 `useState()` 钩子来管理组件的状态，并根据其状态应用不同的 CSS 类。在本实验结束时，你将更好地理解如何在 React 中创建可复用的 UI 组件。",
      "meta": {
        "title": "React 切换组件 | 实践编程教程",
        "description": "学习如何使用 React 和 `useState()` 钩子实现一个可复用的切换组件。在构建交互式 UI 元素方面获得实践经验。",
        "keywords": "React, 切换组件，UI 开发，useState, 交互式 UI, 编程教程"
      },
      "details": {
        "steps": [
          {
            "title": "切换组件",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证网络服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“上线”以在端口 8080 上运行网络服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              },
              {
                "name": "验证 style.css 修改状态",
                "file": "verify1-3.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Componente de conmutación (Toggle) reutilizable en React",
      "description": "En este laboratorio, exploraremos cómo implementar un componente de conmutación utilizando React. El componente de conmutación es un elemento de interfaz de usuario común que se utiliza para alternar entre dos estados. Utilizaremos el hook useState() para administrar el estado del componente y aplicar diferentes clases CSS según su estado. Al final de este laboratorio, tendrás una mejor comprensión de cómo crear componentes de interfaz de usuario reutilizables en React.",
      "meta": {
        "title": "Componente de conmutación (Toggle) en React | Tutorial práctico de programación",
        "description": "Aprende cómo implementar un componente de conmutación reutilizable utilizando React y el hook useState(). Adquiere experiencia práctica en la construcción de elementos de interfaz de usuario interactivos.",
        "keywords": "React, Componente de conmutación (Toggle), Desarrollo de interfaz de usuario, useState, Interfaz de usuario interactiva, Tutorial de programación"
      },
      "details": {
        "steps": [
          {
            "title": "Conmutación (Toggle)",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              },
              {
                "name": "Verificar el estado de la modificación de style.css",
                "file": "verify1-3.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Composant bascule réutilisable React",
      "description": "Dans ce laboratoire, nous allons explorer comment implémenter un composant bascule à l'aide de React. Le composant bascule est un élément d'interface utilisateur courant utilisé pour basculer entre deux états. Nous utiliserons le hook useState() pour gérer l'état du composant et appliquer différentes classes CSS en fonction de son état. À la fin de ce laboratoire, vous aurez une meilleure compréhension de la manière de créer des composants d'interface utilisateur réutilisables dans React.",
      "meta": {
        "title": "Composant bascule React | Tutoriel de programmation pratique",
        "description": "Découvrez comment implémenter un composant bascule réutilisable à l'aide de React et du hook useState(). Gagnez de l'expérience pratique dans la construction d'éléments d'interface utilisateur interactifs.",
        "keywords": "React, Composant bascule, Développement d'interface utilisateur, useState, Interface utilisateur interactive, Tutoriel de programmation"
      },
      "details": {
        "steps": [
          {
            "title": "Bascule",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez le statut d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez actualiser l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifiez le statut de la modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              },
              {
                "name": "Vérifiez le statut de la modification de style.css",
                "file": "verify1-3.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Wiederverwendbare React-Schaltflächenkomponente",
      "description": "In diesem Lab werden wir untersuchen, wie man eine Schaltflächenkomponente mit React implementiert. Die Schaltflächenkomponente ist ein übliches Benutzeroberflächenelement, das zum Umschalten zwischen zwei Zuständen verwendet wird. Wir werden den useState()-Hook verwenden, um den Zustand der Komponente zu verwalten und unterschiedliche CSS-Klassen basierend auf seinem Zustand anzuwenden. Am Ende dieses Labs werden Sie ein besseres Verständnis dafür haben, wie man wiederverwendbare Benutzeroberflächenkomponenten in React erstellt.",
      "meta": {
        "title": "React-Schaltflächenkomponente | Praktische Programmierungstutorial",
        "description": "Lernen Sie, wie man eine wiederverwendbare Schaltflächenkomponente mit React und dem useState()-Hook implementiert. Erlangen Sie praktische Erfahrungen beim Erstellen interaktiver Benutzeroberflächenelemente.",
        "keywords": "React, Schaltflächenkomponente, UI-Entwicklung, useState, Interaktive Benutzeroberfläche, Programmierungstutorial"
      },
      "details": {
        "steps": [
          {
            "title": "Schaltfläche",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen des Laufzustands des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie auf 'Go Live' in der unteren rechten Ecke, um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzuschauen."
              },
              {
                "name": "Überprüfen des Status der Änderungen in script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Lab abzuschließen."
              },
              {
                "name": "Überprüfen des Status der Änderungen in style.css",
                "file": "verify1-3.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "再利用可能な React のトグルコンポーネント",
      "description": "この実験では、React を使ってトグルコンポーネントを実装する方法を探ります。トグルコンポーネントは、2 つの状態間で切り替えるために使用される一般的な UI 要素です。コンポーネントの状態を管理し、その状態に基づいて異なる CSS クラスを適用するために、useState() フックを使用します。この実験が終わるとき、React で再利用可能な UI コンポーネントを作成する方法をより深く理解しているでしょう。",
      "meta": {
        "title": "React のトグルコンポーネント | 実践的なプログラミングチュートリアル",
        "description": "React と useState() フックを使って再利用可能なトグルコンポーネントを実装する方法を学びましょう。インタラクティブな UI 要素を構築する実践的な経験を得ましょう。",
        "keywords": "React, トグルコンポーネント，UI 開発，useState, インタラクティブな UI, プログラミングチュートリアル"
      },
      "details": {
        "steps": [
          {
            "title": "トグル",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ウェブサービスの実行状況を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして、ポート 8080 でウェブサービスを実行してください。その後、**Web 8080**タブを更新してウェブページをプレビューできます。"
              },
              {
                "name": "script.js の変更状況を確認する",
                "file": "verify1-2.sh",
                "hint": "実験を完了するための手順に従ってください。"
              },
              {
                "name": "style.css の変更状況を確認する",
                "file": "verify1-3.sh",
                "hint": "実験を完了するための手順に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Повторно используемый компонент переключателя React",
      "description": "В этом практическом занятии мы изучим, как реализовать компонент переключателя с использованием React. Компонент переключателя - это распространенный элемент пользовательского интерфейса, используемый для переключения между двумя состояниями. Мы будем использовать хук useState() для управления состоянием компонента и применять разные CSS-классы в зависимости от его состояния. В конце этого практического занятия вы будете лучше понимать, как создавать повторно используемые компоненты пользовательского интерфейса в React.",
      "meta": {
        "title": "Компонент переключателя React | Практическое руководство по программированию",
        "description": "Изучите, как реализовать повторно используемый компонент переключателя с использованием React и хука useState(). Получите практический опыт в создании интерактивных элементов пользовательского интерфейса.",
        "keywords": "React, Компонент переключателя, Разработка пользовательского интерфейса, useState, Интерактивный пользовательский интерфейс, Руководство по программированию"
      },
      "details": {
        "steps": [
          {
            "title": "Переключатель",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить статус работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить статус изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам, чтобы завершить практическое занятие."
              },
              {
                "name": "Проверить статус изменения style.css",
                "file": "verify1-3.sh",
                "hint": "Пожалуйста, следуйте шагам, чтобы завершить практическое занятие."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
