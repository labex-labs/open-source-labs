{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React useInterval Hook",
  "description": "In this lab, we will learn how to implement the setInterval() function in a declarative way using the useInterval custom hook in React. This hook helps us to set up intervals for performing tasks repeatedly at a specified time interval. By the end of this lab, you will have a better understanding of how to use the useInterval hook to create timers, animations, and other time-based features in your React applications.",
  "meta": {
    "title": "Mastering React's useInterval Hook",
    "description": "Learn how to implement setInterval() in a declarative way using the useInterval custom hook in React.",
    "keywords": "timer, hook, react, setinterval, useinterval"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React useInterval Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": ["react/hooks", "react/jsx", "react/use_state_reducer"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React useInterval 钩子",
      "description": "在本实验中，我们将学习如何使用 React 中的 useInterval 自定义钩子以声明式方式实现 setInterval() 函数。此钩子帮助我们设置时间间隔，以便在指定的时间间隔内重复执行任务。在本实验结束时，你将更好地理解如何使用 useInterval 钩子在 React 应用程序中创建定时器、动画和其他基于时间的功能。",
      "meta": {
        "title": "掌握 React 的 useInterval 钩子",
        "description": "学习如何使用 React 中的 useInterval 自定义钩子以声明式方式实现 setInterval()。",
        "keywords": "定时器，钩子，React, setinterval, useinterval"
      },
      "details": {
        "steps": [
          {
            "title": "React useInterval 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Web 服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“Go Live”以在端口 8080 上运行 Web 服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Hook useInterval de React",
      "description": "En este laboratorio, aprenderemos a implementar la función setInterval() de manera declarativa utilizando el hook personalizado useInterval en React. Este hook nos ayuda a configurar intervalos para realizar tareas repetidamente en un intervalo de tiempo especificado. Al final de este laboratorio, tendrás una mejor comprensión de cómo utilizar el hook useInterval para crear temporizadores, animaciones y otras características basadas en el tiempo en tus aplicaciones React.",
      "meta": {
        "title": "Dominando el Hook useInterval de React",
        "description": "Aprende a implementar setInterval() de manera declarativa utilizando el hook personalizado useInterval en React.",
        "keywords": "temporizador, hook, react, setinterval, useinterval"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useInterval de React",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "React useInterval Hook",
      "description": "Dans ce laboratoire, nous allons apprendre à implémenter la fonction setInterval() de manière déclarative en utilisant le hook personnalisé useInterval dans React. Ce hook nous aide à configurer des intervalles pour exécuter des tâches de manière répétée à un intervalle de temps spécifié. À la fin de ce laboratoire, vous aurez une meilleure compréhension de la manière d'utiliser le hook useInterval pour créer des temporisateurs, des animations et autres fonctionnalités basées sur le temps dans vos applications React.",
      "meta": {
        "title": "Maîtriser le hook useInterval de React",
        "description": "Apprenez à implémenter setInterval() de manière déclarative en utilisant le hook personnalisé useInterval dans React.",
        "keywords": "temporisateur, hook, react, setinterval, useinterval"
      },
      "details": {
        "steps": [
          {
            "title": "React useInterval Hook",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier le statut d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez actualiser l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifier le statut de la modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "React useInterval-Hook",
      "description": "In diesem Lab werden wir lernen, wie wir die setInterval()-Funktion auf deklarative Weise mithilfe des benutzerdefinierten Hooks useInterval in React implementieren. Dieser Hook hilft uns, Intervalle einzurichten, um Aufgaben wiederholt in einem bestimmten Zeitintervall auszuführen. Am Ende dieses Labs werden Sie ein besseres Verständnis dafür haben, wie Sie den useInterval-Hook verwenden, um Timer, Animationen und andere zeitbasierte Funktionen in Ihren React-Anwendungen zu erstellen.",
      "meta": {
        "title": "Meisterhaftigkeit mit React's useInterval-Hook",
        "description": "Lernen Sie, wie Sie setInterval() auf deklarative Weise mithilfe des benutzerdefinierten Hooks useInterval in React implementieren.",
        "keywords": "Timer, Hook, React, setinterval, useinterval"
      },
      "details": {
        "steps": [
          {
            "title": "React useInterval-Hook",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren des Laufzustands des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie auf 'Go Live' in der unteren rechten Ecke, um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzuschauen."
              },
              {
                "name": "Verifizieren des Status der Änderungen in script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "React の useInterval フック",
      "description": "この実験では、React の useInterval カスタムフックを使って宣言的な方法で setInterval() 関数を実装する方法を学びます。このフックは、指定された时间间隔で缲り返してタスクを実行するためのインターバルを设定するのに役立ちます。この実験が终了するとき、React アプリケーションでタイマー、アニメーション、その他の时间ベースの机能を作成するために useInterval フックをどのように使うかをより深く理解しているでしょう。",
      "meta": {
        "title": "React の useInterval フックをマスターする",
        "description": "React の useInterval カスタムフックを使って宣言的な方法で setInterval() を実装する方法を学ぶ。",
        "keywords": "タイマー, フック，React, setinterval, useinterval"
      },
      "details": {
        "steps": [
          {
            "title": "React の useInterval フック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ウェブサービスの実行状态を确认する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして、ポート 8080 でウェブサービスを実行してください。その後、**Web 8080** タブを更新してウェブページをプレビューできます。"
              },
              {
                "name": "script.js の変更状态を确认する",
                "file": "verify1-2.sh",
                "hint": "実験を完了するための手顺に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "React хук useInterval",
      "description": "В этом практическом занятии мы научимся реализовывать функцию setInterval() декларативным способом с использованием пользовательского хука useInterval в React. Этот хук помогает нам настраивать интервалы для выполнения задач повторно с заданным интервалом времени. В конце этого практического занятия вы будете лучше понимать, как использовать хук useInterval для создания таймеров, анимаций и других функций, основанных на времени, в своих React-приложениях.",
      "meta": {
        "title": "Мастерство в использовании хука useInterval React",
        "description": "Изучите, как реализовать setInterval() декларативным способом с использованием пользовательского хука useInterval в React.",
        "keywords": "таймер, хук, react, setinterval, useinterval"
      },
      "details": {
        "steps": [
          {
            "title": "React хук useInterval",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить статус работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить статус изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам для завершения практического занятия."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "React useInterval 훅",
      "description": "이 랩에서는 React 에서 useInterval 커스텀 훅을 사용하여 `setInterval()` 함수를 선언적인 방식으로 구현하는 방법을 배웁니다. 이 훅은 지정된 시간 간격으로 작업을 반복적으로 수행하기 위한 간격을 설정하는 데 도움이 됩니다. 이 랩을 마치면 useInterval 훅을 사용하여 React 애플리케이션에서 타이머, 애니메이션 및 기타 시간 기반 기능을 만드는 방법에 대한 이해도가 높아질 것입니다.",
      "meta": {
        "title": "React useInterval 훅 마스터하기 - 타이머, 애니메이션 구현",
        "description": "React 에서 useInterval 커스텀 훅을 사용하여 `setInterval()` 을 선언적으로 구현하는 방법을 알아보세요. React 타이머, 애니메이션 쉽게 만들기!",
        "keywords": "타이머, 훅, react, setinterval, useinterval, 리액트 타이머, 리액트 애니메이션"
      },
      "details": {
        "steps": [
          {
            "title": "React useInterval 훅",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "웹 서비스 실행 상태 확인",
                "file": "verify1-1.sh",
                "hint": "오른쪽 하단의 'Go Live'를 클릭하여 웹 서비스를 포트 8080 에서 실행하세요. 그런 다음 **Web 8080** 탭을 새로 고쳐 웹 페이지를 미리 볼 수 있습니다."
              },
              {
                "name": "script.js 수정 상태 확인",
                "file": "verify1-2.sh",
                "hint": "랩을 완료하려면 단계를 따르세요."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "React useInterval Hook",
      "description": "Neste laboratório, aprenderemos como implementar a função setInterval() de forma declarativa usando o hook customizado useInterval no React. Este hook nos ajuda a configurar intervalos para executar tarefas repetidamente em um intervalo de tempo especificado. Ao final deste laboratório, você terá uma melhor compreensão de como usar o hook useInterval para criar timers, animações e outros recursos baseados em tempo em suas aplicações React.",
      "meta": {
        "title": "Dominando o useInterval Hook do React",
        "description": "Aprenda como implementar setInterval() de forma declarativa usando o hook customizado useInterval no React. Crie timers e animações com facilidade.",
        "keywords": "timer, hook, react, setinterval, useinterval, temporizador react, animação react, intervalos react"
      },
      "details": {
        "steps": [
          {
            "title": "React useInterval Hook",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar o status de execução do serviço web",
                "file": "verify1-1.sh",
                "hint": "Por favor, clique em 'Go Live' no canto inferior direito para executar o serviço web na porta 8080. Em seguida, você pode atualizar a aba **Web 8080** para visualizar a página web."
              },
              {
                "name": "Verificar o status da modificação do script.js",
                "file": "verify1-2.sh",
                "hint": "Por favor, siga os passos para completar o laboratório."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
