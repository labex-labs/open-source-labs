{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React useEffectOnce Hook",
  "description": "In this lab, we will learn how to use the useEffectOnce hook in React to run a callback function at most once when a certain condition becomes true. This can be useful for situations where we want to execute a specific action only once, such as when a component mounts or when a button is clicked. By the end of this lab, you will have a better understanding of how to implement this hook in your React applications.",
  "meta": {
    "title": "Mastering the useEffectOnce Hook in React",
    "description": "Learn how to use the powerful useEffectOnce hook in React to run a callback function only once, ensuring efficient and reliable component lifecycle management.",
    "keywords": "useeffectonce, react, component lifecycle, web development, hooks"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React useEffectOnce Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "react/event_handling",
          "react/hooks",
          "react/jsx",
          "react/use_state_reducer"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React useEffectOnce 钩子",
      "description": "在本实验中，我们将学习如何在 React 中使用 useEffectOnce 钩子，以便在特定条件变为真时最多运行一次回调函数。这在我们只想执行一次特定操作的情况下非常有用，例如当组件挂载时或按钮被点击时。完成本实验后，你将更好地理解如何在你的 React 应用程序中实现这个钩子。",
      "meta": {
        "title": "掌握 React 中的 useEffectOnce 钩子",
        "description": "学习如何在 React 中使用强大的 useEffectOnce 钩子仅运行一次回调函数，确保高效且可靠的组件生命周期管理。",
        "keywords": "useeffectonce, React, 组件生命周期，网页开发，钩子"
      },
      "details": {
        "steps": [
          {
            "title": "React useEffectOnce 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证网络服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“Go Live”在端口 8080 上运行网络服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Hook useEffectOnce de React",
      "description": "En este laboratorio, aprenderemos a usar el hook useEffectOnce en React para ejecutar una función de devolución de llamada como máximo una vez cuando cierta condición se vuelva verdadera. Esto puede ser útil en situaciones donde queremos ejecutar una acción específica solo una vez, como cuando un componente se monta o cuando se hace clic en un botón. Al final de este laboratorio, tendrás una mejor comprensión de cómo implementar este hook en tus aplicaciones React.",
      "meta": {
        "title": "Dominando el Hook useEffectOnce en React",
        "description": "Aprende a usar el poderoso hook useEffectOnce en React para ejecutar una función de devolución de llamada solo una vez, lo que garantiza una gestión eficiente y confiable del ciclo de vida de los componentes.",
        "keywords": "useeffectonce, react, ciclo de vida de componentes, desarrollo web, hooks"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useEffectOnce de React",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Hook useEffectOnce de React",
      "description": "Dans ce laboratoire, nous allons apprendre à utiliser le hook useEffectOnce dans React pour exécuter une fonction de rappel au plus une fois lorsqu'une certaine condition devient vraie. Cela peut être utile dans des situations où nous voulons exécuter une action spécifique une seule fois, par exemple lorsqu'un composant est monté ou lorsqu'un bouton est cliqué. À la fin de ce laboratoire, vous aurez une meilleure compréhension de la manière d'implementer ce hook dans vos applications React.",
      "meta": {
        "title": "Maîtriser le hook useEffectOnce de React",
        "description": "Découvrez comment utiliser le puissant hook useEffectOnce de React pour exécuter une fonction de rappel une seule fois, garantissant une gestion efficace et fiable du cycle de vie des composants.",
        "keywords": "useeffectonce, react, cycle de vie des composants, développement web, hooks"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useEffectOnce de React",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier le statut d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez actualiser l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifier le statut de modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "React useEffectOnce-Hook",
      "description": "In diesem Lab werden wir lernen, wie man den useEffectOnce-Hook in React verwendet, um eine Callback-Funktion höchstens einmal auszuführen, wenn eine bestimmte Bedingung wahr wird. Dies kann nützlich sein, wenn wir eine bestimmte Aktion nur einmal ausführen möchten, z. B. wenn ein Komponent gehängt wird oder wenn ein Button geklickt wird. Am Ende dieses Labs werden Sie einen besseren Überblick darüber haben, wie man diesen Hook in Ihren React-Anwendungen implementiert.",
      "meta": {
        "title": "Meisterhaftigkeit mit dem useEffectOnce-Hook in React",
        "description": "Lernen Sie, wie man den leistungsstarken useEffectOnce-Hook in React verwendet, um eine Callback-Funktion nur einmal auszuführen und so eine effiziente und zuverlässige Verwaltung des Komponentenlebenszyklus sicherzustellen.",
        "keywords": "useeffectonce, react, Komponentenlebenszyklus, Webentwicklung, Hooks"
      },
      "details": {
        "steps": [
          {
            "title": "React useEffectOnce-Hook",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen des Ausführungsstatus des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie in der unteren rechten Ecke auf 'Go Live', um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzuschauen."
              },
              {
                "name": "Überprüfen des Status der Änderungen in script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "React の useEffectOnce フック",
      "description": "この実験では、React において特定の条件が真になったときにコールバック関数を最大 1 回だけ実行するために useEffectOnce フックをどのように使用するかを学びます。これは、コンポーネントがマウントされるときやボタンがクリックされるときなど、特定のアクションを 1 回だけ実行したい場合に役立ちます。この実験が終了するとき、React アプリケーションでこのフックをどのように実装するかについて、より深い理解を得ることができます。",
      "meta": {
        "title": "React における useEffectOnce フックのマスター",
        "description": "React で強力な useEffectOnce フックを使ってコールバック関数を 1 回だけ実行する方法を学び、効率的で信頼性の高いコンポーネントのライフサイクル管理を行いましょう。",
        "keywords": "useeffectonce, react, コンポーネントライフサイクル，ウェブ開発，フック"
      },
      "details": {
        "steps": [
          {
            "title": "React の useEffectOnce フック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ウェブサービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして、ポート 8080 でウェブサービスを実行してください。その後、**Web 8080**タブを更新して、ウェブページをプレビューできます。"
              },
              {
                "name": "script.js の変更状態を確認する",
                "file": "verify1-2.sh",
                "hint": "実験を完了するための手順に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "React useEffectOnce Хук",
      "description": "В этом практическом занятии мы научимся использовать хук useEffectOnce в React для выполнения обратного вызова функцией максимум один раз, когда определенное условие становится истинным. Это может быть полезно в ситуациях, когда мы хотим выполнить конкретное действие только один раз, например, когда компонент монтируется или когда кнопка нажата. В конце этого практического занятия вы будете лучше понимать, как реализовать этот хук в своих React-приложениях.",
      "meta": {
        "title": "Осваиваем хук useEffectOnce в React",
        "description": "Изучите, как использовать мощный хук useEffectOnce в React для выполнения обратного вызова функцией только один раз, обеспечивая эффективное и надежное управление жизненным циклом компонента.",
        "keywords": "useeffectonce, react, жизненный цикл компонента, веб-разработка, хуки"
      },
      "details": {
        "steps": [
          {
            "title": "React useEffectOnce Хук",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить статус работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить статус изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам для завершения практического занятия."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "React useEffectOnce 훅",
      "description": "이 랩에서는 특정 조건이 참이 될 때 콜백 함수를 최대 한 번 실행하기 위해 React 에서 useEffectOnce 훅을 사용하는 방법을 배웁니다. 이는 컴포넌트가 마운트되거나 버튼이 클릭되는 경우와 같이 특정 작업을 한 번만 실행하려는 상황에 유용할 수 있습니다. 이 랩을 마치면 React 애플리케이션에서 이 훅을 구현하는 방법에 대한 더 나은 이해를 얻게 될 것입니다.",
      "meta": {
        "title": "React 에서 useEffectOnce 훅 마스터하기",
        "description": "효율적이고 안정적인 컴포넌트 라이프사이클 관리를 보장하면서 콜백 함수를 한 번만 실행하기 위해 React 에서 강력한 useEffectOnce 훅을 사용하는 방법을 알아보세요.",
        "keywords": "useeffectonce, react, 컴포넌트 라이프사이클, 웹 개발, 훅"
      },
      "details": {
        "steps": [
          {
            "title": "React useEffectOnce 훅",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "웹 서비스 실행 상태 확인",
                "file": "verify1-1.sh",
                "hint": "오른쪽 하단의 'Go Live'를 클릭하여 웹 서비스를 포트 8080 에서 실행하세요. 그런 다음 **Web 8080** 탭을 새로 고쳐 웹 페이지를 미리 볼 수 있습니다."
              },
              {
                "name": "script.js 수정 상태 확인",
                "file": "verify1-2.sh",
                "hint": "랩을 완료하려면 단계를 따르세요."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "React useEffectOnce Hook",
      "description": "Neste laboratório, aprenderemos como usar o hook useEffectOnce no React para executar uma função de callback no máximo uma vez quando uma determinada condição se torna verdadeira. Isso pode ser útil em situações em que queremos executar uma ação específica apenas uma vez, como quando um componente é montado ou quando um botão é clicado. Ao final deste laboratório, você terá uma melhor compreensão de como implementar este hook em suas aplicações React.",
      "meta": {
        "title": "Dominando o useEffectOnce Hook no React: Guia Completo",
        "description": "Aprenda a usar o poderoso hook useEffectOnce no React para executar uma função de callback apenas uma vez, garantindo um gerenciamento eficiente e confiável do ciclo de vida dos componentes. Otimize seus projetos React!",
        "keywords": "useeffectonce, react, ciclo de vida do componente, desenvolvimento web, hooks, React useEffect, useEffect uma vez"
      },
      "details": {
        "steps": [
          {
            "title": "React useEffectOnce Hook",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar o status de execução do serviço web",
                "file": "verify1-1.sh",
                "hint": "Por favor, clique em 'Go Live' no canto inferior direito para executar o serviço web na porta 8080. Em seguida, você pode atualizar a aba **Web 8080** para visualizar a página web."
              },
              {
                "name": "Verificar o status da modificação do script.js",
                "file": "verify1-2.sh",
                "hint": "Por favor, siga os passos para completar o laboratório."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
