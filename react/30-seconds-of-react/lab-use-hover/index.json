{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React useHover Hook",
  "description": "In this lab, we will explore the implementation of a custom hook called useHover in React. This hook will handle the event of hovering over a wrapped component and update the state accordingly. By the end of this lab, you will have a better understanding of how to create and use custom hooks in React to enhance the functionality of your components.",
  "meta": {
    "title": "Mastering React's useHover Hook",
    "description": "Explore the implementation of a custom React hook that handles component hover events.",
    "keywords": "hover events, react, custom hooks, usehover, web development"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React useHover Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React useHover 钩子",
      "description": "在本实验中，我们将探索如何在 React 中实现一个名为 useHover 的自定义钩子。这个钩子将处理悬停在包裹组件上的事件，并相应地更新状态。在本实验结束时，你将更好地理解如何在 React 中创建和使用自定义钩子，以增强组件的功能。",
      "meta": {
        "title": "掌握 React 的 useHover 钩子",
        "description": "探索一个处理组件悬停事件的自定义 React 钩子的实现。",
        "keywords": "悬停事件，React, 自定义钩子，usehover, 网页开发"
      },
      "details": {
        "steps": [
          {
            "title": "React useHover 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证网络服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“Go Live”以在端口 8080 上运行网络服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改的状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Hook useHover de React",
      "description": "En este laboratorio, exploraremos la implementación de un hook personalizado llamado useHover en React. Este hook manejará el evento de pasar el cursor sobre un componente envuelto y actualizará el estado en consecuencia. Al final de este laboratorio, tendrás una mejor comprensión de cómo crear y usar hooks personalizados en React para mejorar la funcionalidad de tus componentes.",
      "meta": {
        "title": "Dominando el Hook useHover de React",
        "description": "Explora la implementación de un hook personalizado de React que maneja los eventos de pasar el cursor sobre un componente.",
        "keywords": "eventos de pasar el cursor, react, hooks personalizados, usehover, desarrollo web"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useHover de React",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Hook useHover de React",
      "description": "Dans ce laboratoire, nous allons explorer la mise en œuvre d'un hook personnalisé appelé useHover en React. Ce hook gérera l'événement de survol d'un composant encapsulé et mettra à jour l'état en conséquence. À la fin de ce laboratoire, vous aurez une meilleure compréhension de la manière de créer et d'utiliser des hooks personnalisés en React pour améliorer la fonctionnalité de vos composants.",
      "meta": {
        "title": "Maîtriser le hook useHover de React",
        "description": "Explorez la mise en œuvre d'un hook personnalisé React qui gère les événements de survol de composants.",
        "keywords": "événements de survol, react, hooks personnalisés, usehover, développement web"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useHover de React",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez l'état d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez rafraîchir l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifiez l'état de la modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "React useHover Hook",
      "description": "In diesem Lab werden wir die Implementierung eines benutzerdefinierten Hooks namens useHover in React untersuchen. Dieser Hook wird das Ereignis der Überlagerung über eine umschlossene Komponente verarbeiten und den Zustand entsprechend aktualisieren. Am Ende dieses Labs werden Sie ein besseres Verständnis dafür haben, wie Sie in React benutzerdefinierte Hooks erstellen und verwenden, um die Funktionalität Ihrer Komponenten zu verbessern.",
      "meta": {
        "title": "Meisterhaft mit React's useHover Hook umgehen",
        "description": "Erkunden Sie die Implementierung eines benutzerdefinierten React-Hooks, der Komponenten-Überlagerungsereignisse behandelt.",
        "keywords": "Überlagerungsereignisse, React, benutzerdefinierte Hooks, usehover, Webentwicklung"
      },
      "details": {
        "steps": [
          {
            "title": "React useHover Hook",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren des Laufzustands des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie auf 'Go Live' in der unteren rechten Ecke, um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzuschauen."
              },
              {
                "name": "Verifizieren des Status der Änderungen an script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "React の useHover フック",
      "description": "この実験では、React における useHover と呼ばれるカスタムフックの実装を検討します。このフックは、ラップされたコンポーネントにマウスオーバーするイベントを処理し、それに応じて状態を更新します。この実験が終了するとき、React でカスタムフックを作成して使用してコンポーネントの機能を強化する方法をより深く理解するようになります。",
      "meta": {
        "title": "React の useHover フックをマスターする",
        "description": "コンポーネントのマウスオーバーイベントを処理するカスタム React フックの実装を検討します。",
        "keywords": "マウスオーバーイベント，React, カスタムフック，usehover, ウェブ開発"
      },
      "details": {
        "steps": [
          {
            "title": "React の useHover フック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Web サービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして、ポート 8080 で Web サービスを実行してください。その後、**Web 8080**タブを更新して Web ページをプレビューできます。"
              },
              {
                "name": "script.js の変更状態を確認する",
                "file": "verify1-2.sh",
                "hint": "実験を完了する手順に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "React useHover-хук",
      "description": "В этом практическом занятии мы изучим реализацию пользовательского хука под названием useHover в React. Этот хук будет обрабатывать событие наведения курсора на обёрнутый компонент и обновлять состояние соответственно. В конце этого практического занятия вы будете лучше понимать, как создавать и использовать пользовательские хуки в React, чтобы повысить функциональность своих компонентов.",
      "meta": {
        "title": "Мастерство в использовании React useHover-хука",
        "description": "Изучите реализацию пользовательского React-хука, который обрабатывает события наведения на компонент.",
        "keywords": "события наведения, react, пользовательские хуки, usehover, веб-разработка"
      },
      "details": {
        "steps": [
          {
            "title": "React useHover-хук",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить статус работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить статус изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам, чтобы завершить практическое занятие."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "React useHover 훅",
      "description": "이 랩에서는 React 에서 useHover 라는 사용자 정의 훅의 구현을 살펴봅니다. 이 훅은 래핑된 컴포넌트 위에 마우스를 올리는 이벤트를 처리하고 그에 따라 상태를 업데이트합니다. 이 랩을 마치면 컴포넌트의 기능을 향상시키기 위해 React 에서 사용자 정의 훅을 생성하고 사용하는 방법에 대한 이해도가 높아질 것입니다.",
      "meta": {
        "title": "React useHover 훅 마스터하기 - 웹 개발 튜토리얼",
        "description": "컴포넌트 호버 (hover) 이벤트를 처리하는 React 사용자 정의 훅 구현을 살펴보세요.",
        "keywords": "호버 이벤트, react, 사용자 정의 훅, useHover, 웹 개발, 리액트 훅, 프론트엔드 개발"
      },
      "details": {
        "steps": [
          {
            "title": "React useHover 훅",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "웹 서비스 실행 상태 확인",
                "file": "verify1-1.sh",
                "hint": "오른쪽 하단의 'Go Live'를 클릭하여 웹 서비스를 포트 8080 에서 실행하세요. 그런 다음 **Web 8080** 탭을 새로 고쳐 웹 페이지를 미리 볼 수 있습니다."
              },
              {
                "name": "script.js 수정 상태 확인",
                "file": "verify1-2.sh",
                "hint": "랩을 완료하려면 단계를 따르세요."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "React useHover Hook",
      "description": "Neste laboratório, exploraremos a implementação de um *hook* customizado chamado useHover em React. Este *hook* lidará com o evento de *hover* (passar o mouse por cima) de um componente encapsulado e atualizará o estado de acordo. Ao final deste laboratório, você terá uma melhor compreensão de como criar e usar *hooks* customizados em React para aprimorar a funcionalidade de seus componentes.",
      "meta": {
        "title": "Dominando o useHover Hook do React: Guia Prático",
        "description": "Explore a implementação de um *hook* React customizado que lida com eventos de *hover* em componentes. Aprenda a criar *hooks* personalizados e otimize seus projetos React.",
        "keywords": "eventos hover, react, hooks customizados, usehover, desenvolvimento web, tutorial react, react hooks"
      },
      "details": {
        "steps": [
          {
            "title": "React useHover Hook",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar o status de execução do serviço web",
                "file": "verify1-1.sh",
                "hint": "Por favor, clique em 'Go Live' no canto inferior direito para executar o serviço web na porta 8080. Em seguida, você pode atualizar a aba **Web 8080** para visualizar a página web."
              },
              {
                "name": "Verificar o status da modificação do script.js",
                "file": "verify1-2.sh",
                "hint": "Por favor, siga os passos para completar o laboratório."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
