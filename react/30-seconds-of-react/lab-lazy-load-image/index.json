{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Lazy Loading Images in React",
  "description": "In this lab, we will explore how to implement lazy loading images in a React application. Lazy loading improves page performance by delaying the loading of images until they are needed, reducing the initial load time and improving the user experience. We will use the Intersection Observer API and React hooks to create a reusable component that supports lazy loading images.",
  "meta": {
    "title": "Lazy Loading Images in React | Performance Optimization",
    "description": "Learn how to implement lazy loading images in a React application to improve page performance and user experience.",
    "keywords": "React, Lazy Loading, Images, Performance Optimization, Intersection Observer API"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Lazy-Loading Image",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "react/conditional_render",
          "react/hooks",
          "react/use_state_reducer"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "在 React 中实现图片懒加载",
      "description": "在本实验中，我们将探索如何在 React 应用程序中实现图片懒加载。懒加载通过延迟图片加载直到需要时才进行，从而提高页面性能，减少初始加载时间并改善用户体验。我们将使用 Intersection Observer API 和 React 钩子来创建一个支持懒加载图片的可复用组件。",
      "meta": {
        "title": "在 React 中实现图片懒加载 | 性能优化",
        "description": "了解如何在 React 应用程序中实现图片懒加载以提高页面性能和用户体验。",
        "keywords": "React, 懒加载，图片，性能优化，Intersection Observer API"
      },
      "details": {
        "steps": [
          {
            "title": "图片懒加载",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证网络服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“Go Live”在端口 8080 上运行网络服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Carga diferida de imágenes en React",
      "description": "En este laboratorio, exploraremos cómo implementar la carga diferida de imágenes en una aplicación React. La carga diferida mejora el rendimiento de la página al retrasar la carga de las imágenes hasta que se necesiten, reduciendo el tiempo de carga inicial y mejorando la experiencia del usuario. Utilizaremos la API Intersection Observer y los hooks de React para crear un componente reusable que admita la carga diferida de imágenes.",
      "meta": {
        "title": "Carga diferida de imágenes en React | Optimización de rendimiento",
        "description": "Aprende cómo implementar la carga diferida de imágenes en una aplicación React para mejorar el rendimiento de la página y la experiencia del usuario.",
        "keywords": "React, Carga diferida, Imágenes, Optimización de rendimiento, API Intersection Observer"
      },
      "details": {
        "steps": [
          {
            "title": "Imagen con carga diferida",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Chargement différé d'images dans React",
      "description": "Dans ce laboratoire, nous allons explorer la manière de mettre en œuvre le chargement différé d'images dans une application React. Le chargement différé améliore les performances de la page en retardant le chargement des images jusqu'à ce qu'elles soient nécessaires, en réduisant le temps de chargement initial et en améliorant l'expérience utilisateur. Nous utiliserons l'API Intersection Observer et les hooks React pour créer un composant réutilisable qui prend en charge le chargement différé d'images.",
      "meta": {
        "title": "Chargement différé d'images dans React | Optimisation des performances",
        "description": "Découvrez comment implémenter le chargement différé d'images dans une application React pour améliorer les performances de la page et l'expérience utilisateur.",
        "keywords": "React, Chargement différé, Images, Optimisation des performances, API Intersection Observer"
      },
      "details": {
        "steps": [
          {
            "title": "Chargement différé d'images",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez le statut d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez rafraîchir l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifiez l'état de la modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Lazy-Laden von Bildern in React",
      "description": "In diesem Lab werden wir untersuchen, wie man in einer React-Anwendung das Lazy-Laden von Bildern implementiert. Das Lazy-Laden verbessert die Seitenleistung, indem es das Laden von Bildern bis zum Zeitpunkt ihres Bedarfs verzögert, die Initialladezeit reduziert und die Benutzererfahrung verbessert. Wir werden die Intersection Observer API und React Hooks verwenden, um einen wiederverwendbaren Komponenten zu erstellen, der das Lazy-Laden von Bildern unterstützt.",
      "meta": {
        "title": "Lazy-Laden von Bildern in React | Leistungsminderung",
        "description": "Lernen Sie, wie man in einer React-Anwendung das Lazy-Laden von Bildern implementiert, um die Seitenleistung und die Benutzererfahrung zu verbessern.",
        "keywords": "React, Lazy-Laden, Bilder, Leistungsminderung, Intersection Observer API"
      },
      "details": {
        "steps": [
          {
            "title": "Lazy-Laden von Bildern",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen des Laufzustands des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie in der unteren rechten Ecke auf 'Go Live', um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite zu previewen."
              },
              {
                "name": "Überprüfen des Status der Änderungen an script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "React における画像の遅延読み込み",
      "description": "この実験では、React アプリケーションで画像の遅延読み込みを実装する方法を検討します。遅延読み込みは、画像が必要になるまでの読み込みを遅らせることでページのパフォーマンスを向上させ、初期読み込み時間を短縮し、ユーザー体験を改善します。Intersection Observer API と React hooks を使用して、画像の遅延読み込みをサポートする再利用可能なコンポーネントを作成します。",
      "meta": {
        "title": "React における画像の遅延読み込み | パフォーマンス最適化",
        "description": "React アプリケーションで画像の遅延読み込みを実装して、ページのパフォーマンスとユーザー体験を向上させる方法を学びましょう。",
        "keywords": "React, 遅延読み込み，画像，パフォーマンス最適化，Intersection Observer API"
      },
      "details": {
        "steps": [
          {
            "title": "画像の遅延読み込み",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ウェブサービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして、ポート 8080 でウェブサービスを実行してください。その後、**Web 8080** タブを更新してウェブページをプレビューできます。"
              },
              {
                "name": "script.js の変更状態を確認する",
                "file": "verify1-2.sh",
                "hint": "実験を完了するための手順に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Отложенная загрузка изображений в React",
      "description": "В этом практическом занятии мы изучим, как реализовать отложенную загрузку изображений в приложении на React. Отложенная загрузка улучшает производительность страницы, задерживая загрузку изображений до тех пор, пока они не понадобятся, сокращая время начальной загрузки и улучшая пользовательский опыт. Мы будем использовать API Intersection Observer и React-хуки для создания повторно используемого компонента, поддерживающего отложенную загрузку изображений.",
      "meta": {
        "title": "Отложенная загрузка изображений в React | Оптимизация производительности",
        "description": "Изучите, как реализовать отложенную загрузку изображений в приложении на React, чтобы улучшить производительность страницы и пользовательский опыт.",
        "keywords": "React, Отложенная загрузка, Изображения, Оптимизация производительности, API Intersection Observer"
      },
      "details": {
        "steps": [
          {
            "title": "Отложенная загрузка изображений",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить состояние работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить состояние изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам, чтобы завершить практическое занятие."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
