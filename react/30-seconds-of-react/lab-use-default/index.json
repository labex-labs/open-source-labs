{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React useDefault Hook",
  "description": "In this lab, we will be exploring how to create a custom hook called useDefault in React. The purpose of this hook is to create a stateful value with a default fallback if it's null or undefined, and a function to update it. By the end of the lab, you will have a better understanding of how to use custom hooks to simplify your React code and make it more efficient.",
  "meta": {
    "title": "Mastering React's useDefault Hook",
    "description": "Discover how to create a custom React hook that provides a default fallback value and update function for your application's state.",
    "keywords": "default values, usedefault, react, custom hooks, state management"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React useDefault Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React useDefault 钩子",
      "description": "在本实验中，我们将探索如何在 React 中创建一个名为 useDefault 的自定义钩子。这个钩子的目的是创建一个有状态的值，如果它是 null 或 undefined，则有一个默认的回退值，以及一个更新它的函数。在实验结束时，你将更好地理解如何使用自定义钩子来简化你的 React 代码并使其更高效。",
      "meta": {
        "title": "掌握 React 的 useDefault 钩子",
        "description": "探索如何创建一个自定义 React 钩子，为应用程序的状态提供默认回退值和更新函数。",
        "keywords": "默认值，useDefault, React, 自定义钩子，状态管理"
      },
      "details": {
        "steps": [
          {
            "title": "React useDefault 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证网络服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“Go Live”以在端口 8080 上运行网络服务。然后，你可以刷新“Web 8080”标签页以预览网页。"
              },
              {
                "name": "验证 script.js 修改状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Hook useDefault de React",
      "description": "En este laboratorio, exploraremos cómo crear un hook personalizado llamado useDefault en React. El propósito de este hook es crear un valor con estado con un valor de retorno predeterminado si es null o undefined, y una función para actualizarlo. Al final del laboratorio, tendrás una mejor comprensión de cómo usar hooks personalizados para simplificar tu código React y hacerlo más eficiente.",
      "meta": {
        "title": "Dominando el Hook useDefault de React",
        "description": "Descubre cómo crear un hook personalizado de React que proporciona un valor de retorno predeterminado y una función de actualización para el estado de tu aplicación.",
        "keywords": "valores predeterminados, usedefault, react, hooks personalizados, gestión de estado"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useDefault de React",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "React useDefault Hook",
      "description": "Dans ce laboratoire, nous allons explorer comment créer un hook personnalisé appelé useDefault en React. Le but de ce hook est de créer une valeur avec état avec une valeur de repli par défaut si elle est null ou undefined, et une fonction pour la mettre à jour. À la fin du laboratoire, vous aurez une meilleure compréhension de la manière d'utiliser les hooks personnalisés pour simplifier votre code React et le rendre plus efficace.",
      "meta": {
        "title": "Maîtriser le hook useDefault de React",
        "description": "Découvrez comment créer un hook personnalisé React qui fournit une valeur de repli par défaut et une fonction de mise à jour pour l'état de votre application.",
        "keywords": "valeurs par défaut, usedefault, react, hooks personnalisés, gestion d'état"
      },
      "details": {
        "steps": [
          {
            "title": "React useDefault Hook",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier le statut d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez actualiser l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifier le statut de la modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "React useDefault Hook",
      "description": "In diesem Lab werden wir untersuchen, wie man in React einen benutzerdefinierten Hook namens useDefault erstellt. Der Zweck dieses Hooks ist es, einen zustandsbehafteten Wert mit einem Standardwert als Rückfall zu erstellen, wenn dieser null oder undefined ist, sowie eine Funktion, um ihn zu aktualisieren. Am Ende des Labs werden Sie ein besseres Verständnis dafür haben, wie man benutzerdefinierte Hooks verwendet, um Ihren React-Code zu vereinfachen und effizienter zu gestalten.",
      "meta": {
        "title": "Meisterhaft mit React's useDefault Hook umgehen",
        "description": "Entdecken Sie, wie man einen benutzerdefinierten React-Hook erstellt, der einen Standardwert als Rückfall und eine Aktualisierungsfunktion für den Zustand Ihrer Anwendung bereitstellt.",
        "keywords": "Standardwerte, usedefault, React, benutzerdefinierte Hooks, Zustandsverwaltung"
      },
      "details": {
        "steps": [
          {
            "title": "React useDefault Hook",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen des Laufzustands des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie auf 'Go Live' in der unteren rechten Ecke, um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzuschauen."
              },
              {
                "name": "Überprüfen des Status der Änderungen in script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "React の useDefault フック",
      "description": "この実験では、React で useDefault と呼ばれるカスタムフックを作成する方法を検討します。このフックの目的は、null または undefined の場合にはデフォルトのフォールバック値を持つ状態付きの値と、それを更新する関数を作成することです。実験が終了するとき、カスタムフックを使用して React コードを簡略化し、効率的にする方法をより深く理解しているでしょう。",
      "meta": {
        "title": "React の useDefault フックをマスターする",
        "description": "アプリケーションの状態に対してデフォルトのフォールバック値と更新関数を提供するカスタム React フックを作成する方法を学びましょう。",
        "keywords": "デフォルト値，usedefault, react, カスタムフック，状態管理"
      },
      "details": {
        "steps": [
          {
            "title": "React の useDefault フック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ウェブサービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして、ポート 8080 でウェブサービスを実行してください。その後、**Web 8080** タブを更新してウェブページをプレビューできます。"
              },
              {
                "name": "script.js の変更状態を確認する",
                "file": "verify1-2.sh",
                "hint": "実験を完了するための手順に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "React useDefault хук",
      "description": "В этом практическом занятии мы изучим, как создать пользовательский хук под названием useDefault в React. Цель этого хука — создать состояние с начальным значением, которое будет использоваться, если оно null или undefined, и функцию для его обновления. В конце практического занятия вы лучше поймете, как использовать пользовательские хуки для упрощения кода React и повышения его эффективности.",
      "meta": {
        "title": "Мастерство React useDefault хука",
        "description": "Откройте, как создать пользовательский React хук, который обеспечивает начальное значение и функцию обновления для состояния вашего приложения.",
        "keywords": "начальные значения, usedefault, react, пользовательские хуки, управление состоянием"
      },
      "details": {
        "steps": [
          {
            "title": "React useDefault хук",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить статус работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить статус изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам, чтобы завершить практическое занятие."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "React useDefault 훅",
      "description": "이 랩에서는 React 에서 useDefault 라는 사용자 정의 훅을 만드는 방법을 살펴봅니다. 이 훅의 목적은 null 또는 undefined 인 경우 기본 폴백 (fallback) 값을 가진 상태 값과 이를 업데이트하는 함수를 생성하는 것입니다. 랩이 끝나면 사용자 정의 훅을 사용하여 React 코드를 단순화하고 효율성을 높이는 방법에 대한 이해도가 높아질 것입니다.",
      "meta": {
        "title": "React useDefault 훅 마스터하기",
        "description": "애플리케이션의 상태에 대한 기본 폴백 값과 업데이트 함수를 제공하는 사용자 정의 React 훅을 만드는 방법을 알아보세요.",
        "keywords": "기본값, usedefault, react, 사용자 정의 훅, 상태 관리"
      },
      "details": {
        "steps": [
          {
            "title": "React useDefault 훅",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "웹 서비스 실행 상태 확인",
                "file": "verify1-1.sh",
                "hint": "오른쪽 하단의 'Go Live'를 클릭하여 웹 서비스를 포트 8080 에서 실행하세요. 그런 다음 **Web 8080** 탭을 새로 고쳐 웹 페이지를 미리 볼 수 있습니다."
              },
              {
                "name": "script.js 수정 상태 확인",
                "file": "verify1-2.sh",
                "hint": "랩을 완료하려면 단계를 따르세요."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "React useDefault Hook",
      "description": "Neste laboratório, exploraremos como criar um *hook* personalizado chamado useDefault em React. O objetivo deste *hook* é criar um valor com estado com um *fallback* padrão se for nulo ou indefinido, e uma função para atualizá-lo. Ao final do laboratório, você terá uma melhor compreensão de como usar *hooks* personalizados para simplificar seu código React e torná-lo mais eficiente.",
      "meta": {
        "title": "Dominando o useDefault Hook do React",
        "description": "Descubra como criar um *hook* React personalizado que fornece um valor padrão de *fallback* e uma função de atualização para o estado da sua aplicação.",
        "keywords": "valores padrão, usedefault, react, *hooks* personalizados, gerenciamento de estado"
      },
      "details": {
        "steps": [
          {
            "title": "React useDefault Hook",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar o status de execução do serviço web",
                "file": "verify1-1.sh",
                "hint": "Por favor, clique em 'Go Live' no canto inferior direito para executar o serviço web na porta 8080. Em seguida, você pode atualizar a aba **Web 8080** para visualizar a página web."
              },
              {
                "name": "Verificar o status da modificação do script.js",
                "file": "verify1-2.sh",
                "hint": "Por favor, siga os passos para completar o laboratório."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
