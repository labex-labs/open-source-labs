{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React usePortal Hook",
  "description": "In this lab, we will be exploring the use of the usePortal hook in React. The purpose of this hook is to create a portal that allows rendering of children outside the parent component. We will learn how to use the useState(), useCallback(), and useEffect() hooks to create and manage a portal, as well as how to use ReactDOM.createPortal() and ReactDOM.unmountComponentAtNode() to render and remove the portal.",
  "meta": {
    "title": "Mastering the React usePortal Hook",
    "description": "Explore the power of the React usePortal hook to create dynamic portals and render content outside the parent component.",
    "keywords": "portal, useportal, dom manipulation, react, dynamic rendering"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React usePortal Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": ["react/hooks", "react/jsx", "react/use_state_reducer"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React usePortal 钩子",
      "description": "在本实验中，我们将探索在 React 中使用 usePortal 钩子。此钩子的目的是创建一个门户，允许在父组件外部渲染子组件。我们将学习如何使用 useState()、useCallback() 和 useEffect() 钩子来创建和管理门户，以及如何使用 ReactDOM.createPortal() 和 ReactDOM.unmountComponentAtNode() 来渲染和移除门户。",
      "meta": {
        "title": "掌握 React usePortal 钩子",
        "description": "探索 React usePortal 钩子的强大功能，以创建动态门户并在父组件外部渲染内容。",
        "keywords": "门户，usePortal, DOM 操作，React, 动态渲染"
      },
      "details": {
        "steps": [
          {
            "title": "React usePortal 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Web 服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“上线”以在端口 8080 上运行 Web 服务。然后，你可以刷新 **Web 8080** 标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "React usePortal Hook",
      "description": "En este laboratorio, exploraremos el uso del hook usePortal en React. El propósito de este hook es crear un portal que permita renderizar hijos fuera del componente padre. Aprenderemos cómo usar los hooks useState(), useCallback() y useEffect() para crear y administrar un portal, así como cómo usar ReactDOM.createPortal() y ReactDOM.unmountComponentAtNode() para renderizar y eliminar el portal.",
      "meta": {
        "title": "Dominando el hook React usePortal",
        "description": "Explora el poder del hook React usePortal para crear portales dinámicos y renderizar contenido fuera del componente padre.",
        "keywords": "portal, useportal, manipulación del DOM, react, renderizado dinámico"
      },
      "details": {
        "steps": [
          {
            "title": "React usePortal Hook",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haga clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puede actualizar la pestaña **Web 8080** para previsualizar la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Siga los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Hook React usePortal",
      "description": "Dans ce laboratoire, nous allons explorer l'utilisation du hook usePortal dans React. Le but de ce hook est de créer un portail qui permet de rendre les enfants en dehors du composant parent. Nous allons apprendre à utiliser les hooks useState(), useCallback() et useEffect() pour créer et gérer un portail, ainsi qu'à utiliser ReactDOM.createPortal() et ReactDOM.unmountComponentAtNode() pour rendre et supprimer le portail.",
      "meta": {
        "title": "Maîtriser le hook React usePortal",
        "description": "Explorez le pouvoir du hook React usePortal pour créer des portails dynamiques et rendre du contenu en dehors du composant parent.",
        "keywords": "portail, useportal, manipulation du DOM, react, rendu dynamique"
      },
      "details": {
        "steps": [
          {
            "title": "Hook React usePortal",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier l'état d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez actualiser l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifier l'état de la modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "React usePortal-Hook",
      "description": "In diesem Lab werden wir die Verwendung des usePortal-Hooks in React untersuchen. Der Zweck dieses Hooks ist es, einen Portal zu erstellen, der das Rendern von Kindern außerhalb der Elternkomponente ermöglicht. Wir werden lernen, wie die useState(), useCallback() und useEffect() Hooks verwendet werden, um ein Portal zu erstellen und zu verwalten, sowie wie ReactDOM.createPortal() und ReactDOM.unmountComponentAtNode() verwendet werden, um das Portal zu rendern und zu entfernen.",
      "meta": {
        "title": "Meisterhaftigkeit mit dem React usePortal-Hook",
        "description": "Erkunden Sie die Macht des React usePortal-Hooks, um dynamische Portale zu erstellen und Inhalte außerhalb der Elternkomponente zu rendern.",
        "keywords": "Portal, useportal, DOM-Manipulation, React, dynamisches Rendern"
      },
      "details": {
        "steps": [
          {
            "title": "React usePortal-Hook",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen des Laufzustands des Webdiensts",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie auf 'Go Live' in der unteren rechten Ecke, um den Webdienst auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzuschauen."
              },
              {
                "name": "Überprüfen des Status der Änderungen in script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte folgen Sie den Schritten, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "React の usePortal フック",
      "description": "この実験では、React における usePortal フックの使用方法を検討します。このフックの目的は、親コンポーネントの外で子コンポーネントをレンダリングできるポータルを作成することです。useState()、useCallback()、および useEffect() フックを使用してポータルを作成および管理する方法、ならびに ReactDOM.createPortal() と ReactDOM.unmountComponentAtNode() を使用してポータルをレンダリングおよび削除する方法を学びます。",
      "meta": {
        "title": "React の usePortal フックをマスターする",
        "description": "React の usePortal フックの力を探求して、動的なポータルを作成し、親コンポーネントの外でコンテンツをレンダリングしましょう。",
        "keywords": "ポータル，usePortal, DOM 操作，React, 動的レンダリング"
      },
      "details": {
        "steps": [
          {
            "title": "React の usePortal フック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ウェブサービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅の「Go Live」をクリックして、ポート 8080 でウェブサービスを実行してください。その後、**Web 8080**タブを更新して、ウェブページをプレビューできます。"
              },
              {
                "name": "script.js の変更状態を確認する",
                "file": "verify1-2.sh",
                "hint": "実験を完了するための手順に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "React usePortal Hook",
      "description": "В этом лабораторном задании мы будем изучать использование хука usePortal в React. Цель этого хука - создать портал, который позволяет отображать дочерние элементы вне родительского компонента. Мы узнаем, как использовать хуки useState(), useCallback() и useEffect() для создания и управления порталом, а также как использовать ReactDOM.createPortal() и ReactDOM.unmountComponentAtNode() для отображения и удаления портала.",
      "meta": {
        "title": "Мастерство хука React usePortal",
        "description": "Изучите мощь хука React usePortal для создания динамических порталов и отображения содержимого вне родительского компонента.",
        "keywords": "портал, useportal, манипуляция с DOM, react, динамическое отображение"
      },
      "details": {
        "steps": [
          {
            "title": "React usePortal Hook",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить статус работы веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, нажмите кнопку 'Go Live' в нижнем правом углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы просмотреть веб-страницу."
              },
              {
                "name": "Проверить статус изменения script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте шагам для завершения лабораторной работы."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "React usePortal 훅",
      "description": "이 랩에서는 React 에서 usePortal 훅의 사용법을 살펴봅니다. 이 훅의 목적은 부모 컴포넌트 외부에서 자식을 렌더링할 수 있는 포털을 생성하는 것입니다. useState(), useCallback(), useEffect() 훅을 사용하여 포털을 생성하고 관리하는 방법, 그리고 ReactDOM.createPortal() 과 ReactDOM.unmountComponentAtNode() 를 사용하여 포털을 렌더링하고 제거하는 방법을 배우게 됩니다.",
      "meta": {
        "title": "React usePortal 훅 마스터하기: 동적 포털 생성 가이드",
        "description": "React usePortal 훅의 강력한 기능을 활용하여 동적 포털을 생성하고 부모 컴포넌트 외부에서 콘텐츠를 렌더링하는 방법을 알아보세요.",
        "keywords": "포털, usePortal, DOM 조작, React, 동적 렌더링, 리액트 포털"
      },
      "details": {
        "steps": [
          {
            "title": "React usePortal 훅",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "웹 서비스 실행 상태 확인",
                "file": "verify1-1.sh",
                "hint": "오른쪽 하단의 'Go Live'를 클릭하여 웹 서비스를 포트 8080 에서 실행하세요. 그런 다음, **Web 8080** 탭을 새로 고쳐 웹 페이지를 미리 볼 수 있습니다."
              },
              {
                "name": "script.js 수정 상태 확인",
                "file": "verify1-2.sh",
                "hint": "랩을 완료하려면 단계를 따르세요."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "React usePortal Hook",
      "description": "Neste laboratório, exploraremos o uso do hook usePortal no React. O objetivo deste hook é criar um portal que permite a renderização de filhos fora do componente pai. Aprenderemos como usar os hooks useState(), useCallback() e useEffect() para criar e gerenciar um portal, bem como como usar ReactDOM.createPortal() e ReactDOM.unmountComponentAtNode() para renderizar e remover o portal.",
      "meta": {
        "title": "Dominando o React usePortal Hook: Renderização Dinâmica em React",
        "description": "Explore o poder do React usePortal hook para criar portais dinâmicos e renderizar conteúdo fora do componente pai. Aprenda a manipular o DOM de forma eficiente com React.",
        "keywords": "portal, useportal, manipulação do DOM, React, renderização dinâmica, componentes React"
      },
      "details": {
        "steps": [
          {
            "title": "React usePortal Hook",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar o status de execução do serviço web",
                "file": "verify1-1.sh",
                "hint": "Por favor, clique em 'Go Live' no canto inferior direito para executar o serviço web na porta 8080. Em seguida, você pode atualizar a aba **Web 8080** para visualizar a página web."
              },
              {
                "name": "Verificar o status da modificação do script.js",
                "file": "verify1-2.sh",
                "hint": "Por favor, siga os passos para completar o laboratório."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
