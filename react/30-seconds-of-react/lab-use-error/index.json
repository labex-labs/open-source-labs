{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "React useError Hook",
  "description": "In this lab, we will learn how to create an error dispatcher using the useError hook in React. The hook allows us to create a state variable that holds an error and throw it whenever it's truthy. We will also use the useCallback hook to update the state and return the cached function. By the end of this lab, you will be able to effectively handle errors in your React applications.",
  "meta": {
    "title": "Mastering React's useError Hook",
    "description": "Learn how to create an error dispatcher using the React useError hook and effectively handle errors in your applications.",
    "keywords": "error handling, react, web development, hooks, useerror"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "React useError Hook",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify the running status of the web service",
            "file": "verify1-1.sh",
            "hint": "Please click on 'Go Live' in the bottom right corner to run the web service on port 8080. Then, you can refresh the **Web 8080** Tab to preview the web page.",
            "timeout": 0,
            "showstderr": true
          },
          {
            "name": "Verify the status of script.js modification",
            "file": "verify1-2.sh",
            "hint": "Please follow the steps to complete the lab.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "react/event_handling",
          "react/hooks",
          "react/jsx",
          "react/use_state_reducer"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "index.html",
          "target": "~/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "script.js",
          "target": "~/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "React useError 钩子",
      "description": "在本实验中，我们将学习如何使用 React 中的 useError 钩子创建一个错误调度器。该钩子允许我们创建一个状态变量来保存错误，并在其为真值时抛出它。我们还将使用 useCallback 钩子来更新状态并返回缓存的函数。在本实验结束时，你将能够在 React 应用程序中有效地处理错误。",
      "meta": {
        "title": "掌握 React 的 useError 钩子",
        "description": "学习如何使用 React useError 钩子创建一个错误调度器，并在应用程序中有效地处理错误。",
        "keywords": "错误处理，React, 网页开发，钩子，useerror"
      },
      "details": {
        "steps": [
          {
            "title": "React useError 钩子",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Web 服务的运行状态",
                "file": "verify1-1.sh",
                "hint": "请点击右下角的“Go Live”以在端口 8080 上运行 Web 服务。然后，你可以刷新“Web 8080”标签页来预览网页。"
              },
              {
                "name": "验证 script.js 修改状态",
                "file": "verify1-2.sh",
                "hint": "请按照步骤完成实验。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Hook useError de React",
      "description": "En este laboratorio, aprenderemos cómo crear un despachador de errores utilizando el hook useError en React. Este hook nos permite crear una variable de estado que almacena un error y lanzarlo siempre que tenga un valor verdadero. También utilizaremos el hook useCallback para actualizar el estado y devolver la función almacenada en caché. Al final de este laboratorio, podrás manejar eficazmente los errores en tus aplicaciones React.",
      "meta": {
        "title": "Dominando el hook useError de React",
        "description": "Aprende cómo crear un despachador de errores utilizando el hook useError de React y maneja eficazmente los errores en tus aplicaciones.",
        "keywords": "manejo de errores, react, desarrollo web, hooks, useerror"
      },
      "details": {
        "steps": [
          {
            "title": "Hook useError de React",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el estado de ejecución del servicio web",
                "file": "verify1-1.sh",
                "hint": "Haz clic en 'Go Live' en la esquina inferior derecha para ejecutar el servicio web en el puerto 8080. Luego, puedes actualizar la pestaña **Web 8080** para ver una vista previa de la página web."
              },
              {
                "name": "Verificar el estado de la modificación de script.js",
                "file": "verify1-2.sh",
                "hint": "Sigue los pasos para completar el laboratorio."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Hook React useError",
      "description": "Dans ce laboratoire, nous allons apprendre à créer un dispatcher d'erreurs en utilisant le hook useError dans React. Ce hook nous permet de créer une variable d'état qui contient une erreur et de la lancer chaque fois qu'elle est évaluée à true. Nous allons également utiliser le hook useCallback pour mettre à jour l'état et retourner la fonction mise en cache. À la fin de ce laboratoire, vous serez en mesure de gérer efficacement les erreurs dans vos applications React.",
      "meta": {
        "title": "Maîtriser le hook useError de React",
        "description": "Apprenez à créer un dispatcher d'erreurs en utilisant le hook useError de React et à gérer efficacement les erreurs dans vos applications.",
        "keywords": "gestion des erreurs, react, développement web, hooks, useerror"
      },
      "details": {
        "steps": [
          {
            "title": "Hook React useError",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier le statut d'exécution du service web",
                "file": "verify1-1.sh",
                "hint": "Veuillez cliquer sur 'Go Live' dans le coin inférieur droit pour exécuter le service web sur le port 8080. Ensuite, vous pouvez actualiser l'onglet **Web 8080** pour prévisualiser la page web."
              },
              {
                "name": "Vérifier le statut de modification de script.js",
                "file": "verify1-2.sh",
                "hint": "Veuillez suivre les étapes pour terminer le laboratoire."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "React useError-Hook",
      "description": "In diesem Lab werden wir lernen, wie man einen Fehler-Dispatcher (Error Dispatcher) mit dem useError-Hook in React erstellt. Der Hook ermöglicht es uns, eine Zustandsvariable (state variable) zu erstellen, die einen Fehler enthält und diesen auslöst, sobald er einen wahrheitsgemäßen Wert hat. Wir werden auch den useCallback-Hook verwenden, um den Zustand zu aktualisieren und die zwischengespeicherte Funktion zurückzugeben. Am Ende dieses Labs können Sie Fehler in Ihren React-Anwendungen effektiv behandeln.",
      "meta": {
        "title": "Beherrschen des React useError-Hooks",
        "description": "Lernen Sie, wie Sie mit dem React useError-Hook einen Fehler-Dispatcher erstellen und Fehler in Ihren Anwendungen effektiv behandeln.",
        "keywords": "Fehlerbehandlung (error handling), React, Webentwicklung (web development), Hooks, useerror"
      },
      "details": {
        "steps": [
          {
            "title": "React useError-Hook",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen Sie den Laufstatus des Web-Services",
                "file": "verify1-1.sh",
                "hint": "Bitte klicken Sie auf 'Go Live' in der unteren rechten Ecke, um den Web-Service auf Port 8080 auszuführen. Anschließend können Sie die Registerkarte **Web 8080** aktualisieren, um die Webseite anzusehen."
              },
              {
                "name": "Überprüfen Sie den Status der Änderungen an script.js",
                "file": "verify1-2.sh",
                "hint": "Bitte befolgen Sie die Schritte, um das Lab abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "React の useError フック",
      "description": "この実験では、React の useError フックを使用してエラーディスパッチャーを作成する方法を学びます。このフックを使うと、エラーを保持する状態変数を作成し、その値が真の場合にエラーをスローすることができます。また、useCallback フックを使用して状態を更新し、キャッシュされた関数を返します。この実験の最後まで進めると、React アプリケーションでエラーを効果的に処理できるようになります。",
      "meta": {
        "title": "React の useError フックをマスターする",
        "description": "React の useError フックを使ってエラーディスパッチャーを作成し、アプリケーション内でエラーを効果的に処理する方法を学びましょう。",
        "keywords": "エラーハンドリング，React, Web 開発，フック，useerror"
      },
      "details": {
        "steps": [
          {
            "title": "React の useError フック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Web サービスの実行状態を確認する",
                "file": "verify1-1.sh",
                "hint": "右下隅にある「Go Live」をクリックして、ポート 8080 で Web サービスを実行してください。その後、**Web 8080** タブを更新すると、Web ページをプレビューできます。"
              },
              {
                "name": "script.js の変更状態を確認する",
                "file": "verify1-2.sh",
                "hint": "手順に従って実験を完了してください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Хук React useError",
      "description": "В этом практическом занятии (лабораторной работе) мы научимся создавать диспетчер ошибок с использованием хука useError в React. Этот хук позволяет нам создать переменную состояния, которая хранит ошибку и выбрасывает ее, если она имеет истинное значение. Мы также будем использовать хук useCallback для обновления состояния и возврата закэшированной функции. По завершении этого практического занятия вы сможете эффективно обрабатывать ошибки в своих React-приложениях.",
      "meta": {
        "title": "Освоение хука useError в React",
        "description": "Узнайте, как создать диспетчер ошибок с использованием хука React useError и эффективно обрабатывать ошибки в своих приложениях.",
        "keywords": "обработка ошибок, react, веб-разработка, хуки, useerror"
      },
      "details": {
        "steps": [
          {
            "title": "Хук React useError",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить состояние запуска веб-сервиса",
                "file": "verify1-1.sh",
                "hint": "Нажмите на кнопку 'Go Live' в правом нижнем углу, чтобы запустить веб-сервис на порту 8080. Затем вы можете обновить вкладку **Web 8080**, чтобы предварительно просмотреть веб-страницу."
              },
              {
                "name": "Проверить состояние изменения файла script.js",
                "file": "verify1-2.sh",
                "hint": "Пожалуйста, следуйте инструкциям, чтобы завершить практическое занятие."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
