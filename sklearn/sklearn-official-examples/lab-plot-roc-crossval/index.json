{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "ROC with Cross Validation",
  "description": "In this lab, we will learn how to estimate and visualize the variance of the Receiver Operating Characteristic (ROC) metric using cross-validation in Python. ROC curves are used in binary classification to measure the performance of a model by plotting the true positive rate (TPR) against the false positive rate (FPR). We will use the Scikit-learn library to load the iris dataset, create noisy features, and classify the dataset with Support Vector Machine (SVM). We will then plot the ROC curves with cross-validation and calculate the mean Area Under the Curve (AUC) to see the variability of the classifier output when the training set is split into different subsets.",
  "meta": {
    "title": "Estimating ROC Variance with Cross-Validation",
    "description": "Learn how to estimate and visualize the variance of the Receiver Operating Characteristic (ROC) metric using cross-validation in Python.",
    "keywords": "auc, machine learning, cross validation, binary classification, roc, scikit-learn, machine learning playground, svm, scikit-learn playground"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Load and prepare data",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment"
          }
        ],
        "skills": ["ml/sklearn", "sklearn/datasets"]
      },
      {
        "title": "Classification and ROC analysis",
        "text": "en/step2.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify2-1.sh",
            "hint": "This step has no verification at the moment"
          }
        ],
        "skills": ["ml/sklearn", "sklearn/metrics", "sklearn/model_selection"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "plot-roc-crossval.ipynb",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "jupyter-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "BSD 3-Clause",
    "url": "https://github.com/scikit-learn/scikit-learn/tree/main/LICENSE",
    "repo": "https://github.com/scikit-learn/scikit-learn"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用交叉验证的 ROC",
      "description": "在本实验中，我们将学习如何使用 Python 中的交叉验证来估计和可视化接收器操作特征（ROC）指标的方差。ROC 曲线用于二分类，通过绘制真阳性率（TPR）与假阳性率（FPR）来衡量模型的性能。我们将使用 Scikit-learn 库加载鸢尾花数据集，创建噪声特征，并使用支持向量机（SVM）对数据集进行分类。然后，我们将通过交叉验证绘制 ROC 曲线，并计算曲线下面积（AUC）的平均值，以了解当训练集被拆分为不同子集时分类器输出的可变性。",
      "meta": {
        "title": "通过交叉验证估计 ROC 方差",
        "description": "学习如何使用 Python 中的交叉验证来估计和可视化接收器操作特征（ROC）指标的方差。",
        "keywords": "AUC, 机器学习，交叉验证，二分类，ROC, Scikit-learn, 机器学习平台，SVM, Scikit-learn 平台"
      },
      "details": {
        "steps": [
          {
            "title": "加载并准备数据",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          },
          {
            "title": "分类与 ROC 分析",
            "text": "zh/step2.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify2-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "ROC con Validación Cruzada",
      "description": "En este laboratorio, aprenderemos a estimar y visualizar la varianza de la métrica Receiver Operating Characteristic (ROC) utilizando validación cruzada en Python. Las curvas ROC se utilizan en la clasificación binaria para medir el rendimiento de un modelo al trazar la tasa de verdaderos positivos (TPR) contra la tasa de falsos positivos (FPR). Utilizaremos la biblioteca Scikit-learn para cargar el conjunto de datos iris, crear características ruidosas y clasificar el conjunto de datos con Máquina de Vectores de Soporte (SVM). Luego graficaremos las curvas ROC con validación cruzada y calcularemos el área media debajo de la curva (AUC) para ver la variabilidad de la salida del clasificador cuando el conjunto de entrenamiento se divide en diferentes subconjuntos.",
      "meta": {
        "title": "Estimando la Varianza de ROC con Validación Cruzada",
        "description": "Aprende a estimar y visualizar la varianza de la métrica Receiver Operating Characteristic (ROC) utilizando validación cruzada en Python.",
        "keywords": "auc, aprendizaje automático, validación cruzada, clasificación binaria, roc, scikit-learn, playground de aprendizaje automático, svm, playground de scikit-learn"
      },
      "details": {
        "steps": [
          {
            "title": "Cargar y preparar los datos",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificaciones en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificaciones en este momento"
              }
            ]
          },
          {
            "title": "Clasificación y análisis ROC",
            "text": "es/step2.md",
            "verify": [
              {
                "name": "Este paso no tiene verificaciones en este momento",
                "file": "verify2-1.sh",
                "hint": "Este paso no tiene verificaciones en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "ROC avec validation croisée",
      "description": "Dans ce laboratoire, nous allons apprendre à estimer et à visualiser la variance de la métrique Receiver Operating Characteristic (ROC) à l'aide de la validation croisée en Python. Les courbes ROC sont utilisées dans la classification binaire pour mesurer les performances d'un modèle en traçant le taux de vrais positifs (TPR) en fonction du taux de faux positifs (FPR). Nous utiliserons la bibliothèque Scikit-learn pour charger l'ensemble de données iris, créer des caractéristiques bruitées et classifier l'ensemble de données avec un Support Vector Machine (SVM). Nous tracerons ensuite les courbes ROC avec la validation croisée et calculerons la moyenne de l'aire sous la courbe (AUC) pour voir la variabilité de la sortie du classifieur lorsque l'ensemble d'entraînement est divisé en différents sous-ensembles.",
      "meta": {
        "title": "Estimation de la variance de la ROC avec la validation croisée",
        "description": "Apprenez à estimer et à visualiser la variance de la métrique Receiver Operating Characteristic (ROC) à l'aide de la validation croisée en Python.",
        "keywords": "auc, apprentissage automatique, validation croisée, classification binaire, roc, scikit-learn, terrain de jeu d'apprentissage automatique, svm, terrain de jeu scikit-learn"
      },
      "details": {
        "steps": [
          {
            "title": "Charger et préparer les données",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          },
          {
            "title": "Classification et analyse ROC",
            "text": "fr/step2.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify2-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "ROC mit Kreuzvalidierung",
      "description": "In diesem Lab werden wir lernen, wie man die Varianz der Receiver Operating Characteristic (ROC)-Metrik mit Hilfe von Kreuzvalidierung in Python abschätzt und visualisiert. ROC-Kurven werden bei der binären Klassifikation verwendet, um die Leistung eines Modells zu messen, indem die wahre Positivrate (TPR) gegen die falsche Positivrate (FPR) aufgetragen wird. Wir werden die Scikit-learn-Bibliothek verwenden, um den Iris-Datensatz zu laden, rauschende Merkmale zu erstellen und den Datensatz mit Support Vector Machine (SVM) zu klassifizieren. Anschließend werden wir die ROC-Kurven mit Kreuzvalidierung plotten und die durchschnittliche Fläche unter der Kurve (AUC) berechnen, um die Variabilität der Klassifikatorausgabe zu sehen, wenn der Trainingssatz in verschiedene Teilmengen unterteilt wird.",
      "meta": {
        "title": "Abschätzung der ROC-Varianz mit Kreuzvalidierung",
        "description": "Lernen Sie, wie man die Varianz der Receiver Operating Characteristic (ROC)-Metrik mit Hilfe von Kreuzvalidierung in Python abschätzt und visualisiert.",
        "keywords": "auc, maschinelles Lernen, Kreuzvalidierung, binäre Klassifikation, roc, scikit-learn, maschinelles Lernspielplatz, svm, scikit-learn-Spielfeld"
      },
      "details": {
        "steps": [
          {
            "title": "Daten laden und vorbereiten",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          },
          {
            "title": "Klassifikation und ROC-Analyse",
            "text": "de/step2.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify2-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "交差検証を用いた ROC",
      "description": "この実験では、Python で交差検証を使って受信者操作特性（ROC）メトリックの分散を推定し、可視化する方法を学びます。ROC 曲線は、2 値分類において、真陽性率（TPR）を偽陽性率（FPR）に対してプロットすることでモデルの性能を測定するために使用されます。私たちは、Scikit-learn ライブラリを使ってアイリスデータセットを読み込み、ノイズのある特徴を作成し、サポートベクターマシン（SVM）でデータセットを分類します。その後、交差検証を使って ROC 曲線をプロットし、曲線下の平均面積（AUC）を計算して、訓練セットが異なるサブセットに分割されたときの分類器出力の変動性を見ます。",
      "meta": {
        "title": "交差検証による ROC 分散の推定",
        "description": "Python で交差検証を使って受信者操作特性（ROC）メトリックの分散を推定し、可視化する方法を学びましょう。",
        "keywords": "auc, 機械学習，交差検証，2 値分類，roc, scikit-learn, 機械学習のプレイグラウンド，svm, scikit-learn のプレイグラウンド"
      },
      "details": {
        "steps": [
          {
            "title": "データの読み込みと準備",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在検証はありません"
              }
            ]
          },
          {
            "title": "分類と ROC 分析",
            "text": "ja/step2.md",
            "verify": [
              {
                "name": "このステップには現在検証はありません",
                "file": "verify2-1.sh",
                "hint": "このステップには現在検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "ROC с использованием кросс-валидации",
      "description": "В этом практическом занятии мы научимся оценивать и визуализировать дисперсию метрики Receiver Operating Characteristic (ROC) с использованием кросс-валидации в Python. ROC-кривые используются в бинарной классификации для оценки качества модели путём построения отношения истинно-положительных случаев (TPR) к ложно-положительным (FPR). Мы будем использовать библиотеку Scikit-learn для загрузки датасета iris, создания шумовых признаков и классификации датасета с использованием Support Vector Machine (SVM). Затем мы построим ROC-кривые с использованием кросс-валидации и вычислим среднюю площадь под кривой (AUC), чтобы увидеть изменчивость выхода классификатора при разбиении обучающего набора на разные подмножества.",
      "meta": {
        "title": "Оценка дисперсии ROC с использованием кросс-валидации",
        "description": "Изучите, как оценить и визуализировать дисперсию метрики Receiver Operating Characteristic (ROC) с использованием кросс-валидации в Python.",
        "keywords": "auc, машинное обучение, кросс-валидация, бинарная классификация, roc, scikit-learn, площадка для машинного обучения, svm, площадка scikit-learn"
      },
      "details": {
        "steps": [
          {
            "title": "Загрузка и подготовка данных",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          },
          {
            "title": "Классификация и анализ ROC",
            "text": "ru/step2.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify2-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "교차 검증을 통한 ROC 분석",
      "description": "이 실습에서는 파이썬을 사용하여 교차 검증을 통해 수신자 작동 특성 (ROC) 지표의 분산을 추정하고 시각화하는 방법을 배웁니다. ROC 곡선은 이진 분류에서 모델의 성능을 측정하는 데 사용되며, 거짓 양성률 (FPR) 대 참 양성률 (TPR) 을 플롯하여 나타냅니다. Scikit-learn 라이브러리를 사용하여 아이리스 데이터셋을 로드하고 노이즈 특징을 생성한 후 서포트 벡터 머신 (SVM) 으로 데이터셋을 분류합니다. 그런 다음 교차 검증을 통해 ROC 곡선을 플롯하고, 훈련 세트를 서로 다른 하위 집합으로 분할했을 때 분류기 출력의 변동성을 확인하기 위해 곡선 아래 면적 (AUC) 의 평균을 계산합니다.",
      "meta": {
        "title": "교차 검증을 이용한 ROC 분산 추정",
        "description": "파이썬을 사용하여 교차 검증을 통해 수신자 작동 특성 (ROC) 지표의 분산을 추정하고 시각화하는 방법을 배우세요.",
        "keywords": "AUC, 머신러닝, 교차 검증, 이진 분류, ROC, scikit-learn, SVM, 머신러닝, ROC 분석, 교차검증 ROC, ROC 곡선, 아이리스 데이터셋"
      },
      "details": {
        "steps": [
          {
            "title": "데이터 로드 및 준비",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          },
          {
            "title": "분류 및 ROC 분석",
            "text": "ko/step2.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify2-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "ROC com Validação Cruzada",
      "description": "Neste laboratório, aprenderemos a estimar e visualizar a variância da métrica Receiver Operating Characteristic (ROC) utilizando validação cruzada em Python. As curvas ROC são usadas na classificação binária para medir o desempenho de um modelo, plotando a taxa de verdadeiros positivos (TPR) contra a taxa de falsos positivos (FPR). Usaremos a biblioteca Scikit-learn para carregar o conjunto de dados iris, criar recursos ruidosos e classificar o conjunto de dados com Máquina de Vetores de Suporte (SVM). Em seguida, plotaremos as curvas ROC com validação cruzada e calcularemos a área média sob a curva (AUC) para observar a variabilidade da saída do classificador quando o conjunto de treinamento é dividido em diferentes subconjuntos.",
      "meta": {
        "title": "Estimação da Variância ROC com Validação Cruzada",
        "description": "Aprenda a estimar e visualizar a variância da métrica Receiver Operating Characteristic (ROC) utilizando validação cruzada em Python.",
        "keywords": "auc, aprendizado de máquina, validação cruzada, classificação binária, roc, scikit-learn, playground de aprendizado de máquina, svm, playground scikit-learn, curvas roc, análise roc, variância roc, validação cruzada python"
      },
      "details": {
        "steps": [
          {
            "title": "Carregar e preparar os dados",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Esta etapa não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Esta etapa não possui verificação no momento"
              }
            ]
          },
          {
            "title": "Análise de Classificação e ROC",
            "text": "pt/step2.md",
            "verify": [
              {
                "name": "Esta etapa não possui verificação no momento",
                "file": "verify2-1.sh",
                "hint": "Esta etapa não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
