{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Implementing Rate Limiting in Go | Challenge",
  "description": "The challenge demonstrates how to implement rate limiting in Go using goroutines, channels, and tickers.",
  "meta": {
    "title": "Go Programming | Rate Limiting | Goroutines, Channels, Tickers",
    "description": "Learn how to implement rate limiting in Go using goroutines, channels, and tickers to maintain quality of service and control resource utilization.",
    "keywords": "Go Programming, Rate Limiting, Goroutines, Channels, Tickers, Resource Utilization, Quality of Service"
  },
  "difficulty": "Beginner",
  "time": 15,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Rate Limiting",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify First Batch of Requests Handled Every 200 Milliseconds",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have completed the required actions.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": ["go/rate_limiting"],
        "solutions": ["rate-limiting.go"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "rate-limiting.go",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["jiaosenvip"],
  "license": {
    "name": "CC-BY-3.0",
    "url": "http://creativecommons.org/licenses/by/3.0/",
    "repo": "https://github.com/mmcgrana/gobyexample"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "在 Go 语言中实现速率限制 | 挑战",
      "description": "本挑战展示了如何使用 goroutine、通道和定时器在 Go 语言中实现速率限制。",
      "meta": {
        "title": "Go 编程 | 速率限制 | Goroutine、通道、定时器",
        "description": "学习如何使用 goroutine、通道和定时器在 Go 语言中实现速率限制，以维持服务质量并控制资源利用。",
        "keywords": "Go 编程、速率限制、Goroutine、通道、定时器、资源利用、服务质量"
      },
      "details": {
        "steps": [
          {
            "title": "速率限制",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证每 200 毫秒处理一批请求",
                "file": "verify1-1.sh",
                "hint": "请确保你已完成所需操作。"
              }
            ],
            "solutions": ["rate-limiting.go"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Implementando la limitación de velocidad en Go | Desafío",
      "description": "Este desafío demuestra cómo implementar la limitación de velocidad en Go utilizando gorutinas, canales y temporizadores.",
      "meta": {
        "title": "Programación en Go | Limitación de velocidad | Gorutinas, Canales, Temporizadores",
        "description": "Aprende cómo implementar la limitación de velocidad en Go utilizando gorutinas, canales y temporizadores para mantener la calidad del servicio y controlar el uso de recursos.",
        "keywords": "Programación en Go, Limitación de velocidad, Gorutinas, Canales, Temporizadores, Uso de recursos, Calidad del servicio"
      },
      "details": {
        "steps": [
          {
            "title": "Limitación de Velocidad",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar que el primer lote de solicitudes se maneje cada 200 milisegundos",
                "file": "verify1-1.sh",
                "hint": "Asegúrese de haber completado las acciones requeridas."
              }
            ],
            "solutions": ["rate-limiting.go"]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Implémentation de la limitation de débit en Go | Défi",
      "description": "Le défi montre comment implémenter la limitation de débit en Go à l'aide de goroutines, de canaux et de minuteurs.",
      "meta": {
        "title": "Programmation Go | Limitation de débit | Goroutines, Canaux, Minuteurs",
        "description": "Découvrez comment implémenter la limitation de débit en Go à l'aide de goroutines, de canaux et de minuteurs pour maintenir la qualité de service et contrôler l'utilisation des ressources.",
        "keywords": "Programmation Go, Limitation de débit, Goroutines, Canaux, Minuteurs, Utilisation des ressources, Qualité de service"
      },
      "details": {
        "steps": [
          {
            "title": "Limitation de débit",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez que le premier lot de requêtes est traité toutes les 200 millisecondes",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir effectué les actions requises."
              }
            ],
            "solutions": ["rate-limiting.go"]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Rate Limiting in Go implementieren | Herausforderung",
      "description": "Die Herausforderung zeigt, wie man Rate Limiting in Go mit Goroutinen, Kanälen und Tastern implementiert.",
      "meta": {
        "title": "Go-Programmierung | Rate Limiting | Goroutinen, Kanäle, Taster",
        "description": "Lernen Sie, wie Sie Rate Limiting in Go mit Goroutinen, Kanälen und Tastern implementieren, um die Dienstqualität aufrechtzuerhalten und die Ressourcennutzung zu steuern.",
        "keywords": "Go-Programmierung, Rate Limiting, Goroutinen, Kanäle, Taster, Ressourcennutzung, Dienstqualität"
      },
      "details": {
        "steps": [
          {
            "title": "Rate Limiting",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren Sie, dass die erste Batch-Anfragen alle 200 Millisekunden behandelt werden",
                "file": "verify1-1.sh",
                "hint": "Bitte stellen Sie sicher, dass Sie die erforderlichen Aktionen abgeschlossen haben."
              }
            ],
            "solutions": ["rate-limiting.go"]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Go言語でのレート制限の実装 | チャレンジ",
      "description": "このチャレンジでは、goroutine、チャネル、およびタイカーを使用してGoでレート制限を実装する方法を示します。",
      "meta": {
        "title": "Goプログラミング | レート制限 | Goroutine、チャネル、タイカー",
        "description": "goroutine、チャネル、およびタイカーを使用してGoでレート制限を実装し、サービス品質を維持し、リソースの利用を制御する方法を学びましょう。",
        "keywords": "Goプログラミング、レート制限、Goroutine、チャネル、タイカー、リソース利用、サービス品質"
      },
      "details": {
        "steps": [
          {
            "title": "レート制限",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "200ミリ秒ごとに処理される最初のバッチのリクエストを検証する",
                "file": "verify1-1.sh",
                "hint": "必要な操作を完了したことを確認してください。"
              }
            ],
            "solutions": ["rate-limiting.go"]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Реализация ограничения скорости в Go | Задача",
      "description": "Задача демонстрирует, как реализовать ограничение скорости в Go с использованием горутин, каналов и тикеров.",
      "meta": {
        "title": "Программирование на Go | Ограничение скорости | Горутины, Каналы, Тикеры",
        "description": "Изучите, как реализовать ограничение скорости в Go с использованием горутин, каналов и тикеров для поддержания качества обслуживания и контроля использования ресурсов.",
        "keywords": "Программирование на Go, Ограничение скорости, Горутины, Каналы, Тикеры, Использование ресурсов, Качество обслуживания"
      },
      "details": {
        "steps": [
          {
            "title": "Ограничение скорости",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить, что первая партия запросов обрабатывается каждые 200 миллисекунд",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что вы выполнили требуемые действия."
              }
            ],
            "solutions": ["rate-limiting.go"]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
