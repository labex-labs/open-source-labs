{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Golang Context Cancellation Demonstration | Challenge",
  "description": "This challenge aims to demonstrate the usage of context.Context for controlling cancellation in Golang. A Context carries deadlines, cancellation signals, and other request-scoped values across API boundaries and goroutines.",
  "meta": {
    "title": "Golang Context | Cancellation Signals | Concurrent Programming",
    "description": "Learn how to use Golang's context.Context to control cancellation in HTTP servers and manage request-scoped values across API boundaries.",
    "keywords": "Golang, Context, Cancellation, Concurrent Programming, HTTP Servers"
  },
  "difficulty": "Beginner",
  "time": 15,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Context",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Constant Value in Go Program",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have completed the required actions.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": ["go/context"],
        "solutions": ["context.go"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "context.go",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["jiaosenvip"],
  "license": {
    "name": "CC-BY-3.0",
    "url": "http://creativecommons.org/licenses/by/3.0/",
    "repo": "https://github.com/mmcgrana/gobyexample"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Go语言上下文取消演示 | 挑战",
      "description": "此挑战旨在演示如何在Go语言中使用context.Context来控制取消操作。Context可跨API边界和goroutine携带截止日期、取消信号及其他请求范围的值。",
      "meta": {
        "title": "Go语言上下文 | 取消信号 | 并发编程",
        "description": "学习如何使用Go语言的context.Context在HTTP服务器中控制取消操作，并跨API边界管理请求范围的值。",
        "keywords": "Go语言, 上下文, 取消, 并发编程, HTTP服务器"
      },
      "details": {
        "steps": [
          {
            "title": "上下文",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "在Go程序中验证常量值",
                "file": "verify1-1.sh",
                "hint": "请确保你已完成所需操作。"
              }
            ],
            "solutions": ["context.go"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Demostración de cancelación de contexto en Golang | Desafío",
      "description": "Este desafío tiene como objetivo demostrar el uso de context.Context para controlar la cancelación en Golang. Un Context lleva plazos de finalización, señales de cancelación y otros valores con ámbito de solicitud a través de los límites de API y gorutinas.",
      "meta": {
        "title": "Contexto de Golang | Señales de cancelación | Programación concurrente",
        "description": "Aprende cómo usar el context.Context de Golang para controlar la cancelación en servidores HTTP y administrar valores con ámbito de solicitud a través de los límites de API.",
        "keywords": "Golang, Contexto, Cancelación, Programación concurrente, Servidores HTTP"
      },
      "details": {
        "steps": [
          {
            "title": "Contexto",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar valor constante en programa de Go",
                "file": "verify1-1.sh",
                "hint": "Asegúrese de haber completado las acciones requeridas."
              }
            ],
            "solutions": ["context.go"]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Démonstration de l'annulation avec context.Context en Golang | Défi",
      "description": "Ce défi vise à démontrer l'utilisation de context.Context pour contrôler l'annulation en Golang. Un Context transporte des délais, des signaux d'annulation et d'autres valeurs liées à la requête entre les limites d'API et les goroutines.",
      "meta": {
        "title": "Contexte Golang | Signaux d'annulation | Programmation concurrente",
        "description": "Apprenez à utiliser le context.Context de Golang pour contrôler l'annulation dans les serveurs HTTP et gérer les valeurs liées à la requête entre les limites d'API.",
        "keywords": "Golang, Contexte, Annulation, Programmation concurrente, Serveurs HTTP"
      },
      "details": {
        "steps": [
          {
            "title": "Contexte",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier une valeur constante dans un programme Go",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir effectué les actions requises."
              }
            ],
            "solutions": ["context.go"]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Golang Context Stornierungsdemonstration | Challenge",
      "description": "Diese Aufgabe zielt darauf ab, die Verwendung von context.Context zur Steuerung der Stornierung in Golang zu demonstrieren. Ein Context trägt Fristen, Stornierungssignale und andere anforderungsbezogene Werte über API-Grenzen und Goroutinen hinweg.",
      "meta": {
        "title": "Golang Context | Stornierungssignale | Parallelprogrammierung",
        "description": "Lernen Sie, wie Sie Golang's context.Context verwenden, um die Stornierung in HTTP-Servern zu steuern und anforderungsbezogene Werte über API-Grenzen zu verwalten.",
        "keywords": "Golang, Context, Stornierung, Parallelprogrammierung, HTTP-Server"
      },
      "details": {
        "steps": [
          {
            "title": "Context",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen Sie einen Konstantenwert in einem Go-Programm",
                "file": "verify1-1.sh",
                "hint": "Stellen Sie sicher, dass Sie die erforderlichen Aktionen abgeschlossen haben."
              }
            ],
            "solutions": ["context.go"]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Golangにおけるコンテキストのキャンセルのデモ | チャレンジ",
      "description": "このチャレンジは、Golangにおけるキャンセル制御に対するcontext.Contextの使用方法を示すことを目的としています。Contextは、API境界とゴルーチン間で期限、キャンセル信号、およびその他の要求スコープの値を保持します。",
      "meta": {
        "title": "Golangのコンテキスト | キャンセル信号 | 並列プログラミング",
        "description": "Golangのcontext.Contextを使用してHTTPサーバーでキャンセルを制御し、API境界を越えた要求スコープの値を管理する方法を学びましょう。",
        "keywords": "Golang, コンテキスト, キャンセル, 並列プログラミング, HTTPサーバー"
      },
      "details": {
        "steps": [
          {
            "title": "コンテキスト",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Goプログラムにおける定数値を検証する",
                "file": "verify1-1.sh",
                "hint": "必要な操作を完了していることを確認してください。"
              }
            ],
            "solutions": ["context.go"]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Демонстрация отмены в контексте Golang | Задача",
      "description": "Цель этой задачи - показать использование context.Context для управления отменой в Golang. Контекст переносит даты окончания, сигналы отмены и другие значения, ограниченные запросом, через границы API и goroutine.",
      "meta": {
        "title": "Контекст Golang | Сигналы отмены | Параллельное программирование",
        "description": "Изучите, как использовать context.Context Golang для управления отменой в HTTP-серверах и управления значениями, ограниченными запросом, через границы API.",
        "keywords": "Golang, Контекст, Отмена, Параллельное программирование, HTTP-сервера"
      },
      "details": {
        "steps": [
          {
            "title": "Контекст",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить константное значение в Go-программе",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что вы выполнили требуемые действия."
              }
            ],
            "solutions": ["context.go"]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
