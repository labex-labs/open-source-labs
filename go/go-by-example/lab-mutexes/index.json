{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Concurrent Data Access with Mutexes",
  "description": "This lab aims to demonstrate how to use mutexes to safely access data across multiple goroutines.",
  "meta": {
    "title": "Go Programming | Mutex Synchronization | Concurrent State Management",
    "description": "Learn how to use mutexes to safely access data across multiple goroutines in Go programming. Manage complex state with synchronized access to shared resources.",
    "keywords": "Go programming, mutex, synchronization, concurrent programming, state management, goroutines"
  },
  "difficulty": "Beginner",
  "time": 15,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Mutexes",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Map Counters Updated as Expected",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have completed the required actions.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": ["go/mutexes"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "mutexes.go",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["jiaosenvip"],
  "license": {
    "name": "CC-BY-3.0",
    "url": "http://creativecommons.org/licenses/by/3.0/",
    "repo": "https://github.com/mmcgrana/gobyexample"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用互斥锁进行并发数据访问",
      "description": "本实验旨在演示如何使用互斥锁在多个 goroutine 之间安全地访问数据。",
      "meta": {
        "title": "Go 编程 | 互斥锁同步 | 并发状态管理",
        "description": "学习如何在 Go 编程中使用互斥锁在多个 goroutine 之间安全地访问数据。通过对共享资源的同步访问来管理复杂状态。",
        "keywords": "Go 编程，互斥锁，同步，并发编程，状态管理，goroutine"
      },
      "details": {
        "steps": [
          {
            "title": "互斥锁",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证映射计数器是否按预期更新",
                "file": "verify1-1.sh",
                "hint": "请确保你已完成所需操作。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Acceso a datos concurrentes con Mutexes",
      "description": "Este laboratorio tiene como objetivo demostrar cómo utilizar mutexes para acceder de manera segura a datos a través de múltiples goroutines.",
      "meta": {
        "title": "Programación en Go | Sincronización de Mutex | Administración de Estado Concurrente",
        "description": "Aprenda cómo utilizar mutexes para acceder de manera segura a datos a través de múltiples goroutines en la programación de Go. Administre un estado complejo con acceso sincronizado a recursos compartidos.",
        "keywords": "Programación en Go, mutex, sincronización, programación concurrente, administración de estado, goroutines"
      },
      "details": {
        "steps": [
          {
            "title": "Mutexes",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar que los contadores del mapa se actualicen como se espera",
                "file": "verify1-1.sh",
                "hint": "Asegúrese de haber completado las acciones requeridas."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Accès concurrent à des données avec des mutex",
      "description": "Ce laboratoire vise à démontrer comment utiliser des mutex pour accéder en toute sécurité à des données à travers plusieurs goroutines.",
      "meta": {
        "title": "Programmation Go | Synchronisation mutex | Gestion d'état concurrent",
        "description": "Découvrez comment utiliser des mutex pour accéder en toute sécurité à des données à travers plusieurs goroutines en programmation Go. Gérez un état complexe avec un accès synchronisé à des ressources partagées.",
        "keywords": "Programmation Go, mutex, synchronisation, programmation concurrente, gestion d'état, goroutines"
      },
      "details": {
        "steps": [
          {
            "title": "Mutexes",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez que les compteurs de la carte sont mis à jour comme prévu",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir effectué les actions requises."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Gleichzeitiger Datenzugang mit Mutexes",
      "description": "Dieses Labor hat zum Ziel, zu demonstrieren, wie Mutexes verwendet werden, um Daten sicher über mehrere Goroutines hinweg zuzugreifen.",
      "meta": {
        "title": "Go-Programmierung | Mutex-Synchronisierung | Verwaltung von gleichzeitigen Zuständen",
        "description": "Lernen Sie, wie Sie in der Go-Programmierung Mutexes verwenden, um Daten sicher über mehrere Goroutines hinweg zuzugreifen. Verwalten Sie komplexen Zustand mit synchronisiertem Zugang zu gemeinsam genutzten Ressourcen.",
        "keywords": "Go-Programmierung, Mutex, Synchronisierung, gleichzeitige Programmierung, Zustandsverwaltung, Goroutines"
      },
      "details": {
        "steps": [
          {
            "title": "Mutexes",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren Sie, dass die Map-Zähler wie erwartet aktualisiert werden",
                "file": "verify1-1.sh",
                "hint": "Bitte stellen Sie sicher, dass Sie die erforderlichen Aktionen abgeschlossen haben."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "ミューテックスを使った並行データアクセス",
      "description": "この実験では、複数の goroutine 間で安全にデータにアクセスするためにミューテックスをどのように使用するかを示すことを目的としています。",
      "meta": {
        "title": "Go 言語プログラミング | ミューテックス同期 | 並行状態管理",
        "description": "Go 言語プログラミングにおいて、複数の goroutine 間で安全にデータにアクセスするためにミューテックスをどのように使用するか学びましょう。共有リソースへの同期アクセスにより、複雑な状態を管理します。",
        "keywords": "Go 言語プログラミング，ミューテックス，同期，並行プログラミング，状態管理，goroutine"
      },
      "details": {
        "steps": [
          {
            "title": "ミューテックス",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "マップのカウンタが予想通りに更新されていることを確認する",
                "file": "verify1-1.sh",
                "hint": "必要な操作を完了していることを確認してください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Доступ к данным в параллельном режиме с использованием мьютексов",
      "description": "Цель этого лабораторного практикума - показать, как использовать мьютексы для безопасного доступа к данным из нескольких goroutine.",
      "meta": {
        "title": "Программирование на Go | Синхронизация с мьютексом | Управление состоянием в параллельном режиме",
        "description": "Изучите, как использовать мьютексы для безопасного доступа к данным из нескольких goroutine при программировании на Go. Управляйте сложным состоянием с синхронизированным доступом к общими ресурсам.",
        "keywords": "Программирование на Go, мьютекс, синхронизация, параллельное программирование, управление состоянием, goroutine"
      },
      "details": {
        "steps": [
          {
            "title": "Мьютексы",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить, что счетчики в карте обновлены как ожидается",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что вы выполнили все необходимые действия."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
