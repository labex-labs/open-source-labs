{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Concurrent Goroutine Synchronization",
  "description": "This lab aims to demonstrate how to use channels and goroutines to synchronize access to shared state across multiple goroutines.",
  "meta": {
    "title": "Concurrent Programming | Goroutines | Channels | Synchronization",
    "description": "This lab demonstrates the use of channels and goroutines to synchronize access to shared state across multiple goroutines, showcasing the concept of stateful goroutines and the communication-based approach in concurrent programming.",
    "keywords": "concurrent programming, goroutines, channels, synchronization, shared state, race conditions, data corruption"
  },
  "difficulty": "Beginner",
  "time": 15,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Stateful Goroutines",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Goroutine-Based State Management Example",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have completed the required actions."
          }
        ],
        "skills": ["go/stateful_goroutines"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "stateful-goroutines.go",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["jiaosenvip"],
  "license": {
    "name": "CC-BY-3.0",
    "url": "http://creativecommons.org/licenses/by/3.0/",
    "repo": "https://github.com/mmcgrana/gobyexample"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "并发 Goroutine 同步",
      "description": "本实验旨在演示如何使用通道和 goroutine 来同步多个 goroutine 对共享状态的访问。",
      "meta": {
        "title": "并发编程 | Goroutines | 通道 | 同步",
        "description": "本实验展示了如何使用通道和 goroutine 来同步多个 goroutine 对共享状态的访问，展示了有状态 goroutine 的概念以及并发编程中基于通信的方法。",
        "keywords": "并发编程, goroutines, 通道, 同步, 共享状态, 竞态条件, 数据损坏"
      },
      "details": {
        "steps": [
          {
            "title": "有状态的 Goroutine",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证基于 Goroutine 的状态管理示例",
                "file": "verify1-1.sh",
                "hint": "请确保你已完成所需操作。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Sincronización de Gorutinas Concurrentes",
      "description": "Este laboratorio tiene como objetivo demostrar cómo utilizar canales y gorutinas para sincronizar el acceso a un estado compartido entre múltiples gorutinas.",
      "meta": {
        "title": "Programación Concurrente | Gorutinas | Canales | Sincronización",
        "description": "Este laboratorio demuestra el uso de canales y gorutinas para sincronizar el acceso a un estado compartido entre múltiples gorutinas, mostrando el concepto de gorutinas con estado y el enfoque basado en la comunicación en la programación concurrente.",
        "keywords": "programación concurrente, gorutinas, canales, sincronización, estado compartido, condiciones de carrera, corrupción de datos"
      },
      "details": {
        "steps": [
          {
            "title": "Gorutinas con Estado",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el ejemplo de administración de estado basado en gorutinas",
                "file": "verify1-1.sh",
                "hint": "Asegúrese de haber completado las acciones requeridas."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Synchronisation des Goroutines Concurrentes",
      "description": "Ce laboratoire vise à démontrer comment utiliser les canaux et les goroutines pour synchroniser l'accès à un état partagé entre plusieurs goroutines.",
      "meta": {
        "title": "Programmation Concurrente | Goroutines | Canaux | Synchronisation",
        "description": "Ce laboratoire démontre l'utilisation des canaux et des goroutines pour synchroniser l'accès à un état partagé entre plusieurs goroutines, mettant en évidence le concept de goroutines avec état et l'approche basée sur la communication en programmation concurrente.",
        "keywords": "programmation concurrente, goroutines, canaux, synchronisation, état partagé, conditions de course, corruption des données"
      },
      "details": {
        "steps": [
          {
            "title": "Goroutines avec état",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez l'exemple de gestion d'état basé sur les goroutines",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir effectué les actions requises."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Konnkurrierende Goroutine-Synchronisierung",
      "description": "Dieses Labor hat zum Ziel, zu demonstrieren, wie Kanäle und Goroutinen verwendet werden, um den Zugang zu einem gemeinsamen Zustand über mehrere Goroutinen zu synchronisieren.",
      "meta": {
        "title": "Konnkurrierendes Programmieren | Goroutinen | Kanäle | Synchronisierung",
        "description": "Dieses Labor demonstriert die Verwendung von Kanälen und Goroutinen, um den Zugang zu einem gemeinsamen Zustand über mehrere Goroutinen zu synchronisieren, und zeigt das Konzept von zustandsbehafteten Goroutinen und den auf der Kommunikation basierenden Ansatz im konkurrierenden Programmieren.",
        "keywords": "konkurrierendes Programmieren, Goroutinen, Kanäle, Synchronisierung, gemeinsamer Zustand, Wettlaufbedingungen, Datenschädigung"
      },
      "details": {
        "steps": [
          {
            "title": "Zustandsbehaftete Goroutinen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren des Beispiels zur Zustandsverwaltung auf der Grundlage von Goroutinen",
                "file": "verify1-1.sh",
                "hint": "Bitte stellen Sie sicher, dass Sie die erforderlichen Aktionen abgeschlossen haben."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "並行 Goroutine 同期",
      "description": "この実験では、複数の goroutine 間で共有状態へのアクセスを同期させるために、チャネルと goroutine をどのように使用するかを示します。",
      "meta": {
        "title": "並行プログラミング | Goroutines | チャネル | 同期",
        "description": "この実験では、複数の goroutine 間で共有状態へのアクセスを同期させるためのチャネルと goroutine の使用方法を示しており、状態を持つ goroutine の概念と並行プログラミングにおける通信ベースのアプローチを紹介しています。",
        "keywords": "並行プログラミング, goroutines, チャネル, 同期, 共有状態, 競合条件, データ破損"
      },
      "details": {
        "steps": [
          {
            "title": "状態を持つ Goroutine",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Goroutine ベースの状態管理の例を確認する",
                "file": "verify1-1.sh",
                "hint": "必要な操作を完了していることを確認してください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Синхронизация горутин в параллельном программировании",
      "description": "Этот лаба旨在演示如何使用каналы и горутины для синхронизации доступа к общему состоянию между несколькими горутинами.",
      "meta": {
        "title": "Параллельное программирование | Горутины | Каналы | Синхронизация",
        "description": "Этот лаба демонстрирует использование каналов и горутин для синхронизации доступа к общему состоянию между несколькими горутинами, показывая концепцию состояятельных горутин и подход на основе коммуникации в параллельном программировании.",
        "keywords": "параллельное программирование, горутины, каналы, синхронизация, общее состояние, ситуации гонки, повреждение данных"
      },
      "details": {
        "steps": [
          {
            "title": "Состоятельные горутины",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить пример управления состоянием на основе горутин",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что вы выполнили все необходимые действия."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
