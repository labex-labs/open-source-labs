{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Implementing Timeouts in Go Using Channels",
  "description": "The purpose of this challenge is to implement timeouts in Go using channels and select.",
  "meta": {
    "title": "Go Timeouts | Channels and Select",
    "description": "Learn how to implement timeouts in Go using channels and select, preventing goroutine leaks and using time.After to await a value to be sent after the timeout.",
    "keywords": "Go, Timeouts, Channels, Select, Goroutine, time.After"
  },
  "difficulty": "Beginner",
  "time": 15,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Timeouts",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify First Operation Timeout Second Operation Succeed",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have completed the required actions.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": ["go/timeouts"],
        "solutions": ["timeouts.go"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "timeouts.go",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["jiaosenvip"],
  "license": {
    "name": "CC-BY-3.0",
    "url": "http://creativecommons.org/licenses/by/3.0/",
    "repo": "https://github.com/mmcgrana/gobyexample"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用通道在Go中实现超时处理",
      "description": "本次挑战的目的是在Go中使用通道和select来实现超时处理。",
      "meta": {
        "title": "Go语言中的超时处理 | 通道与select",
        "description": "学习如何在Go中使用通道和select实现超时处理，防止goroutine泄漏，并使用time.After等待超时后发送的值。",
        "keywords": "Go语言, 超时处理, 通道, select, goroutine, time.After"
      },
      "details": {
        "steps": [
          {
            "title": "超时处理",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证第一个操作超时，第二个操作成功",
                "file": "verify1-1.sh",
                "hint": "请确保你已完成所需操作。"
              }
            ],
            "solutions": ["timeouts.go"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Implementando Timeouts en Go Utilizando Canales",
      "description": "El propósito de este desafío es implementar timeouts en Go utilizando canales y select.",
      "meta": {
        "title": "Timeouts de Go | Canales y Select",
        "description": "Aprende cómo implementar timeouts en Go utilizando canales y select, evitando fugas de goroutine y utilizando time.After para esperar a que se envíe un valor después del timeout.",
        "keywords": "Go, Timeouts, Canales, Select, Goroutine, time.After"
      },
      "details": {
        "steps": [
          {
            "title": "Timeouts",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar que la primera operación agote el tiempo y la segunda tenga éxito",
                "file": "verify1-1.sh",
                "hint": "Asegúrese de haber completado las acciones requeridas."
              }
            ],
            "solutions": ["timeouts.go"]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Mise en œuvre de délais d'attente en Go à l'aide de canaux",
      "description": "Le but de ce défi est de mettre en œuvre des délais d'attente en Go à l'aide de canaux et de select.",
      "meta": {
        "title": "Délais d'attente Go | Canaux et Select",
        "description": "Apprenez à mettre en œuvre des délais d'attente en Go à l'aide de canaux et de select, à éviter les fuites de goroutine et à utiliser time.After pour attendre qu'une valeur soit envoyée après le délai d'attente.",
        "keywords": "Go, Délais d'attente, Canaux, Select, Goroutine, time.After"
      },
      "details": {
        "steps": [
          {
            "title": "Délais d'attente",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier que la première opération atteint le délai d'attente et que la seconde réussit",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir effectué les actions requises."
              }
            ],
            "solutions": ["timeouts.go"]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Implementierung von Timeouts in Go mit Kanälen",
      "description": "Zweck dieser Herausforderung ist es, Timeouts in Go mit Hilfe von Kanälen und select zu implementieren.",
      "meta": {
        "title": "Go Timeouts | Kanäle und Select",
        "description": "Lernen Sie, wie Sie in Go Timeouts mit Hilfe von Kanälen und select implementieren, um Goroutine-Lecks zu vermeiden und time.After zu verwenden, um auf einen Wert zu warten, der nach Ablauf der Zeitüberschreitung gesendet wird.",
        "keywords": "Go, Timeouts, Kanäle, Select, Goroutine, time.After"
      },
      "details": {
        "steps": [
          {
            "title": "Timeouts",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren Sie, dass die erste Operation aufgrund der Zeitüberschreitung abgebrochen und die zweite erfolgreich ausgeführt wird",
                "file": "verify1-1.sh",
                "hint": "Bitte stellen Sie sicher, dass Sie die erforderlichen Aktionen durchgeführt haben."
              }
            ],
            "solutions": ["timeouts.go"]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Go言語でチャネルを使ったタイムアウトの実装",
      "description": "このチャレンジの目的は、チャネルとselectを使ってGo言語でタイムアウトを実装することです。",
      "meta": {
        "title": "Go言語のタイムアウト | チャネルとselect",
        "description": "チャネルとselectを使ってGo言語でタイムアウトを実装する方法を学び、ゴルーチンのリークを防ぎ、タイムアウト後に送信される値を待つためにtime.Afterを使用します。",
        "keywords": "Go言語, タイムアウト, チャネル, select, ゴルーチン, time.After"
      },
      "details": {
        "steps": [
          {
            "title": "タイムアウト",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "最初の操作がタイムアウトし、2番目の操作が成功することを確認する",
                "file": "verify1-1.sh",
                "hint": "必要な操作を完了していることを確認してください。"
              }
            ],
            "solutions": ["timeouts.go"]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Реализация таймаутов в Go с использованием каналов",
      "description": "Цель этого испытания - реализовать таймауты в Go с использованием каналов и select.",
      "meta": {
        "title": "Таймауты в Go | Каналы и Select",
        "description": "Изучите, как реализовать таймауты в Go с использованием каналов и select, предотвращая утечку горутин и используя time.After для ожидания отправки значения после истечения таймаута.",
        "keywords": "Go, Таймауты, Каналы, Select, Горутина, time.After"
      },
      "details": {
        "steps": [
          {
            "title": "Таймауты",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить, что первая операция завершается по таймауту, а вторая - успешно",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что вы выполнили все необходимые действия."
              }
            ],
            "solutions": ["timeouts.go"]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
