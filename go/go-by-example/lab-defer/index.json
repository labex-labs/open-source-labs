{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Deferred Function Execution in Go",
  "description": "The defer statement is used to delay the execution of a function until the surrounding function returns. It is often used to ensure that some cleanup is performed after a function completes, regardless of the path taken to get there.",
  "meta": {
    "title": "Defer in Go Programming | Cleanup Execution",
    "description": "Learn how to use the 'defer' statement in Go programming to ensure cleanup tasks are performed after a function completes, regardless of the execution path.",
    "keywords": "Go programming, defer statement, cleanup, file management, error handling"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Defer",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify File Closed After Writing",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have completed the required actions.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "defer.go",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["jiaosenvip"],
  "license": {
    "name": "CC-BY-3.0",
    "url": "http://creativecommons.org/licenses/by/3.0/",
    "repo": "https://github.com/mmcgrana/gobyexample"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Go 语言中的延迟函数执行",
      "description": "`defer` 语句用于延迟函数的执行，直到周围的函数返回。它通常用于确保在函数完成后执行一些清理操作，无论到达那里所采取的路径如何。",
      "meta": {
        "title": "Go 编程中的 defer | 清理执行",
        "description": "了解如何在 Go 编程中使用 `defer` 语句，以确保在函数完成后执行清理任务，无论执行路径如何。",
        "keywords": "Go 编程，`defer` 语句，清理，文件管理，错误处理"
      },
      "details": {
        "steps": [
          {
            "title": "延迟执行",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证写入后文件是否关闭",
                "file": "verify1-1.sh",
                "hint": "请确保你已完成所需操作。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Ejecución diferida de funciones en Go",
      "description": "La declaración defer se utiliza para retrasar la ejecución de una función hasta que la función envolvente devuelve. A menudo se utiliza para garantizar que se realice alguna limpieza después de que una función se complete, independientemente del camino seguido para llegar allí.",
      "meta": {
        "title": "Defer en la programación de Go | Limpieza de ejecución",
        "description": "Aprende cómo utilizar la declaración 'defer' en la programación de Go para garantizar que se realicen tareas de limpieza después de que una función se complete, independientemente del camino de ejecución.",
        "keywords": "Programación de Go, declaración defer, limpieza, gestión de archivos, manejo de errores"
      },
      "details": {
        "steps": [
          {
            "title": "Defer",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar que el archivo se cierre después de escribir",
                "file": "verify1-1.sh",
                "hint": "Asegúrese de haber completado las acciones requeridas."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Exécution différée de fonctions en Go",
      "description": "L'instruction `defer` est utilisée pour différer l'exécution d'une fonction jusqu'à ce que la fonction englobante retourne. Elle est souvent utilisée pour s'assurer que certaines opérations de nettoyage sont effectuées après que la fonction est terminée, quelle que soit la voie suivie pour y arriver.",
      "meta": {
        "title": "Utilisation de defer en programmation Go | Nettoyage de l'exécution",
        "description": "Découvrez comment utiliser l'instruction `defer` en programmation Go pour vous assurer que les tâches de nettoyage sont effectuées après que la fonction est terminée, quelle que soit la voie d'exécution.",
        "keywords": "programmation Go, instruction `defer`, nettoyage, gestion de fichiers, gestion d'erreurs"
      },
      "details": {
        "steps": [
          {
            "title": "Différer",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier que le fichier est fermé après écriture",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir effectué les actions requises."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Verzögerte Funktionsausführung in Go",
      "description": "Die `defer`-Anweisung wird verwendet, um die Ausführung einer Funktion bis zum Rückgabepunkt der umgebenden Funktion zu verzögern. Sie wird häufig verwendet, um sicherzustellen, dass einige Bereinigungen nach Abschluss einer Funktion durchgeführt werden, unabhängig davon, welchem Pfad man dabei folgt.",
      "meta": {
        "title": "Defer in der Go-Programmierung | Bereinigungsausführung",
        "description": "Lernen Sie, wie Sie die `defer`-Anweisung in der Go-Programmierung verwenden, um sicherzustellen, dass Bereinigungsaufgaben nach Abschluss einer Funktion durchgeführt werden, unabhängig vom Ausführungsweg.",
        "keywords": "Go-Programmierung, `defer`-Anweisung, Bereinigung, Dateiverwaltung, Fehlerbehandlung"
      },
      "details": {
        "steps": [
          {
            "title": "Defer",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren Sie, dass die Datei nach dem Schreiben geschlossen ist",
                "file": "verify1-1.sh",
                "hint": "Bitte stellen Sie sicher, dass Sie die erforderlichen Aktionen ausgeführt haben."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Go 言語における遅延関数の実行",
      "description": "`defer` ステートメントは、周囲の関数が返るまで関数の実行を遅らせるために使用されます。関数が完了した後にクリーンアップ処理が行われるようにするために、関数が完了するまでにどのような経路をたどったかに関係なく、よく使用されます。",
      "meta": {
        "title": "Go 言語のプログラミングにおける Defer | クリーンアップ実行",
        "description": "Go 言語のプログラミングで 'defer' ステートメントをどのように使用するかを学び、関数が完了した後に、実行経路に関係なくクリーンアップタスクが行われるようにしましょう。",
        "keywords": "Go 言語のプログラミング，defer ステートメント，クリーンアップ，ファイル管理，エラーハンドリング"
      },
      "details": {
        "steps": [
          {
            "title": "defer",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "書き込み後のファイルのクローズを確認する",
                "file": "verify1-1.sh",
                "hint": "必要な操作を完了していることを確認してください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Отложенное выполнение функций в Go",
      "description": "Инструкция defer используется для отложения выполнения функции до возврата окружающей функции. Она часто используется для обеспечения выполнения некоторой очистки после завершения функции, независимо от пути, по которому это достигается.",
      "meta": {
        "title": "Defer в Go программировании | Очистка выполнения",
        "description": "Изучите, как использовать инструкцию 'defer' в Go программировании, чтобы обеспечить выполнение задач по очистке после завершения функции, независимо от пути выполнения.",
        "keywords": "Go программирование, инструкция defer, очистка, управление файлами, обработка ошибок"
      },
      "details": {
        "steps": [
          {
            "title": "Defer",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить, что файл закрыт после записи",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что вы выполнили все необходимые действия."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "Go 언어의 지연 함수 실행",
      "description": "defer 문은 둘러싸는 함수가 반환될 때까지 함수의 실행을 지연시키는 데 사용됩니다. 함수가 완료된 후, 실행 경로에 관계없이 일부 정리가 수행되도록 보장하기 위해 자주 사용됩니다.",
      "meta": {
        "title": "Go 프로그래밍 'defer' 사용법 | 정리 실행 보장",
        "description": "Go 프로그래밍에서 'defer' 문을 사용하여 함수가 완료된 후, 실행 경로에 관계없이 정리 작업을 수행하는 방법을 알아보세요.",
        "keywords": "Go 프로그래밍, defer 문, 정리, 파일 관리, 오류 처리, Go defer, Go 지연 실행, Go 함수 정리"
      },
      "details": {
        "steps": [
          {
            "title": "Defer",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "파일 쓰기 후 닫힘 확인",
                "file": "verify1-1.sh",
                "hint": "필수 작업을 완료했는지 확인하십시오."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Execução de Funções Adiadas em Go",
      "description": "A declaração 'defer' é usada para adiar a execução de uma função até que a função circundante retorne. É frequentemente usada para garantir que alguma limpeza seja realizada após a conclusão de uma função, independentemente do caminho percorrido para chegar lá.",
      "meta": {
        "title": "Defer em Programação Go | Execução de Limpeza",
        "description": "Aprenda como usar a declaração 'defer' na programação Go para garantir que as tarefas de limpeza sejam realizadas após a conclusão de uma função, independentemente do caminho de execução. Otimize seu código Go com 'defer' para gerenciamento de recursos e tratamento de erros.",
        "keywords": "Programação Go, declaração defer, limpeza, gerenciamento de arquivos, tratamento de erros, Go defer, adiar execução Go"
      },
      "details": {
        "steps": [
          {
            "title": "Defer",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar Arquivo Fechado Após Escrita",
                "file": "verify1-1.sh",
                "hint": "Por favor, certifique-se de ter concluído as ações necessárias."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
