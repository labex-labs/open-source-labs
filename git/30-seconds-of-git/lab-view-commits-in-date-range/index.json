{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "View Commits in a Specific Date Range",
  "description": "Git is a powerful version control system that allows developers to keep track of changes made to their codebase. One of the most useful features of Git is the ability to view commits in a specific date range. This can be helpful when trying to track down a bug or understand the history of a project.",
  "meta": {
    "title": "Explore Git Commit History with Date Range",
    "description": "Learn how to view commits in a specific date range using Git commands like git log with --since and --until options.",
    "keywords": "date range, version control, git log, git labs, git, commit history, git playground"
  },
  "difficulty": "Beginner",
  "time": 20,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "verified": true,
  "details": {
    "steps": [
      {
        "title": "Cloning the Git Repository",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify repository cloning",
            "file": "verify1-1.sh",
            "hint": "Make sure you have cloned the git-playground repository.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      },
      {
        "title": "Exploring Basic Git Log Command",
        "text": "en/step2.md",
        "verify": [
          {
            "name": "Verify git log usage",
            "file": "verify2-1.sh",
            "hint": "Make sure you have run the git log command."
          }
        ],
        "skills": []
      },
      {
        "title": "Viewing Commits in a Specific Date Range",
        "text": "en/step3.md",
        "verify": [
          {
            "name": "Verify date range filtering",
            "file": "verify3-1.sh",
            "hint": "Make sure you've used the git log command with date ranges."
          }
        ],
        "skills": []
      },
      {
        "title": "Using Relative Dates and Formatting Options",
        "text": "en/step4.md",
        "verify": [
          {
            "name": "Verify relative date usage",
            "file": "verify4-1.sh",
            "hint": "Make sure you've used the git log command with relative dates."
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "vnc-ubuntu:2204"
  },
  "contributors": ["xiaoshengyunan"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-git/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-git"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "查看特定日期范围内的提交",
      "description": "Git 是一个强大的版本控制系统，它允许开发者跟踪代码库的变更。Git 最有用的功能之一是能够查看特定日期范围内的提交。当你试图追踪 bug 或了解项目历史时，这会很有帮助。",
      "meta": {
        "title": "通过日期范围探索 Git 提交历史",
        "description": "学习如何使用带有 --since 和 --until 选项的 git log 等 Git 命令查看特定日期范围内的提交。",
        "keywords": "日期范围，版本控制，git log, Git 实验，Git, 提交历史，Git 练习场"
      },
      "details": {
        "steps": [
          {
            "title": "克隆 Git 仓库",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证仓库克隆情况",
                "file": "verify1-1.sh",
                "hint": "确保你已克隆了 git-playground 仓库。"
              }
            ]
          },
          {
            "title": "探索基本的 Git Log 命令",
            "text": "zh/step2.md",
            "verify": [
              {
                "name": "验证 git log 命令的使用",
                "file": "verify2-1.sh",
                "hint": "确保你已经运行了 git log 命令。"
              }
            ]
          },
          {
            "title": "查看特定日期范围内的提交记录",
            "text": "zh/step3.md",
            "verify": [
              {
                "name": "验证日期范围过滤功能",
                "file": "verify3-1.sh",
                "hint": "确保你已使用带有日期范围的 git log 命令。"
              }
            ]
          },
          {
            "title": "使用相对日期和格式化选项",
            "text": "zh/step4.md",
            "verify": [
              {
                "name": "验证相对日期的使用",
                "file": "verify4-1.sh",
                "hint": "确保你已使用带有相对日期的 git log 命令。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Ver commits en un rango de fechas específico",
      "description": "Git es un potente sistema de control de versiones que permite a los desarrolladores hacer un seguimiento de los cambios realizados en su base de código. Una de las características más útiles de Git es la capacidad de ver los commits en un rango de fechas específico. Esto puede ser útil cuando se intenta localizar un error o entender la historia de un proyecto.",
      "meta": {
        "title": "Explora el historial de commits de Git con un rango de fechas",
        "description": "Aprende cómo ver los commits en un rango de fechas específico utilizando comandos de Git como git log con las opciones --since y --until.",
        "keywords": "rango de fechas, control de versiones, git log, laboratorios de Git, Git, historial de commits, entorno de prueba de Git"
      },
      "details": {
        "steps": [
          {
            "title": "Clonando el repositorio de Git",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar la clonación del repositorio",
                "file": "verify1-1.sh",
                "hint": "Asegúrate de haber clonado el repositorio git-playground."
              }
            ]
          },
          {
            "title": "Explorando el comando básico de git log",
            "text": "es/step2.md",
            "verify": [
              {
                "name": "Verificar el uso de git log",
                "file": "verify2-1.sh",
                "hint": "Asegúrate de haber ejecutado el comando git log."
              }
            ]
          },
          {
            "title": "Viendo commits en un rango de fechas específico",
            "text": "es/step3.md",
            "verify": [
              {
                "name": "Verificar el filtrado por rango de fechas",
                "file": "verify3-1.sh",
                "hint": "Asegúrate de haber usado el comando git log con rangos de fechas."
              }
            ]
          },
          {
            "title": "Usando fechas relativas y opciones de formato",
            "text": "es/step4.md",
            "verify": [
              {
                "name": "Verificar el uso de fechas relativas",
                "file": "verify4-1.sh",
                "hint": "Asegúrate de haber usado el comando git log con fechas relativas."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Afficher les commits dans une plage de dates spécifique",
      "description": "Git est un puissant système de contrôle de version qui permet aux développeurs de suivre les modifications apportées à leur base de code. L'une des fonctionnalités les plus utiles de Git est la capacité d'afficher les commits dans une plage de dates spécifique. Cela peut être utile lorsque vous essayez de localiser un bogue ou de comprendre l'historique d'un projet.",
      "meta": {
        "title": "Explorer l'historique des commits Git avec une plage de dates",
        "description": "Apprenez à afficher les commits dans une plage de dates spécifique en utilisant des commandes Git telles que git log avec les options --since et --until.",
        "keywords": "plage de dates, contrôle de version, git log, laboratoires Git (git labs), Git, historique des commits, terrain de jeu Git (git playground)"
      },
      "details": {
        "steps": [
          {
            "title": "Clonage du dépôt Git",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier le clonage du dépôt",
                "file": "verify1-1.sh",
                "hint": "Assurez-vous d'avoir cloné le dépôt git-playground."
              }
            ]
          },
          {
            "title": "Exploration de la commande de base git log",
            "text": "fr/step2.md",
            "verify": [
              {
                "name": "Vérifier l'utilisation de git log",
                "file": "verify2-1.sh",
                "hint": "Assurez-vous d'avoir exécuté la commande git log."
              }
            ]
          },
          {
            "title": "Visualisation des commits dans une plage de dates spécifique",
            "text": "fr/step3.md",
            "verify": [
              {
                "name": "Vérifier le filtrage par plage de dates",
                "file": "verify3-1.sh",
                "hint": "Assurez-vous d'avoir utilisé la commande git log avec des plages de dates."
              }
            ]
          },
          {
            "title": "Utilisation de dates relatives et d'options de formatage",
            "text": "fr/step4.md",
            "verify": [
              {
                "name": "Vérifier l'utilisation de dates relatives",
                "file": "verify4-1.sh",
                "hint": "Assurez-vous d'avoir utilisé la commande git log avec des dates relatives."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Commits in einem bestimmten Datumsbereich anzeigen",
      "description": "Git ist ein leistungsstarkes Versionskontrollsystem, das es Entwicklern ermöglicht, die Änderungen an ihrem Codebase zu verfolgen. Eine der nützlichsten Funktionen von Git ist die Möglichkeit, Commits in einem bestimmten Datumsbereich anzuzeigen. Dies kann hilfreich sein, wenn Sie versuchen, einen Bug aufzuspüren oder die Geschichte eines Projekts zu verstehen.",
      "meta": {
        "title": "Entdecken Sie die Git-Commit-Historie mit Datumsbereich",
        "description": "Lernen Sie, wie Sie Commits in einem bestimmten Datumsbereich mithilfe von Git-Befehlen wie git log mit den Optionen --since und --until anzeigen können.",
        "keywords": "Datumsbereich, Versionskontrolle, git log, Git-Labs, Git, Commit-Historie, Git-Playground"
      },
      "details": {
        "steps": [
          {
            "title": "Klonen des Git-Repositories",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen des Repository-Klonings",
                "file": "verify1-1.sh",
                "hint": "Stellen Sie sicher, dass Sie das git-playground-Repository geklont haben."
              }
            ]
          },
          {
            "title": "Erkundung des grundlegenden Git Log-Befehls",
            "text": "de/step2.md",
            "verify": [
              {
                "name": "Überprüfen der Verwendung von git log",
                "file": "verify2-1.sh",
                "hint": "Stellen Sie sicher, dass Sie den git log-Befehl ausgeführt haben."
              }
            ]
          },
          {
            "title": "Anzeigen von Commits in einem bestimmten Datumsbereich",
            "text": "de/step3.md",
            "verify": [
              {
                "name": "Überprüfen der Datumsbereichsfilterung",
                "file": "verify3-1.sh",
                "hint": "Stellen Sie sicher, dass Sie den git log-Befehl mit Datumsbereichen verwendet haben."
              }
            ]
          },
          {
            "title": "Verwendung von relativen Datumsangaben und Formatierungsoptionen",
            "text": "de/step4.md",
            "verify": [
              {
                "name": "Überprüfen der Verwendung von relativen Datumsangaben",
                "file": "verify4-1.sh",
                "hint": "Stellen Sie sicher, dass Sie den git log-Befehl mit relativen Datumsangaben verwendet haben."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "特定の日付範囲内のコミットを表示する",
      "description": "Git は強力なバージョン管理システムで、開発者がコードベースに加えられた変更を追跡することができます。Git の最も便利な機能の 1 つは、特定の日付範囲内のコミットを表示する機能です。これは、バグを特定したり、プロジェクトの履歴を理解したりする際に役立ちます。",
      "meta": {
        "title": "日付範囲で Git コミット履歴を探索する",
        "description": "--since と --until オプションを使った git log などの Git コマンドを使用して、特定の日付範囲内のコミットを表示する方法を学びましょう。",
        "keywords": "日付範囲，バージョン管理，git log, Git 実験，Git, コミット履歴，Git プレイグラウンド"
      },
      "details": {
        "steps": [
          {
            "title": "Git リポジトリのクローン",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "リポジトリのクローンを確認する",
                "file": "verify1-1.sh",
                "hint": "git-playground リポジトリをクローンしていることを確認してください。"
              }
            ]
          },
          {
            "title": "基本的な git log コマンドの探索",
            "text": "ja/step2.md",
            "verify": [
              {
                "name": "git log コマンドの使用を確認する",
                "file": "verify2-1.sh",
                "hint": "git log コマンドを実行したことを確認してください。"
              }
            ]
          },
          {
            "title": "特定の日付範囲のコミットを表示する",
            "text": "ja/step3.md",
            "verify": [
              {
                "name": "日付範囲のフィルタリングを確認する",
                "file": "verify3-1.sh",
                "hint": "日付範囲を指定して git log コマンドを使用したことを確認してください。"
              }
            ]
          },
          {
            "title": "相対日付と書式オプションの使用",
            "text": "ja/step4.md",
            "verify": [
              {
                "name": "相対日付の使用を確認する",
                "file": "verify4-1.sh",
                "hint": "相対日付を指定して git log コマンドを使用したことを確認してください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Просмотр коммитов в определенном диапазоне дат",
      "description": "Git - это мощная система управления версиями, которая позволяет разработчикам отслеживать изменения, внесенные в их кодовую базу. Одна из самых полезных функций Git - это возможность просматривать коммиты в определенном диапазоне дат. Это может быть полезно при попытке найти ошибку или понять историю проекта.",
      "meta": {
        "title": "Исследуйте историю коммитов Git по диапазону дат",
        "description": "Узнайте, как просматривать коммиты в определенном диапазоне дат с использованием команд Git, таких как git log с параметрами --since и --until.",
        "keywords": "диапазон дат, система управления версиями, git log, git лабы, git, история коммитов, git песочница"
      },
      "details": {
        "steps": [
          {
            "title": "Клонирование репозитория Git",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверка клонирования репозитория",
                "file": "verify1-1.sh",
                "hint": "Убедитесь, что вы клонировали репозиторий git-playground."
              }
            ]
          },
          {
            "title": "Исследование базовой команды git log",
            "text": "ru/step2.md",
            "verify": [
              {
                "name": "Проверка использования команды git log",
                "file": "verify2-1.sh",
                "hint": "Убедитесь, что вы выполнили команду git log."
              }
            ]
          },
          {
            "title": "Просмотр коммитов в определенном диапазоне дат",
            "text": "ru/step3.md",
            "verify": [
              {
                "name": "Проверка фильтрации по диапазону дат",
                "file": "verify3-1.sh",
                "hint": "Убедитесь, что вы использовали команду git log с указанием диапазона дат."
              }
            ]
          },
          {
            "title": "Использование относительных дат и параметров форматирования",
            "text": "ru/step4.md",
            "verify": [
              {
                "name": "Проверка использования относительных дат",
                "file": "verify4-1.sh",
                "hint": "Убедитесь, что вы использовали команду git log с относительными датами."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "특정 날짜 범위 내의 커밋 보기",
      "description": "Git 은 개발자가 코드베이스에 대한 변경 사항을 추적할 수 있도록 하는 강력한 버전 관리 시스템입니다. Git 의 가장 유용한 기능 중 하나는 특정 날짜 범위 내의 커밋을 볼 수 있는 기능입니다. 이는 버그를 추적하거나 프로젝트의 히스토리를 이해하려는 경우에 유용할 수 있습니다.",
      "meta": {
        "title": "Git 커밋 히스토리, 날짜 범위로 탐색하기 - Git 명령어 활용",
        "description": "git log 와 --since, --until 옵션과 같은 Git 명령어를 사용하여 특정 날짜 범위 내의 커밋을 보는 방법을 알아보세요.",
        "keywords": "날짜 범위, 버전 관리, git log, git 랩, git, 커밋 히스토리, git playground, 깃 로그, 깃 커밋"
      },
      "details": {
        "steps": [
          {
            "title": "Git 저장소 복제",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "저장소 복제 확인",
                "file": "verify1-1.sh",
                "hint": "git-playground 저장소를 복제했는지 확인하세요."
              }
            ]
          },
          {
            "title": "기본 Git Log 명령어 탐색",
            "text": "ko/step2.md",
            "verify": [
              {
                "name": "git log 사용 확인",
                "file": "verify2-1.sh",
                "hint": "git log 명령어를 실행했는지 확인하세요."
              }
            ]
          },
          {
            "title": "특정 날짜 범위의 커밋 보기",
            "text": "ko/step3.md",
            "verify": [
              {
                "name": "날짜 범위 필터링 확인",
                "file": "verify3-1.sh",
                "hint": "git log 명령어를 날짜 범위와 함께 사용했는지 확인하세요."
              }
            ]
          },
          {
            "title": "상대 날짜 및 형식 옵션 사용",
            "text": "ko/step4.md",
            "verify": [
              {
                "name": "상대 날짜 사용 확인",
                "file": "verify4-1.sh",
                "hint": "git log 명령어를 상대 날짜와 함께 사용했는지 확인하세요."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Visualizar Commits em um Intervalo de Datas Específico",
      "description": "Git é um poderoso sistema de controle de versão que permite aos desenvolvedores acompanhar as alterações feitas em seu código base. Uma das funcionalidades mais úteis do Git é a capacidade de visualizar commits em um intervalo de datas específico. Isso pode ser útil ao tentar rastrear um bug ou entender o histórico de um projeto.",
      "meta": {
        "title": "Explore o Histórico de Commits do Git com Intervalo de Datas",
        "description": "Aprenda como visualizar commits em um intervalo de datas específico usando comandos Git como git log com as opções --since e --until.",
        "keywords": "intervalo de datas, controle de versão, git log, git labs, git, histórico de commits, git playground"
      },
      "details": {
        "steps": [
          {
            "title": "Clonando o Repositório Git",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar a clonagem do repositório",
                "file": "verify1-1.sh",
                "hint": "Certifique-se de que você clonou o repositório git-playground."
              }
            ]
          },
          {
            "title": "Explorando o Comando Git Log Básico",
            "text": "pt/step2.md",
            "verify": [
              {
                "name": "Verificar o uso do git log",
                "file": "verify2-1.sh",
                "hint": "Certifique-se de que você executou o comando git log."
              }
            ]
          },
          {
            "title": "Visualizando Commits em um Intervalo de Datas Específico",
            "text": "pt/step3.md",
            "verify": [
              {
                "name": "Verificar a filtragem por intervalo de datas",
                "file": "verify3-1.sh",
                "hint": "Certifique-se de que você usou o comando git log com intervalos de datas."
              }
            ]
          },
          {
            "title": "Usando Datas Relativas e Opções de Formatação no Git Log",
            "text": "pt/step4.md",
            "verify": [
              {
                "name": "Verificar o uso de datas relativas",
                "file": "verify4-1.sh",
                "hint": "Certifique-se de que você usou o comando git log com datas relativas."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
