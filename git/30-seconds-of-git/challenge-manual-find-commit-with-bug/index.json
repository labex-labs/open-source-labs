{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Tracking Code Changes with Git",
  "description": "Git is a powerful version control system that allows developers to track changes to their codebase over time. One of the most useful features of Git is the ability to find the commit that introduced a bug. This can be incredibly helpful when trying to track down the source of a problem in your code.",
  "meta": {
    "title": "Tracking Code Changes with Git: Uncover the Buggy Commit",
    "description": "Discover how to use Git's powerful version control system to track down the source of a bug in your codebase.",
    "keywords": "bug tracking, version control, code changes, git labs, git, commit history, git playground"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Manually Find the Commit that Introduced a Bug",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify for successful manual bug finding",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have completed the required actions.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": ["git/commit"],
        "solutions": ["step1-solution.md"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["xiaoshengyunan"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-git/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-git"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用 Git 跟踪代码变更",
      "description": "Git 是一个强大的版本控制系统，它允许开发者随时间追踪其代码库的变更。Git 最有用的特性之一是能够找到引入错误的提交。在尝试追踪代码中的问题根源时，这会非常有帮助。",
      "meta": {
        "title": "使用 Git 跟踪代码变更：找出有问题的提交",
        "description": "探索如何使用 Git 强大的版本控制系统来追踪代码库中错误的根源。",
        "keywords": "错误跟踪、版本控制、代码变更、git 实验室、git、提交历史、git 游乐场"
      },
      "details": {
        "steps": [
          {
            "title": "手动查找引入错误的提交",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证手动查找错误是否成功",
                "file": "verify1-1.sh",
                "hint": "请确保你已完成所需操作。"
              }
            ],
            "solutions": ["step1-solution.md"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Rastrear cambios de código con Git",
      "description": "Git es un sistema de control de versiones poderoso que permite a los desarrolladores rastrear los cambios en su repositorio de código a lo largo del tiempo. Una de las características más útiles de Git es la capacidad de encontrar el commit que introdujo un error. Esto puede ser increíblemente útil cuando se intenta localizar la fuente de un problema en su código.",
      "meta": {
        "title": "Rastrear cambios de código con Git: Descubra el commit con errores",
        "description": "Descubra cómo usar el poderoso sistema de control de versiones de Git para localizar la fuente de un error en su repositorio de código.",
        "keywords": "seguimiento de errores, control de versiones, cambios de código, git labs, git, historial de commits, git playground"
      },
      "details": {
        "steps": [
          {
            "title": "Encontrar manualmente el commit que introdujo un error",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar la búsqueda manual exitosa de errores",
                "file": "verify1-1.sh",
                "hint": "Asegúrese de haber completado las acciones requeridas."
              }
            ],
            "solutions": ["step1-solution.md"]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Suivre les modifications du code avec Git",
      "description": "Git est un puissant système de contrôle de versions qui permet aux développeurs de suivre les modifications apportées à leur base de code au fil du temps. L'une des fonctionnalités les plus utiles de Git est la capacité de trouver le commit qui a introduit un bogue. Cela peut être d'une utilité incroyable lorsqu'il s'agit de localiser la source d'un problème dans votre code.",
      "meta": {
        "title": "Suivre les modifications du code avec Git: Découvrir le commit ayant un bogue",
        "description": "Découvrez comment utiliser le puissant système de contrôle de versions de Git pour localiser la source d'un bogue dans votre base de code.",
        "keywords": "suivi de bogues, contrôle de versions, modifications du code, git labs, git, historique de commits, git playground"
      },
      "details": {
        "steps": [
          {
            "title": "Trouver manuellement le commit qui a introduit un bogue",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier la réussite de la recherche manuelle de bogues",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir effectué les actions requises."
              }
            ],
            "solutions": ["step1-solution.md"]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Das Verfolgen von Codeänderungen mit Git",
      "description": "Git ist ein leistungsstarkes Versionsverwaltungssystem, das es Entwicklern ermöglicht, Änderungen an ihrer Codebasis im Laufe der Zeit zu verfolgen. Eine der nützlichsten Funktionen von Git ist die Möglichkeit, den Commit zu finden, der einen Fehler eingeführt hat. Dies kann bei der Suche nach der Quelle eines Problems in Ihrem Code ungemein hilfreich sein.",
      "meta": {
        "title": "Das Verfolgen von Codeänderungen mit Git: Entdecken des fehlerhaften Commits",
        "description": "Entdecken Sie, wie Sie Git's leistungsstarkes Versionsverwaltungssystem verwenden, um die Quelle eines Fehlers in Ihrer Codebasis zu finden.",
        "keywords": "Fehlerverfolgung, Versionsverwaltung, Codeänderungen, Git Labs, Git, Commit-Verlauf, Git Playground"
      },
      "details": {
        "steps": [
          {
            "title": "Manuell den Commit finden, der einen Fehler eingeführt hat",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren Sie das erfolgreiche manuelle Finden von Fehlern",
                "file": "verify1-1.sh",
                "hint": "Bitte stellen Sie sicher, dass Sie die erforderlichen Aktionen abgeschlossen haben."
              }
            ],
            "solutions": ["step1-solution.md"]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Gitを使ったコード変更の追跡",
      "description": "Gitは、開発者がコードベースの変更を時間の経過とともに追跡できる強力なバージョン管理システムです。Gitの最も便利な機能の1つは、バグを引き起こしたコミットを見つける機能です。これは、コードの問題の原因を追跡しようとするときに非常に役立ちます。",
      "meta": {
        "title": "Gitを使ったコード変更の追跡：バグのあるコミットを見つける",
        "description": "コードベースのバグの原因を追跡するために、Gitの強力なバージョン管理システムをどのように使うかを学びましょう。",
        "keywords": "バグ追跡, バージョン管理, コード変更, git labs, git, コミット履歴, git playground"
      },
      "details": {
        "steps": [
          {
            "title": "手動でバグを引き起こしたコミットを見つける",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "手動でのバグの見つけ方が成功したことを確認する",
                "file": "verify1-1.sh",
                "hint": "必要な操作を完了していることを確認してください。"
              }
            ],
            "solutions": ["step1-solution.md"]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Отслеживание изменений в коде с помощью Git",
      "description": "Git - это мощная система контроля версий, которая позволяет разработчикам отслеживать изменения в их кодовой базе с течением времени. Одной из самых полезных функций Git является возможность найти коммит, в котором был обнаружен баг. Это может быть невероятно полезно при попытке выяснить источник проблемы в вашем коде.",
      "meta": {
        "title": "Отслеживание изменений в коде с помощью Git: выявить коммит с багом",
        "description": "Изучите, как использовать мощную систему контроля версий Git для обнаружения источника ошибки в вашей кодовой базе.",
        "keywords": "отслеживание багов, контроль версий, изменения в коде, git labs, git, история коммитов, git playground"
      },
      "details": {
        "steps": [
          {
            "title": "Ручной поиск коммита, в котором был обнаружен баг",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить успешное ручное обнаружение бага",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что вы выполнили требуемые действия."
              }
            ],
            "solutions": ["step1-solution.md"]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
