{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Tracking Bugs in Git Codebase",
  "description": "In this lab, you will learn how to use the `git bisect` command to manually find the commit that introduced a bug in a Git repository by performing a binary search through the commit history.",
  "meta": {
    "title": "Git Debugging | Commit Tracking | Version Control",
    "description": "Learn how to use Git's powerful bisect command to track down the commit that introduced a bug in your codebase. Improve your software development workflow with this comprehensive tutorial.",
    "keywords": "Git, version control, debugging, commit tracking, binary search, software development"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Manually Find the Commit that Introduced a Bug",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify for successful manual bug finding",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have completed the required actions.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": ["git/commit"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["xiaoshengyunan"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-git/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-git"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "在Git代码库中追踪错误",
      "description": "在本实验中，你将学习如何使用`git bisect`命令，通过在提交历史中进行二分查找，手动找到在Git仓库中引入错误的提交。",
      "meta": {
        "title": "Git调试 | 提交追踪 | 版本控制",
        "description": "学习如何使用Git强大的二分查找命令来追踪在你的代码库中引入错误的提交。通过这个全面的教程改进你的软件开发工作流程。",
        "keywords": "Git, 版本控制, 调试, 提交追踪, 二分查找, 软件开发"
      },
      "details": {
        "steps": [
          {
            "title": "手动查找引入错误的提交",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证是否成功手动找到错误",
                "file": "verify1-1.sh",
                "hint": "请确保你已完成所需操作。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Rastreo de errores en la base de código de Git",
      "description": "En este laboratorio, aprenderá a usar el comando `git bisect` para encontrar manualmente el commit que introdujo un error en un repositorio de Git mediante la realización de una búsqueda binaria a través del historial de commits.",
      "meta": {
        "title": "Depuración de Git | Rastreo de commits | Control de versiones",
        "description": "Aprenda a usar el poderoso comando bisect de Git para localizar el commit que introdujo un error en su base de código. Mejore su flujo de trabajo de desarrollo de software con este tutorial completo.",
        "keywords": "Git, control de versiones, depuración, seguimiento de commits, búsqueda binaria, desarrollo de software"
      },
      "details": {
        "steps": [
          {
            "title": "Encontrar manualmente el commit que introdujo un error",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar la búsqueda manual exitosa de errores",
                "file": "verify1-1.sh",
                "hint": "Asegúrese de haber completado las acciones requeridas."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Suivi des bogues dans une base de code Git",
      "description": "Dans ce laboratoire, vous allez apprendre à utiliser la commande `git bisect` pour trouver manuellement le commit qui a introduit un bogue dans un référentiel Git en effectuant une recherche dichotomique dans l'historique des commits.",
      "meta": {
        "title": "Débogage Git | Suivi des commits | Contrôle de versions",
        "description": "Apprenez à utiliser la puissante commande bisect de Git pour localiser le commit qui a introduit un bogue dans votre base de code. Améliorez votre flux de travail de développement logiciel avec ce tutoriel complet.",
        "keywords": "Git, contrôle de versions, débogage, suivi des commits, recherche dichotomique, développement logiciel"
      },
      "details": {
        "steps": [
          {
            "title": "Trouver manuellement le commit qui a introduit un bogue",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier la réussite de la recherche manuelle de bogues",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir effectué les actions requises."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Fehler im Git-Codebase verfolgen",
      "description": "In diesem Lab lernen Sie, wie Sie den Befehl `git bisect` verwenden, um manuell den Commit zu finden, der einen Fehler in einem Git-Repository eingeführt hat, indem Sie eine binäre Suche durch den Commit-Verlauf durchführen.",
      "meta": {
        "title": "Git-Debugging | Commit-Verfolgung | Versionsverwaltung",
        "description": "Lernen Sie, wie Sie Git's leistungsstarken Bisect-Befehl verwenden, um den Commit zu finden, der einen Fehler in Ihrer Codebase eingeführt hat. Verbessern Sie Ihren Softwareentwicklungsprozess mit diesem umfassenden Tutorial.",
        "keywords": "Git, Versionsverwaltung, Debugging, Commit-Verfolgung, binäre Suche, Softwareentwicklung"
      },
      "details": {
        "steps": [
          {
            "title": "Manuell den Commit finden, der einen Fehler eingeführt hat",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren Sie das erfolgreiche manuelle Finden von Fehlern",
                "file": "verify1-1.sh",
                "hint": "Bitte stellen Sie sicher, dass Sie die erforderlichen Aktionen abgeschlossen haben."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Gitコードベースにおけるバグの追跡",
      "description": "この実験では、コミット履歴を二分探索することで、Gitリポジトリでバグを引き起こしたコミットを手動で見つけるために`git bisect`コマンドをどのように使用するかを学びます。",
      "meta": {
        "title": "Gitのデバッグ | コミット追跡 | バージョン管理",
        "description": "コードベースでバグを引き起こしたコミットを追跡するために、Gitの強力なbisectコマンドをどのように使用するか学びましょう。この包括的なチュートリアルでソフトウェア開発のワークフローを改善しましょう。",
        "keywords": "Git, バージョン管理, デバッグ, コミット追跡, 二分探索, ソフトウェア開発"
      },
      "details": {
        "steps": [
          {
            "title": "手動でバグを引き起こしたコミットを見つける",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "手動でのバグの見つけ方が成功したことを確認する",
                "file": "verify1-1.sh",
                "hint": "必要な操作を完了していることを確認してください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Отслеживание багов в кодовой базе Git",
      "description": "В этой лабораторной работе вы научитесь использовать команду `git bisect` для ручного поиска коммита, в котором был обнаружен баг в репозитории Git, выполняя бинарный поиск по истории коммитов.",
      "meta": {
        "title": "Отладка Git | Отслеживание коммитов | Управление версиями",
        "description": "Изучите, как использовать мощную команду bisect Git для поиска коммита, в котором был обнаружен баг в вашей кодовой базе. Улучшите свой процесс разработки программного обеспечения с помощью этого полного руководства.",
        "keywords": "Git, управление версиями, отладка, отслеживание коммитов, бинарный поиск, разработка программного обеспечения"
      },
      "details": {
        "steps": [
          {
            "title": "Ручное нахождение коммита, в котором был обнаружен баг",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить успешное ручное обнаружение бага",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что вы выполнили требуемые действия."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
