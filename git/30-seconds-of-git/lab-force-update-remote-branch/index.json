{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Update Remote Branch After Rewriting History",
  "description": "Git is a powerful version control system that allows developers to track changes made to their codebase. One of the key features of Git is the ability to rewrite history, which can be useful when you need to make changes to previous commits. However, rewriting history can cause issues when trying to push changes to a remote repository. In this lab, you will learn how to update a remote branch after rewriting history locally.",
  "meta": {
    "title": "Git Playground: Rewrite History, Update Remote Branch",
    "description": "Learn how to update a remote branch after rewriting commit history in Git, a powerful version control system for developers.",
    "keywords": "Git, Version Control, Commit History, Remote Branch, Rewrite History"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Update Remote Branch After Rewriting History",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify for successful forced update",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have completed the required actions.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["xiaoshengyunan"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-git/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-git"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "改写历史记录后更新远程分支",
      "description": "Git 是一个强大的版本控制系统，它允许开发者跟踪对其代码库所做的更改。Git 的关键特性之一是能够改写历史记录，当你需要对之前的提交进行更改时，这会很有用。然而，在尝试将更改推送到远程仓库时，改写历史记录可能会导致问题。在本实验中，你将学习如何在本地改写历史记录后更新远程分支。",
      "meta": {
        "title": "Git 实验场：改写历史记录，更新远程分支",
        "description": "了解如何在 Git（一款面向开发者的强大版本控制系统）中改写提交历史记录后更新远程分支。",
        "keywords": "Git, 版本控制，提交历史记录，远程分支，改写历史记录"
      },
      "details": {
        "steps": [
          {
            "title": "改写历史记录后更新远程分支",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证强制更新是否成功",
                "file": "verify1-1.sh",
                "hint": "请确保你已完成所需操作。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Actualizar rama remota después de reescribir el historial",
      "description": "Git es un sistema de control de versiones poderoso que permite a los desarrolladores rastrear los cambios realizados en su repositorio de código. Una de las características clave de Git es la capacidad de reescribir el historial, lo que puede ser útil cuando necesites hacer cambios a commits anteriores. Sin embargo, reescribir el historial puede causar problemas al intentar empujar cambios a un repositorio remoto. En este laboratorio, aprenderás cómo actualizar una rama remota después de reescribir el historial localmente.",
      "meta": {
        "title": "Git Playground: Reescribir historial, actualizar rama remota",
        "description": "Aprende cómo actualizar una rama remota después de reescribir el historial de commits en Git, un sistema de control de versiones poderoso para desarrolladores.",
        "keywords": "Git, Control de versiones, Historial de commits, Rama remota, Reescribir historial"
      },
      "details": {
        "steps": [
          {
            "title": "Actualizar rama remota después de reescribir el historial",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar la actualización forzada exitosa",
                "file": "verify1-1.sh",
                "hint": "Asegúrese de haber completado las acciones requeridas."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Mettre à jour une branche distante après avoir réécrit l'historique",
      "description": "Git est un puissant système de contrôle de versions qui permet aux développeurs de suivre les modifications apportées à leur base de code. L'une des principales fonctionnalités de Git est la capacité de réécrire l'historique, ce qui peut être utile lorsque vous avez besoin de modifier des commits antérieurs. Cependant, la réécriture de l'historique peut entraîner des problèmes lors de l'envoi de modifications vers un référentiel distant. Dans ce laboratoire, vous allez apprendre à mettre à jour une branche distante après avoir réécrit l'historique localement.",
      "meta": {
        "title": "Git Playground: Réécrire l'historique, Mettre à jour une branche distante",
        "description": "Apprenez à mettre à jour une branche distante après avoir réécrit l'historique des commits dans Git, un puissant système de contrôle de versions pour les développeurs.",
        "keywords": "Git, Contrôle de versions, Historique des commits, Branche distante, Réécrire l'historique"
      },
      "details": {
        "steps": [
          {
            "title": "Mettre à jour une branche distante après avoir réécrit l'historique",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier la mise à jour forcée réussie",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir effectué les actions requises."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Remote-Branch aktualisieren, nachdem die Historie geändert wurde",
      "description": "Git ist ein leistungsstarkes Versionskontrollsystem, das es Entwicklern ermöglicht, Änderungen an ihrer Codebasis zu verfolgen. Eine der wichtigsten Funktionen von Git ist die Möglichkeit, die Historie neu zu schreiben, was nützlich sein kann, wenn Sie Änderungen an früheren Commits vornehmen müssen. Allerdings kann das Neuschreiben der Historie zu Problemen führen, wenn Sie versuchen, Änderungen an einem Remote-Repository zu pushen. In diesem Lab werden Sie lernen, wie Sie einen Remote-Branch aktualisieren, nachdem Sie die Historie lokal geändert haben.",
      "meta": {
        "title": "Git-Spielfeld: Historie neu schreiben, Remote-Branch aktualisieren",
        "description": "Lernen Sie, wie Sie einen Remote-Branch aktualisieren, nachdem Sie die Commit-Historie in Git geändert haben, einem leistungsstarken Versionskontrollsystem für Entwickler.",
        "keywords": "Git, Versionskontrolle, Commit-Historie, Remote-Branch, Historie neu schreiben"
      },
      "details": {
        "steps": [
          {
            "title": "Remote-Branch aktualisieren, nachdem die Historie geändert wurde",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren Sie die erfolgreiche Zwangsaktualisierung",
                "file": "verify1-1.sh",
                "hint": "Bitte stellen Sie sicher, dass Sie die erforderlichen Aktionen abgeschlossen haben."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "履歴を書き換えた後のリモートブランチの更新",
      "description": "Git は、開発者がコードベースに対して行った変更を追跡できる強力なバージョン管理システムです。Git の主な機能の 1 つは、履歴を書き換える機能であり、以前のコミットに変更を加える必要がある場合に便利です。ただし、履歴を書き換えると、リモートリポジトリに変更をプッシュしようとするときに問題が発生する場合があります。この実験では、ローカルで履歴を書き換えた後にリモートブランチを更新する方法を学びます。",
      "meta": {
        "title": "Git プレイグラウンド：履歴を書き換え、リモートブランチを更新する",
        "description": "開発者にとって強力なバージョン管理システムである Git で、コミット履歴を書き換えた後にリモートブランチを更新する方法を学びましょう。",
        "keywords": "Git, バージョン管理，コミット履歴，リモートブランチ，履歴を書き換える"
      },
      "details": {
        "steps": [
          {
            "title": "履歴を書き換えた後のリモートブランチの更新",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "強制更新が成功したことを確認する",
                "file": "verify1-1.sh",
                "hint": "必要な操作を完了したことを確認してください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Обновление удаленной ветки после переписывания истории",
      "description": "Git - это мощная система контроля версий, которая позволяет разработчикам отслеживать изменения в их кодовой базе. Одной из ключевых функций Git является возможность переписывать историю, которая может быть полезной, когда вам нужно внести изменения в предыдущие коммиты. Однако переписывание истории может вызывать проблемы при попытке отправить изменения в удаленный репозиторий. В этом лабе вы узнаете, как обновить удаленную ветку после переписывания истории локально.",
      "meta": {
        "title": "Git Playground: Переписать историю, обновить удаленную ветку",
        "description": "Изучите, как обновить удаленную ветку после переписывания истории коммитов в Git, мощной системе контроля версий для разработчиков.",
        "keywords": "Git, Система контроля версий, История коммитов, Удаленная ветка, Переписать историю"
      },
      "details": {
        "steps": [
          {
            "title": "Обновление удаленной ветки после переписывания истории",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить успешное принудительное обновление",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что вы выполнили все необходимые действия."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "히스토리 재작성 후 원격 브랜치 업데이트",
      "description": "Git 은 개발자가 코드베이스에 대한 변경 사항을 추적할 수 있도록 하는 강력한 버전 관리 시스템입니다. Git 의 주요 기능 중 하나는 히스토리를 재작성하는 기능으로, 이전 커밋에 변경 사항을 적용해야 할 때 유용합니다. 그러나 히스토리를 재작성하면 원격 저장소에 변경 사항을 푸시할 때 문제가 발생할 수 있습니다. 이 랩에서는 로컬에서 히스토리를 재작성한 후 원격 브랜치를 업데이트하는 방법을 배웁니다.",
      "meta": {
        "title": "Git Playground: 히스토리 재작성 및 원격 브랜치 업데이트 방법",
        "description": "Git 에서 커밋 히스토리를 재작성한 후 원격 브랜치를 업데이트하는 방법을 알아보세요. 개발자를 위한 강력한 버전 관리 시스템입니다.",
        "keywords": "Git, 버전 관리, 커밋 히스토리, 원격 브랜치, 히스토리 재작성, Git 명령어"
      },
      "details": {
        "steps": [
          {
            "title": "히스토리 재작성 후 원격 브랜치 업데이트",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "강제 업데이트 성공 여부 확인",
                "file": "verify1-1.sh",
                "hint": "필수 작업을 완료했는지 확인하십시오."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Atualizar Branch Remota Após Reescrever o Histórico",
      "description": "Git é um poderoso sistema de controle de versão que permite aos desenvolvedores rastrear as alterações feitas em seu código. Uma das principais funcionalidades do Git é a capacidade de reescrever o histórico, o que pode ser útil quando você precisa fazer alterações em commits anteriores. No entanto, reescrever o histórico pode causar problemas ao tentar enviar (push) as alterações para um repositório remoto. Neste laboratório, você aprenderá como atualizar uma branch remota após reescrever o histórico localmente.",
      "meta": {
        "title": "Git Playground: Reescrever Histórico e Atualizar Branch Remota",
        "description": "Aprenda como atualizar uma branch remota após reescrever o histórico de commits no Git, um poderoso sistema de controle de versão para desenvolvedores. Domine o Git e otimize seu fluxo de trabalho!",
        "keywords": "Git, Controle de Versão, Histórico de Commits, Branch Remota, Reescrever Histórico, Git Tutorial, Git para Iniciantes"
      },
      "details": {
        "steps": [
          {
            "title": "Atualizar Branch Remota Após Reescrever o Histórico",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar atualização forçada com sucesso",
                "file": "verify1-1.sh",
                "hint": "Certifique-se de ter concluído as ações necessárias."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
