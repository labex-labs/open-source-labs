{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "View Undo History",
  "description": "Git is a powerful version control system that allows developers to track changes to their codebase. However, sometimes we make mistakes and need to undo changes that we've made. Git provides several ways to undo changes, but it can be difficult to keep track of all the actions we've taken. In this challenge, you'll learn how to view the 'undo' history in Git using the git reflog command.",
  "meta": {
    "title": "Git Undo History | Version Control Tutorial",
    "description": "Learn how to view the 'undo' history in Git using the git reflog command and undo changes to your codebase effectively.",
    "keywords": "Git, version control, undo history, git reflog, code changes, codebase, tutorial"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "View 'Undo' History",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify for successful view",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have completed the required actions.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": ["git/reflog"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["xiaoshengyunan"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-git/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-git"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "查看撤销历史记录",
      "description": "Git是一个强大的版本控制系统，它允许开发者跟踪其代码库的更改。然而，有时我们会犯错，需要撤销我们所做的更改。Git提供了几种撤销更改的方法，但要跟踪我们所采取的所有操作可能会很困难。在这个挑战中，你将学习如何使用git reflog命令查看Git中的“撤销”历史记录。",
      "meta": {
        "title": "Git撤销历史记录 | 版本控制教程",
        "description": "学习如何使用git reflog命令查看Git中的“撤销”历史记录，并有效地撤销对代码库所做的更改。",
        "keywords": "Git, 版本控制, 撤销历史记录, git reflog, 代码更改, 代码库, 教程"
      },
      "details": {
        "steps": [
          {
            "title": "查看“撤销”历史记录",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证是否成功查看",
                "file": "verify1-1.sh",
                "hint": "请确保你已完成所需操作。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Ver el historial de deshacer",
      "description": "Git es un sistema de control de versiones poderoso que permite a los desarrolladores rastrear los cambios en su repositorio de código. Sin embargo, a veces cometemos errores y necesitamos deshacer los cambios que hemos realizado. Git ofrece varias maneras de deshacer cambios, pero puede ser difícil seguir el registro de todas las acciones que hemos tomado. En este desafío, aprenderás a visualizar el historial de 'deshacer' en Git utilizando el comando git reflog.",
      "meta": {
        "title": "Historial de deshacer en Git | Tutorial de control de versiones",
        "description": "Aprende a visualizar el historial de 'deshacer' en Git utilizando el comando git reflog y deshaz cambios en tu repositorio de código de manera efectiva.",
        "keywords": "Git, control de versiones, historial de deshacer, git reflog, cambios de código, repositorio de código, tutorial"
      },
      "details": {
        "steps": [
          {
            "title": "Ver el historial de 'deshacer'",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar la visualización exitosa",
                "file": "verify1-1.sh",
                "hint": "Asegúrese de haber completado las acciones requeridas."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Consulter l'historique des annulations",
      "description": "Git est un puissant système de contrôle de versions qui permet aux développeurs de suivre les modifications apportées à leur codebase. Cependant, parfois, nous commettons des erreurs et avons besoin d'annuler les modifications que nous avons effectuées. Git propose plusieurs façons d'annuler des modifications, mais il peut être difficile de suivre toutes les actions que nous avons entreprises. Dans ce défi, vous allez apprendre à visualiser l'historique des 'annulations' dans Git en utilisant la commande git reflog.",
      "meta": {
        "title": "Histoire des annulations Git | Tutoriel de contrôle de versions",
        "description": "Apprenez à visualiser l'historique des 'annulations' dans Git en utilisant la commande git reflog et annulez efficacement les modifications apportées à votre codebase.",
        "keywords": "Git, contrôle de versions, historique des annulations, git reflog, modifications du code, codebase, tutoriel"
      },
      "details": {
        "steps": [
          {
            "title": "Consulter l'historique des 'annulations'",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier pour une visualisation réussie",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir effectué les actions requises."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Rückgängigmachungsgeschichte anzeigen",
      "description": "Git ist ein leistungsstarkes Versionskontrollsystem, das es Entwicklern ermöglicht, Änderungen an ihrer Codebasis zu verfolgen. Manchmal machen wir jedoch Fehler und müssen Änderungen rückgängig machen, die wir vorgenommen haben. Git bietet mehrere Möglichkeiten, Änderungen rückgängig zu machen, aber es kann schwierig sein, alle von uns ausgeführten Aktionen zu verfolgen. In dieser Herausforderung lernst du, wie du die 'Rückgängigmachungs'-Geschichte in Git mithilfe des git reflog-Befehls anzeigen kannst.",
      "meta": {
        "title": "Git-Rückgängigmachungsgeschichte | Tutorial zur Versionskontrolle",
        "description": "Lerne, wie du die 'Rückgängigmachungs'-Geschichte in Git mithilfe des git reflog-Befehls anzeigen kannst und Änderungen an deiner Codebasis effektiv rückgängig machen.",
        "keywords": "Git, Versionskontrolle, Rückgängigmachungsgeschichte, git reflog, Codeänderungen, Codebasis, Tutorial"
      },
      "details": {
        "steps": [
          {
            "title": "Rückgängigmachungsgeschichte anzeigen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren auf erfolgreiche Anzeige",
                "file": "verify1-1.sh",
                "hint": "Bitte stellen Sie sicher, dass Sie die erforderlichen Aktionen abgeschlossen haben."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "元に戻す履歴を表示する",
      "description": "Gitは、開発者がコードベースの変更を追跡できる強力なバージョン管理システムです。ただし、時々間違いを犯してしまい、行った変更を元に戻す必要がある場合があります。Gitには変更を元に戻すためのいくつかの方法がありますが、行ったすべての操作を追跡するのは難しい場合があります。このチャレンジでは、git reflogコマンドを使用してGitの「元に戻す」履歴を表示する方法を学びます。",
      "meta": {
        "title": "Gitの元に戻す履歴 | バージョン管理チュートリアル",
        "description": "git reflogコマンドを使用してGitの「元に戻す」履歴を表示し、コードベースの変更を効果的に元に戻す方法を学びましょう。",
        "keywords": "Git, バージョン管理, 元に戻す履歴, git reflog, コード変更, コードベース, チュートリアル"
      },
      "details": {
        "steps": [
          {
            "title": "「元に戻す」履歴を表示する",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "正常に表示されたことを確認する",
                "file": "verify1-1.sh",
                "hint": "必要な操作を完了していることを確認してください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Просмотр истории отмены",
      "description": "Git - это мощная система контроля версий, которая позволяет разработчикам отслеживать изменения в их кодовой базе. Однако иногда мы допускаем ошибки и нуждаемся отменить изменения, которые мы внесли. Git предоставляет несколько способов отменить изменения, но может быть трудно отслеживать все действия, которые мы предприняли. В этом испытании вы узнаете, как просматривать \"историю отмены\" в Git с помощью команды git reflog.",
      "meta": {
        "title": "История отмены в Git | Руководство по контролю версий",
        "description": "Изучите, как просматривать \"историю отмены\" в Git с помощью команды git reflog и эффективно отменить изменения в своей кодовой базе.",
        "keywords": "Git, контроль версий, история отмены, git reflog, изменения в коде, кодовая база, руководство"
      },
      "details": {
        "steps": [
          {
            "title": "Просмотр \"истории отмены\"",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить успешный просмотр",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что вы выполнили требуемые действия."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
