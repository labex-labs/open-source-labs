{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Update Remote Branch After Rewriting History",
  "description": "Git is a powerful version control system that allows developers to track changes made to their codebase. One of the key features of Git is the ability to rewrite history, which can be useful when you need to make changes to previous commits. However, rewriting history can cause issues when trying to push changes to a remote repository. In this challenge, you will learn how to update a remote branch after rewriting history locally.",
  "meta": {
    "title": "Update Remote Branch After Rewriting Git History",
    "description": "Learn how to update a remote Git branch after rewriting local commit history to maintain version control and collaboration.",
    "keywords": "version control, git labs, rewrite history, git, commit history, git playground, remote branch"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Update Remote Branch After Rewriting History",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify for successful forced update",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have completed the required actions.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": ["git/remote"],
        "solutions": ["step1-solution.md"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["xiaoshengyunan"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-git/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-git"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "改写历史记录后更新远程分支",
      "description": "Git 是一个强大的版本控制系统，它允许开发者跟踪对其代码库所做的更改。Git 的关键特性之一是能够改写历史记录，当你需要对之前的提交进行更改时，这会很有用。然而，在尝试将更改推送到远程仓库时，改写历史记录可能会引发问题。在这个挑战中，你将学习如何在本地改写历史记录后更新远程分支。",
      "meta": {
        "title": "改写 Git 历史记录后更新远程分支",
        "description": "学习如何在改写本地提交历史记录后更新远程 Git 分支，以维护版本控制和协作。",
        "keywords": "版本控制, Git 实验室, 改写历史记录, Git, 提交历史记录, Git 游乐场, 远程分支"
      },
      "details": {
        "steps": [
          {
            "title": "改写历史记录后更新远程分支",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证强制更新是否成功",
                "file": "verify1-1.sh",
                "hint": "请确保你已完成所需操作。"
              }
            ],
            "solutions": ["step1-solution.md"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Actualizar rama remota después de reescribir el historial",
      "description": "Git es un sistema de control de versiones poderoso que permite a los desarrolladores rastrear los cambios realizados en su repositorio de código. Una de las características clave de Git es la capacidad de reescribir el historial, lo que puede ser útil cuando necesites hacer cambios a commits anteriores. Sin embargo, reescribir el historial puede causar problemas al intentar empujar cambios a un repositorio remoto. En este desafío, aprenderás cómo actualizar una rama remota después de reescribir el historial localmente.",
      "meta": {
        "title": "Actualizar rama remota después de reescribir el historial de Git",
        "description": "Aprende cómo actualizar una rama remota de Git después de reescribir el historial de commits locales para mantener el control de versiones y la colaboración.",
        "keywords": "control de versiones, laboratorios de Git, reescribir historial, Git, historial de commits, playground de Git, rama remota"
      },
      "details": {
        "steps": [
          {
            "title": "Actualizar rama remota después de reescribir el historial",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar la actualización forzada exitosa",
                "file": "verify1-1.sh",
                "hint": "Asegúrese de haber completado las acciones requeridas."
              }
            ],
            "solutions": ["step1-solution.md"]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Mettre à jour une branche distante après avoir réécrit l'historique",
      "description": "Git est un puissant système de contrôle de versions qui permet aux développeurs de suivre les modifications apportées à leur base de code. L'une des principales fonctionnalités de Git est la capacité de réécrire l'historique, ce qui peut être utile lorsque vous avez besoin de modifier des commits antérieurs. Cependant, la réécriture de l'historique peut entraîner des problèmes lorsqu'il s'agit de pousser des modifications vers un référentiel distant. Dans ce défi, vous allez apprendre à mettre à jour une branche distante après avoir réécrit l'historique localement.",
      "meta": {
        "title": "Mettre à jour une branche distante après avoir réécrit l'historique Git",
        "description": "Apprenez à mettre à jour une branche Git distante après avoir réécrit l'historique des commits locaux pour maintenir le contrôle de version et la collaboration.",
        "keywords": "contrôle de version, git labs, réécrire l'historique, git, historique des commits, git playground, branche distante"
      },
      "details": {
        "steps": [
          {
            "title": "Mettre à jour une branche distante après avoir réécrit l'historique",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier la mise à jour forcée réussie",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir effectué les actions requises."
              }
            ],
            "solutions": ["step1-solution.md"]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Remote-Branch aktualisieren, nachdem die Geschichte geändert wurde",
      "description": "Git ist ein leistungsstarkes Versionsverwaltungssystem, das es Entwicklern ermöglicht, Änderungen an ihrer Codebasis zu verfolgen. Eine der wichtigsten Funktionen von Git ist die Möglichkeit, die Geschichte neu zu schreiben, was nützlich sein kann, wenn Sie Änderungen an früheren Commits vornehmen müssen. Allerdings kann das Neuschreiben der Geschichte zu Problemen führen, wenn Sie versuchen, Änderungen an einem Remote-Repository zu pushen. In dieser Herausforderung lernen Sie, wie Sie einen Remote-Branch aktualisieren, nachdem Sie die Geschichte lokal geändert haben.",
      "meta": {
        "title": "Remote-Branch aktualisieren, nachdem die Git-Geschichte geändert wurde",
        "description": "Lernen Sie, wie Sie einen Remote-Git-Branch aktualisieren, nachdem Sie die lokale Commit-History geändert haben, um die Versionskontrolle und die Zusammenarbeit aufrechtzuerhalten.",
        "keywords": "Versionskontrolle, Git Labs, Geschichte neu schreiben, Git, Commit-History, Git Playground, Remote-Branch"
      },
      "details": {
        "steps": [
          {
            "title": "Remote-Branch aktualisieren, nachdem die Geschichte geändert wurde",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren Sie die erfolgreiche Zwangsaktualisierung",
                "file": "verify1-1.sh",
                "hint": "Bitte stellen Sie sicher, dass Sie die erforderlichen Aktionen abgeschlossen haben."
              }
            ],
            "solutions": ["step1-solution.md"]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "履歴を書き換えた後のリモートブランチの更新",
      "description": "Gitは、開発者がコードベースに対して行った変更を追跡できる強力なバージョン管理システムです。Gitの主な機能の1つは、履歴を書き換える機能であり、以前のコミットに変更を加える必要がある場合に便利です。ただし、履歴を書き換えると、リモートリポジトリに変更をプッシュしようとするときに問題が発生する場合があります。このチャレンジでは、ローカルで履歴を書き換えた後にリモートブランチを更新する方法を学びます。",
      "meta": {
        "title": "Git履歴を書き換えた後のリモートブランチの更新",
        "description": "ローカルコミット履歴を書き換えた後にリモートGitブランチを更新する方法を学び、バージョン管理とコラボレーションを維持しましょう。",
        "keywords": "バージョン管理, Gitラボ, 履歴を書き換える, Git, コミット履歴, Gitプレイグラウンド, リモートブランチ"
      },
      "details": {
        "steps": [
          {
            "title": "履歴を書き換えた後のリモートブランチの更新",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "強制更新の成功を確認する",
                "file": "verify1-1.sh",
                "hint": "必要な操作を完了したことを確認してください。"
              }
            ],
            "solutions": ["step1-solution.md"]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Обновление удаленной ветки после переписывания истории",
      "description": "Git - это мощная система контроля версий, которая позволяет разработчикам отслеживать изменения в их кодовой базе. Одной из ключевых функций Git является возможность переписывать историю, которая может быть полезной, когда вам нужно внести изменения в предыдущие коммиты. Однако переписывание истории может вызывать проблемы при попытке отправить изменения в удаленный репозиторий. В этом испытании вы научитесь обновлять удаленную ветку после переписывания истории локально.",
      "meta": {
        "title": "Обновление удаленной ветки после переписывания истории Git",
        "description": "Изучите, как обновить удаленную ветку Git после переписывания локальной истории коммитов, чтобы поддерживать контроль версий и сотрудничество.",
        "keywords": "контроль версий, git labs, переписать историю, git, история коммитов, git playground, удаленная ветка"
      },
      "details": {
        "steps": [
          {
            "title": "Обновление удаленной ветки после переписывания истории",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить успешное принудительное обновление",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что вы выполнили требуемые действия."
              }
            ],
            "solutions": ["step1-solution.md"]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
