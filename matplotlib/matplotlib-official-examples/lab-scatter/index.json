{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Visualizing Variable Relationships",
  "description": "In this lab, we will learn how to create a simple scatter plot using Python's Matplotlib library. A scatter plot is a type of plot that displays values for two variables as a collection of points. Each point represents the values of the two variables, and the position of the point represents the values of the two variables. Scatter plots are useful for identifying relationships between variables and for identifying outliers.",
  "meta": {
    "title": "Python Scatter Plot Tutorial | Data Visualization",
    "description": "Learn how to create a simple scatter plot using Python's Matplotlib library. Discover relationships between variables and identify outliers in your data.",
    "keywords": "Python, Scatter Plot, Data Visualization, Matplotlib, NumPy"
  },
  "difficulty": "Beginner",
  "time": 20,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Import the necessary libraries",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment"
          }
        ],
        "skills": []
      },
      {
        "title": "Generate random data",
        "text": "en/step2.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify2-1.sh",
            "hint": "This step has no verification at the moment"
          }
        ],
        "skills": []
      },
      {
        "title": "Define the size and color of the points",
        "text": "en/step3.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify3-1.sh",
            "hint": "This step has no verification at the moment"
          }
        ],
        "skills": []
      },
      {
        "title": "Create the scatter plot",
        "text": "en/step4.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify4-1.sh",
            "hint": "This step has no verification at the moment"
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "scatter.ipynb",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "jupyter-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "BSD 3-Clause",
    "url": "https://github.com/matplotlib/matplotlib/tree/main/LICENSE",
    "repo": "https://github.com/matplotlib/matplotlib"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "可视化变量关系",
      "description": "在本次实验中，我们将学习如何使用 Python 的 Matplotlib 库创建一个简单的散点图。散点图是一种将两个变量的值显示为点的集合的图表类型。每个点代表两个变量的值，点的位置代表两个变量的值。散点图对于识别变量之间的关系以及识别异常值很有用。",
      "meta": {
        "title": "Python 散点图教程 | 数据可视化",
        "description": "学习如何使用 Python 的 Matplotlib 库创建一个简单的散点图。发现数据中变量之间的关系并识别异常值。",
        "keywords": "Python, 散点图，数据可视化，Matplotlib, NumPy"
      },
      "details": {
        "steps": [
          {
            "title": "导入必要的库",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          },
          {
            "title": "生成随机数据",
            "text": "zh/step2.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify2-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          },
          {
            "title": "定义点的大小和颜色",
            "text": "zh/step3.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify3-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          },
          {
            "title": "创建散点图",
            "text": "zh/step4.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify4-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Visualizando relaciones entre variables",
      "description": "En este laboratorio, aprenderemos a crear un diagrama de dispersión simple utilizando la biblioteca Matplotlib de Python. Un diagrama de dispersión es un tipo de gráfico que muestra los valores de dos variables como una colección de puntos. Cada punto representa los valores de las dos variables, y la posición del punto representa los valores de las dos variables. Los diagramas de dispersión son útiles para identificar relaciones entre variables y para identificar valores atípicos.",
      "meta": {
        "title": "Tutorial de diagramas de dispersión en Python | Visualización de datos",
        "description": "Aprende a crear un diagrama de dispersión simple utilizando la biblioteca Matplotlib de Python. Descubre relaciones entre variables e identifica valores atípicos en tus datos.",
        "keywords": "Python, Diagrama de dispersión, Visualización de datos, Matplotlib, NumPy"
      },
      "details": {
        "steps": [
          {
            "title": "Importar las bibliotecas necesarias",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          },
          {
            "title": "Generar datos aleatorios",
            "text": "es/step2.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify2-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          },
          {
            "title": "Definir el tamaño y el color de los puntos",
            "text": "es/step3.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify3-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          },
          {
            "title": "Crear el diagrama de dispersión",
            "text": "es/step4.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify4-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Visualiser les relations entre variables",
      "description": "Dans ce laboratoire, nous allons apprendre à créer un graphique en nuage de points simple à l'aide de la bibliothèque Matplotlib de Python. Un graphique en nuage de points est un type de graphique qui affiche les valeurs de deux variables sous forme d'un ensemble de points. Chaque point représente les valeurs des deux variables, et la position du point représente les valeurs des deux variables. Les graphiques en nuage de points sont utiles pour identifier les relations entre les variables et pour identifier les valeurs aberrantes.",
      "meta": {
        "title": "Tutoriel sur les graphiques en nuage de points en Python | Visualisation de données",
        "description": "Apprenez à créer un graphique en nuage de points simple à l'aide de la bibliothèque Matplotlib de Python. Découvrez les relations entre les variables et identifiez les valeurs aberrantes dans vos données.",
        "keywords": "Python, Graphique en nuage de points, Visualisation de données, Matplotlib, NumPy"
      },
      "details": {
        "steps": [
          {
            "title": "Importer les bibliothèques nécessaires",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          },
          {
            "title": "Générer des données aléatoires",
            "text": "fr/step2.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify2-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          },
          {
            "title": "Définir la taille et la couleur des points",
            "text": "fr/step3.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify3-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          },
          {
            "title": "Créer le graphique en nuage de points",
            "text": "fr/step4.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify4-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Visualisierung von Variablenbeziehungen",
      "description": "In diesem Lab werden wir lernen, wie man mit der Matplotlib-Bibliothek in Python einen einfachen Scatter Plot erstellt. Ein Scatter Plot ist ein Plot-Typ, der die Werte von zwei Variablen als Punktesammlung anzeigt. Jeder Punkt repräsentiert die Werte der beiden Variablen, und die Position des Punktes repräsentiert die Werte der beiden Variablen. Scatter Plots eignen sich zur Identifizierung von Beziehungen zwischen Variablen und zur Identifizierung von Ausreißern.",
      "meta": {
        "title": "Python Scatter Plot Tutorial | Datenvisualisierung",
        "description": "Lernen Sie, wie man mit der Matplotlib-Bibliothek in Python einen einfachen Scatter Plot erstellt. Entdecken Sie Beziehungen zwischen Variablen und identifizieren Sie Ausreißer in Ihren Daten.",
        "keywords": "Python, Scatter Plot, Datenvisualisierung, Matplotlib, NumPy"
      },
      "details": {
        "steps": [
          {
            "title": "Importieren der erforderlichen Bibliotheken",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          },
          {
            "title": "Zufällige Daten generieren",
            "text": "de/step2.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify2-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          },
          {
            "title": "Definiere die Größe und Farbe der Punkte",
            "text": "de/step3.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify3-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          },
          {
            "title": "Erstelle den Scatter Plot",
            "text": "de/step4.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify4-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "変数関係の可視化",
      "description": "この実験では、Python の Matplotlib ライブラリを使って簡単な散布図を作成する方法を学びます。散布図は、2 つの変数の値を点の集合として表示するプロットの一種です。各点は 2 つの変数の値を表し、点の位置は 2 つの変数の値を表します。散布図は、変数間の関係を特定したり、外れ値を特定するのに役立ちます。",
      "meta": {
        "title": "Python 散布図チュートリアル | データ可視化",
        "description": "Python の Matplotlib ライブラリを使って簡単な散布図を作成する方法を学びましょう。データ内の変数間の関係を見つけ、外れ値を特定しましょう。",
        "keywords": "Python, 散布図，データ可視化，Matplotlib, NumPy"
      },
      "details": {
        "steps": [
          {
            "title": "必要なライブラリをインポートする",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在、検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在、検証はありません"
              }
            ]
          },
          {
            "title": "乱数データを生成する",
            "text": "ja/step2.md",
            "verify": [
              {
                "name": "このステップには現在、検証はありません",
                "file": "verify2-1.sh",
                "hint": "このステップには現在、検証はありません"
              }
            ]
          },
          {
            "title": "点のサイズと色を定義する",
            "text": "ja/step3.md",
            "verify": [
              {
                "name": "このステップには現在、検証はありません",
                "file": "verify3-1.sh",
                "hint": "このステップには現在、検証はありません"
              }
            ]
          },
          {
            "title": "散布図を作成する",
            "text": "ja/step4.md",
            "verify": [
              {
                "name": "このステップには現在、検証はありません",
                "file": "verify4-1.sh",
                "hint": "このステップには現在、検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Визуализация связей между переменными",
      "description": "В этом практическом занятии мы научимся создавать простую точечную диаграмму с использованием библиотеки Matplotlib для Python. Точечная диаграмма - это тип графика, который отображает значения двух переменных в виде набора точек. Каждая точка представляет значения двух переменных, а положение точки представляет значения двух переменных. Точечные диаграммы полезны для выявления связей между переменными и для выявления выбросов.",
      "meta": {
        "title": "Учебник по точечным диаграммам на Python | Визуализация данных",
        "description": "Изучите, как создать простую точечную диаграмму с использованием библиотеки Matplotlib для Python. Откройте связи между переменными и выявите выбросы в своих данных.",
        "keywords": "Python, Точечная диаграмма, Визуализация данных, Matplotlib, NumPy"
      },
      "details": {
        "steps": [
          {
            "title": "Импортировать необходимые библиотеки",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          },
          {
            "title": "Сгенерировать случайные данные",
            "text": "ru/step2.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify2-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          },
          {
            "title": "Определить размер и цвет точек",
            "text": "ru/step3.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify3-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          },
          {
            "title": "Создать точечную диаграмму",
            "text": "ru/step4.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify4-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "변수 관계 시각화",
      "description": "이 랩에서는 Python 의 Matplotlib 라이브러리를 사용하여 간단한 산점도를 만드는 방법을 배웁니다. 산점도는 두 변수의 값을 점의 모음으로 표시하는 플롯 유형입니다. 각 점은 두 변수의 값을 나타내며, 점의 위치는 두 변수의 값을 나타냅니다. 산점도는 변수 간의 관계를 식별하고 이상치를 식별하는 데 유용합니다.",
      "meta": {
        "title": "Python 산점도 튜토리얼 | 데이터 시각화",
        "description": "Python Matplotlib 라이브러리를 사용하여 간단한 산점도를 만드는 방법을 알아보세요. 데이터에서 변수 간의 관계를 발견하고 이상치를 식별하세요.",
        "keywords": "Python, 산점도, 데이터 시각화, Matplotlib, NumPy, 파이썬 산점도, 데이터 분석"
      },
      "details": {
        "steps": [
          {
            "title": "필요한 라이브러리 가져오기",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          },
          {
            "title": "랜덤 데이터 생성",
            "text": "ko/step2.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify2-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          },
          {
            "title": "점의 크기와 색상 정의",
            "text": "ko/step3.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify3-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          },
          {
            "title": "산점도 생성",
            "text": "ko/step4.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify4-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Visualizando Relações entre Variáveis",
      "description": "Neste laboratório, aprenderemos como criar um gráfico de dispersão simples usando a biblioteca Matplotlib do Python. Um gráfico de dispersão é um tipo de gráfico que exibe valores para duas variáveis como uma coleção de pontos. Cada ponto representa os valores das duas variáveis, e a posição do ponto representa os valores das duas variáveis. Gráficos de dispersão são úteis para identificar relações entre variáveis e para identificar *outliers* (valores discrepantes).",
      "meta": {
        "title": "Tutorial de Gráfico de Dispersão em Python | Visualização de Dados",
        "description": "Aprenda como criar um gráfico de dispersão simples usando a biblioteca Matplotlib do Python. Descubra relações entre variáveis e identifique *outliers* em seus dados.",
        "keywords": "Python, Gráfico de Dispersão, Visualização de Dados, Matplotlib, NumPy"
      },
      "details": {
        "steps": [
          {
            "title": "Importar as bibliotecas necessárias",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          },
          {
            "title": "Gerar dados aleatórios",
            "text": "pt/step2.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify2-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          },
          {
            "title": "Definir o tamanho e a cor dos pontos",
            "text": "pt/step3.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify3-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          },
          {
            "title": "Criar o gráfico de dispersão",
            "text": "pt/step4.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify4-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
