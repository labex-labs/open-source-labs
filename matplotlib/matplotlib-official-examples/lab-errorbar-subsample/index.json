{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Errorbar Subsampling with Matplotlib",
  "description": "In data visualization, it is sometimes useful to plot error bars to show the uncertainty or variability of the data. However, if there are many data points with similar errors, the plot can become cluttered and difficult to interpret. In such cases, we can use errorbar subsampling, which allows us to draw error bars only on a subset of data points. In this tutorial, we will use Matplotlib's errorbar function to demonstrate how to apply errorbar subsampling to our data.",
  "meta": {
    "title": "Data Visualization | Error Bar Subsampling Tutorial",
    "description": "Learn how to use Matplotlib's errorbar function to apply errorbar subsampling and create clear data visualizations with reduced clutter.",
    "keywords": "data visualization, error bars, errorbar subsampling, Matplotlib, Python"
  },
  "difficulty": "Beginner",
  "time": 20,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Import Libraries and Generate Data",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment"
          }
        ],
        "skills": []
      },
      {
        "title": "Plot All Errorbars",
        "text": "en/step2.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify2-1.sh",
            "hint": "This step has no verification at the moment"
          }
        ],
        "skills": []
      },
      {
        "title": "Subsample Every 6th Errorbar",
        "text": "en/step3.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify3-1.sh",
            "hint": "This step has no verification at the moment"
          }
        ],
        "skills": []
      },
      {
        "title": "Shift Second Series by 3",
        "text": "en/step4.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify4-1.sh",
            "hint": "This step has no verification at the moment"
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "errorbar-subsample.ipynb",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "jupyter-ubuntu:2204"
  },
  "contributors": ["huduo0812"],
  "license": {
    "name": "BSD 3-Clause",
    "url": "https://github.com/matplotlib/matplotlib/tree/main/LICENSE",
    "repo": "https://github.com/matplotlib/matplotlib"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用 Matplotlib 进行误差线二次采样",
      "description": "在数据可视化中，绘制误差线以显示数据的不确定性或可变性有时很有用。然而，如果有许多具有相似误差的数据点，图表可能会变得杂乱且难以解释。在这种情况下，我们可以使用误差线二次采样，它允许我们仅在数据点的一个子集上绘制误差线。在本教程中，我们将使用 Matplotlib 的误差线函数来演示如何对我们的数据应用误差线二次采样。",
      "meta": {
        "title": "数据可视化 | 误差线二次采样教程",
        "description": "学习如何使用 Matplotlib 的误差线函数应用误差线二次采样，并创建清晰、减少杂乱的数据可视化。",
        "keywords": "数据可视化，误差线，误差线二次采样，Matplotlib, Python"
      },
      "details": {
        "steps": [
          {
            "title": "导入库并生成数据",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          },
          {
            "title": "绘制所有误差线",
            "text": "zh/step2.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify2-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          },
          {
            "title": "每隔 6 个误差线进行二次采样",
            "text": "zh/step3.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify3-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          },
          {
            "title": "将第二个序列偏移 3",
            "text": "zh/step4.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify4-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Submuestreo de barras de error con Matplotlib",
      "description": "En la visualización de datos, a veces es útil graficar barras de error para mostrar la incertidumbre o variabilidad de los datos. Sin embargo, si hay muchos puntos de datos con errores similares, la gráfica puede quedar desordenada y difícil de interpretar. En tales casos, podemos utilizar el submuestreo de barras de error, que nos permite dibujar barras de error solo en un subconjunto de puntos de datos. En este tutorial, utilizaremos la función errorbar de Matplotlib para demostrar cómo aplicar el submuestreo de barras de error a nuestros datos.",
      "meta": {
        "title": "Visualización de datos | Tutorial de submuestreo de barras de error",
        "description": "Aprende a utilizar la función errorbar de Matplotlib para aplicar el submuestreo de barras de error y crear visualizaciones de datos claras con menos desorden.",
        "keywords": "visualización de datos, barras de error, submuestreo de barras de error, Matplotlib, Python"
      },
      "details": {
        "steps": [
          {
            "title": "Importar bibliotecas y generar datos",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificaciones en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificaciones en este momento"
              }
            ]
          },
          {
            "title": "Graficar todas las barras de error",
            "text": "es/step2.md",
            "verify": [
              {
                "name": "Este paso no tiene verificaciones en este momento",
                "file": "verify2-1.sh",
                "hint": "Este paso no tiene verificaciones en este momento"
              }
            ]
          },
          {
            "title": "Tomar submuestreo de cada sexta barra de error",
            "text": "es/step3.md",
            "verify": [
              {
                "name": "Este paso no tiene verificaciones en este momento",
                "file": "verify3-1.sh",
                "hint": "Este paso no tiene verificaciones en este momento"
              }
            ]
          },
          {
            "title": "Desplazar la segunda serie en 3",
            "text": "es/step4.md",
            "verify": [
              {
                "name": "Este paso no tiene verificaciones en este momento",
                "file": "verify4-1.sh",
                "hint": "Este paso no tiene verificaciones en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Sous-échantillonnage des barre d'erreur avec Matplotlib",
      "description": "Dans la visualisation de données, il est parfois utile de tracer des barre d'erreur pour montrer l'incertitude ou la variabilité des données. Cependant, si il y a de nombreux points de données avec des erreurs similaires, le graphique peut devenir encombré et difficile à interpréter. Dans de tels cas, nous pouvons utiliser le sous-échantillonnage des barre d'erreur, qui nous permet de tracer des barre d'erreur seulement sur un sous-ensemble de points de données. Dans ce tutoriel, nous allons utiliser la fonction errorbar de Matplotlib pour démontrer comment appliquer le sous-échantillonnage des barre d'erreur à nos données.",
      "meta": {
        "title": "Visualisation de données | Tutoriel de sous-échantillonnage des barre d'erreur",
        "description": "Apprenez à utiliser la fonction errorbar de Matplotlib pour appliquer le sous-échantillonnage des barre d'erreur et créer des visualisations de données claires avec moins de brouillard.",
        "keywords": "visualisation de données, barre d'erreur, sous-échantillonnage des barre d'erreur, Matplotlib, Python"
      },
      "details": {
        "steps": [
          {
            "title": "Importer les bibliothèques et générer des données",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          },
          {
            "title": "Tracer toutes les barre d'erreur",
            "text": "fr/step2.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify2-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          },
          {
            "title": "Sous-échantillonnage de chaque 6ème barre d'erreur",
            "text": "fr/step3.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify3-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          },
          {
            "title": "Décaler la deuxième série de 3",
            "text": "fr/step4.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify4-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Fehlerbalken-Untersampling mit Matplotlib",
      "description": "Beim Datenvisualisierung kann es manchmal nützlich sein, Fehlerbalken zu plotten, um die Unsicherheit oder Variabilität der Daten zu zeigen. Wenn jedoch viele Datenpunkte ähnliche Fehler haben, kann das Diagramm unübersichtlich und schwer zu interpretieren werden. In solchen Fällen können wir Fehlerbalken-Untersampling verwenden, mit dem wir Fehlerbalken nur auf einem Teilmengen von Datenpunkten zeichnen können. In diesem Tutorial werden wir die `errorbar`-Funktion von Matplotlib verwenden, um zu demonstrieren, wie wir Fehlerbalken-Untersampling auf unsere Daten anwenden können.",
      "meta": {
        "title": "Datenvisualisierung | Tutorial zu Fehlerbalken-Untersampling",
        "description": "Lernen Sie, wie Sie die `errorbar`-Funktion von Matplotlib verwenden, um Fehlerbalken-Untersampling anzuwenden und klare Datenvisualisierungen mit weniger Unübersichtlichkeit zu erstellen.",
        "keywords": "Datenvisualisierung, Fehlerbalken, Fehlerbalken-Untersampling, Matplotlib, Python"
      },
      "details": {
        "steps": [
          {
            "title": "Bibliotheken importieren und Daten generieren",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          },
          {
            "title": "Alle Fehlerbalken plotten",
            "text": "de/step2.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify2-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          },
          {
            "title": "Jeden 6. Fehlerbalken sub-samplen",
            "text": "de/step3.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify3-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          },
          {
            "title": "Die zweite Reihe um 3 verschieben",
            "text": "de/step4.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify4-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Matplotlib を使った誤差棒のサブサンプリング",
      "description": "データ可視化において、データの不確定性や変動性を示すために誤差棒をプロットすることは、時には役立ちます。ただし、似たような誤差を持つデータポイントが多い場合、プロットが雑になり解釈が難しくなることがあります。そのような場合、誤差棒サブサンプリングを使うことができます。これにより、データポイントのサブセットにのみ誤差棒を描くことができます。このチュートリアルでは、Matplotlib の errorbar 関数を使って、データに誤差棒サブサンプリングを適用する方法を示します。",
      "meta": {
        "title": "データ可視化 | 誤差棒サブサンプリングチュートリアル",
        "description": "Matplotlib の errorbar 関数を使って誤差棒サブサンプリングを適用し、雑さを軽減した明確なデータ可視化を作成する方法を学びましょう。",
        "keywords": "データ可視化，誤差棒，誤差棒サブサンプリング，Matplotlib, Python"
      },
      "details": {
        "steps": [
          {
            "title": "ライブラリのインポートとデータの生成",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップでは現在検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップでは現在検証はありません"
              }
            ]
          },
          {
            "title": "すべての誤差棒をプロットする",
            "text": "ja/step2.md",
            "verify": [
              {
                "name": "このステップでは現在検証はありません",
                "file": "verify2-1.sh",
                "hint": "このステップでは現在検証はありません"
              }
            ]
          },
          {
            "title": "6 番目の誤差棒ごとにサブサンプリングする",
            "text": "ja/step3.md",
            "verify": [
              {
                "name": "このステップでは現在検証はありません",
                "file": "verify3-1.sh",
                "hint": "このステップでは現在検証はありません"
              }
            ]
          },
          {
            "title": "2 番目の系列を 3 だけシフトする",
            "text": "ja/step4.md",
            "verify": [
              {
                "name": "このステップでは現在検証はありません",
                "file": "verify4-1.sh",
                "hint": "このステップでは現在検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Подвыборка погрешностных полос с использованием Matplotlib",
      "description": "В визуализации данных иногда полезно рисовать погрешностные полосы для показа неопределенности или вариативности данных. Однако, если есть много точек данных с похожими погрешностями, график может стать загроможденным и трудно интерпретировать. В таких случаях мы можем использовать выборочную подвыборку погрешностных полос, которая позволяет нам рисовать погрешностные полосы только для определенного подмножества точек данных. В этом уроке мы используем функцию errorbar библиотеки Matplotlib, чтобы показать, как применить выборочную подвыборку погрешностных полос к нашим данным.",
      "meta": {
        "title": "Визуализация данных | Руководство по выборочной подвыборке погрешностных полос",
        "description": "Изучите, как использовать функцию errorbar библиотеки Matplotlib для применения выборочной подвыборки погрешностных полос и создания ясных визуализаций данных с уменьшенным загромождением.",
        "keywords": "визуализация данных, погрешностные полосы, выборочная подвыборка погрешностных полос, Matplotlib, Python"
      },
      "details": {
        "steps": [
          {
            "title": "Импортировать библиотеки и сгенерировать данные",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          },
          {
            "title": "Построить все погрешностные полосы",
            "text": "ru/step2.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify2-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          },
          {
            "title": "Выполнить выборочную подвыборку каждых шестых погрешностных полос",
            "text": "ru/step3.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify3-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          },
          {
            "title": "Сдвинуть вторую серию на 3",
            "text": "ru/step4.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify4-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "Matplotlib 를 이용한 오차 막대 서브샘플링",
      "description": "데이터 시각화에서 데이터의 불확실성 또는 변동성을 표시하기 위해 오차 막대를 플롯하는 것이 유용할 때가 있습니다. 그러나 유사한 오차를 가진 데이터 포인트가 많은 경우, 플롯이 복잡해지고 해석하기 어려워질 수 있습니다. 이러한 경우, 오차 막대 서브샘플링을 사용하여 데이터 포인트의 하위 집합에만 오차 막대를 그릴 수 있습니다. 이 튜토리얼에서는 Matplotlib 의 errorbar 함수를 사용하여 데이터에 오차 막대 서브샘플링을 적용하는 방법을 보여줍니다.",
      "meta": {
        "title": "데이터 시각화 | 오차 막대 서브샘플링 튜토리얼 - Matplotlib 활용",
        "description": "Matplotlib 의 errorbar 함수를 사용하여 오차 막대 서브샘플링을 적용하고, 시각적 혼잡을 줄여 명확한 데이터 시각화를 만드는 방법을 알아보세요.",
        "keywords": "데이터 시각화, 오차 막대, 오차 막대 서브샘플링, Matplotlib, 파이썬, 데이터 분석, 시각화 튜토리얼"
      },
      "details": {
        "steps": [
          {
            "title": "라이브러리 임포트 및 데이터 생성",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          },
          {
            "title": "모든 오차 막대 플롯",
            "text": "ko/step2.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify2-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          },
          {
            "title": "6 번째 오차 막대마다 서브샘플링",
            "text": "ko/step3.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify3-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          },
          {
            "title": "두 번째 시리즈를 3 만큼 이동",
            "text": "ko/step4.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify4-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Subamostragem de Barras de Erro com Matplotlib",
      "description": "Na visualização de dados, é por vezes útil plotar barras de erro para mostrar a incerteza ou variabilidade dos dados. No entanto, se houver muitos pontos de dados com erros semelhantes, o gráfico pode ficar confuso e difícil de interpretar. Nesses casos, podemos usar a subamostragem de barras de erro, que nos permite desenhar barras de erro apenas em um subconjunto de pontos de dados. Neste tutorial, usaremos a função errorbar do Matplotlib para demonstrar como aplicar a subamostragem de barras de erro aos nossos dados.",
      "meta": {
        "title": "Visualização de Dados | Tutorial de Subamostragem de Barras de Erro",
        "description": "Aprenda como usar a função errorbar do Matplotlib para aplicar a subamostragem de barras de erro e criar visualizações de dados claras com menos confusão.",
        "keywords": "visualização de dados, barras de erro, subamostragem de barras de erro, Matplotlib, Python, gráficos de erro, análise de dados"
      },
      "details": {
        "steps": [
          {
            "title": "Importar Bibliotecas e Gerar Dados",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          },
          {
            "title": "Plotar Todas as Barras de Erro",
            "text": "pt/step2.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify2-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          },
          {
            "title": "Subamostrar a Cada 6ª Barra de Erro",
            "text": "pt/step3.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify3-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          },
          {
            "title": "Deslocar a Segunda Série em 3",
            "text": "pt/step4.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify4-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
