{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Creating Broken Axis Plots in Python",
  "description": "In data visualization, there are times when we have to deal with outliers that make it difficult to see the details of most of the data. In such cases, we can use a broken axis to zoom in on the majority of the data while still showing the outliers. In this tutorial, we will learn how to create a broken axis plot using Matplotlib in Python.",
  "meta": {
    "title": "Python Data Visualization | Broken Axis Plot Tutorial",
    "description": "Learn how to create a broken axis plot using Matplotlib in Python to visualize data with outliers and focus on the majority of the data.",
    "keywords": "Python, Data Visualization, Matplotlib, Broken Axis Plot, Outliers"
  },
  "difficulty": "Beginner",
  "time": 45,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "verified": true,
  "details": {
    "steps": [
      {
        "title": "Preparing the Environment and Creating Data",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Check if libraries are imported",
            "file": "verify1-1.sh",
            "hint": "Make sure you have imported matplotlib.pyplot and numpy"
          }
        ],
        "skills": [
          "matplotlib/figures_axes",
          "matplotlib/importing_matplotlib",
          "matplotlib/titles_labels"
        ]
      },
      {
        "title": "Creating and Configuring the Broken Axis Plot",
        "text": "en/step2.md",
        "verify": [
          {
            "name": "Check if subplot creation code exists",
            "file": "verify2-1.sh",
            "hint": "Make sure you have created the subplots with plt.subplots"
          }
        ],
        "skills": [
          "matplotlib/axis_ticks",
          "matplotlib/figures_axes",
          "matplotlib/subplots"
        ]
      },
      {
        "title": "Adding Finishing Touches to the Broken Axis Plot",
        "text": "en/step3.md",
        "verify": [
          {
            "name": "Check if break lines are added to the plot",
            "file": "verify3-1.sh",
            "hint": "Make sure you have added the diagonal break lines to indicate the broken axis"
          }
        ],
        "skills": [
          "matplotlib/figures_axes",
          "matplotlib/grid_config",
          "matplotlib/titles_labels"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "broken-axis.ipynb",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "jupyter-ubuntu:2204"
  },
  "contributors": ["huduo0812"],
  "license": {
    "name": "BSD 3-Clause",
    "url": "https://github.com/matplotlib/matplotlib/tree/main/LICENSE",
    "repo": "https://github.com/matplotlib/matplotlib"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "在 Python 中创建断轴图",
      "description": "在数据可视化中，有时我们需要处理离群值，这些离群值会让我们难以看清大部分数据的细节。在这种情况下，我们可以使用断轴来放大查看大部分数据，同时仍能展示离群值。在本教程中，我们将学习如何使用 Python 中的 Matplotlib 创建断轴图。",
      "meta": {
        "title": "Python 数据可视化 | 断轴图教程",
        "description": "学习如何使用 Python 中的 Matplotlib 创建断轴图，以可视化包含离群值的数据并聚焦于大部分数据。",
        "keywords": "Python, 数据可视化，Matplotlib, 断轴图，离群值"
      },
      "details": {
        "steps": [
          {
            "title": "准备环境并创建数据",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "检查是否已导入库",
                "file": "verify1-1.sh",
                "hint": "确保你已导入 matplotlib.pyplot 和 numpy"
              }
            ]
          },
          {
            "title": "创建并配置断轴图",
            "text": "zh/step2.md",
            "verify": [
              {
                "name": "检查是否存在子图创建代码",
                "file": "verify2-1.sh",
                "hint": "确保你已使用 plt.subplots 创建了子图"
              }
            ]
          },
          {
            "title": "为断轴图添加收尾细节",
            "text": "zh/step3.md",
            "verify": [
              {
                "name": "检查是否已在图中添加断轴线条",
                "file": "verify3-1.sh",
                "hint": "确保你已添加对角线断轴线条以表示断轴"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Creación de gráficos con eje roto en Python",
      "description": "En la visualización de datos, a veces tenemos que lidiar con valores atípicos (outliers) que dificultan ver los detalles de la mayoría de los datos. En estos casos, podemos utilizar un eje roto para hacer un acercamiento a la mayoría de los datos mientras todavía mostramos los valores atípicos. En este tutorial, aprenderemos cómo crear un gráfico con eje roto utilizando Matplotlib en Python.",
      "meta": {
        "title": "Visualización de datos en Python | Tutorial de gráficos con eje roto",
        "description": "Aprende cómo crear un gráfico con eje roto utilizando Matplotlib en Python para visualizar datos con valores atípicos y centrarte en la mayoría de los datos.",
        "keywords": "Python, Visualización de datos, Matplotlib, Gráfico con eje roto, Valores atípicos"
      },
      "details": {
        "steps": [
          {
            "title": "Preparando el entorno y creando datos",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar si las bibliotecas están importadas",
                "file": "verify1-1.sh",
                "hint": "Asegúrate de haber importado matplotlib.pyplot y numpy"
              }
            ]
          },
          {
            "title": "Creación y configuración del gráfico con eje roto",
            "text": "es/step2.md",
            "verify": [
              {
                "name": "Verificar si existe el código de creación de subgráficos",
                "file": "verify2-1.sh",
                "hint": "Asegúrate de haber creado los subgráficos con plt.subplots"
              }
            ]
          },
          {
            "title": "Añadiendo toques finales al gráfico con eje roto",
            "text": "es/step3.md",
            "verify": [
              {
                "name": "Verificar si se han agregado las líneas de corte al gráfico",
                "file": "verify3-1.sh",
                "hint": "Asegúrate de haber agregado las líneas diagonales de corte para indicar el eje roto"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Création de graphiques à axe brisé en Python",
      "description": "Dans la visualisation de données, il arrive que nous devions traiter des valeurs aberrantes (outliers) qui rendent difficile la visualisation des détails de la majorité des données. Dans de tels cas, nous pouvons utiliser un axe brisé pour zoomer sur la majorité des données tout en affichant toujours les valeurs aberrantes. Dans ce tutoriel, nous apprendrons à créer un graphique à axe brisé en utilisant Matplotlib en Python.",
      "meta": {
        "title": "Visualisation de données en Python | Tutoriel sur les graphiques à axe brisé",
        "description": "Apprenez à créer un graphique à axe brisé en utilisant Matplotlib en Python pour visualiser des données avec des valeurs aberrantes et vous concentrer sur la majorité des données.",
        "keywords": "Python, Visualisation de données, Matplotlib, Graphique à axe brisé, Valeurs aberrantes"
      },
      "details": {
        "steps": [
          {
            "title": "Préparation de l'environnement et création des données",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier si les bibliothèques sont importées",
                "file": "verify1-1.sh",
                "hint": "Assurez-vous d'avoir importé matplotlib.pyplot et numpy"
              }
            ]
          },
          {
            "title": "Création et configuration du graphique à axe brisé",
            "text": "fr/step2.md",
            "verify": [
              {
                "name": "Vérifier si le code de création des sous-graphiques existe",
                "file": "verify2-1.sh",
                "hint": "Assurez-vous d'avoir créé les sous-graphiques avec plt.subplots"
              }
            ]
          },
          {
            "title": "Ajout des touches finales au graphique à axe brisé",
            "text": "fr/step3.md",
            "verify": [
              {
                "name": "Vérifier si les lignes de rupture sont ajoutées au graphique",
                "file": "verify3-1.sh",
                "hint": "Assurez-vous d'avoir ajouté les lignes diagonales de rupture pour indiquer l'axe brisé"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Erstellen von Diagrammen mit unterbrochener Achse in Python",
      "description": "Bei der Datenvisualisierung müssen wir manchmal mit Ausreißern umgehen, die es schwierig machen, die Details der meisten Daten zu sehen. In solchen Fällen können wir eine unterbrochene Achse verwenden, um auf die Mehrheit der Daten zu zoomen, während wir die Ausreißer weiterhin anzeigen. In diesem Tutorial lernen wir, wie man mit Matplotlib in Python ein Diagramm mit unterbrochener Achse erstellt.",
      "meta": {
        "title": "Python Datenvisualisierung | Tutorial für Diagramme mit unterbrochener Achse",
        "description": "Lernen Sie, wie Sie mit Matplotlib in Python ein Diagramm mit unterbrochener Achse erstellen, um Daten mit Ausreißern zu visualisieren und sich auf die Mehrheit der Daten zu konzentrieren.",
        "keywords": "Python, Datenvisualisierung, Matplotlib, Diagramm mit unterbrochener Achse, Ausreißer"
      },
      "details": {
        "steps": [
          {
            "title": "Vorbereitung der Umgebung und Datenerstellung",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Prüfen, ob die Bibliotheken importiert wurden",
                "file": "verify1-1.sh",
                "hint": "Stellen Sie sicher, dass Sie matplotlib.pyplot und numpy importiert haben"
              }
            ]
          },
          {
            "title": "Erstellen und Konfigurieren des Diagramms mit unterbrochener Achse",
            "text": "de/step2.md",
            "verify": [
              {
                "name": "Prüfen, ob der Code zur Erstellung der Unterdiagramme vorhanden ist",
                "file": "verify2-1.sh",
                "hint": "Stellen Sie sicher, dass Sie die Unterdiagramme mit plt.subplots erstellt haben"
              }
            ]
          },
          {
            "title": "Letzte Anpassungen am Diagramm mit unterbrochener Achse vornehmen",
            "text": "de/step3.md",
            "verify": [
              {
                "name": "Prüfen, ob Unterbrechungslinien zum Diagramm hinzugefügt wurden",
                "file": "verify3-1.sh",
                "hint": "Stellen Sie sicher, dass Sie die diagonalen Unterbrechungslinien hinzugefügt haben, um die unterbrochene Achse anzuzeigen"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Python で破線軸グラフを作成する",
      "description": "データ可視化において、外れ値（アウトライヤー）のために大部分のデータの詳細が見えにくくなることがあります。そのような場合、破線軸を使用することで、外れ値を表示しながらも大部分のデータを拡大して見ることができます。このチュートリアルでは、Python の Matplotlib を使用して破線軸グラフを作成する方法を学びます。",
      "meta": {
        "title": "Python データ可視化 | 破線軸グラフチュートリアル",
        "description": "Python の Matplotlib を使って破線軸グラフを作成し、外れ値を含むデータを可視化し、大部分のデータに焦点を当てる方法を学びましょう。",
        "keywords": "Python, データ可視化，Matplotlib, 破線軸グラフ，外れ値"
      },
      "details": {
        "steps": [
          {
            "title": "環境の準備とデータの作成",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ライブラリがインポートされているか確認する",
                "file": "verify1-1.sh",
                "hint": "matplotlib.pyplot と numpy をインポートしていることを確認してください"
              }
            ]
          },
          {
            "title": "破線軸グラフの作成と設定",
            "text": "ja/step2.md",
            "verify": [
              {
                "name": "サブプロット作成コードが存在するか確認する",
                "file": "verify2-1.sh",
                "hint": "plt.subplots を使ってサブプロットを作成していることを確認してください"
              }
            ]
          },
          {
            "title": "破線軸グラフの仕上げ",
            "text": "ja/step3.md",
            "verify": [
              {
                "name": "グラフに破線が追加されているか確認する",
                "file": "verify3-1.sh",
                "hint": "破線軸を示すための斜めの破線を追加していることを確認してください"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Создание графиков с разрывной осью в Python",
      "description": "При визуализации данных бывает, что приходится сталкиваться с выбросами, которые затрудняют просмотр деталей большинства данных. В таких случаях можно использовать разрывную ось, чтобы приблизить основную часть данных, сохраняя при этом отображение выбросов. В этом руководстве мы научимся создавать графики с разрывной осью с использованием библиотеки Matplotlib в Python.",
      "meta": {
        "title": "Визуализация данных на Python | Руководство по графикам с разрывной осью",
        "description": "Узнайте, как создавать графики с разрывной осью с использованием библиотеки Matplotlib в Python для визуализации данных с выбросами и фокусировки на основной части данных.",
        "keywords": "Python, Визуализация данных, Matplotlib, График с разрывной осью, Выбросы"
      },
      "details": {
        "steps": [
          {
            "title": "Подготовка среды и создание данных",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверьте, импортированы ли библиотеки",
                "file": "verify1-1.sh",
                "hint": "Убедитесь, что вы импортировали matplotlib.pyplot и numpy"
              }
            ]
          },
          {
            "title": "Создание и настройка графика с разрывной осью",
            "text": "ru/step2.md",
            "verify": [
              {
                "name": "Проверьте, есть ли код создания подграфиков",
                "file": "verify2-1.sh",
                "hint": "Убедитесь, что вы создали подграфики с помощью plt.subplots"
              }
            ]
          },
          {
            "title": "Добавление финальных штрихов к графику с разрывной осью",
            "text": "ru/step3.md",
            "verify": [
              {
                "name": "Проверьте, добавлены ли линии разрыва на график",
                "file": "verify3-1.sh",
                "hint": "Убедитесь, что вы добавили диагональные линии разрыва для обозначения разрывной оси"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
