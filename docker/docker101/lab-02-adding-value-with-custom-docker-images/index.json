{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Adding Value with Custom Docker Images",
  "description": "In this lab, we build on our knowledge from lab 1 where we used Docker commands to run containers. We will create a custom Docker Image built from a Dockerfile. Once we build the image, we will push it to a central registry where it can be pulled to be deployed on other environments. Also, we will briefly describe image layers, and how Docker incorporates 'copy-on-write' and the union file system to efficiently store images and run containers.",
  "meta": {
    "title": "Docker Image Creation | Python App Development",
    "description": "Learn how to create a custom Docker image from a Dockerfile, push it to a registry, and deploy it on other environments. Explore Docker's efficient image storage and container management features.",
    "keywords": "Docker, Docker Image, Dockerfile, Python, Flask, Web Development"
  },
  "difficulty": "Beginner",
  "time": 35,
  "hidden": false,
  "fee_type": "pro",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Step 1: Create a Python App (without Using Docker)",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify if the flask app is running",
            "file": "verify1-1.sh",
            "hint": "Please follow the instructions carefully.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      },
      {
        "title": "Step 2: Create and Build the Docker Image",
        "text": "en/step2.md",
        "verify": [
          {
            "name": "Verify if python-hello-world image is created",
            "file": "verify2-1.sh",
            "hint": "Please follow the instructions carefully.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": ["docker/build", "docker/images"]
      },
      {
        "title": "Step 3: Run the Docker Image",
        "text": "en/step3.md",
        "verify": [
          {
            "name": "Verify if python-hello-world container is running",
            "file": "verify3-1.sh",
            "hint": "Please follow the instructions carefully.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": ["docker/logs", "docker/ls", "docker/run"]
      },
      {
        "title": "Step 4: Push to a Central Registry",
        "text": "en/step4.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify4-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": ["docker/push"]
      },
      {
        "title": "Step 5: Deploying a Change",
        "text": "en/step5.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify5-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      },
      {
        "title": "Step 6: Understanding Image Layers",
        "text": "en/step6.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify6-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      },
      {
        "title": "Step 7: Clean up",
        "text": "en/step7.md",
        "verify": [
          {
            "name": "Verify the containers are stopped and removed",
            "file": "verify7-1.sh",
            "hint": "Please follow the instructions to complete the steps.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": ["docker/prune"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "vnc-instance-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "Apache-2.0",
    "url": "https://github.com/ibm/docker101/#Apache-2.0-1-ov-file",
    "repo": "https://github.com/ibm/docker101/"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用自定义Docker镜像创造价值",
      "description": "在本实验中，我们基于实验1的知识展开，在实验1中我们使用Docker命令来运行容器。我们将从Dockerfile创建一个自定义Docker镜像。一旦构建了镜像，我们会将其推送到中央注册表，在那里它可以被拉取以部署到其他环境。此外，我们将简要描述镜像层，以及Docker如何结合“写时复制”和联合文件系统来高效存储镜像并运行容器。",
      "meta": {
        "title": "Docker镜像创建 | Python应用开发",
        "description": "学习如何从Dockerfile创建自定义Docker镜像，将其推送到注册表并在其他环境中部署。探索Docker高效的镜像存储和容器管理功能。",
        "keywords": "Docker、Docker镜像、Dockerfile、Python、Flask、网页开发"
      },
      "details": {
        "steps": [
          {
            "title": "步骤1：创建一个Python应用程序（不使用Docker）",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证flask应用程序是否正在运行",
                "file": "verify1-1.sh",
                "hint": "请仔细按照说明操作。"
              }
            ]
          },
          {
            "title": "步骤2：创建并构建Docker镜像",
            "text": "zh/step2.md",
            "verify": [
              {
                "name": "验证是否创建了python-hello-world镜像",
                "file": "verify2-1.sh",
                "hint": "请仔细按照说明操作。"
              }
            ]
          },
          {
            "title": "步骤3：运行Docker镜像",
            "text": "zh/step3.md",
            "verify": [
              {
                "name": "验证python-hello-world容器是否正在运行",
                "file": "verify3-1.sh",
                "hint": "请仔细按照说明操作。"
              }
            ]
          },
          {
            "title": "步骤4：推送到中央注册表",
            "text": "zh/step4.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify4-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          },
          {
            "title": "步骤5：部署变更",
            "text": "zh/step5.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify5-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          },
          {
            "title": "步骤6：理解镜像层",
            "text": "zh/step6.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify6-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          },
          {
            "title": "步骤7：清理",
            "text": "zh/step7.md",
            "verify": [
              {
                "name": "验证容器已停止并已删除",
                "file": "verify7-1.sh",
                "hint": "请按照说明完成这些步骤。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Agregar valor con imágenes de Docker personalizadas",
      "description": "En este laboratorio, se basa en los conocimientos del laboratorio 1 donde se usaron comandos de Docker para ejecutar contenedores. Se creará una imagen de Docker personalizada a partir de un Dockerfile. Una vez que se construya la imagen, se la subirá a un registro central donde se puede extraer para ser desplegada en otros entornos. Además, se describirá brevemente las capas de imágenes y cómo Docker incorpora 'copiar al escribir' y el sistema de archivos union para almacenar eficientemente imágenes y ejecutar contenedores.",
      "meta": {
        "title": "Creación de imágenes de Docker | Desarrollo de aplicaciones de Python",
        "description": "Aprenda a crear una imagen de Docker personalizada a partir de un Dockerfile, subirla a un registro y desplegarla en otros entornos. Explore las características eficientes de almacenamiento de imágenes y gestión de contenedores de Docker.",
        "keywords": "Docker, Imagen de Docker, Dockerfile, Python, Flask, Desarrollo web"
      },
      "details": {
        "steps": [
          {
            "title": "Paso 1: Crear una aplicación de Python (sin usar Docker)",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar si la aplicación de flask está en ejecución",
                "file": "verify1-1.sh",
                "hint": "Siga las instrucciones con cuidado."
              }
            ]
          },
          {
            "title": "Paso 2: Crear y construir la imagen de Docker",
            "text": "es/step2.md",
            "verify": [
              {
                "name": "Verificar si se ha creado la imagen python-hello-world",
                "file": "verify2-1.sh",
                "hint": "Siga las instrucciones con cuidado."
              }
            ]
          },
          {
            "title": "Paso 3: Ejecutar la imagen de Docker",
            "text": "es/step3.md",
            "verify": [
              {
                "name": "Verificar si el contenedor python-hello-world está en ejecución",
                "file": "verify3-1.sh",
                "hint": "Siga las instrucciones con cuidado."
              }
            ]
          },
          {
            "title": "Paso 4: Subir a un registro central",
            "text": "es/step4.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify4-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          },
          {
            "title": "Paso 5: Implementar un cambio",
            "text": "es/step5.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify5-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          },
          {
            "title": "Paso 6: Comprender las capas de imágenes",
            "text": "es/step6.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify6-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          },
          {
            "title": "Paso 7: Limpiar",
            "text": "es/step7.md",
            "verify": [
              {
                "name": "Verificar que los contenedores estén detenidos y eliminados",
                "file": "verify7-1.sh",
                "hint": "Siga las instrucciones para completar los pasos."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Ajouter de la valeur avec des images Docker personnalisées",
      "description": "Dans ce laboratoire, nous nous appuyons sur les connaissances acquises au laboratoire 1 où nous avons utilisé des commandes Docker pour exécuter des conteneurs. Nous allons créer une image Docker personnalisée à partir d'un Dockerfile. Une fois que nous aurons construit l'image, nous la pousserons vers un registre central où elle pourra être extraite pour être déployée sur d'autres environnements. Nous décrirons également brièvement les couches d'image et la manière dont Docker incorpore le 'copier lors de l'écriture' et le système de fichiers union pour stocker efficacement les images et exécuter les conteneurs.",
      "meta": {
        "title": "Création d'image Docker | Développement d'applications Python",
        "description": "Découvrez comment créer une image Docker personnalisée à partir d'un Dockerfile, la pousser vers un registre et la déployer sur d'autres environnements. Explorez les fonctionnalités d'entreposage d'images et de gestion de conteneurs efficaces de Docker.",
        "keywords": "Docker, Image Docker, Dockerfile, Python, Flask, Développement web"
      },
      "details": {
        "steps": [
          {
            "title": "Étape 1 : Créer une application Python (sans utiliser Docker)",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez si l'application Flask est en cours d'exécution",
                "file": "verify1-1.sh",
                "hint": "Veuillez suivre attentivement les instructions."
              }
            ]
          },
          {
            "title": "Étape 2 : Créer et construire l'image Docker",
            "text": "fr/step2.md",
            "verify": [
              {
                "name": "Vérifiez si l'image python-hello-world a été créée",
                "file": "verify2-1.sh",
                "hint": "Veuillez suivre attentivement les instructions."
              }
            ]
          },
          {
            "title": "Étape 3 : Exécuter l'image Docker",
            "text": "fr/step3.md",
            "verify": [
              {
                "name": "Vérifiez si le conteneur python-hello-world est en cours d'exécution",
                "file": "verify3-1.sh",
                "hint": "Veuillez suivre attentivement les instructions."
              }
            ]
          },
          {
            "title": "Étape 4 : Pousser vers un registre central",
            "text": "fr/step4.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify4-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          },
          {
            "title": "Étape 5 : Déploiement d'un changement",
            "text": "fr/step5.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify5-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          },
          {
            "title": "Étape 6 : Comprendre les couches d'image",
            "text": "fr/step6.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify6-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          },
          {
            "title": "Étape 7 : Nettoyage",
            "text": "fr/step7.md",
            "verify": [
              {
                "name": "Vérifiez que les conteneurs sont arrêtés et supprimés",
                "file": "verify7-1.sh",
                "hint": "Veuillez suivre les instructions pour terminer les étapes."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Wertschöpfung mit benutzerdefinierten Docker-Images",
      "description": "In diesem Lab bauen wir auf unserem Wissen aus Lab 1 auf, in dem wir Docker-Befehle verwendet haben, um Container auszuführen. Wir werden ein benutzerdefiniertes Docker-Image erstellen, das aus einer Dockerfile gebaut wird. Nachdem wir das Image gebaut haben, werden wir es an einen zentralen Registrierungsdienst pushen, von dem es abgerufen werden kann, um in anderen Umgebungen bereitgestellt zu werden. Außerdem werden wir kurz die Image-Schichten beschreiben und erklären, wie Docker 'Copy-on-Write' und das Union-Dateisystem integriert, um Bilder effizient zu speichern und Container auszuführen.",
      "meta": {
        "title": "Docker-Image-Erstellung | Python-App-Entwicklung",
        "description": "Lernen Sie, wie Sie ein benutzerdefiniertes Docker-Image aus einer Dockerfile erstellen, es an einen Registrierungsdienst pushen und es in anderen Umgebungen bereitstellen. Entdecken Sie die effizienten Image-Speicher- und Container-Verwaltungsfunktionen von Docker.",
        "keywords": "Docker, Docker-Image, Dockerfile, Python, Flask, Webentwicklung"
      },
      "details": {
        "steps": [
          {
            "title": "Schritt 1: Erstellen einer Python-App (ohne Verwendung von Docker)",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen, ob die Flask-App läuft",
                "file": "verify1-1.sh",
                "hint": "Bitte folgen Sie den Anweisungen genau."
              }
            ]
          },
          {
            "title": "Schritt 2: Erstellen und Builden des Docker-Images",
            "text": "de/step2.md",
            "verify": [
              {
                "name": "Überprüfen, ob das python-hello-world-Image erstellt wurde",
                "file": "verify2-1.sh",
                "hint": "Bitte folgen Sie den Anweisungen genau."
              }
            ]
          },
          {
            "title": "Schritt 3: Ausführen des Docker-Images",
            "text": "de/step3.md",
            "verify": [
              {
                "name": "Überprüfen, ob der python-hello-world-Container läuft",
                "file": "verify3-1.sh",
                "hint": "Bitte folgen Sie den Anweisungen genau."
              }
            ]
          },
          {
            "title": "Schritt 4: Push an einen zentralen Registrierungsdienst",
            "text": "de/step4.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Überprüfung",
                "file": "verify4-1.sh",
                "hint": "Dieser Schritt hat momentan keine Überprüfung"
              }
            ]
          },
          {
            "title": "Schritt 5: Implementieren einer Änderung",
            "text": "de/step5.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Überprüfung",
                "file": "verify5-1.sh",
                "hint": "Dieser Schritt hat momentan keine Überprüfung"
              }
            ]
          },
          {
            "title": "Schritt 6: Das Verständnis von Image-Layern",
            "text": "de/step6.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Überprüfung",
                "file": "verify6-1.sh",
                "hint": "Dieser Schritt hat momentan keine Überprüfung"
              }
            ]
          },
          {
            "title": "Schritt 7: Bereinigen",
            "text": "de/step7.md",
            "verify": [
              {
                "name": "Überprüfen, ob die Container gestoppt und entfernt wurden",
                "file": "verify7-1.sh",
                "hint": "Bitte folgen Sie den Anweisungen, um die Schritte abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "カスタム Docker イメージで価値を追加する",
      "description": "この実験では、コンテナを実行するために Docker コマンドを使用した実験 1 の知識を基にしています。Dockerfile から作成されたカスタム Docker イメージを作成します。イメージを作成したら、セントラル レジストリにプッシュし、他の環境で展開するためにプルできるようにします。また、イメージ レイヤーと、Docker が「書き込み時コピー」とユニオン ファイル システムをどのように組み込んでイメージを効率的に保存し、コンテナを実行するかについて簡単に説明します。",
      "meta": {
        "title": "Docker イメージ作成 | Python アプリケーション開発",
        "description": "Dockerfile からカスタム Docker イメージを作成し、レジストリにプッシュし、他の環境で展開する方法を学びましょう。Docker の効率的なイメージ保存とコンテナ管理機能を探求しましょう。",
        "keywords": "Docker、Docker イメージ、Dockerfile、Python、Flask、Web 開発"
      },
      "details": {
        "steps": [
          {
            "title": "手順 1: Python アプリを作成する（Docker を使用せず）",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "flask アプリが実行されているか確認する",
                "file": "verify1-1.sh",
                "hint": "指示に注意深く従ってください。"
              }
            ]
          },
          {
            "title": "手順 2: Docker イメージを作成してビルドする",
            "text": "ja/step2.md",
            "verify": [
              {
                "name": "python-hello-world イメージが作成されたか確認する",
                "file": "verify2-1.sh",
                "hint": "指示に注意深く従ってください。"
              }
            ]
          },
          {
            "title": "手順 3: Docker イメージを実行する",
            "text": "ja/step3.md",
            "verify": [
              {
                "name": "python-hello-world コンテナが実行されているか確認する",
                "file": "verify3-1.sh",
                "hint": "指示に注意深く従ってください。"
              }
            ]
          },
          {
            "title": "手順 4: セントラル レジストリにプッシュする",
            "text": "ja/step4.md",
            "verify": [
              {
                "name": "この手順では現在検証は行われていません",
                "file": "verify4-1.sh",
                "hint": "この手順では現在検証は行われていません"
              }
            ]
          },
          {
            "title": "手順 5: 変更の展開",
            "text": "ja/step5.md",
            "verify": [
              {
                "name": "この手順では現在検証は行われていません",
                "file": "verify5-1.sh",
                "hint": "この手順では現在検証は行われていません"
              }
            ]
          },
          {
            "title": "手順 6: イメージ レイヤーの理解",
            "text": "ja/step6.md",
            "verify": [
              {
                "name": "この手順では現在検証は行われていません",
                "file": "verify6-1.sh",
                "hint": "この手順では現在検証は行われていません"
              }
            ]
          },
          {
            "title": "手順 7: クリーンアップ",
            "text": "ja/step7.md",
            "verify": [
              {
                "name": "コンテナが停止して削除されていることを確認する",
                "file": "verify7-1.sh",
                "hint": "手順を完了するために指示に従ってください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Добавление значения с помощью пользовательских Docker-образов",
      "description": "В этой лабораторной работе мы будем основываться на знаниях, полученных в лабораторной работе 1, где мы использовали команды Docker для запуска контейнеров. Мы создадим пользовательский Docker-образ, построенный на основе Dockerfile. После сборки образа мы отправим его в центральный реестр, откуда его можно будет извлечь для развертывания на других средах. Также мы кратко опишем слои образов и то, как Docker интегрирует 'копирование при записи' и объединенную файловую систему для эффективного хранения образов и запуска контейнеров.",
      "meta": {
        "title": "Создание Docker-образа | Разработка Python-приложений",
        "description": "Изучите, как создать пользовательский Docker-образ из Dockerfile, отправить его в реестр и развернуть на других средах. Изучите эффективные функции хранения образов и управления контейнерами Docker.",
        "keywords": "Docker, Docker-образ, Dockerfile, Python, Flask, Веб-разработка"
      },
      "details": {
        "steps": [
          {
            "title": "Шаг 1: Создать Python-приложение (без использования Docker)",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить, запущено ли приложение Flask",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, следуйте инструкциям внимательно."
              }
            ]
          },
          {
            "title": "Шаг 2: Создать и собрать Docker-образ",
            "text": "ru/step2.md",
            "verify": [
              {
                "name": "Проверить, создан ли образ python-hello-world",
                "file": "verify2-1.sh",
                "hint": "Пожалуйста, следуйте инструкциям внимательно."
              }
            ]
          },
          {
            "title": "Шаг 3: Запустить Docker-образ",
            "text": "ru/step3.md",
            "verify": [
              {
                "name": "Проверить, запущен ли контейнер python-hello-world",
                "file": "verify3-1.sh",
                "hint": "Пожалуйста, следуйте инструкциям внимательно."
              }
            ]
          },
          {
            "title": "Шаг 4: Отправить в центральный реестр",
            "text": "ru/step4.md",
            "verify": [
              {
                "name": "На данный момент этот шаг не имеет проверки",
                "file": "verify4-1.sh",
                "hint": "На данный момент этот шаг не имеет проверки"
              }
            ]
          },
          {
            "title": "Шаг 5: Развертывание изменения",
            "text": "ru/step5.md",
            "verify": [
              {
                "name": "На данный момент этот шаг не имеет проверки",
                "file": "verify5-1.sh",
                "hint": "На данный момент этот шаг не имеет проверки"
              }
            ]
          },
          {
            "title": "Шаг 6: Понимание слоев образов",
            "text": "ru/step6.md",
            "verify": [
              {
                "name": "На данный момент этот шаг не имеет проверки",
                "file": "verify6-1.sh",
                "hint": "На данный момент этот шаг не имеет проверки"
              }
            ]
          },
          {
            "title": "Шаг 7: Удаление ненужных файлов",
            "text": "ru/step7.md",
            "verify": [
              {
                "name": "Проверить, остановлены ли и удалены контейнеры",
                "file": "verify7-1.sh",
                "hint": "Пожалуйста, следуйте инструкциям для завершения шагов."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
