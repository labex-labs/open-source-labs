{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Function Currying in JavaScript",
  "description": "In this lab, we will explore the concept of function currying and uncurrying in JavaScript. Function currying is a technique that allows us to transform a function that takes multiple arguments into a sequence of functions that each take a single argument. On the other hand, function uncurrying is the process of transforming a sequence of functions that each take a single argument into a function that takes multiple arguments. Through this lab, we will learn how to implement both these techniques in JavaScript.",
  "meta": {
    "title": "Function Currying and Uncurrying in JavaScript | Programming Tutorials",
    "description": "Explore the concepts of function currying and uncurrying in JavaScript. Learn how to transform functions and optimize code with these techniques.",
    "keywords": "JavaScript, function currying, function uncurrying, programming tutorials, code optimization"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Uncurry Function",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands in ZSH History",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "JavaScript 中的函数柯里化",
      "description": "在本实验中，我们将探索 JavaScript 中函数柯里化和反柯里化的概念。函数柯里化是一种技术，它允许我们将一个接受多个参数的函数转换为一系列每个只接受一个参数的函数。另一方面，函数反柯里化是将一系列每个只接受一个参数的函数转换为一个接受多个参数的函数的过程。通过本实验，我们将学习如何在 JavaScript 中实现这两种技术。",
      "meta": {
        "title": "JavaScript 中的函数柯里化与反柯里化 | 编程教程",
        "description": "探索 JavaScript 中函数柯里化和反柯里化的概念。学习如何使用这些技术转换函数并优化代码。",
        "keywords": "JavaScript, 函数柯里化，函数反柯里化，编程教程，代码优化"
      },
      "details": {
        "steps": [
          {
            "title": "反柯里化函数",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "在 ZSH 历史记录中验证 Node 命令",
                "file": "verify1-1.sh",
                "hint": "通过输入 'node' 并按 Enter 键，可以在终端/SSH 中运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Currying de funciones en JavaScript",
      "description": "En este laboratorio, exploraremos el concepto de currying y uncurrying de funciones en JavaScript. El currying de funciones es una técnica que nos permite transformar una función que toma múltiples argumentos en una secuencia de funciones que cada una toma un solo argumento. Por otro lado, el uncurrying de funciones es el proceso de transformar una secuencia de funciones que cada una toma un solo argumento en una función que toma múltiples argumentos. A través de este laboratorio, aprenderemos cómo implementar ambas técnicas en JavaScript.",
      "meta": {
        "title": "Currying y Uncurrying de Funciones en JavaScript | Tutoriales de Programación",
        "description": "Explora los conceptos de currying y uncurrying de funciones en JavaScript. Aprende cómo transformar funciones y optimizar el código con estas técnicas.",
        "keywords": "JavaScript, currying de funciones, uncurrying de funciones, tutoriales de programación, optimización de código"
      },
      "details": {
        "steps": [
          {
            "title": "Deshacer el currying de una función",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar comandos de Node en el historial de ZSH",
                "file": "verify1-1.sh",
                "hint": "Se puede ejecutar JavaScript en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Le currying de fonctions en JavaScript",
      "description": "Dans ce laboratoire, nous allons explorer le concept de currying et d'uncurrying de fonctions en JavaScript. Le currying de fonctions est une technique qui nous permet de transformer une fonction qui prend plusieurs arguments en une séquence de fonctions qui prennent chacun un seul argument. D'un autre côté, l'uncurrying de fonctions est le processus de transformation d'une séquence de fonctions qui prennent chacun un seul argument en une fonction qui prend plusieurs arguments. Dans ce laboratoire, nous allons apprendre à implémenter ces deux techniques en JavaScript.",
      "meta": {
        "title": "Le currying et l'uncurrying de fonctions en JavaScript | Tutoriels de programmation",
        "description": "Explorez les concepts de currying et d'uncurrying de fonctions en JavaScript. Apprenez à transformer des fonctions et à optimiser le code avec ces techniques.",
        "keywords": "JavaScript, currying de fonctions, uncurrying de fonctions, tutoriels de programmation, optimisation du code"
      },
      "details": {
        "steps": [
          {
            "title": "Uncurry une fonction",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier les commandes Node dans l'historique ZSH",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Funktionskürzung in JavaScript",
      "description": "In diesem Lab werden wir das Konzept der Funktionskürzung und -entkürzung in JavaScript erkunden. Die Funktionskürzung ist eine Technik, die uns ermöglicht, eine Funktion, die mehrere Argumente annimmt, in eine Sequenz von Funktionen umzuwandeln, von denen jede nur ein einzelnes Argument annimmt. Andererseits ist die Funktionentkürzung der Prozess, eine Sequenz von Funktionen, von denen jede nur ein einzelnes Argument annimmt, in eine Funktion umzuwandeln, die mehrere Argumente annimmt. Durch dieses Lab werden wir lernen, wie man beide diese Techniken in JavaScript implementiert.",
      "meta": {
        "title": "Funktionskürzung und -entkürzung in JavaScript | Programmier-Tutorials",
        "description": "Erkunde die Konzepte der Funktionskürzung und -entkürzung in JavaScript. Lerne, wie man Funktionen transformiert und den Code mit diesen Techniken optimiert.",
        "keywords": "JavaScript, Funktionskürzung, Funktionentkürzung, Programmier-Tutorials, Code-Optimierung"
      },
      "details": {
        "steps": [
          {
            "title": "Funktion entkürzen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen von Node-Befehlen in der ZSH-Historie",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Eingabetaste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "JavaScript における関数のカリング",
      "description": "この実験では、JavaScript における関数のカリングとアンカリングの概念を探ります。関数のカリングは、複数の引数を取る関数を、それぞれが単一の引数を取る関数のシーケンスに変換する技術です。一方、関数のアンカリングは、それぞれが単一の引数を取る関数のシーケンスを、複数の引数を取る関数に変換するプロセスです。この実験を通じて、JavaScript においてこれらの技術の両方を実装する方法を学びます。",
      "meta": {
        "title": "JavaScript における関数のカリングとアンカリング | プログラミングチュートリアル",
        "description": "JavaScript における関数のカリングとアンカリングの概念を探りましょう。これらの技術を使って関数を変換し、コードを最適化する方法を学びましょう。",
        "keywords": "JavaScript, 関数のカリング，関数のアンカリング，プログラミングチュートリアル，コード最適化"
      },
      "details": {
        "steps": [
          {
            "title": "関数をアンカリングする",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ZSH 履歴の Node コマンドを確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で'node'と入力して Enter キーを押すことで JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Каррирование функций в JavaScript",
      "description": "В этом практическом занятии мы изучим концепции каррирования и обратного каррирования функций в JavaScript. Каррирование функции - это техника, которая позволяет превратить функцию, принимающую несколько аргументов, в последовательность функций, каждая из которых принимает только один аргумент. С другой стороны, обратное каррирование функции - это процесс превращения последовательности функций, каждая из которых принимает только один аргумент, в функцию, принимающую несколько аргументов. В ходе этого практического занятия мы научимся реализовывать обе эти техники в JavaScript.",
      "meta": {
        "title": "Каррирование и обратное каррирование функций в JavaScript | Руководства по программированию",
        "description": "Изучите концепции каррирования и обратного каррирования функций в JavaScript. Научитесь преобразовывать функции и оптимизировать код с помощью этих техник.",
        "keywords": "JavaScript, каррирование функций, обратное каррирование функций, руководства по программированию, оптимизация кода"
      },
      "details": {
        "steps": [
          {
            "title": "Обратное каррирование функции",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить команды Node в истории ZSH",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запускать в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "JavaScript 함수 커링 (Currying) 및 언커링 (Uncurrying)",
      "description": "이 랩에서는 JavaScript 에서 함수 커링과 언커링의 개념을 살펴봅니다. 함수 커링은 여러 인수를 받는 함수를 각각 단일 인수를 받는 일련의 함수로 변환하는 기술입니다. 반면에 함수 언커링은 각각 단일 인수를 받는 일련의 함수를 여러 인수를 받는 함수로 변환하는 과정입니다. 이 랩을 통해 JavaScript 에서 이러한 두 가지 기술을 모두 구현하는 방법을 배우게 됩니다.",
      "meta": {
        "title": "JavaScript 함수 커링 및 언커링 | 프로그래밍 튜토리얼",
        "description": "JavaScript 에서 함수 커링과 언커링의 개념을 알아보세요. 이러한 기술을 사용하여 함수를 변환하고 코드를 최적화하는 방법을 배우세요.",
        "keywords": "JavaScript, 함수 커링, 함수 언커링, 프로그래밍 튜토리얼, 코드 최적화, 자바스크립트 커링, 자바스크립트 언커링"
      },
      "details": {
        "steps": [
          {
            "title": "함수 언커리 (Uncurry)",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "ZSH 히스토리에서 Node 명령어 확인",
                "file": "verify1-1.sh",
                "hint": "'node'를 입력하고 Enter 키를 눌러 터미널/SSH 에서 JavaScript 를 실행할 수 있습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Currying de Funções em JavaScript",
      "description": "Neste laboratório, exploraremos o conceito de currying e uncurrying de funções em JavaScript. Currying de funções é uma técnica que nos permite transformar uma função que recebe múltiplos argumentos em uma sequência de funções que recebem um único argumento cada. Por outro lado, uncurrying de funções é o processo de transformar uma sequência de funções, cada uma recebendo um único argumento, em uma função que recebe múltiplos argumentos. Através deste laboratório, aprenderemos como implementar ambas as técnicas em JavaScript.",
      "meta": {
        "title": "Currying e Uncurrying de Funções em JavaScript | Tutoriais de Programação",
        "description": "Explore os conceitos de currying e uncurrying de funções em JavaScript. Aprenda como transformar funções e otimizar o código com essas técnicas.",
        "keywords": "JavaScript, currying de funções, uncurrying de funções, tutoriais de programação, otimização de código"
      },
      "details": {
        "steps": [
          {
            "title": "Uncurry Function",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar Comandos Node no Histórico ZSH",
                "file": "verify1-1.sh",
                "hint": "JavaScript pode ser executado no Terminal/SSH digitando 'node' e pressionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
