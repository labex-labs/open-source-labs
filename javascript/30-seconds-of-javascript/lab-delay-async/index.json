{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Delay Async Function Execution",
  "description": "In this lab, we will explore how to delay the execution of an asynchronous function in JavaScript. By using the sleep function and returning a Promise, we can put a part of the async function to sleep for a certain amount of time, allowing for better control and management of the code's execution. Through practical examples, we will learn how to effectively implement this technique in real-world scenarios.",
  "meta": {
    "title": "Delay Async Function Execution in JavaScript",
    "description": "Learn how to delay the execution of an asynchronous function in JavaScript using the sleep function and Promise.",
    "keywords": "javascript, javascript practice, delay, javascript practice online, sleep, execution, javascript playground, javascript lab, function, javascript tutor"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Delay Async Function Execution",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Command Usage",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/async_prog",
          "javascript/comp_ops",
          "javascript/data_types",
          "javascript/debugging",
          "javascript/functions",
          "javascript/loops",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "延迟异步函数执行",
      "description": "在本实验中，我们将探索如何在JavaScript中延迟异步函数的执行。通过使用sleep函数并返回一个Promise，我们可以让异步函数的一部分休眠一段时间，从而更好地控制和管理代码的执行。通过实际示例，我们将学习如何在实际场景中有效地实现此技术。",
      "meta": {
        "title": "在JavaScript中延迟异步函数执行",
        "description": "学习如何使用sleep函数和Promise在JavaScript中延迟异步函数的执行。",
        "keywords": "JavaScript, JavaScript实践, 延迟, 在线JavaScript实践, sleep, 执行, JavaScript游乐场, JavaScript实验, 函数, JavaScript教程"
      },
      "details": {
        "steps": [
          {
            "title": "延迟异步函数执行",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证Node命令的用法",
                "file": "verify1-1.sh",
                "hint": "在终端/SSH中，可以通过输入'node'并按下回车键来运行JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
