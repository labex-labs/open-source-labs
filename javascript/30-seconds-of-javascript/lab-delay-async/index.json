{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Delay Async Function Execution",
  "description": "In this lab, we will explore how to delay the execution of an asynchronous function in JavaScript. By using the sleep function and returning a Promise, we can put a part of the async function to sleep for a certain amount of time, allowing for better control and management of the code's execution. Through practical examples, we will learn how to effectively implement this technique in real-world scenarios.",
  "meta": {
    "title": "Delay Async Function Execution in JavaScript",
    "description": "Learn how to delay the execution of an asynchronous function in JavaScript using the sleep function and Promise.",
    "keywords": "javascript, javascript practice, delay, javascript practice online, sleep, execution, javascript playground, javascript lab, function, javascript tutor"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Delay Async Function Execution",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Command Usage",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/async_prog",
          "javascript/comp_ops",
          "javascript/data_types",
          "javascript/debugging",
          "javascript/functions",
          "javascript/loops",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "延迟异步函数执行",
      "description": "在本实验中，我们将探索如何在JavaScript中延迟异步函数的执行。通过使用sleep函数并返回一个Promise，我们可以让异步函数的一部分休眠一段时间，从而更好地控制和管理代码的执行。通过实际示例，我们将学习如何在实际场景中有效地实现此技术。",
      "meta": {
        "title": "在JavaScript中延迟异步函数执行",
        "description": "学习如何使用sleep函数和Promise在JavaScript中延迟异步函数的执行。",
        "keywords": "JavaScript, JavaScript实践, 延迟, 在线JavaScript实践, sleep, 执行, JavaScript游乐场, JavaScript实验, 函数, JavaScript教程"
      },
      "details": {
        "steps": [
          {
            "title": "延迟异步函数执行",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证Node命令的用法",
                "file": "verify1-1.sh",
                "hint": "在终端/SSH中，可以通过输入'node'并按下回车键来运行JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Retrasar la ejecución de una función asíncrona",
      "description": "En este laboratorio, exploraremos cómo retrasar la ejecución de una función asíncrona en JavaScript. Al utilizar la función sleep y devolver una Promise, podemos hacer que una parte de la función async duerma durante un determinado tiempo, lo que permite un mejor control y gestión de la ejecución del código. A través de ejemplos prácticos, aprenderemos cómo implementar efectivamente esta técnica en escenarios del mundo real.",
      "meta": {
        "title": "Retrasar la ejecución de una función asíncrona en JavaScript",
        "description": "Aprende cómo retrasar la ejecución de una función asíncrona en JavaScript utilizando la función sleep y Promise.",
        "keywords": "javascript, práctica de javascript, retraso, práctica de javascript en línea, dormir, ejecución, playground de javascript, laboratorio de javascript, función, tutor de javascript"
      },
      "details": {
        "steps": [
          {
            "title": "Retrasar la ejecución de una función asíncrona",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el uso del comando Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript se puede ejecutar en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Retarder l'exécution d'une fonction asynchrone",
      "description": "Dans ce laboratoire, nous allons explorer la manière de retarder l'exécution d'une fonction asynchrone en JavaScript. En utilisant la fonction sleep et en renvoyant une Promise, nous pouvons mettre une partie de la fonction async en pause pour un certain temps, permettant un meilleur contrôle et une meilleure gestion de l'exécution du code. Par l'intermédiaire d'exemples pratiques, nous allons apprendre à implémenter efficacement cette technique dans des scénarios réels.",
      "meta": {
        "title": "Retarder l'exécution d'une fonction asynchrone en JavaScript",
        "description": "Apprenez à retarder l'exécution d'une fonction asynchrone en JavaScript à l'aide de la fonction sleep et de la Promise.",
        "keywords": "javascript, pratique javascript, retard, pratique javascript en ligne, sommeil, exécution, terrain de jeu javascript, laboratoire javascript, fonction, tuteur javascript"
      },
      "details": {
        "steps": [
          {
            "title": "Retarder l'exécution d'une fonction asynchrone",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier l'utilisation de la commande Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Verzögere die Ausführung einer asynchronen Funktion",
      "description": "In diesem Lab werden wir untersuchen, wie man die Ausführung einer asynchronen Funktion in JavaScript verzögern kann. Indem wir die sleep-Funktion verwenden und ein Promise zurückgeben, können wir einen Teil der async-Funktion für eine bestimmte Zeit pausieren, was eine bessere Kontrolle und Verwaltung der Codeausführung ermöglicht. Anhand von praktischen Beispielen werden wir lernen, wie man diese Technik effektiv in Echtzeit-Szenarien implementiert.",
      "meta": {
        "title": "Verzögere die Ausführung einer asynchronen Funktion in JavaScript",
        "description": "Lernen Sie, wie man die Ausführung einer asynchronen Funktion in JavaScript mithilfe der sleep-Funktion und eines Promise verzögert.",
        "keywords": "javascript, javascript Übung, Verzögerung, Online-JavaScript-Übung, Schlaf, Ausführung, JavaScript-Spielfeld, JavaScript-Lab, Funktion, JavaScript-Tutor"
      },
      "details": {
        "steps": [
          {
            "title": "Verzögere die Ausführung einer asynchronen Funktion",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfe die Verwendung des Node-Befehls",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Eingabetaste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "非同期関数の実行を遅延させる",
      "description": "この実験では、JavaScript において非同期関数の実行を遅延させる方法を探ります。`sleep` 関数を使用して `Promise` を返すことで、`async` 関数の一部を一定時間休止させることができ、コードの実行の制御と管理をより良く行うことができます。実際の例を通じて、この技術を現実のシナリオで効果的に実装する方法を学びます。",
      "meta": {
        "title": "JavaScript における非同期関数の実行を遅延させる",
        "description": "`sleep` 関数と `Promise` を使って JavaScript における非同期関数の実行を遅延させる方法を学びましょう。",
        "keywords": "javascript, javascript 練習, 遅延, オンライン javascript 練習, sleep, 実行, javascript プレイグラウンド, javascript 実験, 関数, javascript チューター"
      },
      "details": {
        "steps": [
          {
            "title": "非同期関数の実行を遅延させる",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Node コマンドの使用を確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で 'node' と入力して Enter キーを押すことで、JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Задержка выполнения асинхронной функции",
      "description": "В этом лабе мы исследуем, как задерживать выполнение асинхронной функции в JavaScript. Используя функцию sleep и возвращая Promise, мы можем заставить часть async-функции 'спать' определенное время, что позволяет лучше контролировать и управлять выполнением кода. С помощью практических примеров мы узнаем, как эффективно реализовать эту технику в реальных сценариях.",
      "meta": {
        "title": "Задержка выполнения асинхронной функции в JavaScript",
        "description": "Изучите, как задерживать выполнение асинхронной функции в JavaScript с использованием функции sleep и Promise.",
        "keywords": "javascript, практика javascript, задержка, онлайн практика javascript, sleep, выполнение, javascript игровой площадка, javascript лаб, функция, javascript учитель"
      },
      "details": {
        "steps": [
          {
            "title": "Задержка выполнения асинхронной функции",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить использование команды Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запускать в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
