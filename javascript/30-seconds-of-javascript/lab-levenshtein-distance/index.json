{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Implementing Levenshtein Distance in JavaScript",
  "description": "In this lab, we will explore the Levenshtein Distance algorithm and its implementation in JavaScript. The purpose of this lab is to understand how to calculate the difference between two strings by measuring the minimum number of single-character edits (insertions, deletions, substitutions) required to transform one string into the other. By the end of this lab, you will have a solid understanding of the Levenshtein Distance algorithm and how to use it in your own JavaScript projects.",
  "meta": {
    "title": "Mastering Levenshtein Distance in JavaScript",
    "description": "Explore the Levenshtein Distance algorithm and its implementation in JavaScript, learn how to calculate the difference between two strings.",
    "keywords": "javascript, levenshtein distance, javascript practice, string comparison, javascript practice online, javascript lab, algorithm, javascript tutor, coding tutorial"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Levenshtein Distance",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands Usage",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/array_methods",
          "javascript/comp_ops",
          "javascript/cond_stmts",
          "javascript/data_types",
          "javascript/debugging",
          "javascript/loops",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "在JavaScript中实现莱文斯坦距离",
      "description": "在本实验中，我们将探索莱文斯坦距离算法及其在JavaScript中的实现。本实验的目的是了解如何通过测量将一个字符串转换为另一个字符串所需的最少单字符编辑（插入、删除、替换）次数来计算两个字符串之间的差异。在本实验结束时，你将对莱文斯坦距离算法以及如何在自己的JavaScript项目中使用它有深入的理解。",
      "meta": {
        "title": "精通JavaScript中的莱文斯坦距离",
        "description": "探索莱文斯坦距离算法及其在JavaScript中的实现，学习如何计算两个字符串之间的差异。",
        "keywords": "JavaScript, 莱文斯坦距离, JavaScript练习, 字符串比较, 在线JavaScript练习, JavaScript实验, 算法, JavaScript教程, 编码教程"
      },
      "details": {
        "steps": [
          {
            "title": "莱文斯坦距离",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证Node命令的用法",
                "file": "verify1-1.sh",
                "hint": "在终端/SSH中，通过输入'node'并按下回车键，可以运行JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
