{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Implementing Levenshtein Distance in JavaScript",
  "description": "In this lab, we will explore the Levenshtein Distance algorithm and its implementation in JavaScript. The purpose of this lab is to understand how to calculate the difference between two strings by measuring the minimum number of single-character edits (insertions, deletions, substitutions) required to transform one string into the other. By the end of this lab, you will have a solid understanding of the Levenshtein Distance algorithm and how to use it in your own JavaScript projects.",
  "meta": {
    "title": "Mastering Levenshtein Distance in JavaScript",
    "description": "Explore the Levenshtein Distance algorithm and its implementation in JavaScript, learn how to calculate the difference between two strings.",
    "keywords": "javascript, levenshtein distance, javascript practice, string comparison, javascript practice online, javascript lab, algorithm, javascript tutor, coding tutorial"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": true,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Levenshtein Distance",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands Usage",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/array_methods",
          "javascript/comp_ops",
          "javascript/cond_stmts",
          "javascript/data_types",
          "javascript/debugging",
          "javascript/loops",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "在 JavaScript 中实现莱文斯坦距离",
      "description": "在本实验中，我们将探索莱文斯坦距离算法及其在 JavaScript 中的实现。本实验的目的是了解如何通过测量将一个字符串转换为另一个字符串所需的最少单字符编辑（插入、删除、替换）次数来计算两个字符串之间的差异。在本实验结束时，你将对莱文斯坦距离算法以及如何在自己的 JavaScript 项目中使用它有深入的理解。",
      "meta": {
        "title": "精通 JavaScript 中的莱文斯坦距离",
        "description": "探索莱文斯坦距离算法及其在 JavaScript 中的实现，学习如何计算两个字符串之间的差异。",
        "keywords": "JavaScript, 莱文斯坦距离，JavaScript 练习，字符串比较，在线 JavaScript 练习，JavaScript 实验，算法，JavaScript 教程，编码教程"
      },
      "details": {
        "steps": [
          {
            "title": "莱文斯坦距离",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Node 命令的用法",
                "file": "verify1-1.sh",
                "hint": "在终端/SSH 中，通过输入'node'并按下回车键，可以运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Implementando la Distancia de Levenshtein en JavaScript",
      "description": "En este laboratorio, exploraremos el algoritmo de Distancia de Levenshtein y su implementación en JavaScript. El objetivo de este laboratorio es entender cómo calcular la diferencia entre dos cadenas midiendo el número mínimo de ediciones de un solo carácter (inserciones, eliminaciones, sustituciones) necesarias para transformar una cadena en la otra. Al final de este laboratorio, tendrás una comprensión sólida del algoritmo de Distancia de Levenshtein y cómo utilizarlo en tus propios proyectos de JavaScript.",
      "meta": {
        "title": "Dominando la Distancia de Levenshtein en JavaScript",
        "description": "Explora el algoritmo de Distancia de Levenshtein y su implementación en JavaScript, aprende a calcular la diferencia entre dos cadenas.",
        "keywords": "javascript, distancia de levenshtein, práctica de javascript, comparación de cadenas, práctica de javascript en línea, laboratorio de javascript, algoritmo, tutor de javascript, tutorial de codificación"
      },
      "details": {
        "steps": [
          {
            "title": "Distancia de Levenshtein",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el uso de comandos de Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript se puede ejecutar en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Implémentation de la distance de Levenshtein en JavaScript",
      "description": "Dans ce laboratoire, nous allons explorer l'algorithme de distance de Levenshtein et son implantation en JavaScript. Le but de ce laboratoire est de comprendre comment calculer la différence entre deux chaînes de caractères en mesurant le nombre minimum d'édits de caractères individuels (insertions, suppressions, substitutions) nécessaires pour transformer une chaîne en l'autre. À la fin de ce laboratoire, vous aurez une compréhension solide de l'algorithme de distance de Levenshtein et de la manière de l'utiliser dans vos propres projets JavaScript.",
      "meta": {
        "title": "Maîtriser la distance de Levenshtein en JavaScript",
        "description": "Explorez l'algorithme de distance de Levenshtein et son implantation en JavaScript, apprenez à calculer la différence entre deux chaînes de caractères.",
        "keywords": "javascript, distance de Levenshtein, pratique javascript, comparaison de chaînes, pratique javascript en ligne, laboratoire javascript, algorithme, tuteur javascript, tutoriel de codage"
      },
      "details": {
        "steps": [
          {
            "title": "Distance de Levenshtein",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier l'utilisation des commandes Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Implementierung der Levenshtein-Distanz in JavaScript",
      "description": "In diesem Lab werden wir den Levenshtein-Distanz-Algorithmus und seine Implementierung in JavaScript erkunden. Ziel dieses Labs ist es, zu verstehen, wie man die Differenz zwischen zwei Zeichenketten berechnet, indem man die minimale Anzahl von Einzelleistungsänderungen (Einfügungen, Löschungen, Substitutionen) misst, die erforderlich sind, um eine Zeichenkette in die andere umzuwandeln. Am Ende dieses Labs werdet ihr einen soliden Verständnis des Levenshtein-Distanz-Algorithmus und dessen Verwendung in eigenen JavaScript-Projekten haben.",
      "meta": {
        "title": "Meisterung der Levenshtein-Distanz in JavaScript",
        "description": "Erkunde den Levenshtein-Distanz-Algorithmus und seine Implementierung in JavaScript, lerne, wie man die Differenz zwischen zwei Zeichenketten berechnet.",
        "keywords": "javascript, Levenshtein-Distanz, JavaScript-Praxis, Zeichenkettenvergleich, Online-JavaScript-Praxis, JavaScript-Lab, Algorithmus, JavaScript-Tutor, Codierungstutorial"
      },
      "details": {
        "steps": [
          {
            "title": "Levenshtein-Distanz",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren der Verwendung von Node-Befehlen",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Enter-Taste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "JavaScript におけるレーベンシュタイン距離の実装",
      "description": "この実験では、レーベンシュタイン距離アルゴリズムとその JavaScript における実装方法を探ります。この実験の目的は、1 つの文字列をもう 1 つに変換するために必要な単一文字の編集（挿入、削除、置換）の最小数を測定することで、2 つの文字列の違いをどのように計算するかを理解することです。この実験が終了するまでに、あなたはレーベンシュタイン距離アルゴリズムとそれを自分の JavaScript プロジェクトでどのように使用するかを十分に理解するようになります。",
      "meta": {
        "title": "JavaScript でレーベンシュタイン距離をマスターする",
        "description": "レーベンシュタイン距離アルゴリズムとその JavaScript における実装を探り、2 つの文字列の違いをどのように計算するか学びましょう。",
        "keywords": "javascript, レーベンシュタイン距離，javascript 練習，文字列比較，オンライン javascript 練習，javascript 実験，アルゴリズム，javascript 講師，コーディングチュートリアル"
      },
      "details": {
        "steps": [
          {
            "title": "レーベンシュタイン距離",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Node コマンドの使用を確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で 'node' と入力して Enter キーを押すことで、JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Реализация расстояния Левенштейна на JavaScript",
      "description": "В этом лабе мы исследуем алгоритм расстояния Левенштейна и его реализацию на JavaScript. Цель этого лабара — понять, как вычислять разницу между двумя строками, измерив минимальное количество односимвольных изменений (вставок, удалений, замен), необходимых для преобразования одной строки в другую. В конце этого лабара вы глубоко поймете алгоритм расстояния Левенштейна и как применять его в своих собственных проектах на JavaScript.",
      "meta": {
        "title": "Мастерство в использовании расстояния Левенштейна на JavaScript",
        "description": "Исследуйте алгоритм расстояния Левенштейна и его реализацию на JavaScript, научитесь вычислять разницу между двумя строками.",
        "keywords": "javascript, расстояние Левенштейна, практика на javascript, сравнение строк, онлайн практика javascript, javascript лаб, алгоритм, javascript учитель, руководство по программированию"
      },
      "details": {
        "steps": [
          {
            "title": "Расстояние Левенштейна",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить использование команд Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "JavaScript 로 Levenshtein Distance 구현하기",
      "description": "이 랩에서는 Levenshtein Distance 알고리즘과 JavaScript 에서의 구현을 살펴봅니다. 이 랩의 목적은 한 문자열을 다른 문자열로 변환하는 데 필요한 최소한의 단일 문자 편집 (삽입, 삭제, 대체) 횟수를 측정하여 두 문자열 간의 차이를 계산하는 방법을 이해하는 것입니다. 이 랩을 마치면 Levenshtein Distance 알고리즘에 대한 확실한 이해와 이를 자신의 JavaScript 프로젝트에서 사용하는 방법을 알게 될 것입니다.",
      "meta": {
        "title": "JavaScript 에서 Levenshtein Distance 마스터하기",
        "description": "Levenshtein Distance 알고리즘과 JavaScript 에서의 구현을 살펴보고, 두 문자열 간의 차이를 계산하는 방법을 알아보세요.",
        "keywords": "자바스크립트, 레벤슈타인 거리, 자바스크립트 연습, 문자열 비교, 자바스크립트 온라인 연습, 자바스크립트 랩, 알고리즘, 자바스크립트 튜터, 코딩 튜토리얼"
      },
      "details": {
        "steps": [
          {
            "title": "Levenshtein Distance",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "Node 명령어 사용 확인",
                "file": "verify1-1.sh",
                "hint": "터미널/SSH 에서 'node'를 입력하고 Enter 키를 눌러 JavaScript 를 실행할 수 있습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Implementando a Distância de Levenshtein em JavaScript",
      "description": "Neste laboratório, exploraremos o algoritmo da Distância de Levenshtein e sua implementação em JavaScript. O objetivo deste laboratório é entender como calcular a diferença entre duas strings, medindo o número mínimo de edições de um único caractere (inserções, exclusões, substituições) necessárias para transformar uma string em outra. Ao final deste laboratório, você terá uma sólida compreensão do algoritmo da Distância de Levenshtein e como usá-lo em seus próprios projetos JavaScript.",
      "meta": {
        "title": "Dominando a Distância de Levenshtein em JavaScript - Tutorial e Prática",
        "description": "Explore o algoritmo da Distância de Levenshtein em JavaScript. Aprenda a calcular a diferença entre strings, com exemplos práticos e exercícios.",
        "keywords": "javascript, distância de levenshtein, javascript prática, comparação de strings, exercícios javascript, laboratório javascript, algoritmo, tutorial javascript, tutorial de codificação, programação javascript"
      },
      "details": {
        "steps": [
          {
            "title": "Distância de Levenshtein",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar o Uso de Comandos Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript pode ser executado no Terminal/SSH digitando 'node' e pressionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
