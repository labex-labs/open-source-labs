{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Deep Flatten Array",
  "description": "In this lab, we will explore how to deep flatten an array in JavaScript. We will use recursion and the Array.prototype.concat() method along with the spread operator to flatten an array. By the end of the lab, you will be able to write a function that can deeply flatten an array of any depth.",
  "meta": {
    "title": "Mastering Deep Flattening in JavaScript",
    "description": "Explore the art of deep flattening arrays with recursion and the power of JavaScript's built-in methods.",
    "keywords": "javascript, javascript practice, recursion, javascript practice online, javascript lab, javascript tutor, array, concat, deep flatten"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Deep Flatten Array",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands Executed",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/comp_ops",
          "javascript/data_types",
          "javascript/higher_funcs",
          "javascript/spread_rest",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "深度扁平化数组",
      "description": "在本实验中，我们将探索如何在 JavaScript 中深度扁平化一个数组。我们将使用递归、`Array.prototype.concat()` 方法以及展开运算符来扁平化数组。在实验结束时，你将能够编写一个函数，该函数可以深度扁平化任意深度的数组。",
      "meta": {
        "title": "掌握 JavaScript 中的深度扁平化",
        "description": "借助递归和 JavaScript 内置方法的强大功能，探索深度扁平化数组的技巧。",
        "keywords": "JavaScript, JavaScript 实践，递归，在线 JavaScript 实践，JavaScript 实验，JavaScript 教程，数组，拼接，深度扁平化"
      },
      "details": {
        "steps": [
          {
            "title": "深度扁平化数组",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证已执行的 Node 命令",
                "file": "verify1-1.sh",
                "hint": "通过在终端/SSH 中输入'node'并按回车键，可以运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Aplanar en Profundidad una Matriz",
      "description": "En este laboratorio, exploraremos cómo aplanar en profundidad una matriz en JavaScript. Utilizaremos la recursividad y el método Array.prototype.concat() junto con el operador de propagación para aplanar una matriz. Al final del laboratorio, serás capaz de escribir una función que pueda aplanar en profundidad una matriz de cualquier profundidad.",
      "meta": {
        "title": "Dominando el Aplanamiento en Profundidad en JavaScript",
        "description": "Explora el arte del aplanamiento en profundidad de matrices con recursividad y el poder de los métodos integrados de JavaScript.",
        "keywords": "javascript, práctica de javascript, recursividad, práctica de javascript en línea, laboratorio de javascript, tutor de javascript, matriz, concat, aplanar en profundidad"
      },
      "details": {
        "steps": [
          {
            "title": "Aplanar en Profundidad una Matriz",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar que se ejecutaron los comandos de Node",
                "file": "verify1-1.sh",
                "hint": "Se puede ejecutar JavaScript en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Aplatir le tableau profondément",
      "description": "Dans ce laboratoire, nous allons explorer comment aplatir profondément un tableau en JavaScript. Nous utiliserons la récursivité et la méthode Array.prototype.concat() ainsi que l'opérateur de propagation pour aplatir un tableau. À la fin du laboratoire, vous serez capable d'écrire une fonction qui peut aplatir profondément un tableau de toute profondeur.",
      "meta": {
        "title": "Maîtriser l'aplatissement profond en JavaScript",
        "description": "Explorez l'art de l'aplatissement profond des tableaux avec la récursivité et le pouvoir des méthodes natives de JavaScript.",
        "keywords": "javascript, pratique javascript, récursivité, pratique javascript en ligne, laboratoire javascript, tuteur javascript, tableau, concaténer, aplatir profondément"
      },
      "details": {
        "steps": [
          {
            "title": "Aplatir le tableau profondément",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier que les commandes Node ont été exécutées",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Array tief flachen",
      "description": "In diesem Lab werden wir untersuchen, wie man in JavaScript ein Array tief flachen kann. Wir werden Rekursion und die Array.prototype.concat()-Methode zusammen mit dem Spread-Operator verwenden, um ein Array zu flachen. Am Ende des Labs sollten Sie in der Lage sein, eine Funktion zu schreiben, die ein Array beliebiger Tiefe tief flachen kann.",
      "meta": {
        "title": "Das Meistern der tiefen Flachung in JavaScript",
        "description": "Erkunden Sie die Kunst der tiefen Flachung von Arrays mit Rekursion und der Macht der eingebauten Methoden von JavaScript.",
        "keywords": "javascript, javascript Ubung, Rekursion, Online-JavaScript-Ubung, JavaScript-Lab, JavaScript-Lehrer, Array, concat, tief flachen"
      },
      "details": {
        "steps": [
          {
            "title": "Array tief flachen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen, ob die Node-Befehle ausgeführt wurden",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Eingabetaste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "配列を深くフラット化する",
      "description": "この実験では、JavaScript で配列を深くフラット化する方法を探ります。再帰と Array.prototype.concat() メソッド、そしてスプレッド演算子を使って配列をフラット化します。実験が終了するとき、任意の深さの配列を深くフラット化できる関数を書けるようになります。",
      "meta": {
        "title": "JavaScript における深いフラット化のマスター",
        "description": "再帰と JavaScript の組み込みメソッドの力を使って、配列の深いフラット化の技術を探求しましょう。",
        "keywords": "javascript, javascript 練習，再帰，オンライン javascript 練習，javascript 実験，javascript チューター, 配列，連結，深くフラット化"
      },
      "details": {
        "steps": [
          {
            "title": "配列を深くフラット化する",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Node コマンドの実行を確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で 'node' と入力して Enter キーを押すことで、JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Глубокое сглаживание массива",
      "description": "В этом практическом занятии мы изучим, как глубоко сгладить массив в JavaScript. Мы будем использовать рекурсию и метод Array.prototype.concat(), а также оператор расширения, чтобы сгладить массив. В конце практического занятия вы сможете написать функцию, которая может глубоко сгладить массив любой глубины.",
      "meta": {
        "title": "Мастерство в глубоком сглаживании в JavaScript",
        "description": "Изучите искусство глубокого сглаживания массивов с использованием рекурсии и мощности встроенных методов JavaScript.",
        "keywords": "javascript, практика javascript, рекурсия, онлайн практика javascript, лабораторная работа javascript, преподаватель javascript, массив, конкатенация, глубокое сглаживание"
      },
      "details": {
        "steps": [
          {
            "title": "Глубокое сглаживание массива",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить выполнение команд Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
