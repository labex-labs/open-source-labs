{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Calculate Least Common Multiple Using JavaScript",
  "description": "In this lab, we will explore how to calculate the least common multiple of two or more numbers using JavaScript. We will use the greatest common divisor (GCD) formula and the fact that lcm(x, y) = x * y / gcd(x, y) to determine the least common multiple. The GCD formula uses recursion, which we will implement in our code.",
  "meta": {
    "title": "Least Common Multiple Calculation | JavaScript Programming",
    "description": "Learn how to calculate the least common multiple of two or more numbers using JavaScript. Explore the GCD formula and implement the code to determine the LCM.",
    "keywords": "least common multiple, JavaScript, programming, GCD, recursion"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Least Common Multiple",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands In Zsh History",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用 JavaScript 计算最小公倍数",
      "description": "在本实验中，我们将探索如何使用 JavaScript 计算两个或多个数字的最小公倍数。我们将使用最大公约数（GCD）公式以及 lcm(x, y) = x * y / gcd(x, y) 这一事实来确定最小公倍数。GCD 公式使用递归，我们将在代码中实现它。",
      "meta": {
        "title": "最小公倍数计算 | JavaScript 编程",
        "description": "学习如何使用 JavaScript 计算两个或多个数字的最小公倍数。探索 GCD 公式并实现代码以确定 LCM。",
        "keywords": "最小公倍数，JavaScript, 编程，GCD, 递归"
      },
      "details": {
        "steps": [
          {
            "title": "最小公倍数",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "在 Zsh 历史记录中验证 Node 命令",
                "file": "verify1-1.sh",
                "hint": "通过在终端/SSH 中输入'node'并按回车键，可以运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Calcular el mínimo común múltiplo utilizando JavaScript",
      "description": "En este laboratorio, exploraremos cómo calcular el mínimo común múltiplo de dos o más números utilizando JavaScript. Utilizaremos la fórmula del máximo común divisor (MCD) y el hecho de que mcm(x, y) = x * y / mcd(x, y) para determinar el mínimo común múltiplo. La fórmula del MCD utiliza la recursión, que implementaremos en nuestro código.",
      "meta": {
        "title": "Cálculo del mínimo común múltiplo | Programación en JavaScript",
        "description": "Aprende cómo calcular el mínimo común múltiplo de dos o más números utilizando JavaScript. Explora la fórmula del MCD e implementa el código para determinar el MCM.",
        "keywords": "mínimo común múltiplo, JavaScript, programación, MCD, recursión"
      },
      "details": {
        "steps": [
          {
            "title": "Mínimo Común Múltiplo",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar los comandos de Node en el historial de Zsh",
                "file": "verify1-1.sh",
                "hint": "Se puede ejecutar JavaScript en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Calculer le plus petit commun multiple à l'aide de JavaScript",
      "description": "Dans ce laboratoire, nous allons explorer comment calculer le plus petit commun multiple de deux ou plusieurs nombres à l'aide de JavaScript. Nous utiliserons la formule du plus grand commun diviseur (PGCD) et le fait que ppcm(x, y) = x * y / pgcd(x, y) pour déterminer le plus petit commun multiple. La formule du PGCD utilise la récursion, que nous implémenterons dans notre code.",
      "meta": {
        "title": "Calcul du plus petit commun multiple | Programmation JavaScript",
        "description": "Découvrez comment calculer le plus petit commun multiple de deux ou plusieurs nombres à l'aide de JavaScript. Explorez la formule du PGCD et implémentez le code pour déterminer le PPCM.",
        "keywords": "plus petit commun multiple, JavaScript, programmation, PGCD, récursion"
      },
      "details": {
        "steps": [
          {
            "title": "Plus petit commun multiple",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier les commandes Node dans l'historique Zsh",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Berechne das kleinste gemeinsame Vielfache mit JavaScript",
      "description": "In diesem Lab werden wir untersuchen, wie man das kleinste gemeinsame Vielfache von zwei oder mehr Zahlen mit JavaScript berechnet. Wir werden die Formel für den größten gemeinsamen Teiler (GCD) und die Tatsache nutzen, dass kgV(x, y) = x * y / ggT(x, y), um das kleinste gemeinsame Vielfache zu bestimmen. Die GCD-Formel verwendet Rekursion, die wir in unserem Code implementieren werden.",
      "meta": {
        "title": "Kleinster gemeinsamer Teiler Berechnung | JavaScript Programmierung",
        "description": "Lernen Sie, wie man das kleinste gemeinsame Vielfache von zwei oder mehr Zahlen mit JavaScript berechnet. Entdecken Sie die GCD-Formel und implementieren Sie den Code, um das kgV zu bestimmen.",
        "keywords": "kleinster gemeinsamer Teiler, JavaScript, Programmierung, GCD, Rekursion"
      },
      "details": {
        "steps": [
          {
            "title": "Kleinster gemeinsamer Teiler",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen von Node-Befehlen in der Zsh-Geschichte",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Eingabetaste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "JavaScript を使って最小公倍数を計算する",
      "description": "この実験では、JavaScript を使って 2 つ以上の数の最小公倍数を計算する方法を探ります。最大公約数（GCD）の公式と、lcm(x, y) = x * y / gcd(x, y) という事実を使って最小公倍数を求めます。GCD の公式は再帰を使っており、それをコードに実装します。",
      "meta": {
        "title": "最小公倍数の計算 | JavaScript プログラミング",
        "description": "JavaScript を使って 2 つ以上の数の最小公倍数を計算する方法を学びましょう。GCD の公式を調べ、LCM を求めるコードを実装しましょう。",
        "keywords": "最小公倍数，JavaScript, プログラミング，GCD, 再帰"
      },
      "details": {
        "steps": [
          {
            "title": "最小公倍数",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Zsh 履歴における Node コマンドを確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で 'node' と入力して Enter キーを押すことで JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Вычисление наименьшего общего кратного с использованием JavaScript",
      "description": "В этом практическом занятии мы изучим, как вычислять наименьшее общее кратное двух или более чисел с использованием JavaScript. Мы будем использовать формулу нахождения наибольшего общего делителя (НОД) и факт, что НОК(x, y) = x * y / НОД(x, y), чтобы определить наименьшее общее кратное. Формула нахождения НОД использует рекурсию, которую мы реализуем в нашем коде.",
      "meta": {
        "title": "Вычисление наименьшего общего кратного | Программирование на JavaScript",
        "description": "Изучите, как вычислять наименьшее общее кратное двух или более чисел с использованием JavaScript. Исследуйте формулу НОД и реализуйте код для определения НОК.",
        "keywords": "наименьшее общее кратное, JavaScript, программирование, НОД, рекурсия"
      },
      "details": {
        "steps": [
          {
            "title": "Наименьшее общее кратное",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить команды Node в истории Zsh",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "JavaScript 를 사용하여 최소 공배수 계산하기",
      "description": "이 랩에서는 JavaScript 를 사용하여 두 개 이상의 숫자의 최소 공배수를 계산하는 방법을 살펴봅니다. 최대 공약수 (GCD) 공식과 lcm(x, y) = x * y / gcd(x, y) 공식을 사용하여 최소 공배수를 결정합니다. GCD 공식은 재귀 (recursion) 를 사용하며, 이를 코드에 구현할 것입니다.",
      "meta": {
        "title": "최소 공배수 계산 | JavaScript 프로그래밍",
        "description": "JavaScript 를 사용하여 두 개 이상의 숫자의 최소 공배수를 계산하는 방법을 알아보세요. GCD 공식을 살펴보고 LCM 을 결정하는 코드를 구현하세요. 최소 공배수, 자바스크립트, 프로그래밍, GCD, 재귀",
        "keywords": "최소 공배수, 자바스크립트, 프로그래밍, GCD, 재귀, JavaScript 최소 공배수, 숫자 최소 공배수 계산"
      },
      "details": {
        "steps": [
          {
            "title": "최소 공배수",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "Zsh 히스토리에서 Node 명령어 확인",
                "file": "verify1-1.sh",
                "hint": "터미널/SSH 에서 'node'를 입력하고 Enter 키를 눌러 JavaScript 를 실행할 수 있습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Calcular o Mínimo Múltiplo Comum Usando JavaScript",
      "description": "Neste laboratório, exploraremos como calcular o mínimo múltiplo comum de dois ou mais números usando JavaScript. Utilizaremos a fórmula do máximo divisor comum (MDC) e o fato de que mmc(x, y) = x * y / mdc(x, y) para determinar o mínimo múltiplo comum. A fórmula do MDC usa recursão, que implementaremos em nosso código.",
      "meta": {
        "title": "Cálculo do Mínimo Múltiplo Comum (MMC) | Programação JavaScript",
        "description": "Aprenda a calcular o mínimo múltiplo comum de dois ou mais números usando JavaScript. Explore a fórmula do MDC e implemente o código para determinar o MMC.",
        "keywords": "mínimo múltiplo comum, JavaScript, programação, MDC, recursão, MMC"
      },
      "details": {
        "steps": [
          {
            "title": "Mínimo Múltiplo Comum",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar Comandos Node no Histórico Zsh",
                "file": "verify1-1.sh",
                "hint": "JavaScript pode ser executado no Terminal/SSH digitando 'node' e pressionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
