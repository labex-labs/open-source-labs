{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Asynchronous Functions to Promises",
  "description": "In this lab, we will learn how to convert an asynchronous function to return a promise using the promisify function. This will allow us to write cleaner and more readable code by avoiding callback functions. We will also explore the use of currying and the rest operator in JavaScript.",
  "meta": {
    "title": "JavaScript Promisify Function | Asynchronous Programming",
    "description": "Learn how to convert asynchronous functions to return promises using the promisify function, and explore JavaScript features like currying and the rest operator.",
    "keywords": "JavaScript, Promisify, Asynchronous Programming, Currying, Rest Operator"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Promisify Function",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Command Usage",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/async_prog",
          "javascript/comp_ops",
          "javascript/data_types",
          "javascript/debugging",
          "javascript/spread_rest",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "将异步函数转换为 Promise",
      "description": "在本实验中，我们将学习如何使用 promisify 函数将异步函数转换为返回 Promise。通过避免使用回调函数，这将使我们能够编写更简洁、更易读的代码。我们还将探讨 JavaScript 中柯里化和剩余参数运算符的使用。",
      "meta": {
        "title": "JavaScript 的 Promisify 函数 | 异步编程",
        "description": "学习如何使用 promisify 函数将异步函数转换为返回 Promise，并探索诸如柯里化和剩余参数运算符等 JavaScript 特性。",
        "keywords": "JavaScript, Promisify, 异步编程，柯里化，剩余参数运算符"
      },
      "details": {
        "steps": [
          {
            "title": "将异步函数转换为 Promise 的函数",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Node 命令的用法",
                "file": "verify1-1.sh",
                "hint": "在终端/SSH 中，通过输入'node'并按下回车键可以运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Funciones asincrónicas a Promesas",
      "description": "En este laboratorio, aprenderemos cómo convertir una función asincrónica para que devuelva una promesa utilizando la función promisify. Esto nos permitirá escribir código más limpio y legible evitando las funciones de devolución de llamada. También exploraremos el uso de la currying y el operador rest en JavaScript.",
      "meta": {
        "title": "Función promisify de JavaScript | Programación asincrónica",
        "description": "Aprende cómo convertir funciones asincrónicas para que devuelvan promesas utilizando la función promisify, y explora características de JavaScript como la currying y el operador rest.",
        "keywords": "JavaScript, Promisify, Programación asincrónica, Currying, Operador rest"
      },
      "details": {
        "steps": [
          {
            "title": "Función promisify",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el uso del comando Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript se puede ejecutar en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Fonctions asynchrones en Promesses",
      "description": "Dans ce laboratoire, nous allons apprendre à convertir une fonction asynchrone pour qu'elle renvoie une promesse à l'aide de la fonction promisify. Cela nous permettra d'écrire un code plus propre et plus lisible en évitant les fonctions de rappel. Nous explorerons également l'utilisation de la curry et de l'opérateur rest en JavaScript.",
      "meta": {
        "title": "Fonction promisify en JavaScript | Programmation asynchrone",
        "description": "Apprenez à convertir les fonctions asynchrones pour qu'elles renvoient des promesses à l'aide de la fonction promisify, et explorez les fonctionnalités JavaScript telles que la curry et l'opérateur rest.",
        "keywords": "JavaScript, Promisify, Programmation asynchrone, Curry, Opérateur rest"
      },
      "details": {
        "steps": [
          {
            "title": "Fonction promisify",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier l'utilisation de la commande Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Asynchrone Funktionen zu Promises",
      "description": "In diesem Lab werden wir lernen, wie man eine asynchrone Funktion umwandelt, um eine Promise zurückzugeben, indem man die promisify-Funktion verwendet. Dadurch können wir saubereren und lesbareren Code schreiben, indem wir Callback-Funktionen vermeiden. Wir werden auch die Verwendung von Currying und dem Rest-Operator in JavaScript erkunden.",
      "meta": {
        "title": "JavaScript Promisify-Funktion | Asynchrone Programmierung",
        "description": "Lernen Sie, wie man asynchrone Funktionen umwandelt, um Promises zurückzugeben, indem man die promisify-Funktion verwendet, und erkunden Sie JavaScript-Features wie Currying und den Rest-Operator.",
        "keywords": "JavaScript, Promisify, Asynchrone Programmierung, Currying, Rest-Operator"
      },
      "details": {
        "steps": [
          {
            "title": "Promisify-Funktion",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren der Verwendung des Node-Befehls",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Eingabetaste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "非同期関数から Promise への変換",
      "description": "この実験では、promisify 関数を使って非同期関数を Promise を返す関数に変換する方法を学びます。これにより、コールバック関数を避けて、クリーンで読みやすいコードを書くことができます。また、JavaScript におけるカリングと残余引数演算子の使い方についても検討します。",
      "meta": {
        "title": "JavaScript の promisify 関数 | 非同期プログラミング",
        "description": "promisify 関数を使って非同期関数を Promise を返す関数に変換する方法を学び、カリングや残余引数演算子などの JavaScript の機能を検討します。",
        "keywords": "JavaScript, Promisify, 非同期プログラミング，カリング，残余引数演算子"
      },
      "details": {
        "steps": [
          {
            "title": "promisify 関数",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Node コマンドの使用を確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で'node'と入力して Enter キーを押すことで、JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Асинхронные функции в промисы",
      "description": "В этом практическом занятии мы узнаем, как превратить асинхронную функцию в функцию, возвращающую промис, с использованием функции promisify. Это позволит нам писать более чистый и читаемый код, избежав коллбэк-функций. Мы также изучим применение каррирования и оператора \"остаток\" в JavaScript.",
      "meta": {
        "title": "Функция promisify в JavaScript | Асинхронное программирование",
        "description": "Изучите, как превращать асинхронные функции в функции, возвращающие промисы, с использованием функции promisify, и изучите особенности JavaScript, такие как каррирование и оператор \"остаток\".",
        "keywords": "JavaScript, promisify, Асинхронное программирование, каррирование, оператор \"остаток\""
      },
      "details": {
        "steps": [
          {
            "title": "Функция promisify",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить использование команды Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
