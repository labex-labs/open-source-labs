{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Implement Luhn Algorithm in JavaScript",
  "description": "In this lab, we will explore the implementation of the Luhn Algorithm in JavaScript. The Luhn Algorithm is commonly used to validate identification numbers such as credit card numbers, IMEI numbers, and National Provider Identifier numbers. Through this lab, you will learn how to split a string, reverse an array, use map(), reduce(), and shift() methods to implement the Luhn Algorithm, and ultimately determine whether a given identification number is valid or not.",
  "meta": {
    "title": "Mastering the Luhn Algorithm: A JavaScript Coding Challenge",
    "description": "Explore the implementation of the Luhn Algorithm in JavaScript, a powerful tool for validating identification numbers like credit cards and IMEI codes.",
    "keywords": "javascript, javascript practice, luhn algorithm, javascript practice online, imei validation, coding, javascript lab, credit card validation, javascript tutor"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Luhn Check",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands In Zsh History",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "在 JavaScript 中实现 Luhn 算法",
      "description": "在本实验中，我们将探索如何在 JavaScript 中实现 Luhn 算法。Luhn 算法通常用于验证识别号码，如信用卡号码、国际移动设备识别码（IMEI）和国家提供者识别码。通过本实验，你将学习如何分割字符串、反转数组、使用 map()、reduce() 和 shift() 方法来实现 Luhn 算法，并最终确定给定的识别号码是否有效。",
      "meta": {
        "title": "掌握 Luhn 算法：一项 JavaScript 编码挑战",
        "description": "探索在 JavaScript 中实现 Luhn 算法，这是一种用于验证信用卡和 IMEI 码等识别号码的强大工具。",
        "keywords": "JavaScript, JavaScript 练习，Luhn 算法，在线 JavaScript 练习，IMEI 验证，编码，JavaScript 实验，信用卡验证，JavaScript 教程"
      },
      "details": {
        "steps": [
          {
            "title": "Luhn 校验",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "在 Zsh 历史记录中验证 Node 命令",
                "file": "verify1-1.sh",
                "hint": "通过在终端/SSH 中输入'node'并按回车键，可以运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Implementar el Algoritmo de Luhn en JavaScript",
      "description": "En este laboratorio, exploraremos la implementación del Algoritmo de Luhn en JavaScript. El Algoritmo de Luhn se utiliza comúnmente para validar números de identificación como números de tarjeta de crédito, números IMEI y números de Identificador Nacional de Proveedor. A través de este laboratorio, aprenderá a dividir una cadena, invertir un array, usar los métodos map(), reduce() y shift() para implementar el Algoritmo de Luhn y, finalmente, determinar si un número de identificación dado es válido o no.",
      "meta": {
        "title": "Dominando el Algoritmo de Luhn: Un Desafío de Codificación en JavaScript",
        "description": "Explore la implementación del Algoritmo de Luhn en JavaScript, una herramienta poderosa para validar números de identificación como tarjetas de crédito y códigos IMEI.",
        "keywords": "javascript, práctica de javascript, algoritmo de luhn, práctica de javascript en línea, validación de IMEI, codificación, laboratorio de javascript, validación de tarjeta de crédito, tutor de javascript"
      },
      "details": {
        "steps": [
          {
            "title": "Verificación de Luhn",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar los comandos de Node en el historial de Zsh",
                "file": "verify1-1.sh",
                "hint": "JavaScript se puede ejecutar en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Implémenter l'algorithme de Luhn en JavaScript",
      "description": "Dans ce laboratoire, nous allons explorer l'implémentation de l'algorithme de Luhn en JavaScript. L'algorithme de Luhn est couramment utilisé pour valider des numéros d'identification tels que les numéros de carte de crédit, les numéros IMEI et les numéros d'identifiant de fournisseur national. Grâce à ce laboratoire, vous apprendrez à diviser une chaîne de caractères, à inverser un tableau, à utiliser les méthodes map(), reduce() et shift() pour implémenter l'algorithme de Luhn et finalement déterminer si un numéro d'identification donné est valide ou non.",
      "meta": {
        "title": "Maîtriser l'algorithme de Luhn : Un défi de codage en JavaScript",
        "description": "Explorez l'implémentation de l'algorithme de Luhn en JavaScript, un outil puissant pour valider des numéros d'identification tels que les cartes de crédit et les codes IMEI.",
        "keywords": "javascript, pratique javascript, algorithme de Luhn, pratique javascript en ligne, validation IMEI, codage, laboratoire javascript, validation de carte de crédit, tuteur javascript"
      },
      "details": {
        "steps": [
          {
            "title": "Vérification de Luhn",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier les commandes Node dans l'historique Zsh",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Luhn-Algorithmus in JavaScript implementieren",
      "description": "In diesem Lab werden wir die Implementierung des Luhn-Algorithmus in JavaScript erkunden. Der Luhn-Algorithmus wird allgemein verwendet, um Identifikationsnummern wie Kreditkartennummern, IMEI-Nummern und National Provider Identifier-Nummern zu validieren. Durch dieses Lab lernen Sie, wie man eine Zeichenkette aufteilt, ein Array umkehrt, die map(), reduce() und shift()-Methoden verwendet, um den Luhn-Algorithmus zu implementieren, und schließlich feststellt, ob eine gegebene Identifikationsnummer gültig ist oder nicht.",
      "meta": {
        "title": "Den Luhn-Algorithmus meistern: Eine JavaScript-Coding-Ausforderung",
        "description": "Entdecken Sie die Implementierung des Luhn-Algorithmus in JavaScript, ein leistungsstarkes Tool zur Validierung von Identifikationsnummern wie Kreditkarten und IMEI-Codes.",
        "keywords": "javascript, javascript Übung, Luhn-Algorithmus, Online-JavaScript-Übung, IMEI-Validierung, Programmierung, JavaScript-Lab, Kreditkartenvlidierung, JavaScript-Tutor"
      },
      "details": {
        "steps": [
          {
            "title": "Luhn-Prüfung",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifiziere Node-Befehle in der Zsh-Geschichte",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Enter-Taste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "JavaScript で Luhn アルゴリズムを実装する",
      "description": "この実験では、JavaScript での Luhn アルゴリズムの実装を検討します。Luhn アルゴリズムは、クレジットカード番号、IMEI 番号、および National Provider Identifier 番号などの識別番号の検証に一般的に使用されます。この実験を通じて、文字列を分割し、配列を逆順にする方法、map()、reduce()、および shift() メソッドを使用して Luhn アルゴリズムを実装し、最終的に与えられた識別番号が有効かどうかを判断する方法を学びます。",
      "meta": {
        "title": "Luhn アルゴリズムのマスター: JavaScript コーディング チャレンジ",
        "description": "JavaScript での Luhn アルゴリズムの実装を探りましょう。クレジットカードや IMEI コードのような識別番号を検証する強力なツールです。",
        "keywords": "javascript, javascript の練習，luhn アルゴリズム，オンラインでの javascript の練習，imei 検証，コーディング，javascript の実験，クレジットカード検証，javascript チューター"
      },
      "details": {
        "steps": [
          {
            "title": "Luhn チェック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Zsh 履歴で Node コマンドを確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で 'node' と入力して Enter キーを押すことで JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Реализация алгоритма Луна на JavaScript",
      "description": "В этом лабе мы будем изучать реализацию алгоритма Луна на JavaScript. Алгоритм Луна обычно используется для проверки идентификационных номеров, таких как номера кредитных карт, IMEI номера и номера Национального идентификатора поставщиков. С помощью этого лабара вы научитесь разбивать строку, переворачивать массив, использовать методы map(), reduce() и shift() для реализации алгоритма Луна и, в конечном итоге, определять, является ли заданный идентификационный номер действительным или нет.",
      "meta": {
        "title": "Мастерство в алгоритме Луна: JavaScript coding challenge",
        "description": "Изучите реализацию алгоритма Луна на JavaScript, мощный инструмент для проверки идентификационных номеров, таких как кредитные карты и IMEI коды.",
        "keywords": "javascript, практика javascript, алгоритм Луна, онлайн практика javascript, проверка IMEI, программирование, javascript лаб, проверка кредитной карты, javascript учитель"
      },
      "details": {
        "steps": [
          {
            "title": "Проверка по алгоритму Луна",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить команды Node в истории Zsh",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "JavaScript 로 Luhn 알고리즘 구현하기",
      "description": "이 랩에서는 JavaScript 에서 Luhn 알고리즘을 구현하는 방법을 살펴봅니다. Luhn 알고리즘은 신용 카드 번호, IMEI 번호, National Provider Identifier (NPI) 번호와 같은 식별 번호의 유효성을 검사하는 데 일반적으로 사용됩니다. 이 랩을 통해 문자열 분할, 배열 뒤집기, map(), reduce(), shift() 메서드를 사용하여 Luhn 알고리즘을 구현하고, 궁극적으로 주어진 식별 번호가 유효한지 여부를 결정하는 방법을 배우게 됩니다.",
      "meta": {
        "title": "Luhn 알고리즘 마스터하기: JavaScript 코딩 챌린지",
        "description": "신용 카드 및 IMEI 코드와 같은 식별 번호의 유효성을 검사하는 강력한 도구인 JavaScript 에서 Luhn 알고리즘 구현을 살펴보세요.",
        "keywords": "javascript, javascript 연습, luhn 알고리즘, javascript 온라인 연습, imei 유효성 검사, 코딩, javascript 랩, 신용 카드 유효성 검사, javascript 튜터"
      },
      "details": {
        "steps": [
          {
            "title": "Luhn 검사",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "Zsh 히스토리에서 Node 명령어 확인",
                "file": "verify1-1.sh",
                "hint": "터미널/SSH 에서 'node'를 입력하고 Enter 키를 눌러 JavaScript 를 실행할 수 있습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Implementação do Algoritmo de Luhn em JavaScript",
      "description": "Neste laboratório, exploraremos a implementação do Algoritmo de Luhn em JavaScript. O Algoritmo de Luhn é comumente usado para validar números de identificação, como números de cartão de crédito, números IMEI e números de identificação de provedores nacionais. Através deste laboratório, você aprenderá como dividir uma string, inverter um array, usar os métodos map(), reduce() e shift() para implementar o Algoritmo de Luhn e, finalmente, determinar se um determinado número de identificação é válido ou não.",
      "meta": {
        "title": "Dominando o Algoritmo de Luhn: Um Desafio de Codificação em JavaScript",
        "description": "Explore a implementação do Algoritmo de Luhn em JavaScript, uma ferramenta poderosa para validar números de identificação como cartões de crédito e códigos IMEI. Aprenda a validar cartões de crédito e outros números de identificação com JavaScript.",
        "keywords": "javascript, prática javascript, algoritmo de luhn, prática javascript online, validação IMEI, codificação, laboratório javascript, validação de cartão de crédito, tutorial javascript"
      },
      "details": {
        "steps": [
          {
            "title": "Verificação de Luhn",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar Comandos Node no Histórico Zsh",
                "file": "verify1-1.sh",
                "hint": "JavaScript pode ser executado no Terminal/SSH digitando 'node' e pressionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
