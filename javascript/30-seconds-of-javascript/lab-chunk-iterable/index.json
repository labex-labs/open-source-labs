{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Chunking Iterables into Smaller Arrays",
  "description": "In this lab, we will explore the concept of chunking an iterable into smaller arrays of a specified size using JavaScript. We will implement a function that takes in an iterable and a size parameter and returns an iterable of smaller arrays that contain a maximum of size elements each. This technique can be useful for various applications, such as breaking down large datasets into smaller chunks for processing or optimizing network requests by reducing the amount of data transferred at once.",
  "meta": {
    "title": "Chunking Iterables | JavaScript Techniques",
    "description": "Learn how to chunk an iterable into smaller arrays of a specified size using JavaScript. Explore practical applications and optimize data processing.",
    "keywords": "JavaScript, Chunking, Iterables, Data Processing, Optimization"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Chunk Iterable",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Command Usage",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/comp_ops",
          "javascript/cond_stmts",
          "javascript/data_types",
          "javascript/loops",
          "javascript/obj_manip",
          "javascript/spread_rest",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "将可迭代对象分块为较小数组",
      "description": "在本实验中，我们将探索如何使用 JavaScript 将可迭代对象分块为指定大小的较小数组。我们将实现一个函数，该函数接受一个可迭代对象和一个大小参数，并返回一个由较小数组组成的可迭代对象，每个较小数组最多包含 size 个元素。此技术可用于各种应用程序，例如将大型数据集分解为较小的块进行处理，或通过减少一次传输的数据量来优化网络请求。",
      "meta": {
        "title": "可迭代对象分块 | JavaScript 技术",
        "description": "学习如何使用 JavaScript 将可迭代对象分块为指定大小的较小数组。探索实际应用并优化数据处理。",
        "keywords": "JavaScript, 分块，可迭代对象，数据处理，优化"
      },
      "details": {
        "steps": [
          {
            "title": "将可迭代对象分块",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Node 命令的使用",
                "file": "verify1-1.sh",
                "hint": "在终端/SSH 中，通过输入 'node' 并按下回车键即可运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Dividir iterables en arrays más pequeños",
      "description": "En este laboratorio, exploraremos el concepto de dividir una iterable en arrays más pequeños de un tamaño especificado utilizando JavaScript. Implementaremos una función que tome una iterable y un parámetro de tamaño y devuelva una iterable de arrays más pequeños que contengan un máximo de elementos de tamaño cada uno. Esta técnica puede ser útil para diversas aplicaciones, como dividir grandes conjuntos de datos en trozos más pequeños para su procesamiento o optimizar solicitudes de red reduciendo la cantidad de datos transferidos a la vez.",
      "meta": {
        "title": "Dividir iterables | Técnicas de JavaScript",
        "description": "Aprende cómo dividir una iterable en arrays más pequeños de un tamaño especificado utilizando JavaScript. Explora aplicaciones prácticas y optimiza el procesamiento de datos.",
        "keywords": "JavaScript, División, Iterables, Procesamiento de datos, Optimización"
      },
      "details": {
        "steps": [
          {
            "title": "Dividir en trozos una iterable",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el uso del comando Node",
                "file": "verify1-1.sh",
                "hint": "Se puede ejecutar JavaScript en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Découpage d'itérables en tableaux plus petits",
      "description": "Dans ce laboratoire, nous allons explorer le concept de découpage d'un itérable en tableaux plus petits d'une taille spécifiée à l'aide de JavaScript. Nous allons implémenter une fonction qui prend en entrée un itérable et un paramètre de taille et renvoie un itérable de tableaux plus petits qui contiennent au maximum size éléments chacun. Cette technique peut être utile pour diverses applications, telles que la division de grands ensembles de données en parties plus petites pour le traitement ou l'optimisation des requêtes réseau en réduisant la quantité de données transférées d'un coup.",
      "meta": {
        "title": "Découpage d'itérables | Techniques JavaScript",
        "description": "Découvrez comment découper un itérable en tableaux plus petits d'une taille spécifiée à l'aide de JavaScript. Explorez des applications pratiques et optimisez le traitement des données.",
        "keywords": "JavaScript, Découpage, Itérables, Traitement de données, Optimisation"
      },
      "details": {
        "steps": [
          {
            "title": "Découper un itérable",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier l'utilisation de la commande Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Iterierbare in kleinere Arrays unterteilen",
      "description": "In diesem Lab werden wir das Konzept des Aufteilens eines Iterierbaren in kleinere Arrays einer bestimmten Größe mit JavaScript erkunden. Wir werden eine Funktion implementieren, die ein Iterierbares und einen Größenparameter annimmt und ein Iterierbares von kleineren Arrays zurückgibt, die jeweils maximal die angegebene Anzahl von Elementen enthalten. Diese Technik kann für verschiedene Anwendungen nützlich sein, beispielsweise zum Aufteilen großer Datensätze in kleinere Blöcke für die Verarbeitung oder zur Optimierung von Netzwerkanfragen, indem die Menge an einmal übertragenen Daten reduziert wird.",
      "meta": {
        "title": "Iterierbare in Blöcke unterteilen | JavaScript Techniken",
        "description": "Lernen Sie, wie Sie ein Iterierbares mit JavaScript in kleinere Arrays einer bestimmten Größe unterteilen. Entdecken Sie praktische Anwendungen und optimieren Sie die Datenverarbeitung.",
        "keywords": "JavaScript, Aufteilung in Blöcke, Iterierbare, Datenverarbeitung, Optimierung"
      },
      "details": {
        "steps": [
          {
            "title": "Iterierbares in Blöcke unterteilen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen der Verwendung des Node-Befehls",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Eingabetaste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "イテラブルを小さな配列に分割する",
      "description": "この実験では、JavaScript を使ってイテラブルを指定されたサイズの小さな配列に分割する概念を探ります。イテラブルとサイズパラメータを受け取り、各々最大サイズ要素を含む小さな配列のイテラブルを返す関数を実装します。この技術は、大きなデータセットを処理用に小さなチャンクに分解したり、一度に転送するデータ量を削減することでネットワーク要求を最適化するなど、さまざまなアプリケーションに役立ちます。",
      "meta": {
        "title": "イテラブルの分割 | JavaScript テクニック",
        "description": "JavaScript を使ってイテラブルを指定されたサイズの小さな配列に分割する方法を学びましょう。実用的なアプリケーションを探り、データ処理を最適化しましょう。",
        "keywords": "JavaScript, 分割，イテラブル，データ処理，最適化"
      },
      "details": {
        "steps": [
          {
            "title": "イテラブルをチャンク化する",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Node コマンドの使用を確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で 'node' と入力して Enter キーを押すことで、JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Разделение итерируемых объектов на более мелкие массивы",
      "description": "В этом практическом занятии мы изучим концепцию разделения итерируемого объекта на более мелкие массивы заданного размера с использованием JavaScript. Мы реализуем функцию, которая принимает итерируемый объект и параметр размера и возвращает итерируемый объект из более мелких массивов, каждый из которых содержит максимум size элементов. Эта техника может быть полезна для различных приложений, таких как разбиение больших наборов данных на более мелкие части для обработки или оптимизация сетевых запросов путём уменьшения количества передаваемых данных за один раз.",
      "meta": {
        "title": "Разделение итерируемых объектов | Техники JavaScript",
        "description": "Изучите, как разделить итерируемый объект на более мелкие массивы заданного размера с использованием JavaScript. Изучите практические приложения и оптимизацию обработки данных.",
        "keywords": "JavaScript, Разделение, Итерируемые объекты, Обработка данных, Оптимизация"
      },
      "details": {
        "steps": [
          {
            "title": "Разделить итерируемый объект",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить использование команды Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
