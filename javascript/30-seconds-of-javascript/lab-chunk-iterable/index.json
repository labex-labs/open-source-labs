{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Chunking Iterables into Smaller Arrays",
  "description": "In this lab, we will explore the concept of chunking an iterable into smaller arrays of a specified size using JavaScript. We will implement a function that takes in an iterable and a size parameter and returns an iterable of smaller arrays that contain a maximum of size elements each. This technique can be useful for various applications, such as breaking down large datasets into smaller chunks for processing or optimizing network requests by reducing the amount of data transferred at once.",
  "meta": {
    "title": "Chunking Iterables | JavaScript Techniques",
    "description": "Learn how to chunk an iterable into smaller arrays of a specified size using JavaScript. Explore practical applications and optimize data processing.",
    "keywords": "JavaScript, Chunking, Iterables, Data Processing, Optimization"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Chunk Iterable",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Command Usage",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/comp_ops",
          "javascript/cond_stmts",
          "javascript/data_types",
          "javascript/loops",
          "javascript/obj_manip",
          "javascript/spread_rest",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "将可迭代对象分块为较小数组",
      "description": "在本实验中，我们将探索如何使用JavaScript将可迭代对象分块为指定大小的较小数组。我们将实现一个函数，该函数接受一个可迭代对象和一个大小参数，并返回一个由较小数组组成的可迭代对象，每个较小数组最多包含size个元素。此技术可用于各种应用程序，例如将大型数据集分解为较小的块进行处理，或通过减少一次传输的数据量来优化网络请求。",
      "meta": {
        "title": "可迭代对象分块 | JavaScript 技术",
        "description": "学习如何使用JavaScript将可迭代对象分块为指定大小的较小数组。探索实际应用并优化数据处理。",
        "keywords": "JavaScript, 分块, 可迭代对象, 数据处理, 优化"
      },
      "details": {
        "steps": [
          {
            "title": "将可迭代对象分块",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Node 命令的使用",
                "file": "verify1-1.sh",
                "hint": "在终端/SSH 中，通过输入 'node' 并按下回车键即可运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
