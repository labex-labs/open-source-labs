{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Truncate String at Whitespace",
  "description": "In this lab, we will explore the concept of truncating a string at whitespace in JavaScript. We will learn how to limit the length of a string while preserving its readability by respecting whitespace. Through the implementation of String.prototype.slice() and String.prototype.lastIndexOf(), we will create a function that can truncate a string to a specified length with an optional ending.",
  "meta": {
    "title": "JavaScript String Truncation | Whitespace Preservation",
    "description": "Learn how to truncate strings in JavaScript while preserving whitespace for improved readability and SEO-friendly content.",
    "keywords": "JavaScript, String Truncation, Whitespace Preservation, Content Optimization, SEO"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Truncate String at Whitespace",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands In Zsh History",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/comp_ops",
          "javascript/cond_stmts",
          "javascript/data_types",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "按空白字符截断字符串",
      "description": "在本实验中，我们将探讨在JavaScript中按空白字符截断字符串的概念。我们将学习如何在尊重空白字符的同时限制字符串的长度，以保持其可读性。通过实现String.prototype.slice()和String.prototype.lastIndexOf()，我们将创建一个函数，该函数可以将字符串截断为指定长度，并可选择添加结尾。",
      "meta": {
        "title": "JavaScript字符串截断 | 保留空白字符",
        "description": "学习如何在JavaScript中截断字符串，同时保留空白字符，以提高可读性并生成对SEO友好的内容。",
        "keywords": "JavaScript, 字符串截断, 保留空白字符, 内容优化, SEO"
      },
      "details": {
        "steps": [
          {
            "title": "按空白字符截断字符串",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "在Zsh历史记录中验证Node命令",
                "file": "verify1-1.sh",
                "hint": "通过输入'node'并按Enter键，可以在终端/SSH中运行JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Truncar Cadena en Blanco",
      "description": "En este laboratorio, exploraremos el concepto de truncar una cadena en blanco en JavaScript. Aprenderemos a limitar la longitud de una cadena respetando el espacio en blanco para preservar su legibilidad. A través de la implementación de String.prototype.slice() y String.prototype.lastIndexOf(), crearemos una función que puede truncar una cadena a una longitud especificada con una terminación opcional.",
      "meta": {
        "title": "Truncamiento de Cadenas en JavaScript | Preservación del Espacio en Blanco",
        "description": "Aprende cómo truncar cadenas en JavaScript mientras se preserva el espacio en blanco para mejorar la legibilidad y el contenido amigable para los motores de búsqueda.",
        "keywords": "JavaScript, Truncamiento de Cadenas, Preservación del Espacio en Blanco, Optimización del Contenido, SEO"
      },
      "details": {
        "steps": [
          {
            "title": "Truncar Cadena en Blanco",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar los comandos de Node en el historial de Zsh",
                "file": "verify1-1.sh",
                "hint": "Se puede ejecutar JavaScript en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Tronquer une chaîne de caractères à l'espace",
      "description": "Dans ce laboratoire, nous allons explorer le concept de tronquer une chaîne de caractères à l'espace dans JavaScript. Nous apprendrons à limiter la longueur d'une chaîne tout en préservant sa lisibilité en respectant les espaces. Grâce à l'implémentation de String.prototype.slice() et String.prototype.lastIndexOf(), nous allons créer une fonction qui peut tronquer une chaîne à une longueur spécifiée avec une fin optionnelle.",
      "meta": {
        "title": "Troncature de chaîne de caractères JavaScript | Préservation des espaces",
        "description": "Découvrez comment tronquer des chaînes de caractères en JavaScript tout en préservant les espaces pour améliorer la lisibilité et le contenu amical pour les moteurs de recherche.",
        "keywords": "JavaScript, Troncature de chaîne de caractères, Préservation des espaces, Optimisation du contenu, SEO"
      },
      "details": {
        "steps": [
          {
            "title": "Tronquer une chaîne de caractères à l'espace",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier les commandes Node dans l'historique Zsh",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Einen String an Leerzeichen abkürzen",
      "description": "In diesem Lab werden wir das Konzept des Abkürzens eines Strings an Leerzeichen in JavaScript erkunden. Wir werden lernen, wie die Länge eines Strings begrenzt werden kann, während seine Lesbarkeit durch die Berücksichtigung von Leerzeichen erhalten bleibt. Durch die Implementierung von String.prototype.slice() und String.prototype.lastIndexOf() werden wir eine Funktion erstellen, die einen String auf eine bestimmte Länge mit einem optionalen Abschluss abkürzen kann.",
      "meta": {
        "title": "JavaScript-Stringkürzung | Beibehaltung von Leerzeichen",
        "description": "Lernen Sie, wie Sie Strings in JavaScript abkürzen, während Sie Leerzeichen beibehalten, um die Lesbarkeit zu verbessern und SEO-freundlichen Inhalt zu erzeugen.",
        "keywords": "JavaScript, Stringkürzung, Beibehaltung von Leerzeichen, Inhaltsoptimierung, SEO"
      },
      "details": {
        "steps": [
          {
            "title": "Einen String an Leerzeichen abkürzen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen von Node-Befehlen in der Zsh-Geschichte",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Enter-Taste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "空白で文字列を切り詰める",
      "description": "この実験では、JavaScript において文字列を空白で切り詰める概念を探ります。空白を尊重することで、文字列の読みやすさを保ちながら、その長さを制限する方法を学びます。String.prototype.slice() と String.prototype.lastIndexOf() の実装を通じて、指定された長さまで文字列の切り詰めを行い、任意のエンディングを付けることができる関数を作成します。",
      "meta": {
        "title": "JavaScript による文字列の切り詰め | 空白の維持",
        "description": "空白を維持して JavaScript で文字列を切り詰める方法を学び、読みやすさと SEO にやさしいコンテンツを向上させましょう。",
        "keywords": "JavaScript, 文字列の切り詰め, 空白の維持, コンテンツ最適化, SEO"
      },
      "details": {
        "steps": [
          {
            "title": "空白で文字列を切り詰める",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Zsh履歴におけるNodeコマンドを確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSHで 'node' と入力してEnterキーを押すことで、JavaScriptを実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Обрезание строки по пробелам",
      "description": "В этом практическом занятии мы изучим концепцию обрезания строки по пробелам в JavaScript. Мы узнаем, как ограничивать длину строки, сохраняя при этом ее читаемость, учитывая пробелы. С помощью реализации методов String.prototype.slice() и String.prototype.lastIndexOf() мы создадим функцию, которая может обрезать строку до указанной длины с необязательным окончанием.",
      "meta": {
        "title": "Обрезание строк в JavaScript | Сохранение пробелов",
        "description": "Изучите, как обрезать строки в JavaScript, сохраняя при этом пробелы для улучшения читаемости и SEO-оптимизированного контента.",
        "keywords": "JavaScript, Обрезание строк, Сохранение пробелов, Оптимизация контента, SEO"
      },
      "details": {
        "steps": [
          {
            "title": "Обрезание строки по пробелам",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить команды Node в истории Zsh",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
