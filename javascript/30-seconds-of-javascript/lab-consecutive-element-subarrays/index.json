{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Consecutive Element Subarrays",
  "description": "In this lab, we will explore the concept of creating consecutive element subarrays using JavaScript. The goal of this lab is to learn how to create an array of n-tuples of consecutive elements using the Array.prototype.slice() and Array.prototype.map() methods in JavaScript. Through practical examples, we will understand how to populate the array with n-tuples of consecutive elements from an input array and return an empty array if n is greater than the length of the input array.",
  "meta": {
    "title": "Consecutive Element Subarrays: Mastering JavaScript Array Manipulation",
    "description": "Explore the art of creating consecutive element subarrays using JavaScript's powerful array methods.",
    "keywords": "javascript, subarrays, javascript practice, array slicing, array manipulation, javascript practice online, consecutive elements, javascript lab, javascript tutor"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": true,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Consecutive Element Subarrays",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Command Usage",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/comp_ops",
          "javascript/data_types",
          "javascript/higher_funcs",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "连续元素子数组",
      "description": "在本实验中，我们将探索使用 JavaScript 创建连续元素子数组的概念。本实验的目标是学习如何使用 JavaScript 中的 Array.prototype.slice() 和 Array.prototype.map() 方法创建一个由连续元素的 n 元组组成的数组。通过实际示例，我们将了解如何用输入数组中的连续元素 n 元组填充数组，并在 n 大于输入数组的长度时返回一个空数组。",
      "meta": {
        "title": "连续元素子数组：掌握 JavaScript 数组操作",
        "description": "探索使用 JavaScript 强大的数组方法创建连续元素子数组的技巧。",
        "keywords": "JavaScript, 子数组，JavaScript 练习，数组切片，数组操作，在线 JavaScript 练习，连续元素，JavaScript 实验，JavaScript 教程"
      },
      "details": {
        "steps": [
          {
            "title": "连续元素子数组",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Node 命令的用法",
                "file": "verify1-1.sh",
                "hint": "在终端/SSH 中，通过输入'node'并按下回车键，可以运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Subarreglos de Elementos Consecutivos",
      "description": "En este laboratorio, exploraremos el concepto de crear subarreglos de elementos consecutivos utilizando JavaScript. El objetivo de este laboratorio es aprender a crear una matriz de n-tuplas de elementos consecutivos utilizando los métodos Array.prototype.slice() y Array.prototype.map() en JavaScript. A través de ejemplos prácticos, entenderemos cómo poblar la matriz con n-tuplas de elementos consecutivos de una matriz de entrada y devolver una matriz vacía si n es mayor que la longitud de la matriz de entrada.",
      "meta": {
        "title": "Subarreglos de Elementos Consecutivos: Dominando la Manipulación de Arrays en JavaScript",
        "description": "Explora el arte de crear subarreglos de elementos consecutivos utilizando los poderosos métodos de arrays de JavaScript.",
        "keywords": "javascript, subarreglos, práctica de javascript, rebanado de arrays, manipulación de arrays, práctica de javascript en línea, elementos consecutivos, laboratorio de javascript, tutor de javascript"
      },
      "details": {
        "steps": [
          {
            "title": "Subarreglos de Elementos Consecutivos",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el Uso del Comando Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript se puede ejecutar en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Sous-tableaux d'éléments consécutifs",
      "description": "Dans ce laboratoire, nous allons explorer le concept de création de sous-tableaux d'éléments consécutifs à l'aide de JavaScript. Le but de ce laboratoire est d'apprendre à créer un tableau d' n-uplets d'éléments consécutifs à l'aide des méthodes Array.prototype.slice() et Array.prototype.map() en JavaScript. Par des exemples pratiques, nous allons comprendre comment peupler le tableau avec des n-uplets d'éléments consécutifs d'un tableau d'entrée et renvoyer un tableau vide si n est supérieur à la longueur du tableau d'entrée.",
      "meta": {
        "title": "Sous-tableaux d'éléments consécutifs : Maîtriser la manipulation des tableaux JavaScript",
        "description": "Explorez l'art de créer des sous-tableaux d'éléments consécutifs à l'aide des puissantes méthodes de tableaux JavaScript.",
        "keywords": "javascript, sous-tableaux, pratique javascript, découpage de tableau, manipulation de tableau, pratique javascript en ligne, éléments consécutifs, laboratoire javascript, tuteur javascript"
      },
      "details": {
        "steps": [
          {
            "title": "Sous-tableaux d'éléments consécutifs",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier l'utilisation de la commande Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Subarrays aus aufeinanderfolgenden Elementen",
      "description": "In diesem Lab werden wir das Konzept des Erstellens von Subarrays aus aufeinanderfolgenden Elementen mit JavaScript erkunden. Ziel dieses Labs ist es, zu lernen, wie man mithilfe der Methoden Array.prototype.slice() und Array.prototype.map() in JavaScript ein Array von n-Tupeln aus aufeinanderfolgenden Elementen erstellt. Anhand von praktischen Beispielen werden wir verstehen, wie man das Array mit n-Tupeln aus aufeinanderfolgenden Elementen aus einem Eingabearray befüllt und ein leeres Array zurückgibt, wenn n größer als die Länge des Eingabearrays ist.",
      "meta": {
        "title": "Subarrays aus aufeinanderfolgenden Elementen: Beherrschen der JavaScript-Array-Manipulation",
        "description": "Erkunden Sie die Kunst des Erstellens von Subarrays aus aufeinanderfolgenden Elementen mit den leistungsstarken Array-Methoden von JavaScript.",
        "keywords": "javascript, Subarrays, JavaScript-Praxis, Array-Slicing, Array-Manipulation, Online-JavaScript-Praxis, aufeinanderfolgende Elemente, JavaScript-Lab, JavaScript-Tutor"
      },
      "details": {
        "steps": [
          {
            "title": "Subarrays aus aufeinanderfolgenden Elementen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen der Verwendung des Node-Befehls",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Eingabetaste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "連続する要素のサブ配列",
      "description": "この実験では、JavaScript を使って連続する要素のサブ配列を作成する概念を探ります。この実験の目的は、JavaScript の Array.prototype.slice() と Array.prototype.map() メソッドを使って、連続する要素の n 要素組の配列を作成する方法を学ぶことです。実際の例を通じて、入力配列から連続する要素の n 要素組で配列を埋める方法を理解し、n が入力配列の長さより大きい場合に空の配列を返す方法を学びます。",
      "meta": {
        "title": "連続する要素のサブ配列：JavaScript 配列操作のマスター",
        "description": "JavaScript の強力な配列メソッドを使って、連続する要素のサブ配列を作成する技術を探求しましょう。",
        "keywords": "javascript, サブ配列，javascript 練習，配列スライシング，配列操作，オンライン javascript 練習，連続する要素，javascript 実験，javascript チューター"
      },
      "details": {
        "steps": [
          {
            "title": "連続する要素のサブ配列",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Node コマンドの使用を確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で 'node' と入力して Enter キーを押すことで、JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Подмассивы последовательных элементов",
      "description": "В этом лабе мы будем изучать концепцию создания подмассивов последовательных элементов с использованием JavaScript. Целью этого лабара является изучение способа создания массива n-тупл из последовательных элементов с использованием методов Array.prototype.slice() и Array.prototype.map() в JavaScript. С помощью практических примеров мы поймем, как заполнить массив n-туплатами последовательных элементов из входного массива и вернуть пустой массив, если n больше длины входного массива.",
      "meta": {
        "title": "Подмассивы последовательных элементов: мастерство в манипуляции массивами JavaScript",
        "description": "Изучите искусство создания подмассивов последовательных элементов с использованием мощных методов массивов JavaScript.",
        "keywords": "javascript, подмассивы, практика javascript, разделение массива, манипуляция массивами, онлайн практика javascript, последовательные элементы, javascript лаб, javascript тренажер"
      },
      "details": {
        "steps": [
          {
            "title": "Подмассивы последовательных элементов",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить использование команды Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "연속 요소 하위 배열",
      "description": "이 랩에서는 JavaScript 를 사용하여 연속 요소 하위 배열을 생성하는 개념을 탐구합니다. 이 랩의 목표는 JavaScript 에서 Array.prototype.slice() 및 Array.prototype.map() 메서드를 사용하여 연속 요소의 n-튜플 배열을 만드는 방법을 배우는 것입니다. 실용적인 예제를 통해 입력 배열에서 연속 요소의 n-튜플로 배열을 채우고 n 이 입력 배열의 길이보다 큰 경우 빈 배열을 반환하는 방법을 이해할 것입니다.",
      "meta": {
        "title": "연속 요소 하위 배열: JavaScript 배열 조작 마스터하기 - JavaScript 연습",
        "description": "JavaScript 의 강력한 배열 메서드를 사용하여 연속 요소 하위 배열을 생성하는 기술을 탐구하세요. JavaScript 배열 조작 튜토리얼",
        "keywords": "javascript, 하위 배열, javascript 연습, 배열 슬라이싱, 배열 조작, javascript 온라인 연습, 연속 요소, javascript 랩, javascript 튜터, 자바스크립트 배열"
      },
      "details": {
        "steps": [
          {
            "title": "연속 요소 하위 배열",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "Node 명령어 사용 확인",
                "file": "verify1-1.sh",
                "hint": "터미널/SSH 에서 'node'를 입력하고 Enter 키를 눌러 JavaScript 를 실행할 수 있습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Sub-arrays de Elementos Consecutivos",
      "description": "Neste laboratório, exploraremos o conceito de criação de sub-arrays de elementos consecutivos usando JavaScript. O objetivo deste laboratório é aprender a criar um array de n-tuplas de elementos consecutivos usando os métodos Array.prototype.slice() e Array.prototype.map() em JavaScript. Através de exemplos práticos, entenderemos como preencher o array com n-tuplas de elementos consecutivos de um array de entrada e retornar um array vazio se n for maior que o comprimento do array de entrada.",
      "meta": {
        "title": "Sub-arrays de Elementos Consecutivos: Dominando a Manipulação de Arrays em JavaScript",
        "description": "Explore a arte de criar sub-arrays de elementos consecutivos usando os poderosos métodos de array do JavaScript.",
        "keywords": "javascript, sub-arrays, prática javascript, fatiamento de array, manipulação de array, prática javascript online, elementos consecutivos, laboratório javascript, tutorial javascript"
      },
      "details": {
        "steps": [
          {
            "title": "Sub-arrays de Elementos Consecutivos",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar Uso do Comando Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript pode ser executado no Terminal/SSH digitando 'node' e pressionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
