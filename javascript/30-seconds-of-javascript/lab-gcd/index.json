{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Recursive Greatest Common Divisor",
  "description": "In this lab, we will be exploring the concept of finding the greatest common divisor between two or more numbers/arrays using JavaScript. The lab will introduce a function that uses recursion to calculate the GCD, with a base case of zero. By the end of the lab, you will have a solid understanding of how to implement this function in your own JavaScript projects.",
  "meta": {
    "title": "JavaScript | Greatest Common Divisor | Recursion",
    "description": "Explore the concept of finding the greatest common divisor between numbers/arrays using JavaScript. Learn how to implement a recursive function to calculate the GCD.",
    "keywords": "JavaScript, Greatest Common Divisor, Recursion, Programming, Coding"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Greatest Common Divisor",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands Executed",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/comp_ops",
          "javascript/data_types",
          "javascript/higher_funcs",
          "javascript/spread_rest",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "递归求最大公约数",
      "description": "在本实验中，我们将探索使用 JavaScript 找出两个或多个数字/数组的最大公约数的概念。本实验将介绍一个使用递归计算最大公约数的函数，其基线条件为零。在实验结束时，你将对如何在自己的 JavaScript 项目中实现此函数有深入的理解。",
      "meta": {
        "title": "JavaScript | 最大公约数 | 递归",
        "description": "探索使用 JavaScript 找出数字/数组之间最大公约数的概念。学习如何实现一个递归函数来计算最大公约数。",
        "keywords": "JavaScript, 最大公约数，递归，编程，编码"
      },
      "details": {
        "steps": [
          {
            "title": "最大公约数",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证是否执行了 Node 命令",
                "file": "verify1-1.sh",
                "hint": "在终端/SSH 中输入'node'并回车即可运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Máximo Común Divisor Recursivo",
      "description": "En este laboratorio, exploraremos el concepto de encontrar el máximo común divisor entre dos o más números/arrays utilizando JavaScript. El laboratorio presentará una función que utiliza la recursión para calcular el MCD, con un caso base de cero. Al final del laboratorio, tendrás una comprensión sólida de cómo implementar esta función en tus propios proyectos de JavaScript.",
      "meta": {
        "title": "JavaScript | Máximo Común Divisor | Recursión",
        "description": "Explora el concepto de encontrar el máximo común divisor entre números/arrays utilizando JavaScript. Aprende cómo implementar una función recursiva para calcular el MCD.",
        "keywords": "JavaScript, Máximo Común Divisor, Recursión, Programación, Codificación"
      },
      "details": {
        "steps": [
          {
            "title": "Máximo Común Divisor",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar que se ejecutaron los comandos de Node",
                "file": "verify1-1.sh",
                "hint": "Se puede ejecutar JavaScript en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Plus grand diviseur commun récursif",
      "description": "Dans ce laboratoire, nous allons explorer le concept de recherche du plus grand diviseur commun entre deux ou plusieurs nombres / tableaux en utilisant JavaScript. Le laboratoire présentera une fonction qui utilise la récursion pour calculer le PPCM, avec un cas de base de zéro. À la fin du laboratoire, vous aurez une compréhension solide de la manière de mettre en œuvre cette fonction dans vos propres projets JavaScript.",
      "meta": {
        "title": "JavaScript | Plus grand diviseur commun | Récursion",
        "description": "Explorez le concept de recherche du plus grand diviseur commun entre des nombres / tableaux en utilisant JavaScript. Apprenez à implémenter une fonction récursive pour calculer le PPCM.",
        "keywords": "JavaScript, Plus grand diviseur commun, Récursion, Programmation, Codage"
      },
      "details": {
        "steps": [
          {
            "title": "Plus grand diviseur commun",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier que les commandes Node ont été exécutées",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Rekursiver größter gemeinsamer Teiler",
      "description": "In diesem Lab werden wir das Konzept des Findens des größten gemeinsamen Teilers zwischen zwei oder mehr Zahlen/Arrays mit JavaScript erkunden. Das Lab wird eine Funktion vorstellen, die die größte gemeinsame Teilerberechnung mit Hilfe der Rekursion durchführt, wobei der Basisfall bei Null liegt. Am Ende des Labs werden Sie eine solide Vorstellung davon haben, wie diese Funktion in Ihren eigenen JavaScript-Projekten implementiert werden kann.",
      "meta": {
        "title": "JavaScript | Größter gemeinsamer Teiler | Rekursion",
        "description": "Erkunde das Konzept des Findens des größten gemeinsamen Teilers zwischen Zahlen/Arrays mit JavaScript. Lernen Sie, wie eine rekursive Funktion implementiert wird, um den größten gemeinsamen Teiler zu berechnen.",
        "keywords": "JavaScript, Größter gemeinsamer Teiler, Rekursion, Programmierung, Codierung"
      },
      "details": {
        "steps": [
          {
            "title": "Größter gemeinsamer Teiler",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren Sie, dass die Node-Befehle ausgeführt wurden",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem Sie 'node' eingeben und die Eingabetaste drücken."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "再帰的な最大公約数",
      "description": "この実験では、JavaScript を使って 2 つ以上の数または配列の最大公約数を見つける概念を探求します。この実験では、ベースケースがゼロの再帰を使って GCD を計算する関数を紹介します。この実験が終わるとき、あなたは自分の JavaScript プロジェクトでこの関数をどのように実装するかをしっかりと理解しているでしょう。",
      "meta": {
        "title": "JavaScript | 最大公約数 | 再帰",
        "description": "JavaScript を使って数/配列間の最大公約数を見つける概念を探求します。再帰関数を使って GCD を計算する方法を学びましょう。",
        "keywords": "JavaScript, 最大公約数，再帰，プログラミング，コーディング"
      },
      "details": {
        "steps": [
          {
            "title": "最大公約数",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Node コマンドの実行を確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で'node'と入力して Enter キーを押すことで JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Рекурсивный наибольший общий делитель",
      "description": "В этом лабе мы будем изучать концепцию нахождения наибольшего общего делителя между двумя или более числами/массивами с использованием JavaScript. Лабе будет представлена функция, которая использует рекурсию для вычисления НОД, с базовым случаем равным нулю. В конце лабы вы будете хорошо понимать, как реализовать эту функцию в своих собственных проектах на JavaScript.",
      "meta": {
        "title": "JavaScript | Наибольший общий делитель | Рекурсия",
        "description": "Изучите концепцию нахождения наибольшего общего делителя между числами/массивами с использованием JavaScript. научитесь реализовывать рекурсивную функцию для вычисления НОД.",
        "keywords": "JavaScript, Наибольший общий делитель, Рекурсия, Программирование, Кодирование"
      },
      "details": {
        "steps": [
          {
            "title": "Наибольший общий делитель",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить выполнение команд Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "재귀적 최대 공약수 (GCD) 계산",
      "description": "이 랩에서는 JavaScript 를 사용하여 두 개 이상의 숫자/배열 간의 최대 공약수 (GCD) 를 구하는 개념을 탐구합니다. 랩에서는 재귀 (recursion) 를 사용하여 GCD 를 계산하는 함수를 소개하며, 0 을 기저 사례 (base case) 로 사용합니다. 랩을 마치면, 자신의 JavaScript 프로젝트에서 이 함수를 구현하는 방법에 대한 확실한 이해를 얻게 될 것입니다.",
      "meta": {
        "title": "JavaScript | 최대 공약수 (GCD) | 재귀 (Recursion) - 코딩 학습",
        "description": "JavaScript 를 사용하여 숫자/배열 간의 최대 공약수 (GCD) 를 구하는 개념을 알아보세요. GCD 를 계산하기 위한 재귀 함수 구현 방법을 배우세요. 자바스크립트 코딩 튜토리얼.",
        "keywords": "JavaScript, 최대 공약수, GCD, 재귀, Recursion, 프로그래밍, 코딩, 자바스크립트 튜토리얼, 코딩 학습"
      },
      "details": {
        "steps": [
          {
            "title": "최대 공약수 (GCD)",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "Node 명령어 실행 확인",
                "file": "verify1-1.sh",
                "hint": "터미널/SSH 에서 'node'를 입력하고 Enter 키를 눌러 JavaScript 를 실행할 수 있습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Maior Divisor Comum Recursivo",
      "description": "Neste laboratório, exploraremos o conceito de encontrar o maior divisor comum (MDC) entre dois ou mais números/arrays usando JavaScript. O laboratório apresentará uma função que usa recursão para calcular o MDC, com um caso base de zero. Ao final do laboratório, você terá uma sólida compreensão de como implementar essa função em seus próprios projetos JavaScript.",
      "meta": {
        "title": "JavaScript | Maior Divisor Comum (MDC) | Recursão",
        "description": "Explore o conceito de encontrar o maior divisor comum entre números/arrays usando JavaScript. Aprenda a implementar uma função recursiva para calcular o MDC.",
        "keywords": "JavaScript, Maior Divisor Comum, MDC, Recursão, Programação, Codificação"
      },
      "details": {
        "steps": [
          {
            "title": "Maior Divisor Comum",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar Comandos Node Executados",
                "file": "verify1-1.sh",
                "hint": "JavaScript pode ser executado no Terminal/SSH digitando 'node' e pressionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
