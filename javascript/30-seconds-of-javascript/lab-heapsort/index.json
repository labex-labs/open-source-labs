{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Implementing Heapsort Algorithm in JavaScript",
  "description": "In this lab, we will explore the implementation of the heapsort algorithm in JavaScript. Heapsort is a comparison-based sorting algorithm that works by dividing an array into a sorted and an unsorted region, and iteratively shrinking the unsorted region by extracting the largest element and moving that to the sorted region. Through this lab, you will gain a deeper understanding of how the heapsort algorithm works and how to implement it using recursion and closures in JavaScript.",
  "meta": {
    "title": "Mastering Heapsort Algorithm in JavaScript",
    "description": "Dive into the implementation of the powerful heapsort algorithm in JavaScript, and learn how to leverage recursion and closures for efficient sorting.",
    "keywords": "javascript, javascript practice, recursion, closures, javascript practice online, sorting algorithm, javascript lab, heapsort, javascript tutor"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Heap Sort",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands History",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/array_methods",
          "javascript/comp_ops",
          "javascript/cond_stmts",
          "javascript/data_types",
          "javascript/loops",
          "javascript/spread_rest",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "在JavaScript中实现堆排序算法",
      "description": "在本实验中，我们将探索如何在JavaScript中实现堆排序算法。堆排序是一种基于比较的排序算法，其工作方式是将数组划分为已排序区域和未排序区域，并通过提取最大元素并将其移动到已排序区域来迭代缩小未排序区域。通过本实验，你将更深入地了解堆排序算法的工作原理，以及如何在JavaScript中使用递归和闭包来实现它。",
      "meta": {
        "title": "精通JavaScript中的堆排序算法",
        "description": "深入了解在JavaScript中强大的堆排序算法的实现，并学习如何利用递归和闭包进行高效排序。",
        "keywords": "JavaScript, JavaScript实践, 递归, 闭包, 在线JavaScript实践, 排序算法, JavaScript实验, 堆排序, JavaScript教程"
      },
      "details": {
        "steps": [
          {
            "title": "堆排序",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证Node命令历史记录",
                "file": "verify1-1.sh",
                "hint": "在终端/SSH中，通过输入'node'并按回车键可以运行JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
