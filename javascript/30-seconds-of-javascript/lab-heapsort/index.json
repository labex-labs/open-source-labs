{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Implementing Heapsort Algorithm in JavaScript",
  "description": "In this lab, we will explore the implementation of the heapsort algorithm in JavaScript. Heapsort is a comparison-based sorting algorithm that works by dividing an array into a sorted and an unsorted region, and iteratively shrinking the unsorted region by extracting the largest element and moving that to the sorted region. Through this lab, you will gain a deeper understanding of how the heapsort algorithm works and how to implement it using recursion and closures in JavaScript.",
  "meta": {
    "title": "Mastering Heapsort Algorithm in JavaScript",
    "description": "Dive into the implementation of the powerful heapsort algorithm in JavaScript, and learn how to leverage recursion and closures for efficient sorting.",
    "keywords": "javascript, javascript practice, recursion, closures, javascript practice online, sorting algorithm, javascript lab, heapsort, javascript tutor"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Heap Sort",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands History",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "在 JavaScript 中实现堆排序算法",
      "description": "在本实验中，我们将探索如何在 JavaScript 中实现堆排序算法。堆排序是一种基于比较的排序算法，其工作方式是将数组划分为已排序区域和未排序区域，并通过提取最大元素并将其移动到已排序区域来迭代缩小未排序区域。通过本实验，你将更深入地了解堆排序算法的工作原理，以及如何在 JavaScript 中使用递归和闭包来实现它。",
      "meta": {
        "title": "精通 JavaScript 中的堆排序算法",
        "description": "深入了解在 JavaScript 中强大的堆排序算法的实现，并学习如何利用递归和闭包进行高效排序。",
        "keywords": "JavaScript, JavaScript 实践，递归，闭包，在线 JavaScript 实践，排序算法，JavaScript 实验，堆排序，JavaScript 教程"
      },
      "details": {
        "steps": [
          {
            "title": "堆排序",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Node 命令历史记录",
                "file": "verify1-1.sh",
                "hint": "在终端/SSH 中，通过输入'node'并按回车键可以运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Implementando el algoritmo de heapsort en JavaScript",
      "description": "En este laboratorio, exploraremos la implementación del algoritmo de heapsort en JavaScript. Heapsort es un algoritmo de clasificación basado en comparaciones que funciona dividiendo una matriz en una región clasificada y una región no clasificada, y reduciendo iterativamente la región no clasificada extrayendo el elemento más grande y moviéndolo a la región clasificada. A través de este laboratorio, obtendrás una comprensión más profunda de cómo funciona el algoritmo de heapsort y cómo implementarlo utilizando recursividad y closures en JavaScript.",
      "meta": {
        "title": "Dominando el algoritmo de heapsort en JavaScript",
        "description": "Sumérgete en la implementación del poderoso algoritmo de heapsort en JavaScript y aprende cómo aprovechar la recursividad y los closures para una clasificación eficiente.",
        "keywords": "javascript, práctica de javascript, recursividad, closures, práctica de javascript en línea, algoritmo de clasificación, laboratorio de javascript, heapsort, tutor de javascript"
      },
      "details": {
        "steps": [
          {
            "title": "Clasificación heapsort",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el historial de comandos de Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript se puede ejecutar en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Implémentation de l'algorithme de tri par tas en JavaScript",
      "description": "Dans ce laboratoire, nous allons explorer l'implémentation de l'algorithme de tri par tas en JavaScript. Le tri par tas est un algorithme de tri basé sur des comparaisons qui fonctionne en divisant un tableau en une région triée et une région non triée, puis en réduisant itérativement la région non triée en extrayant l'élément le plus grand et en le déplaçant dans la région triée. Grâce à ce laboratoire, vous comprendrez mieux comment fonctionne l'algorithme de tri par tas et comment l'implémenter en utilisant la récursivité et les fermetures en JavaScript.",
      "meta": {
        "title": "Maîtriser l'algorithme de tri par tas en JavaScript",
        "description": "Plongez dans l'implémentation de l'algo puissant de tri par tas en JavaScript et découvrez comment utiliser la récursivité et les fermetures pour un tri efficace.",
        "keywords": "javascript, pratique javascript, récursivité, fermetures, pratique javascript en ligne, algorithme de tri, laboratoire javascript, tri par tas, tuteur javascript"
      },
      "details": {
        "steps": [
          {
            "title": "Tri par tas",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier l'historique des commandes Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Implementierung des Heapsort-Algorithmus in JavaScript",
      "description": "In diesem Lab werden wir die Implementierung des Heapsort-Algorithmus in JavaScript untersuchen. Heapsort ist ein auf Vergleichen basierender Sortieralgorithmus, der funktioniert, indem ein Array in eine sortierte und eine unsortierte Region unterteilt wird und die unsortierte Region iterativ durch Extrahieren des größten Elements und Verschieben dieses in die sortierte Region verkleinert wird. Durch dieses Lab werden Sie ein tieferes Verständnis dafür erlangen, wie der Heapsort-Algorithmus funktioniert und wie Sie ihn in JavaScript mithilfe von Rekursion und Closures implementieren können.",
      "meta": {
        "title": "Meisterung des Heapsort-Algorithmus in JavaScript",
        "description": "Taucht in die Implementierung des leistungsstarken Heapsort-Algorithmus in JavaScript ein und lernen Sie, wie Sie Rekursion und Closures für effizientes Sortieren nutzen.",
        "keywords": "javascript, javascript Übung, Rekursion, Closures, Online-JavaScript-Übung, Sortieralgorithmus, JavaScript-Lab, Heapsort, JavaScript-Tutor"
      },
      "details": {
        "steps": [
          {
            "title": "Heap Sort",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifiziere die Node-Befehlsgeschichte",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem Sie 'node' eingeben und die Eingabetaste drücken."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "JavaScript におけるヒープソートアルゴリズムの実装",
      "description": "この実験では、JavaScript におけるヒープソートアルゴリズムの実装を探ります。ヒープソートは、比較に基づくソートアルゴリズムであり、配列をソート済み領域と未ソート領域に分割し、未ソート領域を繰り返し縮小しながら最大要素を抽出してソート済み領域に移動することで動作します。この実験を通じて、ヒープソートアルゴリズムの動作原理と、JavaScript で再帰とクロージャを使ってそれを実装する方法を深く理解することができます。",
      "meta": {
        "title": "JavaScript でヒープソートアルゴリズムをマスターする",
        "description": "強力なヒープソートアルゴリズムの JavaScript における実装にダイブインし、効率的なソートのために再帰とクロージャをどのように活用するか学びましょう。",
        "keywords": "javascript, javascript 練習，再帰，クロージャ，オンライン javascript 練習，ソートアルゴリズム，javascript 実験，ヒープソート，javascript 講師"
      },
      "details": {
        "steps": [
          {
            "title": "ヒープソート",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Node コマンド履歴を確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で 'node' と入力して Enter キーを押すことで、JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Реализация алгоритма Heapsort на JavaScript",
      "description": "В этом лабе мы исследуем реализацию алгоритма heapsort на JavaScript. Heapsort - это алгоритм сортировки, основанный на сравнении, который работает путём разделения массива на отсортированную и неотсортированную области, и итеративного уменьшения неотсортированной области путём извлечения наибольшего элемента и перемещения его в отсортированную область. С помощью этого лабара вы получите более глубокое понимание того, как работает алгоритм heapsort и как реализовать его с использованием рекурсии и замыканий в JavaScript.",
      "meta": {
        "title": "Мастерство в алгоритме Heapsort на JavaScript",
        "description": "Погрузитесь в реализацию мощного алгоритма heapsort на JavaScript и узнайте, как использовать рекурсию и замыкания для эффективной сортировки.",
        "keywords": "javascript, практика javascript, рекурсия, замыкания, онлайн практика javascript, алгоритм сортировки, javascript лаб, heapsort, javascript учитель"
      },
      "details": {
        "steps": [
          {
            "title": "Heap Sort",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить историю команд Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запускать в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "JavaScript 로 힙 정렬 (Heapsort) 알고리즘 구현하기",
      "description": "이 랩에서는 JavaScript 에서 힙 정렬 알고리즘을 구현하는 방법을 살펴봅니다. 힙 정렬은 비교 기반 정렬 알고리즘으로, 배열을 정렬된 영역과 정렬되지 않은 영역으로 나누어 작동하며, 가장 큰 요소를 추출하여 정렬된 영역으로 이동시켜 정렬되지 않은 영역을 반복적으로 줄여나갑니다. 이 랩을 통해 힙 정렬 알고리즘의 작동 방식과 JavaScript 에서 재귀 및 클로저를 사용하여 이를 구현하는 방법에 대한 더 깊은 이해를 얻을 수 있습니다.",
      "meta": {
        "title": "JavaScript 힙 정렬 (Heapsort) 알고리즘 마스터하기",
        "description": "JavaScript 에서 강력한 힙 정렬 알고리즘 구현에 대해 자세히 알아보고, 효율적인 정렬을 위해 재귀 및 클로저를 활용하는 방법을 배우세요.",
        "keywords": "javascript, javascript 연습, 재귀, 클로저, javascript 온라인 연습, 정렬 알고리즘, javascript 랩, 힙 정렬, javascript 튜터"
      },
      "details": {
        "steps": [
          {
            "title": "힙 정렬 (Heap Sort)",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "노드 명령어 히스토리 확인",
                "file": "verify1-1.sh",
                "hint": "터미널/SSH 에서 'node'를 입력하고 Enter 키를 눌러 JavaScript 를 실행할 수 있습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Implementando o Algoritmo Heapsort em JavaScript",
      "description": "Neste laboratório, exploraremos a implementação do algoritmo heapsort em JavaScript. Heapsort é um algoritmo de ordenação baseado em comparação que funciona dividindo um array em uma região ordenada e uma não ordenada, e iterativamente encolhendo a região não ordenada, extraindo o maior elemento e movendo-o para a região ordenada. Através deste laboratório, você obterá uma compreensão mais profunda de como o algoritmo heapsort funciona e como implementá-lo usando recursão e closures em JavaScript.",
      "meta": {
        "title": "Dominando o Algoritmo Heapsort em JavaScript - Guia Prático",
        "description": "Mergulhe na implementação do poderoso algoritmo heapsort em JavaScript e aprenda a usar recursão e closures para uma ordenação eficiente. Melhore suas habilidades de programação com este tutorial prático.",
        "keywords": "javascript, prática javascript, recursão, closures, prática javascript online, algoritmo de ordenação, laboratório javascript, heapsort, tutorial javascript, ordenação em javascript"
      },
      "details": {
        "steps": [
          {
            "title": "Heap Sort",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar Histórico de Comandos do Nó",
                "file": "verify1-1.sh",
                "hint": "JavaScript pode ser executado no Terminal/SSH digitando 'node' e pressionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
