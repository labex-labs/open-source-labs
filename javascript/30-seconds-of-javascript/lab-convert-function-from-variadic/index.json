{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Convert Function From Variadic",
  "description": "In this lab, we will explore the concept of converting a variadic function into an array function in JavaScript. We will use a closure and the spread operator to map the array of arguments to the inputs of the function. By the end of this lab, you will be able to create a reusable function that accepts an array of arguments instead of individual arguments.",
  "meta": {
    "title": "Convert Variadic Function to Array Function in JavaScript",
    "description": "Learn how to convert a variadic function into an array function using closure and the spread operator in JavaScript.",
    "keywords": "javascript, javascript practice, array function, variadic function, javascript practice online, javascript lab, spread operator, closure, javascript tutor"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Convert Function From Variadic",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands in ZSH History",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/comp_ops",
          "javascript/data_types",
          "javascript/spread_rest",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "将可变参数函数进行转换",
      "description": "在本实验中，我们将探讨如何在 JavaScript 中将可变参数函数转换为数组函数。我们将使用闭包和展开运算符，将参数数组映射到函数的输入。完成本实验后，你将能够创建一个可复用的函数，该函数接受参数数组而非单个参数。",
      "meta": {
        "title": "在 JavaScript 中把可变参数函数转换为数组函数",
        "description": "学习如何在 JavaScript 中使用闭包和展开运算符将可变参数函数转换为数组函数。",
        "keywords": "JavaScript, JavaScript 练习，数组函数，可变参数函数，在线 JavaScript 练习，JavaScript 实验，展开运算符，闭包，JavaScript 教程"
      },
      "details": {
        "steps": [
          {
            "title": "将可变参数函数进行转换",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "在 ZSH 历史记录中验证 Node 命令",
                "file": "verify1-1.sh",
                "hint": "通过输入'node'并按 Enter 键，可以在终端/SSH 中运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Convertir una función variádica",
      "description": "En este laboratorio, exploraremos el concepto de convertir una función variádica en una función de matriz en JavaScript. Utilizaremos una clausura y el operador de propagación para mapear la matriz de argumentos a las entradas de la función. Al final de este laboratorio, serás capaz de crear una función reusable que acepte una matriz de argumentos en lugar de argumentos individuales.",
      "meta": {
        "title": "Convertir una función variádica en una función de matriz en JavaScript",
        "description": "Aprende cómo convertir una función variádica en una función de matriz utilizando clausura y el operador de propagación en JavaScript.",
        "keywords": "javascript, práctica de javascript, función de matriz, función variádica, práctica de javascript en línea, laboratorio de javascript, operador de propagación, clausura, tutor de javascript"
      },
      "details": {
        "steps": [
          {
            "title": "Convertir una función variádica",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar comandos de Node en el historial de ZSH",
                "file": "verify1-1.sh",
                "hint": "Se puede ejecutar JavaScript en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Convertir une fonction en variadique",
      "description": "Dans ce laboratoire, nous allons explorer le concept de conversion d'une fonction variadique en une fonction tableau en JavaScript. Nous utiliserons une fermeture et l'opérateur de propagation pour mapper le tableau d'arguments aux entrées de la fonction. À la fin de ce laboratoire, vous serez capable de créer une fonction réutilisable qui accepte un tableau d'arguments au lieu d'arguments individuels.",
      "meta": {
        "title": "Convertir une fonction variadique en une fonction tableau en JavaScript",
        "description": "Découvrez comment convertir une fonction variadique en une fonction tableau à l'aide d'une fermeture et de l'opérateur de propagation en JavaScript.",
        "keywords": "javascript, pratique javascript, fonction tableau, fonction variadique, pratique javascript en ligne, laboratoire javascript, opérateur de propagation, fermeture, tuteur javascript"
      },
      "details": {
        "steps": [
          {
            "title": "Convertir une fonction en variadique",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier les commandes Node dans l'historique ZSH",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Variadische Funktion in Arrayfunktion umwandeln",
      "description": "In diesem Lab werden wir das Konzept des Umwandelns einer variadischen Funktion in eine Arrayfunktion in JavaScript erkunden. Wir werden eine Closure und den Spread-Operator verwenden, um das Argumentarray auf die Eingaben der Funktion zuzuordnen. Am Ende dieses Labs werden Sie in der Lage sein, eine wiederverwendbare Funktion zu erstellen, die ein Array von Argumenten anstelle einzelner Argumente akzeptiert.",
      "meta": {
        "title": "Variadische Funktion in Arrayfunktion in JavaScript umwandeln",
        "description": "Lernen Sie, wie Sie eine variadische Funktion in eine Arrayfunktion mit Hilfe von Closure und Spread-Operator in JavaScript umwandeln.",
        "keywords": "javascript, javascript Übung, Arrayfunktion, variadische Funktion, Online-JavaScript-Übung, JavaScript-Lab, Spread-Operator, Closure, JavaScript-Tutor"
      },
      "details": {
        "steps": [
          {
            "title": "Variadische Funktion in Arrayfunktion umwandeln",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen von Node-Befehlen in der ZSH-Historie",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Enter-Taste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "可変長関数からの関数変換",
      "description": "この実験では、JavaScript において可変長関数を配列関数に変換する概念を探ります。クロージャとスプレッド演算子を使って、引数の配列を関数の入力にマッピングします。この実験が終わると、個々の引数ではなく引数の配列を受け取る再利用可能な関数を作成できるようになります。",
      "meta": {
        "title": "JavaScript で可変長関数を配列関数に変換する",
        "description": "JavaScript でクロージャとスプレッド演算子を使って可変長関数を配列関数に変換する方法を学びましょう。",
        "keywords": "javascript, javascript 練習，配列関数，可変長関数，オンライン javascript 練習，javascript 実験，スプレッド演算子，クロージャ，javascript チューター"
      },
      "details": {
        "steps": [
          {
            "title": "可変長関数からの関数変換",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ZSH 履歴の Node コマンドを確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で 'node' と入力して Enter キーを押すことで JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Преобразование переменной функции",
      "description": "В этом практическом занятии мы изучим концепцию преобразования переменной функции в массивную функцию на JavaScript. Мы будем использовать замыкание и оператор расширения, чтобы сопоставить массив аргументов с входами функции. В конце этого практического занятия вы сможете создать повторно используемую функцию, которая принимает массив аргументов вместо отдельных аргументов.",
      "meta": {
        "title": "Преобразовать переменную функцию в массивную функцию на JavaScript",
        "description": "Изучите, как преобразовать переменную функцию в массивную функцию с использованием замыкания и оператора расширения на JavaScript.",
        "keywords": "javascript, практика javascript, массивная функция, переменная функция, онлайн практика javascript, практическое занятие javascript, оператор расширения, замыкание, преподаватель javascript"
      },
      "details": {
        "steps": [
          {
            "title": "Преобразование переменной функции",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить команды Node в истории ZSH",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
