{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Recursive Array Permutations in JavaScript",
  "description": "In this lab, we will explore the concept of array permutations in JavaScript. We will learn how to use recursion to generate all possible permutations of an array's elements, even if they contain duplicates. We will also understand how to use Array methods such as map() and reduce() to combine the different permutations into a single array. However, we must keep in mind that executing this function on arrays with more than 8 to 10 elements may significantly increase the execution time and cause the browser to hang.",
  "meta": {
    "title": "Array Permutations | JavaScript Coding Tutorial",
    "description": "Explore array permutations in JavaScript with this comprehensive coding tutorial. Learn recursion, Array methods, and optimize performance for large arrays.",
    "keywords": "array permutations, javascript, recursion, array methods, coding tutorial, performance optimization"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": true,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Array Permutations",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands Executed",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/array_methods",
          "javascript/comp_ops",
          "javascript/cond_stmts",
          "javascript/data_types",
          "javascript/higher_funcs",
          "javascript/obj_manip",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "JavaScript 中的递归数组排列",
      "description": "在本实验中，我们将探讨 JavaScript 中数组排列的概念。我们将学习如何使用递归生成数组元素的所有可能排列，即使它们包含重复项。我们还将了解如何使用诸如 map() 和 reduce() 之类的数组方法将不同的排列组合成一个数组。但是，我们必须记住，在包含超过 8 到 10 个元素的数组上执行此函数可能会显著增加执行时间并导致浏览器挂起。",
      "meta": {
        "title": "数组排列 | JavaScript 编码教程",
        "description": "通过本全面的编码教程探索 JavaScript 中的数组排列。学习递归、数组方法，并针对大型数组优化性能。",
        "keywords": "数组排列，JavaScript, 递归，数组方法，编码教程，性能优化"
      },
      "details": {
        "steps": [
          {
            "title": "数组排列",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证已执行的 Node 命令",
                "file": "verify1-1.sh",
                "hint": "通过在终端/SSH 中输入 'node' 并按回车键，可以运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Permutaciones de Array Recursivas en JavaScript",
      "description": "En este laboratorio, exploraremos el concepto de permutaciones de array en JavaScript. Aprenderemos a utilizar la recursión para generar todas las permutaciones posibles de los elementos de un array, incluso si contienen duplicados. También entenderemos cómo utilizar métodos de Array como map() y reduce() para combinar las diferentes permutaciones en un solo array. Sin embargo, debemos tener en cuenta que ejecutar esta función en arrays con más de 8 a 10 elementos puede aumentar significativamente el tiempo de ejecución y causar que el navegador se atasque.",
      "meta": {
        "title": "Permutaciones de Array | Tutorial de Codificación en JavaScript",
        "description": "Explora las permutaciones de array en JavaScript con este completo tutorial de codificación. Aprende recursión, métodos de Array y optimiza el rendimiento para arrays grandes.",
        "keywords": "permutaciones de array, javascript, recursión, métodos de array, tutorial de codificación, optimización de rendimiento"
      },
      "details": {
        "steps": [
          {
            "title": "Permutaciones de Array",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar que se ejecutaron los comandos de Node",
                "file": "verify1-1.sh",
                "hint": "Se puede ejecutar JavaScript en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Permutations d'ensembles récursives en JavaScript",
      "description": "Dans ce laboratoire, nous allons explorer le concept de permutations d'ensembles en JavaScript. Nous allons apprendre à utiliser la récursivité pour générer toutes les permutations possibles des éléments d'un tableau, même s'ils contiennent des doublons. Nous allons également comprendre comment utiliser des méthodes de tableau telles que map() et reduce() pour combiner les différentes permutations en un seul tableau. Cependant, nous devons garder à l'esprit que l'exécution de cette fonction sur des tableaux avec plus de 8 à 10 éléments peut considérablement augmenter le temps d'exécution et entraîner la suspension du navigateur.",
      "meta": {
        "title": "Permutations d'ensembles | Tutoriel de codage JavaScript",
        "description": "Explorez les permutations d'ensembles en JavaScript avec ce tutoriel de codage complet. Apprenez la récursivité, les méthodes de tableau et optimisez les performances pour les tableaux volumineux.",
        "keywords": "permutations d'ensembles, javascript, récursivité, méthodes de tableau, tutoriel de codage, optimisation des performances"
      },
      "details": {
        "steps": [
          {
            "title": "Permutations d'ensembles",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez que les commandes Node ont été exécutées",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Rekursive Array-Permutationen in JavaScript",
      "description": "In diesem Lab werden wir das Konzept von Array-Permutationen in JavaScript erkunden. Wir werden lernen, wie man Rekursion verwendet, um alle möglichen Permutationen der Elemente eines Arrays zu generieren, auch wenn sie Duplikate enthalten. Wir werden auch verstehen, wie man Array-Methoden wie map() und reduce() verwendet, um die verschiedenen Permutationen zu einem einzelnen Array zu kombinieren. Denken wir jedoch daran, dass das Ausführen dieser Funktion auf Arrays mit mehr als 8 bis 10 Elementen die Ausführungszeit erheblich erhöhen und den Browser zum Abstürzen bringen kann.",
      "meta": {
        "title": "Array-Permutationen | JavaScript-Coding-Tutorial",
        "description": "Erkunden Sie Array-Permutationen in JavaScript mit diesem umfassenden Coding-Tutorial. Lernen Sie Rekursion, Array-Methoden und optimieren Sie die Leistung für große Arrays.",
        "keywords": "Array-Permutationen, JavaScript, Rekursion, Array-Methoden, Coding-Tutorial, Leistungsooptimierung"
      },
      "details": {
        "steps": [
          {
            "title": "Array-Permutationen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren Sie, dass die Node-Befehle ausgeführt wurden",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem Sie 'node' eingeben und die Enter-Taste drücken."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "JavaScript における再帰的な配列の順列",
      "description": "この実験では、JavaScript における配列の順列の概念を探ります。重複する要素が含まれていても、配列の要素のすべての可能な順列を生成するために再帰をどのように使用するかを学びます。また、map() や reduce() などの配列メソッドを使って、異なる順列を単一の配列に結合する方法も理解します。ただし、8 から 10 個以上の要素を持つ配列に対してこの関数を実行すると、実行時間が大幅に増加し、ブラウザが停止する可能性があることに留意する必要があります。",
      "meta": {
        "title": "配列の順列 | JavaScript コーディング チュートリアル",
        "description": "この包括的なコーディング チュートリアルで JavaScript の配列の順列を探りましょう。再帰、配列メソッドを学び、大きな配列のパフォーマンスを最適化しましょう。",
        "keywords": "配列の順列，JavaScript, 再帰，配列メソッド，コーディング チュートリアル，パフォーマンス最適化"
      },
      "details": {
        "steps": [
          {
            "title": "配列の順列",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "実行された Node コマンドを確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で 'node' と入力して Enter キーを押すことで、JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Рекурсивные перестановки массивов в JavaScript",
      "description": "В этой лабораторной работе мы будем изучать концепцию перестановок массивов в JavaScript. Мы узнаем, как использовать рекурсию для генерации всех возможных перестановок элементов массива, даже если они содержат дубликаты. Мы также поймем, как использовать методы массива, такие как map() и reduce(), чтобы объединить разные перестановки в единый массив. Однако, мы должны помнить, что выполнение этой функции на массивах с более чем 8 - 10 элементами может значительно увеличить время выполнения и привести к зависанию браузера.",
      "meta": {
        "title": "Перестановки массивов | Руководство по программированию на JavaScript",
        "description": "Изучите перестановки массивов в JavaScript с помощью этого полноценного руководства по программированию. Изучите рекурсию, методы массива и оптимизируйте производительность для больших массивов.",
        "keywords": "перестановки массивов, javascript, рекурсия, методы массива, руководство по программированию, оптимизация производительности"
      },
      "details": {
        "steps": [
          {
            "title": "Перестановки массивов",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить выполнение команд Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "JavaScript 로 재귀적인 배열 순열 구현하기",
      "description": "이 랩에서는 JavaScript 에서 배열 순열의 개념을 탐구합니다. 재귀를 사용하여 중복된 요소를 포함하는 경우에도 배열 요소의 모든 가능한 순열을 생성하는 방법을 배웁니다. 또한 map() 및 reduce() 와 같은 Array 메서드를 사용하여 서로 다른 순열을 단일 배열로 결합하는 방법을 이해합니다. 하지만 8~10 개 이상의 요소를 가진 배열에서 이 함수를 실행하면 실행 시간이 크게 증가하고 브라우저가 멈출 수 있다는 점을 명심해야 합니다.",
      "meta": {
        "title": "배열 순열 | JavaScript 코딩 튜토리얼",
        "description": "이 포괄적인 코딩 튜토리얼을 통해 JavaScript 에서 배열 순열을 탐구하세요. 재귀, Array 메서드를 배우고 대규모 배열에 대한 성능을 최적화하세요.",
        "keywords": "배열 순열, 자바스크립트, 재귀, 배열 메서드, 코딩 튜토리얼, 성능 최적화"
      },
      "details": {
        "steps": [
          {
            "title": "배열 순열",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "Node 명령어 실행 확인",
                "file": "verify1-1.sh",
                "hint": "터미널/SSH 에서 'node'를 입력하고 Enter 키를 눌러 JavaScript 를 실행할 수 있습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Permutações Recursivas de Arrays em JavaScript",
      "description": "Neste laboratório, exploraremos o conceito de permutações de arrays em JavaScript. Aprenderemos como usar recursão para gerar todas as permutações possíveis dos elementos de um array, mesmo que contenham duplicatas. Também entenderemos como usar métodos de Array como map() e reduce() para combinar as diferentes permutações em um único array. No entanto, devemos ter em mente que executar esta função em arrays com mais de 8 a 10 elementos pode aumentar significativamente o tempo de execução e fazer com que o navegador congele.",
      "meta": {
        "title": "Permutações de Arrays | Tutorial de Codificação JavaScript",
        "description": "Explore as permutações de arrays em JavaScript com este tutorial de codificação abrangente. Aprenda recursão, métodos de Array e otimize o desempenho para arrays grandes.",
        "keywords": "permutações de array, javascript, recursão, métodos de array, tutorial de codificação, otimização de desempenho"
      },
      "details": {
        "steps": [
          {
            "title": "Permutações de Arrays",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar Comandos Node Executados",
                "file": "verify1-1.sh",
                "hint": "JavaScript pode ser executado no Terminal/SSH digitando 'node' e pressionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
