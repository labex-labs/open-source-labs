{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Recursive Array Permutations in JavaScript",
  "description": "In this lab, we will explore the concept of array permutations in JavaScript. We will learn how to use recursion to generate all possible permutations of an array's elements, even if they contain duplicates. We will also understand how to use Array methods such as map() and reduce() to combine the different permutations into a single array. However, we must keep in mind that executing this function on arrays with more than 8 to 10 elements may significantly increase the execution time and cause the browser to hang.",
  "meta": {
    "title": "Array Permutations | JavaScript Coding Tutorial",
    "description": "Explore array permutations in JavaScript with this comprehensive coding tutorial. Learn recursion, Array methods, and optimize performance for large arrays.",
    "keywords": "array permutations, javascript, recursion, array methods, coding tutorial, performance optimization"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Array Permutations",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands Executed",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/array_methods",
          "javascript/comp_ops",
          "javascript/cond_stmts",
          "javascript/data_types",
          "javascript/higher_funcs",
          "javascript/obj_manip",
          "javascript/spread_rest",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "JavaScript 中的递归数组排列",
      "description": "在本实验中，我们将探讨 JavaScript 中数组排列的概念。我们将学习如何使用递归生成数组元素的所有可能排列，即使它们包含重复项。我们还将了解如何使用诸如 map() 和 reduce() 之类的数组方法将不同的排列组合成一个数组。但是，我们必须记住，在包含超过 8 到 10 个元素的数组上执行此函数可能会显著增加执行时间并导致浏览器挂起。",
      "meta": {
        "title": "数组排列 | JavaScript 编码教程",
        "description": "通过本全面的编码教程探索 JavaScript 中的数组排列。学习递归、数组方法，并针对大型数组优化性能。",
        "keywords": "数组排列, JavaScript, 递归, 数组方法, 编码教程, 性能优化"
      },
      "details": {
        "steps": [
          {
            "title": "数组排列",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证已执行的 Node 命令",
                "file": "verify1-1.sh",
                "hint": "通过在终端/SSH 中输入 'node' 并按回车键，可以运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
