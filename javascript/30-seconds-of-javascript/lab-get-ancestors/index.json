{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Get Element Ancestors",
  "description": "In this lab, we will be exploring how to use JavaScript to retrieve all the ancestors of an element from the document root to the given element. This will involve using Node.parentNode and a while loop to navigate up the ancestor tree and Array.prototype.unshift() to add each new ancestor to the start of an array. By the end of the lab, you should have a solid understanding of how to retrieve element ancestors using JavaScript.",
  "meta": {
    "title": "Mastering Element Ancestry in JavaScript",
    "description": "Explore how to retrieve all the ancestors of an element using JavaScript.",
    "keywords": "javascript, javascript practice, javascript practice online, dom, javascript lab, unshift, javascript tutor, parentnode, element ancestry"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Get Element Ancestors",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands In Zsh History",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/bom",
          "javascript/comp_ops",
          "javascript/data_types",
          "javascript/dom_select",
          "javascript/dom_traverse",
          "javascript/loops",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "获取元素的祖先元素",
      "description": "在本实验中，我们将探索如何使用 JavaScript 从文档根节点到给定元素检索该元素的所有祖先元素。这将涉及使用 Node.parentNode 和 while 循环向上遍历祖先树，并使用 Array.prototype.unshift() 将每个新的祖先元素添加到数组的开头。在本实验结束时，你应该对如何使用 JavaScript 检索元素的祖先元素有扎实的理解。",
      "meta": {
        "title": "精通 JavaScript 中的元素祖先关系",
        "description": "探索如何使用 JavaScript 检索元素的所有祖先元素。",
        "keywords": "JavaScript, JavaScript 练习，在线 JavaScript 练习，DOM, JavaScript 实验，unshift, JavaScript 教程，parentNode, 元素祖先关系"
      },
      "details": {
        "steps": [
          {
            "title": "获取元素的祖先元素",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "在 Zsh 历史记录中验证节点命令",
                "file": "verify1-1.sh",
                "hint": "通过输入'node'并按 Enter 键，可以在终端/ SSH 中运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Recuperar los ancestros de un elemento",
      "description": "En este laboratorio, exploraremos cómo usar JavaScript para recuperar todos los ancestros de un elemento desde la raíz del documento hasta el elemento dado. Esto implicará usar Node.parentNode y un bucle while para navegar hacia arriba en el árbol de ancestros y Array.prototype.unshift() para agregar cada nuevo ancestro al principio de un array. Al final del laboratorio, deberías tener una comprensión sólida de cómo recuperar los ancestros de un elemento usando JavaScript.",
      "meta": {
        "title": "Dominando la ascendencia de elementos en JavaScript",
        "description": "Explora cómo recuperar todos los ancestros de un elemento usando JavaScript.",
        "keywords": "javascript, práctica de javascript, práctica de javascript en línea, dom, laboratorio de javascript, unshift, tutor de javascript, parentnode, ascendencia de elementos"
      },
      "details": {
        "steps": [
          {
            "title": "Recuperar los ancestros de un elemento",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar los comandos de Node en el historial de Zsh",
                "file": "verify1-1.sh",
                "hint": "JavaScript se puede ejecutar en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Récupérer les ancêtres d'un élément",
      "description": "Dans ce laboratoire, nous allons explorer la manière d'utiliser JavaScript pour récupérer tous les ancêtres d'un élément depuis la racine du document jusqu'à l'élément donné. Cela impliquera l'utilisation de Node.parentNode et d'une boucle while pour naviguer dans l'arbre d'ancêtres et Array.prototype.unshift() pour ajouter chaque nouvel ancêtre au début d'un tableau. À la fin du laboratoire, vous devriez avoir une compréhension solide de la manière de récupérer les ancêtres d'éléments à l'aide de JavaScript.",
      "meta": {
        "title": "Maîtriser l'ascendance d'éléments en JavaScript",
        "description": "Explorez la manière de récupérer tous les ancêtres d'un élément à l'aide de JavaScript.",
        "keywords": "javascript, pratique javascript, pratique javascript en ligne, dom, laboratoire javascript, unshift, tuteur javascript, parentnode, ascendance d'éléments"
      },
      "details": {
        "steps": [
          {
            "title": "Récupérer les ancêtres d'un élément",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier les commandes Node dans l'historique Zsh",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Elementvorgänger abrufen",
      "description": "In diesem Lab werden wir untersuchen, wie man mit JavaScript alle Vorfahren eines Elements von der Dokumentenwurzel bis zum angegebenen Element abruft. Dazu wird Node.parentNode und eine while-Schleife verwendet werden, um den Vorfahrenbaum hinauf zu navigieren, und Array.prototype.unshift() wird verwendet, um jeden neuen Vorfahren am Anfang eines Arrays hinzuzufügen. Am Ende des Labs sollten Sie eine solide Vorstellung davon haben, wie man Elementvorgänger mit JavaScript abruft.",
      "meta": {
        "title": "Das Erlernen der Elementvorgeschichte in JavaScript",
        "description": "Entdecken Sie, wie man alle Vorfahren eines Elements mit JavaScript abruft.",
        "keywords": "javascript, javascript Übung, online javascript Übung, dom, javascript Lab, unshift, javascript Tutor, parentnode, Elementvorgeschichte"
      },
      "details": {
        "steps": [
          {
            "title": "Elementvorgänger abrufen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen von Node-Befehlen in der Zsh-Historie",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Enter-Taste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "要素の祖先を取得する",
      "description": "この実験では、JavaScript を使ってドキュメントルートから指定された要素までの要素のすべての祖先を取得する方法を探ります。これには、Node.parentNode と while ループを使って祖先ツリーを辿り、Array.prototype.unshift() を使って各新しい祖先を配列の先頭に追加する必要があります。実験が終了するまでに、JavaScript を使って要素の祖先を取得する方法を十分に理解しているはずです。",
      "meta": {
        "title": "JavaScript における要素の祖先のマスター",
        "description": "JavaScript を使って要素のすべての祖先を取得する方法を探る。",
        "keywords": "javascript, javascript 練習，オンラインでの javascript 練習，dom, javascript 実験，unshift, javascript 講師，parentnode, 要素の祖先"
      },
      "details": {
        "steps": [
          {
            "title": "要素の祖先を取得する",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Zsh 履歴における Node コマンドを確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で'node'と入力して Enter キーを押すことで JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Получение предков элемента",
      "description": "В этом практическом занятии мы изучим, как использовать JavaScript для получения всех предков элемента от корня документа до данного элемента. Для этого потребуется использовать Node.parentNode и цикл while для перемещения по дереву предков, а также Array.prototype.unshift(), чтобы добавить каждого нового предка в начало массива. В конце практического занятия вы должны хорошо понять, как получать предков элемента с использованием JavaScript.",
      "meta": {
        "title": "Мастерство в определении предков элемента в JavaScript",
        "description": "Изучите, как получить всех предков элемента с использованием JavaScript.",
        "keywords": "javascript, практика javascript, онлайн-практика javascript, dom, практическое занятие javascript, unshift, преподаватель javascript, parentnode, предки элемента"
      },
      "details": {
        "steps": [
          {
            "title": "Получение предков элемента",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить команды Node в истории Zsh",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "요소 조상 가져오기",
      "description": "이 랩에서는 JavaScript 를 사용하여 문서 루트에서 주어진 요소까지의 모든 요소 조상을 검색하는 방법을 살펴봅니다. Node.parentNode 와 while 루프를 사용하여 조상 트리를 탐색하고 Array.prototype.unshift() 를 사용하여 각 새로운 조상을 배열의 시작 부분에 추가하는 방법을 배우게 됩니다. 랩이 끝나면 JavaScript 를 사용하여 요소 조상을 검색하는 방법에 대한 확실한 이해를 갖게 될 것입니다.",
      "meta": {
        "title": "JavaScript 에서 요소 조상 관계 마스터하기",
        "description": "JavaScript 를 사용하여 요소의 모든 조상을 검색하는 방법을 알아보세요.",
        "keywords": "javascript, javascript 연습, javascript 온라인 연습, DOM, javascript 랩, unshift, javascript 튜터, parentnode, 요소 조상, 자바스크립트, 자바스크립트 연습 문제, DOM 조작"
      },
      "details": {
        "steps": [
          {
            "title": "요소 조상 가져오기",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "Zsh 히스토리에서 Node 명령어 확인",
                "file": "verify1-1.sh",
                "hint": "'node'를 입력하고 Enter 키를 눌러 터미널/SSH 에서 JavaScript 를 실행할 수 있습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Obter Ancestrais de Elementos",
      "description": "Neste laboratório, exploraremos como usar JavaScript para recuperar todos os ancestrais de um elemento, desde a raiz do documento até o elemento fornecido. Isso envolverá o uso de Node.parentNode e um loop while para navegar na árvore de ancestrais e Array.prototype.unshift() para adicionar cada novo ancestral ao início de um array. Ao final do laboratório, você deverá ter uma sólida compreensão de como recuperar ancestrais de elementos usando JavaScript.",
      "meta": {
        "title": "Dominando a Ancestralidade de Elementos em JavaScript",
        "description": "Explore como recuperar todos os ancestrais de um elemento usando JavaScript. Aprenda a usar Node.parentNode e unshift para navegar na DOM.",
        "keywords": "javascript, prática javascript, exercícios javascript, DOM, laboratório javascript, unshift, tutorial javascript, parentnode, ancestralidade de elementos, árvore DOM"
      },
      "details": {
        "steps": [
          {
            "title": "Obter Ancestrais de Elementos",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar Comandos Node no Histórico Zsh",
                "file": "verify1-1.sh",
                "hint": "JavaScript pode ser executado no Terminal/SSH digitando 'node' e pressionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
