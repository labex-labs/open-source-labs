{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Initialize Array with Range",
  "description": "In this lab, we will explore the implementation of a function called initializeArrayWithRange in JavaScript. This function initializes an array containing the numbers in a specified range, with the option to include a step value. We will learn how to use Array.from(), the map() function, and default parameter values to create a flexible and reusable function for generating arrays with a range of values.",
  "meta": {
    "title": "Initializing Arrays with Ranges in JavaScript",
    "description": "Learn how to create flexible and reusable functions for generating arrays with a range of values in JavaScript.",
    "keywords": "javascript, javascript practice, initialization, javascript practice online, javascript lab, range, javascript tutor, array, programming"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": true,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Initialize Array with Range",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Command Usage",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/comp_ops",
          "javascript/data_types",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用范围初始化数组",
      "description": "在本实验中，我们将探索如何在 JavaScript 中实现一个名为 initializeArrayWithRange 的函数。该函数用于初始化一个包含指定范围内数字的数组，并可选择包含步长值。我们将学习如何使用 Array.from()、map() 函数和默认参数值来创建一个灵活且可复用的函数，用于生成具有一系列值的数组。",
      "meta": {
        "title": "在 JavaScript 中使用范围初始化数组",
        "description": "学习如何在 JavaScript 中创建灵活且可复用的函数，以生成具有一系列值的数组。",
        "keywords": "JavaScript, JavaScript 实践，初始化，在线 JavaScript 实践，JavaScript 实验，范围，JavaScript 教程，数组，编程"
      },
      "details": {
        "steps": [
          {
            "title": "使用范围初始化数组",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Node 命令用法",
                "file": "verify1-1.sh",
                "hint": "在终端/SSH 中，可以通过输入'node'并按回车键来运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Inicializar Array con Rango",
      "description": "En este laboratorio, exploraremos la implementación de una función llamada initializeArrayWithRange en JavaScript. Esta función inicializa un array que contiene los números en un rango especificado, con la opción de incluir un valor de paso. Aprenderemos cómo utilizar Array.from(), la función map() y los valores predeterminados de los parámetros para crear una función flexible y reutilizable para generar arrays con un rango de valores.",
      "meta": {
        "title": "Inicializando Arrays con Rangos en JavaScript",
        "description": "Aprende cómo crear funciones flexibles y reutilizables para generar arrays con un rango de valores en JavaScript.",
        "keywords": "javascript, práctica de javascript, inicialización, práctica de javascript en línea, laboratorio de javascript, rango, tutor de javascript, array, programación"
      },
      "details": {
        "steps": [
          {
            "title": "Inicializar Array con Rango",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el uso del comando Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript se puede ejecutar en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Initialiser un tableau avec une plage",
      "description": "Dans ce laboratoire, nous allons explorer l'implémentation d'une fonction appelée initializeArrayWithRange en JavaScript. Cette fonction initialise un tableau contenant les nombres dans une plage spécifiée, avec l'option d'inclure une valeur d'incrément. Nous allons apprendre à utiliser Array.from(), la fonction map() et les valeurs de paramètre par défaut pour créer une fonction flexible et réutilisable pour générer des tableaux avec une plage de valeurs.",
      "meta": {
        "title": "Initialiser des tableaux avec des plages en JavaScript",
        "description": "Apprenez à créer des fonctions flexibles et réutilisables pour générer des tableaux avec une plage de valeurs en JavaScript.",
        "keywords": "javascript, pratique javascript, initialisation, pratique javascript en ligne, laboratoire javascript, plage, tuteur javascript, tableau, programmation"
      },
      "details": {
        "steps": [
          {
            "title": "Initialiser un tableau avec une plage",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier l'utilisation de la commande Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Array mit Bereich initialisieren",
      "description": "In diesem Lab werden wir die Implementierung einer Funktion namens initializeArrayWithRange in JavaScript untersuchen. Diese Funktion initialisiert ein Array, das die Zahlen in einem bestimmten Bereich enthält, mit der Option, einen Schrittwert hinzuzufügen. Wir werden lernen, wie man Array.from(), die map()-Funktion und Standardparameterwerte verwendet, um eine flexible und wiederverwendbare Funktion zum Erzeugen von Arrays mit einem Bereich von Werten zu erstellen.",
      "meta": {
        "title": "Arrays mit Bereichen in JavaScript initialisieren",
        "description": "Lernen Sie, wie Sie flexible und wiederverwendbare Funktionen zum Erzeugen von Arrays mit einem Bereich von Werten in JavaScript erstellen.",
        "keywords": "javascript, javascript Übung, Initialisierung, Online-JavaScript-Übung, JavaScript-Lab, Bereich, JavaScript-Tutor, Array, Programmierung"
      },
      "details": {
        "steps": [
          {
            "title": "Array mit Bereich initialisieren",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen der Verwendung des Node-Befehls",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Eingabetaste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "範囲で配列を初期化する",
      "description": "この実験では、JavaScript における initializeArrayWithRange と呼ばれる関数の実装を検討します。この関数は、指定された範囲の数値を含む配列を初期化し、ステップ値を含めるオプションがあります。Array.from()、map() 関数、およびデフォルトパラメータ値を使用して、値の範囲を持つ配列を生成するための柔軟で再利用可能な関数を作成する方法を学びます。",
      "meta": {
        "title": "JavaScript における範囲で配列を初期化する",
        "description": "JavaScript で値の範囲を持つ配列を生成するための柔軟で再利用可能な関数を作成する方法を学ぶ。",
        "keywords": "javascript, javascript 練習，初期化，オンライン javascript 練習，javascript 実験，範囲，javascript チューター, 配列，プログラミング"
      },
      "details": {
        "steps": [
          {
            "title": "範囲で配列を初期化する",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Node コマンドの使用を確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で'node'と入力して Enter キーを押すことで、JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Инициализация массива с диапазоном",
      "description": "В этом практическом занятии мы изучим реализацию функции initializeArrayWithRange на JavaScript. Эта функция инициализирует массив, содержащий числа в заданном диапазоне, с возможностью указания значения шага. Мы узнаем, как использовать Array.from(), функцию map() и значения параметров по умолчанию для создания гибкой и повторно используемой функции для генерации массивов с диапазоном значений.",
      "meta": {
        "title": "Инициализация массивов с диапазонами в JavaScript",
        "description": "Изучите, как создавать гибкие и повторно используемые функции для генерации массивов с диапазоном значений в JavaScript.",
        "keywords": "javascript, практика javascript, инициализация, онлайн практика javascript, практическое занятие javascript, диапазон, javascript-руководитель, массив, программирование"
      },
      "details": {
        "steps": [
          {
            "title": "Инициализация массива с диапазоном",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить использование команды Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "범위로 배열 초기화",
      "description": "이 랩에서는 JavaScript 에서 `initializeArrayWithRange` 라는 함수의 구현을 살펴봅니다. 이 함수는 지정된 범위 내의 숫자를 포함하는 배열을 초기화하며, 단계 값 (step value) 을 포함하는 옵션도 제공합니다. `Array.from()`, `map()` 함수, 그리고 기본 매개변수 값을 사용하여 다양한 값 범위를 가진 배열을 생성하기 위한 유연하고 재사용 가능한 함수를 만드는 방법을 배웁니다.",
      "meta": {
        "title": "JavaScript 에서 범위로 배열 초기화하는 방법",
        "description": "JavaScript 에서 다양한 값 범위를 가진 배열을 생성하기 위한 유연하고 재사용 가능한 함수를 만드는 방법을 알아보세요.",
        "keywords": "자바스크립트, 자바스크립트 연습, 초기화, 자바스크립트 온라인 연습, 자바스크립트 랩, 범위, 자바스크립트 튜터, 배열, 프로그래밍"
      },
      "details": {
        "steps": [
          {
            "title": "범위로 배열 초기화",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "Node 명령어 사용 확인",
                "file": "verify1-1.sh",
                "hint": "터미널/SSH 에서 'node'를 입력하고 Enter 키를 눌러 JavaScript 를 실행할 수 있습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Inicializar Array com Intervalo",
      "description": "Neste laboratório, exploraremos a implementação de uma função chamada initializeArrayWithRange em JavaScript. Esta função inicializa um array contendo os números em um intervalo especificado, com a opção de incluir um valor de passo (step). Aprenderemos como usar Array.from(), a função map(), e valores de parâmetros padrão para criar uma função flexível e reutilizável para gerar arrays com um intervalo de valores.",
      "meta": {
        "title": "Inicializando Arrays com Intervalos em JavaScript - Guia Prático",
        "description": "Aprenda a criar funções flexíveis e reutilizáveis para gerar arrays com um intervalo de valores em JavaScript. Melhore suas habilidades de programação com este tutorial prático.",
        "keywords": "javascript, prática javascript, inicialização, exercícios javascript online, laboratório javascript, intervalo, tutorial javascript, array, programação, desenvolvimento web"
      },
      "details": {
        "steps": [
          {
            "title": "Inicializar Array com Intervalo",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar Uso do Comando Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript pode ser executado no Terminal/SSH digitando 'node' e pressionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
