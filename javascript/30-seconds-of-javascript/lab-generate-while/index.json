{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Generate While Condition Is Met",
  "description": "In this lab, we will explore how to create a generator function in JavaScript that produces new values while a given condition is met. We will use the generateWhile function which takes in a seed value, a condition function, and a next function to calculate the next value from the current value and the next seed. By the end of this lab, you will be able to create custom generators that can be used to produce values based on specific conditions and rules.",
  "meta": {
    "title": "Generating Values While a Condition is Met",
    "description": "Learn how to create a custom generator function in JavaScript that produces new values as long as a given condition is true.",
    "keywords": "javascript, javascript practice, while loop, javascript practice online, javascript lab, yield, javascript tutor, condition, generator"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": true,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Generate While Condition Is Met",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Command Usage",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/data_types",
          "javascript/loops",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "当条件满足时生成",
      "description": "在本实验中，我们将探索如何在 JavaScript 中创建一个生成器函数，该函数在满足给定条件时生成新值。我们将使用 generateWhile 函数，该函数接受一个种子值、一个条件函数和一个 next 函数，以便根据当前值和下一个种子计算下一个值。在本实验结束时，你将能够创建自定义生成器，可用于根据特定条件和规则生成值。",
      "meta": {
        "title": "当条件满足时生成值",
        "description": "学习如何在 JavaScript 中创建一个自定义生成器函数，只要给定条件为真，该函数就会生成新值。",
        "keywords": "JavaScript, JavaScript 实践，while 循环，在线 JavaScript 实践，JavaScript 实验，yield, JavaScript 教程，条件，生成器"
      },
      "details": {
        "steps": [
          {
            "title": "当条件满足时生成",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Node 命令的用法",
                "file": "verify1-1.sh",
                "hint": "在终端/SSH 中，通过输入'node'并按回车键可以运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Generar Mientras se Cumpla la Condición",
      "description": "En este laboratorio, exploraremos cómo crear una función generadora en JavaScript que produzca nuevos valores mientras se cumpla una condición dada. Utilizaremos la función generateWhile que toma un valor semilla, una función de condición y una función siguiente para calcular el siguiente valor a partir del valor actual y la siguiente semilla. Al final de este laboratorio, serás capaz de crear generadores personalizados que se pueden utilizar para producir valores basados en condiciones y reglas específicas.",
      "meta": {
        "title": "Generando Valores Mientras una Condición es Verdadera",
        "description": "Aprende cómo crear una función generadora personalizada en JavaScript que produzca nuevos valores siempre que una condición dada sea verdadera.",
        "keywords": "javascript, práctica de javascript, bucle while, práctica de javascript en línea, laboratorio de javascript, yield, tutor de javascript, condición, generador"
      },
      "details": {
        "steps": [
          {
            "title": "Generar Mientras se Cumpla la Condición",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el Uso del Comando Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript se puede ejecutar en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Générer tant que la condition est satisfaite",
      "description": "Dans ce laboratoire, nous allons explorer la manière de créer une fonction génératrice en JavaScript qui produit de nouvelles valeurs tant qu'une condition donnée est satisfaite. Nous utiliserons la fonction generateWhile qui prend une valeur initiale, une fonction de condition et une fonction next pour calculer la valeur suivante à partir de la valeur actuelle et de la prochaine valeur initiale. À la fin de ce laboratoire, vous serez capable de créer des générateurs personnalisés qui peuvent être utilisés pour produire des valeurs en fonction de conditions et de règles spécifiques.",
      "meta": {
        "title": "Générer des valeurs tant qu'une condition est satisfaite",
        "description": "Découvrez comment créer une fonction génératrice personnalisée en JavaScript qui produit de nouvelles valeurs tant qu'une condition donnée est vraie.",
        "keywords": "javascript, pratique javascript, boucle while, pratique javascript en ligne, laboratoire javascript, yield, tuteur javascript, condition, générateur"
      },
      "details": {
        "steps": [
          {
            "title": "Générer tant que la condition est satisfaite",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier l'utilisation de la commande Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Werte generieren, solange eine Bedingung erfüllt ist",
      "description": "In diesem Lab werden wir untersuchen, wie man in JavaScript eine Generatorfunktion erstellt, die neue Werte produziert, solange eine gegebene Bedingung erfüllt ist. Wir werden die generateWhile-Funktion verwenden, die einen Startwert, eine Bedingungsfunktion und eine next-Funktion erhält, um den nächsten Wert aus dem aktuellen Wert und dem nächsten Startwert zu berechnen. Am Ende dieses Labs werden Sie in der Lage sein, benutzerdefinierte Generatoren zu erstellen, die verwendet werden können, um Werte basierend auf bestimmten Bedingungen und Regeln zu erzeugen.",
      "meta": {
        "title": "Werte generieren, solange eine Bedingung erfüllt ist",
        "description": "Lernen Sie, wie man in JavaScript eine benutzerdefinierte Generatorfunktion erstellt, die solange neue Werte produziert, wie eine gegebene Bedingung wahr ist.",
        "keywords": "javascript, javascript Übung, while-Schleife, Online-JavaScript-Übung, JavaScript-Lab, yield, JavaScript-Tutor, Bedingung, Generator"
      },
      "details": {
        "steps": [
          {
            "title": "Werte generieren, solange eine Bedingung erfüllt ist",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen der Verwendung des Node-Befehls",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Enter-Taste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "条件が満たされる間に生成する",
      "description": "この実験では、JavaScript において特定の条件が満たされている間に新しい値を生成するジェネレータ関数を作成する方法を探ります。`generateWhile` 関数を使用して、シード値、条件関数、および次の値を計算するための次の関数を受け取ります。この実験が終了すると、特定の条件とルールに基づいて値を生成するために使用できるカスタムジェネレータを作成できるようになります。",
      "meta": {
        "title": "条件が満たされる間の値の生成",
        "description": "与えられた条件が真の間、新しい値を生成する JavaScript のカスタムジェネレータ関数を作成する方法を学びましょう。",
        "keywords": "javascript, javascript 練習，while ループ，オンライン javascript 練習，javascript 実験，yield, javascript チューター, 条件，ジェネレータ"
      },
      "details": {
        "steps": [
          {
            "title": "条件が満たされる間に生成する",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Node コマンドの使用を確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で 'node' と入力して Enter キーを押すことで、JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Генерация при выполнении условия",
      "description": "В этом практическом занятии мы изучим, как создать генераторную функцию на JavaScript, которая генерирует новые значения, пока выполняется заданное условие. Мы будем использовать функцию generateWhile, которая принимает начальное значение, функцию условия и функцию next, чтобы вычислить следующее значение из текущего значения и следующего начального значения. В конце этого практического занятия вы сможете создать пользовательские генераторы, которые можно использовать для генерации значений в соответствии с конкретными условиями и правилами.",
      "meta": {
        "title": "Генерация значений при выполнении условия",
        "description": "Изучите, как создать пользовательскую генераторную функцию на JavaScript, которая генерирует новые значения, пока заданное условие истинно.",
        "keywords": "javascript, практика javascript, цикл while, онлайн практика javascript, практическое занятие javascript, yield, преподаватель javascript, условие, генератор"
      },
      "details": {
        "steps": [
          {
            "title": "Генерация при выполнении условия",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить использование команды Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "조건 충족 시 값 생성",
      "description": "이 랩에서는 주어진 조건이 충족되는 동안 새로운 값을 생성하는 JavaScript 제너레이터 함수를 만드는 방법을 살펴봅니다. 시드 값, 조건 함수, 다음 함수를 입력으로 받아 현재 값과 다음 시드로부터 다음 값을 계산하는 generateWhile 함수를 사용합니다. 이 랩을 마치면 특정 조건과 규칙에 따라 값을 생성하는 사용자 정의 제너레이터를 만들 수 있습니다.",
      "meta": {
        "title": "조건이 충족되는 동안 값 생성 방법 배우기 - JavaScript 튜토리얼",
        "description": "주어진 조건이 참인 동안 새로운 값을 생성하는 사용자 정의 JavaScript 제너레이터 함수를 만드는 방법을 알아보세요.",
        "keywords": "자바스크립트, 자바스크립트 연습, while 루프, 자바스크립트 온라인 연습, 자바스크립트 랩, yield, 자바스크립트 튜터, 조건, 제너레이터, JavaScript 튜토리얼"
      },
      "details": {
        "steps": [
          {
            "title": "조건 충족 시 값 생성",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "Node 명령어 사용 확인",
                "file": "verify1-1.sh",
                "hint": "터미널/SSH 에서 'node'를 입력하고 Enter 키를 눌러 JavaScript 를 실행할 수 있습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Gerar Enquanto a Condição for Atendida",
      "description": "Neste laboratório, exploraremos como criar uma função geradora em JavaScript que produz novos valores enquanto uma determinada condição for atendida. Usaremos a função `generateWhile`, que recebe um valor inicial (`seed`), uma função de condição e uma função `next` para calcular o próximo valor a partir do valor atual e do próximo `seed`. Ao final deste laboratório, você será capaz de criar geradores personalizados que podem ser usados para produzir valores com base em condições e regras específicas.",
      "meta": {
        "title": "Gerando Valores Enquanto uma Condição é Atendida - JavaScript",
        "description": "Aprenda a criar uma função geradora personalizada em JavaScript que produz novos valores enquanto uma determinada condição for verdadeira. Domine loops `while` e geradores em JavaScript.",
        "keywords": "javascript, prática javascript, loop while, exercícios javascript online, laboratório javascript, yield, tutorial javascript, condição, gerador, geradores javascript"
      },
      "details": {
        "steps": [
          {
            "title": "Gerar Enquanto a Condição for Atendida",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar Uso do Comando Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript pode ser executado no Terminal/SSH digitando 'node' e pressionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
