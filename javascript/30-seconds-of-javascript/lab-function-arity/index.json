{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Limiting Function Arguments in JavaScript",
  "description": "In this lab, we will explore the Function Arity concept in JavaScript. The purpose of this lab is to create a higher-order function that accepts a function and a number n as arguments and returns a new function that only accepts up to n arguments, ignoring any additional ones. This will help us understand how to limit the number of arguments passed to a function in JavaScript.",
  "meta": {
    "title": "JavaScript Function Arity | Limit Arguments",
    "description": "Explore the Function Arity concept in JavaScript. Create a higher-order function to limit the number of arguments accepted by any function.",
    "keywords": "JavaScript, Function Arity, Higher-Order Function, Limit Arguments"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": true,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Function Arity",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Command Usage",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/comp_ops",
          "javascript/data_types",
          "javascript/higher_funcs",
          "javascript/spread_rest",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "在 JavaScript 中限制函数参数",
      "description": "在本实验中，我们将探索 JavaScript 中的函数元数概念。本实验的目的是创建一个高阶函数，该函数接受一个函数和一个数字 n 作为参数，并返回一个新函数，该新函数最多只接受 n 个参数，忽略任何额外的参数。这将帮助我们理解如何在 JavaScript 中限制传递给函数的参数数量。",
      "meta": {
        "title": "JavaScript 函数元数 | 限制参数",
        "description": "探索 JavaScript 中的函数元数概念。创建一个高阶函数以限制任何函数接受的参数数量。",
        "keywords": "JavaScript, 函数元数，高阶函数，限制参数"
      },
      "details": {
        "steps": [
          {
            "title": "函数元数",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Node 命令的用法",
                "file": "verify1-1.sh",
                "hint": "在终端/SSH 中，通过输入'node'并按回车键可以运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Limitar los argumentos de una función en JavaScript",
      "description": "En este laboratorio, exploraremos el concepto de Function Arity en JavaScript. El propósito de este laboratorio es crear una función de orden superior que acepte una función y un número n como argumentos y devuelva una nueva función que solo acepte hasta n argumentos, ignorando cualquiera adicional. Esto nos ayudará a entender cómo limitar el número de argumentos pasados a una función en JavaScript.",
      "meta": {
        "title": "Función Arity en JavaScript | Limitar argumentos",
        "description": "Explore el concepto de Function Arity en JavaScript. Cree una función de orden superior para limitar el número de argumentos aceptados por cualquier función.",
        "keywords": "JavaScript, Function Arity, Función de orden superior, Limitar argumentos"
      },
      "details": {
        "steps": [
          {
            "title": "Función Aridad",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el uso del comando Node",
                "file": "verify1-1.sh",
                "hint": "Se puede ejecutar JavaScript en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Limiter les arguments des fonctions en JavaScript",
      "description": "Dans ce laboratoire, nous allons explorer le concept d'arité de fonction en JavaScript. Le but de ce laboratoire est de créer une fonction de haut niveau qui accepte une fonction et un nombre n en arguments et renvoie une nouvelle fonction qui ne prend en compte que jusqu'à n arguments, en ignorant les autres. Cela nous aidera à comprendre comment limiter le nombre d'arguments passés à une fonction en JavaScript.",
      "meta": {
        "title": "Arité des fonctions JavaScript | Limiter les arguments",
        "description": "Explorez le concept d'arité de fonction en JavaScript. Créez une fonction de haut niveau pour limiter le nombre d'arguments acceptés par n'importe quelle fonction.",
        "keywords": "JavaScript, Arité des fonctions, Fonction de haut niveau, Limiter les arguments"
      },
      "details": {
        "steps": [
          {
            "title": "Arité des fonctions",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier l'utilisation de la commande Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Das Begrenzen von Funktionsargumenten in JavaScript",
      "description": "In diesem Lab werden wir das Konzept der Function Arity in JavaScript erkunden. Ziel dieses Labs ist es, eine Higher-Order-Funktion zu erstellen, die eine Funktion und eine Zahl n als Argumente akzeptiert und eine neue Funktion zurückgibt, die nur bis zu n Argumente akzeptiert und alle weiteren ignoriert. Dies wird uns helfen, zu verstehen, wie man die Anzahl der an eine Funktion übergebenen Argumente in JavaScript begrenzen kann.",
      "meta": {
        "title": "JavaScript Function Arity | Argumente begrenzen",
        "description": "Erkunden Sie das Konzept der Function Arity in JavaScript. Erstellen Sie eine Higher-Order-Funktion, um die Anzahl der von einer beliebigen Funktion akzeptierten Argumente zu begrenzen.",
        "keywords": "JavaScript, Function Arity, Higher-Order-Funktion, Argumente begrenzen"
      },
      "details": {
        "steps": [
          {
            "title": "Function Arity",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren der Verwendung des Node-Befehls",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Enter-Taste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "JavaScript における関数の引数の制限",
      "description": "この実験では、JavaScript の関数の引数の数 (Function Arity) の概念を探ります。この実験の目的は、関数と数 n を引数として受け取り、追加の引数は無視して最大 n 個の引数のみを受け取る新しい関数を返す高階関数を作成することです。これにより、JavaScript で関数に渡される引数の数を制限する方法を理解する手助けになります。",
      "meta": {
        "title": "JavaScript の関数の引数の数 | 引数を制限する",
        "description": "JavaScript の関数の引数の数 (Function Arity) の概念を探ります。任意の関数が受け取る引数の数を制限するための高階関数を作成します。",
        "keywords": "JavaScript, 関数の引数の数，高階関数，引数を制限する"
      },
      "details": {
        "steps": [
          {
            "title": "関数の引数の数",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Node コマンドの使用を確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で 'node' と入力して Enter キーを押すことで、JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Ограничение аргументов функций в JavaScript",
      "description": "В этом лабе мы будем исследовать концепцию Function Arity в JavaScript. Цель этого лабара — создать высший порядок функцию, которая принимает функцию и число n в качестве аргументов и возвращает новую функцию, которая принимает не более n аргументов, игнорируя любые дополнительные. Это поможет нам понять, как ограничить количество аргументов, передаваемых в функцию в JavaScript.",
      "meta": {
        "title": "Function Arity в JavaScript | Ограничение аргументов",
        "description": "Исследуйте концепцию Function Arity в JavaScript. Создайте высший порядок функцию, чтобы ограничить количество аргументов, принимаемых любой функцией.",
        "keywords": "JavaScript, Function Arity, Высший порядок функция, Ограничение аргументов"
      },
      "details": {
        "steps": [
          {
            "title": "Function Arity",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить использование команды Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "JavaScript 함수 인자 제한하기",
      "description": "이 랩에서는 JavaScript 의 Function Arity 개념을 탐구합니다. 이 랩의 목적은 함수와 숫자 n 을 인수로 받아 최대 n 개의 인수만 허용하고 추가 인수는 무시하는 새로운 함수를 반환하는 고차 함수를 만드는 것입니다. 이를 통해 JavaScript 에서 함수에 전달되는 인수의 수를 제한하는 방법을 이해할 수 있습니다.",
      "meta": {
        "title": "JavaScript Function Arity | 인자 제한 방법",
        "description": "JavaScript 에서 Function Arity 개념을 탐구하고, 모든 함수가 허용하는 인수의 수를 제한하는 고차 함수를 만들어 보세요.",
        "keywords": "JavaScript, Function Arity, 고차 함수 (Higher-Order Function), 인자 제한, 함수 인자"
      },
      "details": {
        "steps": [
          {
            "title": "Function Arity",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "Node 명령어 사용 확인",
                "file": "verify1-1.sh",
                "hint": "터미널/SSH 에서 'node'를 입력하고 Enter 키를 눌러 JavaScript 를 실행할 수 있습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Limitando Argumentos de Funções em JavaScript",
      "description": "Neste laboratório, exploraremos o conceito de Aridade de Função em JavaScript. O objetivo deste laboratório é criar uma função de ordem superior que aceita uma função e um número n como argumentos e retorna uma nova função que aceita apenas até n argumentos, ignorando quaisquer argumentos adicionais. Isso nos ajudará a entender como limitar o número de argumentos passados para uma função em JavaScript.",
      "meta": {
        "title": "Aridade de Função JavaScript | Limitar Argumentos",
        "description": "Explore o conceito de Aridade de Função em JavaScript. Crie uma função de ordem superior para limitar o número de argumentos aceitos por qualquer função.",
        "keywords": "JavaScript, Aridade de Função, Função de Ordem Superior, Limitar Argumentos"
      },
      "details": {
        "steps": [
          {
            "title": "Aridade da Função",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar Uso do Comando Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript pode ser executado no Terminal/SSH digitando 'node' e pressionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
