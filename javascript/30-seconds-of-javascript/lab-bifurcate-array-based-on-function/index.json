{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Bifurcate Array Based on Function",
  "description": "In this lab, we will explore how to bifurcate an array based on a given filtering function in JavaScript. We will use the Array.prototype.reduce() method and the Array.prototype.push() method to split the values of the array into two groups based on whether the filtering function returns a truthy value or not. This lab is designed to enhance your understanding of higher-order functions and array manipulation in JavaScript.",
  "meta": {
    "title": "JavaScript Array Bifurcation | Higher-Order Functions",
    "description": "Learn how to split an array into two groups based on a filtering function in JavaScript. Enhance your understanding of array manipulation and higher-order functions.",
    "keywords": "JavaScript, Array, Bifurcation, Filtering, Higher-Order Functions, Array Manipulation"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Bifurcate Array Based on Function",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands Executed",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/comp_ops",
          "javascript/data_types",
          "javascript/higher_funcs",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "根据函数对数组进行分叉",
      "description": "在本实验中，我们将探索如何在 JavaScript 中根据给定的过滤函数对数组进行分叉。我们将使用 Array.prototype.reduce() 方法和 Array.prototype.push() 方法，根据过滤函数返回真值与否，将数组的值分成两组。本实验旨在加深你对 JavaScript 中高阶函数和数组操作的理解。",
      "meta": {
        "title": "JavaScript 数组分叉 | 高阶函数",
        "description": "学习如何在 JavaScript 中根据过滤函数将数组拆分为两组。加深你对数组操作和高阶函数的理解。",
        "keywords": "JavaScript, 数组，分叉，过滤，高阶函数，数组操作"
      },
      "details": {
        "steps": [
          {
            "title": "根据函数对数组进行分叉",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证已执行的 Node 命令",
                "file": "verify1-1.sh",
                "hint": "在终端/SSH 中，通过输入'node'并按回车键可以运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Bifurcar Arreglo Basado en Función",
      "description": "En este laboratorio, exploraremos cómo bifurcar un arreglo basado en una función de filtrado dada en JavaScript. Utilizaremos el método Array.prototype.reduce() y el método Array.prototype.push() para dividir los valores del arreglo en dos grupos según si la función de filtrado devuelve un valor verdadero o no. Este laboratorio está diseñado para mejorar tu comprensión de las funciones de orden superior y la manipulación de arreglos en JavaScript.",
      "meta": {
        "title": "Bifurcación de Arreglos en JavaScript | Funciones de Orden Superior",
        "description": "Aprende cómo dividir un arreglo en dos grupos basado en una función de filtrado en JavaScript. Mejora tu comprensión de la manipulación de arreglos y funciones de orden superior.",
        "keywords": "JavaScript, Arreglo, Bifurcación, Filtrado, Funciones de Orden Superior, Manipulación de Arreglos"
      },
      "details": {
        "steps": [
          {
            "title": "Bifurcar Arreglo Basado en Función",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar que se ejecutaron los comandos de Node",
                "file": "verify1-1.sh",
                "hint": "Se puede ejecutar JavaScript en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Diviser un tableau en fonction d'une fonction",
      "description": "Dans ce laboratoire, nous allons explorer la manière de diviser un tableau en fonction d'une fonction de filtrage donnée en JavaScript. Nous utiliserons la méthode Array.prototype.reduce() et la méthode Array.prototype.push() pour séparer les valeurs du tableau en deux groupes en fonction de la valeur booléenne renvoyée par la fonction de filtrage. Ce laboratoire est conçu pour améliorer votre compréhension des fonctions de haut niveau et de la manipulation des tableaux en JavaScript.",
      "meta": {
        "title": "Bifurcation de tableaux JavaScript | Fonctions de haut niveau",
        "description": "Découvrez comment diviser un tableau en deux groupes en fonction d'une fonction de filtrage en JavaScript. Améliorez votre compréhension de la manipulation des tableaux et des fonctions de haut niveau.",
        "keywords": "JavaScript, Tableau, Bifurcation, Filtrage, Fonctions de haut niveau, Manipulation de tableaux"
      },
      "details": {
        "steps": [
          {
            "title": "Diviser un tableau en fonction d'une fonction",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier que les commandes Node ont été exécutées",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Array anhand einer Funktion aufteilen",
      "description": "In diesem Lab werden wir untersuchen, wie man in JavaScript ein Array anhand einer gegebenen Filterfunktion aufteilt. Wir werden die Array.prototype.reduce()-Methode und die Array.prototype.push()-Methode verwenden, um die Werte des Arrays in zwei Gruppen aufzuteilen, je nachdem, ob die Filterfunktion einen wahren Wert zurückgibt oder nicht. Dieses Lab ist dazu gedacht, Ihr Verständnis von höheren Funktionen und der Array-Manipulation in JavaScript zu verbessern.",
      "meta": {
        "title": "JavaScript-Array-Aufteilung | Höhere Funktionen",
        "description": "Lernen Sie, wie man in JavaScript ein Array in zwei Gruppen basierend auf einer Filterfunktion aufteilt. Verbessern Sie Ihr Verständnis der Array-Manipulation und höherer Funktionen.",
        "keywords": "JavaScript, Array, Aufteilung, Filterung, Höhere Funktionen, Array-Manipulation"
      },
      "details": {
        "steps": [
          {
            "title": "Array anhand einer Funktion aufteilen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen, ob die Node-Befehle ausgeführt wurden",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Eingabetaste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "関数に基づいた配列の分割",
      "description": "この実験では、JavaScript で与えられたフィルタ関数に基づいて配列を分割する方法を探ります。フィルタ関数が真値を返すかどうかに基づいて、`Array.prototype.reduce()` メソッドと `Array.prototype.push()` メソッドを使って配列の値を 2 つのグループに分割します。この実験は、JavaScript の高階関数と配列操作の理解を深めることを目的としています。",
      "meta": {
        "title": "JavaScript の配列分割 | 高階関数",
        "description": "JavaScript でフィルタ関数に基づいて配列を 2 つのグループに分割する方法を学びましょう。配列操作と高階関数の理解を深めましょう。",
        "keywords": "JavaScript, 配列，分割，フィルタ，高階関数，配列操作"
      },
      "details": {
        "steps": [
          {
            "title": "関数に基づいた配列の分割",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Node コマンドの実行を確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で 'node' と入力して Enter キーを押すことで、JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Разделение массива на основе функции",
      "description": "В этом практическом занятии мы изучим, как разбить массив на две части на основе заданной функции фильтрации на JavaScript. Мы будем использовать метод Array.prototype.reduce() и метод Array.prototype.push(), чтобы разделить значения массива на две группы в зависимости от того, возвращает ли функция фильтрации истинное значение или нет. Это практическое занятие предназначено для углубления вашего понимания высших порядковых функций и манипуляций с массивами на JavaScript.",
      "meta": {
        "title": "Разделение массива на JavaScript | Высшие порядковые функции",
        "description": "Изучите, как разделить массив на две группы на основе функции фильтрации на JavaScript. Углубите свое понимание манипуляций с массивами и высших порядковых функций.",
        "keywords": "JavaScript, Массив, Разделение, Фильтрация, Высшие порядковые функции, Обработка массивов"
      },
      "details": {
        "steps": [
          {
            "title": "Разделение массива на основе функции",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить выполнение команд Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "함수를 기반으로 배열 분할하기",
      "description": "이 랩에서는 JavaScript 에서 주어진 필터링 함수를 기반으로 배열을 분할하는 방법을 살펴봅니다. Array.prototype.reduce() 메서드와 Array.prototype.push() 메서드를 사용하여 필터링 함수가 truthy 값을 반환하는지 여부에 따라 배열의 값을 두 그룹으로 나눕니다. 이 랩은 JavaScript 에서 고차 함수와 배열 조작에 대한 이해를 높이도록 설계되었습니다.",
      "meta": {
        "title": "JavaScript 배열 분할 | 고차 함수",
        "description": "JavaScript 에서 필터링 함수를 기반으로 배열을 두 그룹으로 나누는 방법을 알아보세요. 배열 조작 및 고차 함수에 대한 이해를 높여보세요.",
        "keywords": "JavaScript, 배열, 분할, 필터링, 고차 함수, 배열 조작"
      },
      "details": {
        "steps": [
          {
            "title": "함수를 기반으로 배열 분할하기",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "Node 명령어 실행 확인",
                "file": "verify1-1.sh",
                "hint": "터미널/SSH 에서 'node'를 입력하고 Enter 키를 눌러 JavaScript 를 실행할 수 있습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Bifurcar Array com Base em Função",
      "description": "Neste laboratório, exploraremos como bifurcar um array com base em uma função de filtragem fornecida em JavaScript. Usaremos o método Array.prototype.reduce() e o método Array.prototype.push() para dividir os valores do array em dois grupos com base em se a função de filtragem retorna um valor verdadeiro (truthy) ou não. Este laboratório foi projetado para aprimorar sua compreensão de funções de ordem superior e manipulação de arrays em JavaScript.",
      "meta": {
        "title": "Bifurcação de Array em JavaScript | Funções de Ordem Superior",
        "description": "Aprenda como dividir um array em dois grupos com base em uma função de filtragem em JavaScript. Aprimore sua compreensão de manipulação de arrays e funções de ordem superior.",
        "keywords": "JavaScript, Array, Bifurcação, Filtragem, Funções de Ordem Superior, Manipulação de Array"
      },
      "details": {
        "steps": [
          {
            "title": "Bifurcar Array com Base em Função",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar Comandos Node Executados",
                "file": "verify1-1.sh",
                "hint": "JavaScript pode ser executado no Terminal/SSH digitando 'node' e pressionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
