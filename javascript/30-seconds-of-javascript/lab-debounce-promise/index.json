{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Debouncing Promises in JavaScript",
  "description": "In this lab, we will explore how to create a debounced function that returns a promise in JavaScript. We will learn how to delay invoking a function until a specified time has elapsed, and how to handle multiple promises returned during this time to ensure they all return the same data. By the end of this lab, you will have a solid understanding of how to implement debouncing with promises in your JavaScript projects.",
  "meta": {
    "title": "Debounce Promise | JavaScript Tutorials",
    "description": "Learn how to create a debounced function that returns a promise in JavaScript, delaying function invocation until a specified time has elapsed.",
    "keywords": "JavaScript, Debounce, Promise, Asynchronous, Tutorials"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Debounce Promise",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands History",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/async_prog",
          "javascript/comp_ops",
          "javascript/data_types",
          "javascript/debugging",
          "javascript/destr_assign",
          "javascript/obj_manip",
          "javascript/spread_rest",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "在JavaScript中实现防抖Promise",
      "description": "在本实验中，我们将探索如何在JavaScript中创建一个返回Promise的防抖函数。我们将学习如何延迟调用一个函数，直到指定的时间过去，以及如何处理在此期间返回的多个Promise，以确保它们都返回相同的数据。在本实验结束时，你将对如何在JavaScript项目中使用Promise实现防抖有深入的理解。",
      "meta": {
        "title": "防抖Promise | JavaScript教程",
        "description": "学习如何在JavaScript中创建一个返回Promise的防抖函数，延迟函数调用直到指定时间过去。",
        "keywords": "JavaScript, 防抖, Promise, 异步, 教程"
      },
      "details": {
        "steps": [
          {
            "title": "防抖Promise",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证Node命令历史记录",
                "file": "verify1-1.sh",
                "hint": "在终端/SSH中，可以通过输入'node'并按回车键来运行JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
