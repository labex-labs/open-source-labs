{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Debouncing Promises in JavaScript",
  "description": "In this lab, we will explore how to create a debounced function that returns a promise in JavaScript. We will learn how to delay invoking a function until a specified time has elapsed, and how to handle multiple promises returned during this time to ensure they all return the same data. By the end of this lab, you will have a solid understanding of how to implement debouncing with promises in your JavaScript projects.",
  "meta": {
    "title": "Debounce Promise | JavaScript Tutorials",
    "description": "Learn how to create a debounced function that returns a promise in JavaScript, delaying function invocation until a specified time has elapsed.",
    "keywords": "JavaScript, Debounce, Promise, Asynchronous, Tutorials"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Debounce Promise",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands History",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/async_prog",
          "javascript/comp_ops",
          "javascript/data_types",
          "javascript/debugging",
          "javascript/destr_assign",
          "javascript/obj_manip",
          "javascript/spread_rest",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "在 JavaScript 中实现防抖 Promise",
      "description": "在本实验中，我们将探索如何在 JavaScript 中创建一个返回 Promise 的防抖函数。我们将学习如何延迟调用一个函数，直到指定的时间过去，以及如何处理在此期间返回的多个 Promise，以确保它们都返回相同的数据。在本实验结束时，你将对如何在 JavaScript 项目中使用 Promise 实现防抖有深入的理解。",
      "meta": {
        "title": "防抖 Promise | JavaScript 教程",
        "description": "学习如何在 JavaScript 中创建一个返回 Promise 的防抖函数，延迟函数调用直到指定时间过去。",
        "keywords": "JavaScript, 防抖，Promise, 异步，教程"
      },
      "details": {
        "steps": [
          {
            "title": "防抖 Promise",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Node 命令历史记录",
                "file": "verify1-1.sh",
                "hint": "在终端/SSH 中，可以通过输入'node'并按回车键来运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Debounce de promesas en JavaScript",
      "description": "En este laboratorio, exploraremos cómo crear una función anti-rebote que devuelva una promesa en JavaScript. Aprenderemos cómo retrasar la invocación de una función hasta que haya transcurrido un tiempo especificado, y cómo manejar múltiples promesas devueltas durante este tiempo para garantizar que todas devuelvan los mismos datos. Al final de este laboratorio, tendrás una comprensión sólida de cómo implementar el anti-rebote con promesas en tus proyectos de JavaScript.",
      "meta": {
        "title": "Promesa anti-rebote | Tutoriales de JavaScript",
        "description": "Aprende cómo crear una función anti-rebote que devuelva una promesa en JavaScript, retrasando la invocación de la función hasta que haya transcurrido un tiempo especificado.",
        "keywords": "JavaScript, Anti-rebote, Promesa, Asíncrono, Tutoriales"
      },
      "details": {
        "steps": [
          {
            "title": "Promesa anti-rebote",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el historial de comandos de Node",
                "file": "verify1-1.sh",
                "hint": "Se puede ejecutar JavaScript en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Débounce des promesses en JavaScript",
      "description": "Dans ce laboratoire, nous allons explorer comment créer une fonction anti-basculement qui renvoie une promesse en JavaScript. Nous apprendrons à différer l'appel d'une fonction jusqu'à ce qu'un temps spécifié soit écoulé, et à gérer les multiples promesses renvoyées pendant ce temps pour vous assurer qu'elles renvoient toutes les mêmes données. À la fin de ce laboratoire, vous aurez une compréhension solide de la manière d'implémenter l'anti-basculement avec des promesses dans vos projets JavaScript.",
      "meta": {
        "title": "Débounce Promise | Tutoriels JavaScript",
        "description": "Apprenez à créer une fonction anti-basculement qui renvoie une promesse en JavaScript, différant l'appel de la fonction jusqu'à ce qu'un temps spécifié soit écoulé.",
        "keywords": "JavaScript, Débounce, Promesse, Asynchrone, Tutoriels"
      },
      "details": {
        "steps": [
          {
            "title": "Débounce Promise",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier l'historique des commandes Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Debouncing Promises in JavaScript",
      "description": "In diesem Lab werden wir untersuchen, wie man in JavaScript eine debounced-Funktion erstellt, die ein Promise zurückgibt. Wir werden lernen, wie man die Ausführung einer Funktion verzögert, bis eine bestimmte Zeit verstrichen ist, und wie man mehrere Promises, die während dieser Zeit zurückgegeben werden, behandelt, um sicherzustellen, dass sie alle das gleiche Daten zurückgeben. Am Ende dieses Labs werden Sie eine solide Vorstellung davon haben, wie man Debouncing mit Promises in Ihren JavaScript-Projekten implementiert.",
      "meta": {
        "title": "Debounce Promise | JavaScript Tutorials",
        "description": "Lernen Sie, wie man in JavaScript eine debounced-Funktion erstellt, die ein Promise zurückgibt und die Ausführung der Funktion bis zu einer bestimmten Zeit verzögert.",
        "keywords": "JavaScript, Debounce, Promise, Asynchron, Tutorials"
      },
      "details": {
        "steps": [
          {
            "title": "Debounce Promise",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verify Node Commands History",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann in der Konsole/SSH ausgeführt werden, indem man 'node' eingibt und die Enter-Taste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "JavaScript におけるデバウンスプロミス",
      "description": "この実験では、JavaScript でプロミスを返すデバウンス関数を作成する方法を探ります。指定された時間が経過するまで関数の呼び出しを遅らせる方法と、この間に返される複数のプロミスを処理してすべてが同じデータを返すようにする方法を学びます。この実験が終わるとき、JavaScript プロジェクトでプロミスを使ったデバウンスの実装方法をしっかりと理解しているでしょう。",
      "meta": {
        "title": "デバウンスプロミス | JavaScript チュートリアル",
        "description": "JavaScript でプロミスを返すデバウンス関数を作成する方法を学び、指定された時間が経過するまで関数の呼び出しを遅らせましょう。",
        "keywords": "JavaScript, デバウンス，プロミス，非同期，チュートリアル"
      },
      "details": {
        "steps": [
          {
            "title": "デバウンスプロミス",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ノードコマンド履歴を確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で'node'と入力して Enter キーを押すことで JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Дебонсинг промисов в JavaScript",
      "description": "В этом практическом занятии мы изучим, как создать функцию, которая возвращает промис в JavaScript и имеет защиту от \"дребезга\". Мы узнаем, как откладывать вызов функции до истечения определенного времени и как обрабатывать несколько возвращаемых промисов в это время, чтобы гарантировать, что они все возвращают одинаковые данные. В конце этого практического занятия вы глубоко поймете, как реализовать защиту от \"дребезга\" с использованием промисов в своих проектах на JavaScript.",
      "meta": {
        "title": "Debounce Promise | Руководства по JavaScript",
        "description": "Изучите, как создать функцию, которая возвращает промис в JavaScript и имеет защиту от \"дребезга\", откладывая вызов функции до истечения определенного времени.",
        "keywords": "JavaScript, Debounce, Promise, Asynchronous, Руководства"
      },
      "details": {
        "steps": [
          {
            "title": "Debounce Promise",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить историю команд Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запускать в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "JavaScript 에서 프로미스 디바운싱 구현하기",
      "description": "이 랩에서는 JavaScript 에서 프로미스를 반환하는 디바운스 함수를 만드는 방법을 살펴봅니다. 특정 시간이 경과할 때까지 함수 호출을 지연시키는 방법과, 이 시간 동안 반환된 여러 프로미스를 처리하여 모두 동일한 데이터를 반환하도록 하는 방법을 배웁니다. 이 랩을 마치면 JavaScript 프로젝트에서 프로미스를 사용하여 디바운싱을 구현하는 방법에 대한 확실한 이해를 얻게 될 것입니다.",
      "meta": {
        "title": "프로미스 디바운스 | JavaScript 튜토리얼",
        "description": "JavaScript 에서 프로미스를 반환하는 디바운스 함수를 만들고, 특정 시간이 경과할 때까지 함수 호출을 지연시키는 방법을 알아보세요.",
        "keywords": "JavaScript, 디바운스, 프로미스, 비동기, 튜토리얼, 자바스크립트 디바운싱, 프로미스 디바운스 구현"
      },
      "details": {
        "steps": [
          {
            "title": "프로미스 디바운스",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "Node 명령어 히스토리 확인",
                "file": "verify1-1.sh",
                "hint": "터미널/SSH 에서 'node'를 입력하고 Enter 키를 눌러 JavaScript 를 실행할 수 있습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Debounce Promises em JavaScript",
      "description": "Neste laboratório, exploraremos como criar uma função com debounce que retorna uma promise em JavaScript. Aprenderemos como atrasar a invocação de uma função até que um tempo especificado tenha decorrido e como lidar com múltiplas promises retornadas durante esse tempo para garantir que todas retornem os mesmos dados. Ao final deste laboratório, você terá uma sólida compreensão de como implementar debounce com promises em seus projetos JavaScript.",
      "meta": {
        "title": "Debounce Promise | Tutoriais JavaScript - Aprenda a Usar Promises com Debounce",
        "description": "Aprenda a criar uma função com debounce que retorna uma promise em JavaScript, atrasando a invocação da função até que um tempo especificado tenha decorrido. Domine o uso de promises e debounce para otimizar suas aplicações.",
        "keywords": "JavaScript, Debounce, Promise, Assíncrono, Tutoriais, Promises com Debounce, JavaScript Debounce"
      },
      "details": {
        "steps": [
          {
            "title": "Debounce Promise",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar Histórico de Comandos Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript pode ser executado no Terminal/SSH digitando 'node' e pressionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
