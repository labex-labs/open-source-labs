{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Calculating Cartesian Product with JavaScript",
  "description": "In this lab, we will explore the concept of Cartesian Product and how to calculate it using JavaScript. We will learn how to use the Array.prototype.reduce(), Array.prototype.map() and the spread operator (...) to generate all possible element pairs from two arrays. By the end of the lab, you will have a better understanding of how to use these methods to calculate the Cartesian Product of two arrays.",
  "meta": {
    "title": "Cartesian Product | JavaScript | Array Manipulation",
    "description": "Learn how to calculate the Cartesian Product of two arrays using JavaScript techniques like Array.prototype.reduce(), Array.prototype.map(), and the spread operator.",
    "keywords": "Cartesian Product, JavaScript, Array Manipulation, Array.prototype.reduce, Array.prototype.map, Spread Operator"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Cartesian Product",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands History",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/comp_ops",
          "javascript/data_types",
          "javascript/higher_funcs",
          "javascript/spread_rest",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用 JavaScript 计算笛卡尔积",
      "description": "在本实验中，我们将探讨笛卡尔积的概念，以及如何使用 JavaScript 计算它。我们将学习如何使用 Array.prototype.reduce()、Array.prototype.map() 和展开运算符（...）从两个数组生成所有可能的元素对。在实验结束时，你将更好地理解如何使用这些方法来计算两个数组的笛卡尔积。",
      "meta": {
        "title": "笛卡尔积 | JavaScript | 数组操作",
        "description": "学习如何使用 JavaScript 技术，如 Array.prototype.reduce()、Array.prototype.map() 和展开运算符，计算两个数组的笛卡尔积。",
        "keywords": "笛卡尔积，JavaScript, 数组操作，Array.prototype.reduce, Array.prototype.map, 展开运算符"
      },
      "details": {
        "steps": [
          {
            "title": "笛卡尔积",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Node 命令历史记录",
                "file": "verify1-1.sh",
                "hint": "在终端/SSH 中，通过输入 'node' 并按回车键可以运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Calcular el Producto Cartesiano con JavaScript",
      "description": "En este laboratorio, exploraremos el concepto de Producto Cartesiano y cómo calcularlo utilizando JavaScript. Aprenderemos a utilizar Array.prototype.reduce(), Array.prototype.map() y el operador de propagación (...) para generar todos los posibles pares de elementos a partir de dos arrays. Al final del laboratorio, tendrás una mejor comprensión de cómo utilizar estos métodos para calcular el Producto Cartesiano de dos arrays.",
      "meta": {
        "title": "Producto Cartesiano | JavaScript | Manipulación de Arrays",
        "description": "Aprende a calcular el Producto Cartesiano de dos arrays utilizando técnicas de JavaScript como Array.prototype.reduce(), Array.prototype.map() y el operador de propagación.",
        "keywords": "Producto Cartesiano, JavaScript, Manipulación de Arrays, Array.prototype.reduce, Array.prototype.map, Operador de Propagación"
      },
      "details": {
        "steps": [
          {
            "title": "Producto Cartesiano",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el historial de comandos de Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript se puede ejecutar en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Calculer le produit cartésien avec JavaScript",
      "description": "Dans ce laboratoire, nous allons explorer le concept de produit cartésien et apprendre à le calculer à l'aide de JavaScript. Nous allons découvrir comment utiliser Array.prototype.reduce(), Array.prototype.map() et l'opérateur de propagation (...) pour générer toutes les paires d'éléments possibles à partir de deux tableaux. À la fin du laboratoire, vous aurez une meilleure compréhension de la manière d'utiliser ces méthodes pour calculer le produit cartésien de deux tableaux.",
      "meta": {
        "title": "Produit cartésien | JavaScript | Manipulation d'array",
        "description": "Apprenez à calculer le produit cartésien de deux tableaux à l'aide de techniques JavaScript telles que Array.prototype.reduce(), Array.prototype.map() et l'opérateur de propagation.",
        "keywords": "Produit cartésien, JavaScript, Manipulation d'array, Array.prototype.reduce, Array.prototype.map, Opérateur de propagation"
      },
      "details": {
        "steps": [
          {
            "title": "Produit cartésien",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier l'historique des commandes Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Das kartesische Produkt mit JavaScript berechnen",
      "description": "In diesem Lab werden wir das Konzept des kartesischen Produkts erkunden und lernen, wie man es mit JavaScript berechnet. Wir werden lernen, wie man die Methoden Array.prototype.reduce(), Array.prototype.map() und den Spread-Operator (...) verwendet, um alle möglichen Elementpaare aus zwei Arrays zu generieren. Am Ende des Labs werdet ihr ein besseres Verständnis dafür haben, wie man diese Methoden verwendet, um das kartesische Produkt von zwei Arrays zu berechnen.",
      "meta": {
        "title": "Kartesisches Produkt | JavaScript | Arraymanipulation",
        "description": "Lernen Sie, wie man das kartesische Produkt von zwei Arrays mit JavaScript-Techniken wie Array.prototype.reduce(), Array.prototype.map() und dem Spread-Operator berechnet.",
        "keywords": "Kartesisches Produkt, JavaScript, Arraymanipulation, Array.prototype.reduce, Array.prototype.map, Spread-Operator"
      },
      "details": {
        "steps": [
          {
            "title": "Kartesisches Produkt",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifiziere die Node-Befehlsgeschichte",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Enter-Taste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "JavaScript を使ったデカルト積の計算",
      "description": "この実験では、デカルト積の概念と、JavaScript を使ってそれを計算する方法を探ります。`Array.prototype.reduce()`、`Array.prototype.map()`、および展開演算子 (`...`) を使って、2 つの配列からすべての可能な要素のペアを生成する方法を学びます。実験が終了するとき、2 つの配列のデカルト積を計算するためにこれらのメソッドをどのように使うかをより深く理解しているでしょう。",
      "meta": {
        "title": "デカルト積 | JavaScript | 配列操作",
        "description": "`Array.prototype.reduce()`、`Array.prototype.map()`、展開演算子などの JavaScript 技術を使って、2 つの配列のデカルト積をどのように計算するか学びましょう。",
        "keywords": "デカルト積，JavaScript, 配列操作，Array.prototype.reduce, Array.prototype.map, 展開演算子"
      },
      "details": {
        "steps": [
          {
            "title": "デカルト積",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Node コマンド履歴を確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で 'node' と入力して Enter キーを押すことで、JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Вычисление декартового произведения с использованием JavaScript",
      "description": "В этом практическом занятии мы изучим концепцию декартового произведения и научимся вычислять его с использованием JavaScript. Мы узнаем, как использовать методы Array.prototype.reduce(), Array.prototype.map() и оператор расширения (...) для генерации всех возможных пар элементов из двух массивов. В конце практического занятия вы будете лучше понимать, как использовать эти методы для вычисления декартового произведения двух массивов.",
      "meta": {
        "title": "Декартово произведение | JavaScript | Обработка массивов",
        "description": "Изучите, как вычислить декартово произведение двух массивов с использованием таких JavaScript-техник, как Array.prototype.reduce(), Array.prototype.map() и оператор расширения.",
        "keywords": "Декартово произведение, JavaScript, Обработка массивов, Array.prototype.reduce, Array.prototype.map, Оператор расширения"
      },
      "details": {
        "steps": [
          {
            "title": "Декартово произведение",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить историю команд Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "JavaScript 를 이용한 데카르트 곱 계산",
      "description": "이 랩에서는 데카르트 곱의 개념과 JavaScript 를 사용하여 이를 계산하는 방법을 살펴봅니다. Array.prototype.reduce(), Array.prototype.map() 및 스프레드 연산자 (...) 를 사용하여 두 배열에서 가능한 모든 요소 쌍을 생성하는 방법을 배웁니다. 랩이 끝나면 이러한 메서드를 사용하여 두 배열의 데카르트 곱을 계산하는 방법에 대한 이해도가 높아질 것입니다.",
      "meta": {
        "title": "데카르트 곱 | JavaScript | 배열 조작",
        "description": "Array.prototype.reduce(), Array.prototype.map(), 스프레드 연산자 등 JavaScript 기술을 사용하여 두 배열의 데카르트 곱을 계산하는 방법을 알아보세요.",
        "keywords": "데카르트 곱, JavaScript, 배열 조작, Array.prototype.reduce, Array.prototype.map, 스프레드 연산자"
      },
      "details": {
        "steps": [
          {
            "title": "데카르트 곱",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "Node 명령어 히스토리 확인",
                "file": "verify1-1.sh",
                "hint": "JavaScript 는 터미널/SSH 에서 'node'를 입력하고 Enter 키를 눌러 실행할 수 있습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Calculando o Produto Cartesiano com JavaScript",
      "description": "Neste laboratório, exploraremos o conceito de Produto Cartesiano e como calculá-lo usando JavaScript. Aprenderemos a usar Array.prototype.reduce(), Array.prototype.map() e o operador spread (...) para gerar todos os pares de elementos possíveis a partir de dois arrays. Ao final do laboratório, você terá uma melhor compreensão de como usar esses métodos para calcular o Produto Cartesiano de dois arrays.",
      "meta": {
        "title": "Produto Cartesiano em JavaScript: Guia Prático e Exemplos",
        "description": "Aprenda a calcular o Produto Cartesiano de dois arrays usando técnicas de JavaScript como Array.prototype.reduce(), Array.prototype.map() e o operador spread. Domine a manipulação de arrays!",
        "keywords": "Produto Cartesiano, JavaScript, Manipulação de Arrays, Array.prototype.reduce, Array.prototype.map, Operador Spread, Combinatória, Arrays em JavaScript"
      },
      "details": {
        "steps": [
          {
            "title": "Produto Cartesiano",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar Histórico de Comandos Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript pode ser executado no Terminal/SSH digitando 'node' e pressionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
