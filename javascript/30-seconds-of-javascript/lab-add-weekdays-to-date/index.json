{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Add Weekdays to Date",
  "description": "In this lab, we will explore a JavaScript function that helps calculate the date after adding a given number of business days. The function uses array manipulation and date iteration to increment the start date while taking weekends into account. This lab will help you understand how to manipulate dates in JavaScript and apply business logic to date calculations.",
  "meta": {
    "title": "Mastering Date Calculations in JavaScript",
    "description": "Learn how to add weekdays to a given date using a powerful JavaScript function that handles weekend adjustments.",
    "keywords": "javascript, javascript practice, business day, javascript tutor, javascript practice online, weekday, javascript lab, date, date calculation"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Add Weekdays to Date",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands in Zsh History",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "向日期添加工作日",
      "description": "在本实验中，我们将探索一个 JavaScript 函数，该函数有助于计算在添加给定数量的工作日后的日期。该函数使用数组操作和日期迭代来增加起始日期，同时考虑周末。本实验将帮助你理解如何在 JavaScript 中操作日期，并将业务逻辑应用于日期计算。",
      "meta": {
        "title": "精通 JavaScript 中的日期计算",
        "description": "学习如何使用一个强大的 JavaScript 函数向给定日期添加工作日，该函数可处理周末调整。",
        "keywords": "javascript, javascript 练习，工作日，javascript 教程，在线 javascript 练习，工作日，javascript 实验，日期，日期计算"
      },
      "details": {
        "steps": [
          {
            "title": "向日期添加工作日",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "在 Zsh 历史记录中验证 Node 命令",
                "file": "verify1-1.sh",
                "hint": "通过输入'node'并按 Enter 键，可以在终端/SSH 中运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Agregar Días Hábiles a una Fecha",
      "description": "En este laboratorio, exploraremos una función de JavaScript que ayuda a calcular la fecha después de sumar un número dado de días hábiles. La función utiliza la manipulación de arrays y la iteración de fechas para incrementar la fecha de inicio, teniendo en cuenta los fines de semana. Este laboratorio te ayudará a entender cómo manipular fechas en JavaScript y aplicar lógica de negocios a cálculos de fechas.",
      "meta": {
        "title": "Dominando los Cálculos de Fechas en JavaScript",
        "description": "Aprende cómo agregar días hábiles a una fecha dada utilizando una función de JavaScript poderosa que maneja los ajustes de fines de semana.",
        "keywords": "javascript, práctica de javascript, día hábil, tutor de javascript, práctica de javascript en línea, día de la semana, laboratorio de javascript, fecha, cálculo de fechas"
      },
      "details": {
        "steps": [
          {
            "title": "Agregar Días Hábiles a una Fecha",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar los Comandos de Node en el Historial de Zsh",
                "file": "verify1-1.sh",
                "hint": "JavaScript se puede ejecutar en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Ajouter des jours ouvrables à une date",
      "description": "Dans ce laboratoire, nous allons explorer une fonction JavaScript qui aide à calculer la date après avoir ajouté un nombre donné de jours ouvrables. La fonction utilise la manipulation d'objets `Array` et l'itération sur des objets `Date` pour incrémenter la date de départ tout en tenant compte des week-ends. Ce laboratoire vous aidera à comprendre comment manipuler les dates en JavaScript et à appliquer une logique métier aux calculs de dates.",
      "meta": {
        "title": "Maîtriser les calculs de dates en JavaScript",
        "description": "Découvrez comment ajouter des jours ouvrables à une date donnée en utilisant une fonction JavaScript puissante qui gère les ajustements de week-end.",
        "keywords": "javascript, pratique javascript, jour ouvrable, tuteur javascript, pratique javascript en ligne, jour de semaine, laboratoire javascript, date, calcul de date"
      },
      "details": {
        "steps": [
          {
            "title": "Ajouter des jours ouvrables à une date",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier les commandes Node dans l'historique Zsh",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Werktage zum Datum hinzufügen",
      "description": "In diesem Lab werden wir eine JavaScript-Funktion untersuchen, die hilft, das Datum zu berechnen, nachdem eine bestimmte Anzahl von Werktagen hinzugefügt wurde. Die Funktion verwendet Array-Manipulation und Datums-Iteration, um das Startdatum um die Wochenenden zu erhöhen. Dieses Lab wird Ihnen helfen, zu verstehen, wie Sie in JavaScript Datums manipulieren und Geschäftslogik auf Datumsberechnungen anwenden.",
      "meta": {
        "title": "Das Beherrschen von Datumsberechnungen in JavaScript",
        "description": "Lernen Sie, wie Sie Werktage zu einem angegebenen Datum hinzufügen, indem Sie eine leistungsstarke JavaScript-Funktion verwenden, die Wochenendanpassungen vornimmt.",
        "keywords": "javascript, javascript Übung, Werktag, javascript Lehrer, Online-JavaScript-Übung, Werktag, javascript Lab, Datum, Datumsberechnung"
      },
      "details": {
        "steps": [
          {
            "title": "Werktage zum Datum hinzufügen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen von Node-Befehlen in der Zsh-Geschichte",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Enter-Taste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "日付に営業日を追加する",
      "description": "この実験では、与えられた営業日数を加えた後の日付を計算するのに役立つ JavaScript 関数を探ります。この関数は、配列操作と日付の反復処理を使って、開始日付を週末を考慮しながらインクリメントします。この実験は、JavaScript で日付を操作し、日付計算にビジネスロジックを適用する方法を理解するのに役立ちます。",
      "meta": {
        "title": "JavaScript における日付計算のマスター",
        "description": "強力な JavaScript 関数を使って与えられた日付に営業日を追加する方法を学び、週末の調整を行う方法を学びましょう。",
        "keywords": "javascript, javascript 練習，営業日，javascript 講師，オンライン javascript 練習，平日，javascript 実験，日付，日付計算"
      },
      "details": {
        "steps": [
          {
            "title": "日付に営業日を追加する",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Zsh 履歴の Node コマンドを確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で'node'と入力して Enter キーを押すことで JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Добавление рабочих дней к дате",
      "description": "В этом практическом занятии мы изучим функцию JavaScript, которая помогает вычислить дату после добавления заданного количества рабочих дней. Функция использует манипуляцию массивами и итерацию дат для увеличения начальной даты, учитывая выходные дни. Это практическое занятие поможет вам понять, как манипулировать датами в JavaScript и применять бизнес-логику к вычислениям дат.",
      "meta": {
        "title": "Мастерство в вычислениях дат с использованием JavaScript",
        "description": "Изучите, как добавить рабочие дни к заданной дате с помощью мощной функции JavaScript, которая учитывает выходные дни.",
        "keywords": "javascript, практика javascript, рабочий день, преподаватель javascript, онлайн-практика javascript, рабочий день недели, практическое занятие javascript, дата, вычисление дат"
      },
      "details": {
        "steps": [
          {
            "title": "Добавление рабочих дней к дате",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить команды Node в истории Zsh",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "날짜에 영업일 추가",
      "description": "이 랩에서는 주어진 영업일 수를 더한 후의 날짜를 계산하는 데 도움이 되는 JavaScript 함수를 살펴봅니다. 이 함수는 배열 조작과 날짜 반복을 사용하여 주말을 고려하면서 시작 날짜를 증가시킵니다. 이 랩은 JavaScript 에서 날짜를 조작하고 날짜 계산에 비즈니스 로직을 적용하는 방법을 이해하는 데 도움이 될 것입니다.",
      "meta": {
        "title": "JavaScript 에서 날짜 계산 마스터하기",
        "description": "주말 조정을 처리하는 강력한 JavaScript 함수를 사용하여 주어진 날짜에 영업일을 추가하는 방법을 알아보세요.",
        "keywords": "javascript, javascript 연습, 영업일, javascript 튜터, javascript 온라인 연습, 평일, javascript 랩, 날짜, 날짜 계산"
      },
      "details": {
        "steps": [
          {
            "title": "날짜에 영업일 추가",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "Zsh 히스토리에서 Node 명령어 확인",
                "file": "verify1-1.sh",
                "hint": "'node'를 입력하고 Enter 키를 눌러 터미널/SSH 에서 JavaScript 를 실행할 수 있습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Adicionar Dias Úteis a uma Data",
      "description": "Neste laboratório, exploraremos uma função JavaScript que ajuda a calcular a data após adicionar um determinado número de dias úteis. A função utiliza manipulação de arrays e iteração de datas para incrementar a data de início, levando em consideração os fins de semana. Este laboratório ajudará você a entender como manipular datas em JavaScript e aplicar lógica de negócios aos cálculos de datas.",
      "meta": {
        "title": "Dominando Cálculos de Datas em JavaScript - Adicione Dias Úteis",
        "description": "Aprenda a adicionar dias úteis a uma data específica usando uma função JavaScript poderosa que lida com ajustes de fim de semana. Melhore suas habilidades de cálculo de datas em JavaScript!",
        "keywords": "javascript, prática javascript, dia útil, tutorial javascript, prática javascript online, dia da semana, laboratório javascript, data, cálculo de data, adicionar dias úteis, javascript datas"
      },
      "details": {
        "steps": [
          {
            "title": "Adicionar Dias Úteis à Data",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar Comandos Node no Histórico Zsh",
                "file": "verify1-1.sh",
                "hint": "JavaScript pode ser executado no Terminal/SSH digitando 'node' e pressionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
