{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Hamming Distance Calculation in JavaScript",
  "description": "In this lab, we will explore the concept of Hamming Distance and how it is calculated in JavaScript. Through hands-on exercises and coding challenges, you will learn how to use the XOR operator and string manipulation methods to determine the bit difference between two numbers. By the end of this lab, you will have a solid understanding of the Hamming Distance algorithm and be able to implement it in your own JavaScript programs.",
  "meta": {
    "title": "Hamming Distance | JavaScript Coding Lab",
    "description": "Explore the concept of Hamming Distance and learn how to calculate it in JavaScript. Hands-on exercises and coding challenges to enhance your programming skills.",
    "keywords": "Hamming Distance, JavaScript, Coding Lab, Bit Difference, XOR Operator, String Manipulation"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Hamming Distance",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands in ZSH History",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "JavaScript 中的汉明距离计算",
      "description": "在本实验中，我们将探讨汉明距离的概念以及如何在 JavaScript 中进行计算。通过实际操作练习和编码挑战，你将学习如何使用异或运算符和字符串操作方法来确定两个数字之间的位差异。在本实验结束时，你将对汉明距离算法有扎实的理解，并能够在自己的 JavaScript 程序中实现它。",
      "meta": {
        "title": "汉明距离 | JavaScript 编码实验",
        "description": "探索汉明距离的概念，并学习如何在 JavaScript 中进行计算。通过实际操作练习和编码挑战提升你的编程技能。",
        "keywords": "汉明距离，JavaScript, 编码实验，位差异，异或运算符，字符串操作"
      },
      "details": {
        "steps": [
          {
            "title": "汉明距离",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "在 ZSH 历史记录中验证 Node 命令",
                "file": "verify1-1.sh",
                "hint": "在终端/SSH 中，通过输入 'node' 并按下回车键即可运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Cálculo de la Distancia de Hamming en JavaScript",
      "description": "En este laboratorio, exploraremos el concepto de Distancia de Hamming y cómo se calcula en JavaScript. A través de ejercicios prácticos y retos de codificación, aprenderás a usar el operador XOR y métodos de manipulación de cadenas para determinar la diferencia de bits entre dos números. Al final de este laboratorio, tendrás una comprensión sólida del algoritmo de Distancia de Hamming y serás capaz de implementarlo en tus propios programas de JavaScript.",
      "meta": {
        "title": "Distancia de Hamming | Laboratorio de Codificación en JavaScript",
        "description": "Explora el concepto de Distancia de Hamming y aprende cómo calcularla en JavaScript. Ejercicios prácticos y retos de codificación para mejorar tus habilidades de programación.",
        "keywords": "Distancia de Hamming, JavaScript, Laboratorio de Codificación, Diferencia de Bits, Operador XOR, Manipulación de Cadenas"
      },
      "details": {
        "steps": [
          {
            "title": "Distancia de Hamming",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar comandos de Node en el historial de ZSH",
                "file": "verify1-1.sh",
                "hint": "Se puede ejecutar JavaScript en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Calcul de la distance de Hamming en JavaScript",
      "description": "Dans ce laboratoire, nous allons explorer le concept de distance de Hamming et la manière dont elle est calculée en JavaScript. Grâce à des exercices pratiques et des défis de codage, vous apprendrez à utiliser l'opérateur XOR et les méthodes de manipulation de chaînes pour déterminer la différence binaire entre deux nombres. À la fin de ce laboratoire, vous aurez une compréhension solide de l'algorithme de distance de Hamming et serez capable de l'implémenter dans vos propres programmes JavaScript.",
      "meta": {
        "title": "Distance de Hamming | Laboratoire de codage JavaScript",
        "description": "Explorez le concept de distance de Hamming et apprenez à le calculer en JavaScript. Des exercices pratiques et des défis de codage pour améliorer vos compétences de programmation.",
        "keywords": "Distance de Hamming, JavaScript, Laboratoire de codage, Différence binaire, Opérateur XOR, Manipulation de chaînes"
      },
      "details": {
        "steps": [
          {
            "title": "Distance de Hamming",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier les commandes Node dans l'historique ZSH",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Hamming-Distanz-Berechnung in JavaScript",
      "description": "In diesem Lab werden wir das Konzept der Hamming-Distanz und dessen Berechnung in JavaScript erkunden. Durch praktische Übungen und Codierungsprobleme lernen Sie, wie Sie den XOR-Operator und String-Manipulationsmethoden verwenden, um die Bitunterschiede zwischen zwei Zahlen zu bestimmen. Am Ende dieses Labs werden Sie das Hamming-Distanz-Algorithmus gut verstehen und ihn in Ihren eigenen JavaScript-Programmen implementieren können.",
      "meta": {
        "title": "Hamming-Distanz | JavaScript-Coding-Lab",
        "description": "Erkunden Sie das Konzept der Hamming-Distanz und lernen Sie, wie Sie es in JavaScript berechnen. Praktische Übungen und Codierungsprobleme, um Ihre Programmierfähigkeiten zu verbessern.",
        "keywords": "Hamming-Distanz, JavaScript, Coding-Lab, Bitunterschied, XOR-Operator, String-Manipulation"
      },
      "details": {
        "steps": [
          {
            "title": "Hamming-Distanz",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifiziere Node-Befehle in der ZSH-Geschichte",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem Sie 'node' eingeben und die Eingabetaste drücken."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "JavaScript におけるハミング距離の計算",
      "description": "この実験では、ハミング距離の概念とそれが JavaScript でどのように計算されるかを探ります。実践的な演習とコーディングチャレンジを通じて、2 つの数値間のビットの違いを判断するために排他的論理和（XOR）演算子と文字列操作メソッドをどのように使用するかを学びます。この実験が終了するまでに、ハミング距離アルゴリズムを十分に理解し、独自の JavaScript プログラムでそれを実装できるようになります。",
      "meta": {
        "title": "ハミング距離 | JavaScript コーディング実験",
        "description": "ハミング距離の概念を探り、JavaScript でそれを計算する方法を学びましょう。プログラミングスキルを向上させるための実践的な演習とコーディングチャレンジ。",
        "keywords": "ハミング距離，JavaScript, コーディング実験，ビットの違い，XOR 演算子，文字列操作"
      },
      "details": {
        "steps": [
          {
            "title": "ハミング距離",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ZSH 履歴における Node コマンドを確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で 'node' と入力して Enter キーを押すことで JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Вычисление расстояния Хэмминга на JavaScript",
      "description": "В этом практическом занятии мы изучим концепцию расстояния Хэмминга и узнаем, как его вычислять на JavaScript. С помощью практических упражнений и кодирующих вызовов вы научитесь использовать оператор XOR и методы манипуляции со строками для определения разницы бит между двумя числами. В конце этого практического занятия вы глубоко поняли алгоритм расстояния Хэмминга и сможете реализовать его в своих собственных программах на JavaScript.",
      "meta": {
        "title": "Расстояние Хэмминга | Практическое занятие по JavaScript",
        "description": "Изучите концепцию расстояния Хэмминга и узнайте, как вычислять его на JavaScript. Практические упражнения и кодирующие вызовы для улучшения ваших навыков программирования.",
        "keywords": "Расстояние Хэмминга, JavaScript, Практическое занятие по программированию, Разница бит, Оператор XOR, Обработка строк"
      },
      "details": {
        "steps": [
          {
            "title": "Расстояние Хэмминга",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить команды Node в истории ZSH",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запускать в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "JavaScript 로 해밍 거리 계산",
      "description": "이 랩에서는 해밍 거리의 개념과 JavaScript 에서 이를 계산하는 방법을 살펴봅니다. 실습과 코딩 챌린지를 통해 XOR 연산자와 문자열 조작 방법을 사용하여 두 숫자 간의 비트 차이를 결정하는 방법을 배우게 됩니다. 이 랩을 마치면 해밍 거리 알고리즘에 대한 확실한 이해를 갖게 되며, 자신의 JavaScript 프로그램에서 이를 구현할 수 있게 됩니다.",
      "meta": {
        "title": "해밍 거리 | JavaScript 코딩 랩",
        "description": "해밍 거리의 개념을 탐구하고 JavaScript 에서 이를 계산하는 방법을 배우세요. 프로그래밍 기술을 향상시키기 위한 실습 및 코딩 챌린지.",
        "keywords": "해밍 거리, JavaScript, 코딩 랩, 비트 차이, XOR 연산자, 문자열 조작"
      },
      "details": {
        "steps": [
          {
            "title": "해밍 거리 (Hamming Distance)",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "ZSH 히스토리에서 Node 명령어 확인",
                "file": "verify1-1.sh",
                "hint": "터미널/SSH 에서 'node'를 입력하고 Enter 키를 눌러 JavaScript 를 실행할 수 있습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Cálculo da Distância de Hamming em JavaScript",
      "description": "Neste laboratório, exploraremos o conceito de Distância de Hamming e como ele é calculado em JavaScript. Através de exercícios práticos e desafios de codificação, você aprenderá a usar o operador XOR e métodos de manipulação de strings para determinar a diferença de bits entre dois números. Ao final deste laboratório, você terá uma sólida compreensão do algoritmo de Distância de Hamming e poderá implementá-lo em seus próprios programas JavaScript.",
      "meta": {
        "title": "Distância de Hamming | Laboratório de Codificação JavaScript",
        "description": "Explore o conceito de Distância de Hamming e aprenda a calculá-lo em JavaScript. Exercícios práticos e desafios de codificação para aprimorar suas habilidades de programação.",
        "keywords": "Distância de Hamming, JavaScript, Laboratório de Codificação, Diferença de Bits, Operador XOR, Manipulação de Strings"
      },
      "details": {
        "steps": [
          {
            "title": "Distância de Hamming",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar Comandos Node no Histórico ZSH",
                "file": "verify1-1.sh",
                "hint": "JavaScript pode ser executado no Terminal/SSH digitando 'node' e pressionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
