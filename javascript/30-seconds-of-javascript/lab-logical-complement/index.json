{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Exploring Logical Complement in JavaScript",
  "description": "In this lab, we will be exploring the concept of logical complement in JavaScript. We will learn how to use the complement function to generate a new function that returns the opposite of the original function. This lab will help us better understand the logic and functional programming concepts in JavaScript.",
  "meta": {
    "title": "Logical Complement in JavaScript | Functional Programming",
    "description": "Learn how to use the 'complement' function to generate a new function that returns the opposite of the original function in JavaScript.",
    "keywords": "JavaScript, Logical Complement, Functional Programming, Predicate Functions, Coding Tutorials"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Logical Complement",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Command Usage",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/comp_ops",
          "javascript/data_types",
          "javascript/spread_rest",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "探索JavaScript中的逻辑补码",
      "description": "在本实验中，我们将探索JavaScript中逻辑补码的概念。我们将学习如何使用complement函数来生成一个新函数，该函数返回原始函数的相反值。本实验将帮助我们更好地理解JavaScript中的逻辑和函数式编程概念。",
      "meta": {
        "title": "JavaScript中的逻辑补码 | 函数式编程",
        "description": "学习如何使用“complement”函数在JavaScript中生成一个新函数，该函数返回原始函数的相反值。",
        "keywords": "JavaScript, 逻辑补码, 函数式编程, 谓词函数, 编码教程"
      },
      "details": {
        "steps": [
          {
            "title": "逻辑补码",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证Node命令的用法",
                "file": "verify1-1.sh",
                "hint": "通过在终端/SSH中输入'node'并按回车键，可以运行JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
