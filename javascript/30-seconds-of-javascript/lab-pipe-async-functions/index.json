{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Pipe Async Functions",
  "description": "In this lab, we will explore the concept of function composition in asynchronous programming using JavaScript. We will learn how to use the pipeAsyncFunctions function to compose a series of asynchronous functions that can accept a single argument and return a combination of normal values, Promises, or be async. By the end of this lab, you will have a solid understanding of how to use function composition to write more efficient and readable asynchronous code.",
  "meta": {
    "title": "Mastering Asynchronous Function Composition in JavaScript",
    "description": "Learn how to use the pipeAsyncFunctions function to compose a series of asynchronous functions for efficient and readable code.",
    "keywords": "javascript, javascript practice, asyncawait, javascript practice online, javascript lab, asynchronous programming, pipeasyncfunctions, javascript tutor, function composition"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Pipe Async Functions",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Command Usage",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/async_prog",
          "javascript/comp_ops",
          "javascript/data_types",
          "javascript/debugging",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "串联异步函数",
      "description": "在本实验中，我们将使用 JavaScript 探索异步编程中的函数组合概念。我们将学习如何使用 pipeAsyncFunctions 函数来组合一系列异步函数，这些函数可以接受单个参数并返回普通值、Promise 或异步函数的组合。在本实验结束时，你将对如何使用函数组合来编写更高效、更易读的异步代码有深入的理解。",
      "meta": {
        "title": "掌握 JavaScript 中的异步函数组合",
        "description": "学习如何使用 pipeAsyncFunctions 函数来组合一系列异步函数，以编写高效且易读的代码。",
        "keywords": "JavaScript, JavaScript 练习，async/await, 在线 JavaScript 练习，JavaScript 实验，异步编程，pipeasyncfunctions, JavaScript 教程，函数组合"
      },
      "details": {
        "steps": [
          {
            "title": "串联异步函数",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Node 命令的用法",
                "file": "verify1-1.sh",
                "hint": "在终端/SSH 中输入 'node' 并回车，即可运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Funciones Asíncronas Encadenadas",
      "description": "En este laboratorio, exploraremos el concepto de composición de funciones en la programación asíncrona utilizando JavaScript. Aprenderemos cómo utilizar la función pipeAsyncFunctions para componer una serie de funciones asíncronas que pueden aceptar un solo argumento y devolver una combinación de valores normales, Promises o ser asíncronas. Al final de este laboratorio, tendrás una comprensión sólida de cómo utilizar la composición de funciones para escribir código asíncrono más eficiente y legible.",
      "meta": {
        "title": "Dominando la Composición de Funciones Asíncronas en JavaScript",
        "description": "Aprende cómo utilizar la función pipeAsyncFunctions para componer una serie de funciones asíncronas para un código eficiente y legible.",
        "keywords": "javascript, práctica de javascript, asyncawait, práctica de javascript en línea, laboratorio de javascript, programación asíncrona, pipeasyncfunctions, tutor de javascript, composición de funciones"
      },
      "details": {
        "steps": [
          {
            "title": "Funciones Asíncronas Encadenadas",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el uso del comando Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript se puede ejecutar en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Composition de fonctions asynchrones en chaîne",
      "description": "Dans ce laboratoire, nous allons explorer le concept de composition de fonctions en programmation asynchrone à l'aide de JavaScript. Nous apprendrons à utiliser la fonction pipeAsyncFunctions pour composer une série de fonctions asynchrones qui peuvent accepter un seul argument et renvoyer une combinaison de valeurs normales, de Promesses, ou être asynchrones. À la fin de ce laboratoire, vous aurez une compréhension solide de la manière d'utiliser la composition de fonctions pour écrire du code asynchrone plus efficace et lisible.",
      "meta": {
        "title": "Maîtriser la composition de fonctions asynchrones en JavaScript",
        "description": "Découvrez comment utiliser la fonction pipeAsyncFunctions pour composer une série de fonctions asynchrones pour un code efficace et lisible.",
        "keywords": "javascript, pratique javascript, asyncawait, pratique javascript en ligne, laboratoire javascript, programmation asynchrone, pipeasyncfunctions, tuteur javascript, composition de fonctions"
      },
      "details": {
        "steps": [
          {
            "title": "Composition de fonctions asynchrones en chaîne",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier l'utilisation de la commande Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Pipe Async Functions",
      "description": "In diesem Lab werden wir das Konzept der Funktionskomposition in der asynchronen Programmierung mit JavaScript erkunden. Wir werden lernen, wie die pipeAsyncFunctions-Funktion verwendet wird, um eine Reihe asynchroner Funktionen zu kombinieren, die einen einzelnen Argument akzeptieren und eine Kombination aus normalen Werten, Promises oder async zurückgeben können. Am Ende dieses Labs werden Sie eine solide Vorstellung davon haben, wie die Funktionskomposition verwendet wird, um effizientere und lesbarere asynchrone Code zu schreiben.",
      "meta": {
        "title": "Meisterhaftigkeit in der asynchronen Funktionskomposition mit JavaScript",
        "description": "Lernen Sie, wie die pipeAsyncFunctions-Funktion verwendet wird, um eine Reihe asynchroner Funktionen zu kombinieren, um effizienten und lesbaren Code zu schreiben.",
        "keywords": "javascript, javascript Übung, asyncawait, Online-JavaScript-Übung, JavaScript-Lab, asynchrone Programmierung, pipeasyncfunctions, JavaScript-Tutor, Funktionskomposition"
      },
      "details": {
        "steps": [
          {
            "title": "Pipe Async Functions",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren der Verwendung des Node-Befehls",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Enter-Taste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "非同期関数をパイプする",
      "description": "この実験では、JavaScript を使った非同期プログラミングにおける関数合成の概念を探求します。`pipeAsyncFunctions` 関数を使って、単一の引数を受け取り、通常の値、Promise、または `async` であることができる一連の非同期関数を合成する方法を学びます。この実験が終了するとき、関数合成を使ってより効率的で読みやすい非同期コードを書く方法を十分に理解しているでしょう。",
      "meta": {
        "title": "JavaScript における非同期関数合成のマスター",
        "description": "効率的で読みやすいコードのために、`pipeAsyncFunctions` 関数を使って一連の非同期関数を合成する方法を学びましょう。",
        "keywords": "javascript, javascript 練習，asyncawait, オンライン javascript 練習，javascript 実験，非同期プログラミング，pipeasyncfunctions, javascript チューター, 関数合成"
      },
      "details": {
        "steps": [
          {
            "title": "非同期関数をパイプする",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Node コマンドの使用を確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で 'node' と入力して Enter キーを押すことで、JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Композиция асинхронных функций",
      "description": "В этом практическом занятии мы изучим концепцию композиции функций в асинхронном программировании с использованием JavaScript. Мы узнаем, как использовать функцию pipeAsyncFunctions для композиции серии асинхронных функций, которые могут принимать один аргумент и возвращать комбинацию обычных значений, Promise-объектов или быть асинхронными. В конце этого практического занятия вы глубоко поняли, как использовать композицию функций для написания более эффективного и читаемого асинхронного кода.",
      "meta": {
        "title": "Мастерство в композиции асинхронных функций в JavaScript",
        "description": "Изучите, как использовать функцию pipeAsyncFunctions для композиции серии асинхронных функций для получения эффективного и читаемого кода.",
        "keywords": "javascript, практика javascript, asyncawait, онлайн практика javascript, практическое занятие javascript, асинхронное программирование, pipeasyncfunctions, преподаватель javascript, композиция функций"
      },
      "details": {
        "steps": [
          {
            "title": "Композиция асинхронных функций",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить использование команды Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
