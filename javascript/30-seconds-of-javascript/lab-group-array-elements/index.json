{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Group Data from Multiple Arrays",
  "description": "In this lab, we will be exploring how to group array elements based on their position in the original arrays. We will be using the zip() function which takes in multiple arrays and returns a new array containing sub-arrays of elements from each input array, grouped by their position. This is a useful technique in data processing and analysis, and can be used to combine data from multiple sources into a single data structure for further analysis.",
  "meta": {
    "title": "Grouping Array Elements | Data Processing | JavaScript Techniques",
    "description": "Learn how to group array elements based on their position using the powerful zip() function in JavaScript. Explore data processing and analysis techniques.",
    "keywords": "array grouping, data processing, JavaScript techniques, zip function, data analysis"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Group Array Elements",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands in ZSH History",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/array_methods",
          "javascript/comp_ops",
          "javascript/data_types",
          "javascript/destr_assign",
          "javascript/higher_funcs",
          "javascript/spread_rest",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "对多个数组中的数据进行分组",
      "description": "在本实验中，我们将探索如何根据数组元素在原始数组中的位置对其进行分组。我们将使用zip()函数，该函数接受多个数组，并返回一个新数组，其中包含来自每个输入数组的元素子数组，这些子数组按位置分组。这是数据处理和分析中的一项有用技术，可用于将来自多个源的数据组合成单个数据结构以进行进一步分析。",
      "meta": {
        "title": "分组数组元素 | 数据处理 | JavaScript 技术",
        "description": "学习如何使用 JavaScript 中强大的 zip() 函数根据数组元素的位置对其进行分组。探索数据处理和分析技术。",
        "keywords": "数组分组, 数据处理, JavaScript 技术, zip 函数, 数据分析"
      },
      "details": {
        "steps": [
          {
            "title": "对数组元素进行分组",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "在 ZSH 历史记录中验证 Node 命令",
                "file": "verify1-1.sh",
                "hint": "通过输入 'node' 并按 Enter 键，可以在终端/SSH 中运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Agrupar datos de múltiples arrays",
      "description": "En este laboratorio, exploraremos cómo agrupar los elementos de un array según su posición en los arrays originales. Utilizaremos la función zip() que toma múltiples arrays y devuelve un nuevo array que contiene sub-arrays de elementos de cada array de entrada, agrupados por su posición. Esta es una técnica útil en el procesamiento y análisis de datos, y se puede utilizar para combinar datos de múltiples fuentes en una sola estructura de datos para su análisis ulterior.",
      "meta": {
        "title": "Agrupación de elementos de array | Procesamiento de datos | Técnicas de JavaScript",
        "description": "Aprende cómo agrupar los elementos de un array según su posición utilizando la poderosa función zip() en JavaScript. Explora técnicas de procesamiento y análisis de datos.",
        "keywords": "agrupación de arrays, procesamiento de datos, técnicas de JavaScript, función zip, análisis de datos"
      },
      "details": {
        "steps": [
          {
            "title": "Agrupar elementos de array",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar comandos de Node en el historial de ZSH",
                "file": "verify1-1.sh",
                "hint": "Se puede ejecutar JavaScript en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Regrouper des données provenant de plusieurs tableaux",
      "description": "Dans ce laboratoire, nous allons explorer la manière de regrouper les éléments d'un tableau en fonction de leur position dans les tableaux originaux. Nous utiliserons la fonction zip() qui prend plusieurs tableaux en entrée et renvoie un nouveau tableau contenant des sous-tableaux d'éléments provenant de chaque tableau d'entrée, regroupés par position. Cette technique est utile dans le traitement et l'analyse des données et peut être utilisée pour combiner des données provenant de multiples sources dans une seule structure de données pour une analyse ultérieure.",
      "meta": {
        "title": "Regroupement d'éléments de tableau | Traitement de données | Techniques JavaScript",
        "description": "Découvrez comment regrouper les éléments d'un tableau en fonction de leur position à l'aide de la puissante fonction zip() en JavaScript. Explorez les techniques de traitement et d'analyse des données.",
        "keywords": "groupement de tableaux, traitement de données, techniques JavaScript, fonction zip, analyse de données"
      },
      "details": {
        "steps": [
          {
            "title": "Regrouper les éléments d'un tableau",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier les commandes Node dans l'historique ZSH",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Gruppieren von Daten aus mehreren Arrays",
      "description": "In diesem Lab werden wir untersuchen, wie man Array-Elemente anhand ihrer Position in den ursprünglichen Arrays gruppiert. Wir werden die zip()-Funktion verwenden, die mehrere Arrays akzeptiert und ein neues Array zurückgibt, das Unterarrays von Elementen aus jedem Eingabearray enthält, gruppiert nach ihrer Position. Dies ist eine nützliche Technik bei der Datenverarbeitung und -analyse und kann verwendet werden, um Daten aus mehreren Quellen in eine einzelne Datenstruktur zu kombinieren, um eine weitere Analyse durchzuführen.",
      "meta": {
        "title": "Gruppieren von Array-Elementen | Datenverarbeitung | JavaScript-Techniken",
        "description": "Lernen Sie, wie Sie Array-Elemente anhand ihrer Position mit der leistungsstarken zip()-Funktion in JavaScript gruppieren. Entdecken Sie Datenverarbeitungs- und Analysetechniken.",
        "keywords": "Array-Gruppierung, Datenverarbeitung, JavaScript-Techniken, zip-Funktion, Datenanalyse"
      },
      "details": {
        "steps": [
          {
            "title": "Array-Elemente gruppieren",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen von Node-Befehlen in der ZSH-Historie",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Enter-Taste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "複数の配列からのデータのグループ化",
      "description": "この実験では、元の配列内の要素の位置に基づいて配列要素をグループ化する方法を検討します。複数の配列を受け取り、各入力配列からの要素のサブ配列が位置に基づいてグループ化された新しい配列を返す zip() 関数を使用します。これは、データ処理と分析において役立つ手法であり、複数のソースからのデータを単一のデータ構造に結合してさらなる分析に使用できます。",
      "meta": {
        "title": "配列要素のグループ化 | データ処理 | JavaScript テクニック",
        "description": "JavaScript の強力な zip() 関数を使って、配列要素をその位置に基づいてグループ化する方法を学びましょう。データ処理と分析のテクニックを探求しましょう。",
        "keywords": "配列グループ化, データ処理, JavaScript テクニック, zip 関数, データ分析"
      },
      "details": {
        "steps": [
          {
            "title": "配列要素をグループ化する",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ZSH履歴のNodeコマンドを確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSHで 'node' と入力してEnterキーを押すことでJavaScriptを実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Группировка данных из нескольких массивов",
      "description": "В этом практическом занятии мы изучим, как группировать элементы массива в зависимости от их позиции в исходном массиве. Мы будем использовать функцию zip(), которая принимает несколько массивов и возвращает новый массив, содержащий подмассивы элементов из каждого входного массива, сгруппированные по их позиции. Это полезный метод при обработке и анализе данных, который можно использовать для объединения данных из нескольких источников в одну структуру данных для дальнейшего анализа.",
      "meta": {
        "title": "Группировка элементов массива | Обработка данных | Техники JavaScript",
        "description": "Изучите, как группировать элементы массива в зависимости от их позиции с помощью мощной функции zip() в JavaScript. Исследуйте методы обработки и анализа данных.",
        "keywords": "группировка массивов, обработка данных, технологии JavaScript, функция zip, анализ данных"
      },
      "details": {
        "steps": [
          {
            "title": "Группировка элементов массива",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить команды Node в истории ZSH",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
