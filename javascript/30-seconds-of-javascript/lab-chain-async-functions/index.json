{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Chain Async Functions",
  "description": "In this lab, we will explore how to chain asynchronous functions in JavaScript. We will learn how to loop through an array of functions containing asynchronous events and call the next function when each event has completed. By the end of the lab, you will be able to efficiently execute a series of asynchronous operations in a specific order.",
  "meta": {
    "title": "Chain Async Functions: Mastering Asynchronous JavaScript",
    "description": "Learn how to efficiently execute a series of asynchronous operations in a specific order using JavaScript.",
    "keywords": "javascript, asynchronous, javascript practice, javascript practice online, functions, javascript lab, javascript tutor, async, chaining"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Chain Async Functions",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands Execution",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/async_prog",
          "javascript/comp_ops",
          "javascript/data_types",
          "javascript/debugging",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "链式调用异步函数",
      "description": "在本实验中，我们将探索如何在JavaScript中链式调用异步函数。我们将学习如何遍历包含异步事件的函数数组，并在每个事件完成时调用next函数。在实验结束时，你将能够以特定顺序高效地执行一系列异步操作。",
      "meta": {
        "title": "链式调用异步函数：精通异步JavaScript",
        "description": "学习如何使用JavaScript以特定顺序高效地执行一系列异步操作。",
        "keywords": "JavaScript, 异步, JavaScript练习, 在线JavaScript练习, 函数, JavaScript实验, JavaScript教程, 异步, 链式调用"
      },
      "details": {
        "steps": [
          {
            "title": "链式调用异步函数",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证Node命令的执行",
                "file": "verify1-1.sh",
                "hint": "通过在终端/SSH中输入'node'并按回车键，可以运行JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Encadenamiento de funciones asíncronas",
      "description": "En este laboratorio, exploraremos cómo encadenar funciones asíncronas en JavaScript. Aprenderemos a recorrer un array de funciones que contienen eventos asíncronos y a llamar a la siguiente función cuando cada evento haya finalizado. Al final del laboratorio, serás capaz de ejecutar eficientemente una serie de operaciones asíncronas en un orden específico.",
      "meta": {
        "title": "Encadenamiento de funciones asíncronas: Dominando JavaScript asíncrono",
        "description": "Aprende a ejecutar eficientemente una serie de operaciones asíncronas en un orden específico utilizando JavaScript.",
        "keywords": "javascript, asíncrono, práctica de javascript, práctica de javascript en línea, funciones, laboratorio de javascript, tutor de javascript, async, encadenamiento"
      },
      "details": {
        "steps": [
          {
            "title": "Encadenamiento de funciones asíncronas",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar la ejecución de comandos de Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript se puede ejecutar en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Chaîner des fonctions asynchrones",
      "description": "Dans ce laboratoire, nous allons explorer la manière de chaîner des fonctions asynchrones en JavaScript. Nous apprendrons à parcourir un tableau de fonctions contenant des événements asynchrones et à appeler la fonction suivante lorsque chaque événement est terminé. À la fin du laboratoire, vous serez capable d'exécuter efficacement une série d'opérations asynchrones dans un ordre spécifique.",
      "meta": {
        "title": "Chaîner des fonctions asynchrones : Maîtriser JavaScript asynchrone",
        "description": "Apprenez à exécuter efficacement une série d'opérations asynchrones dans un ordre spécifique à l'aide de JavaScript.",
        "keywords": "javascript, asynchrone, pratique javascript, pratique javascript en ligne, fonctions, laboratoire javascript, tuteur javascript, async, chaînage"
      },
      "details": {
        "steps": [
          {
            "title": "Chaîner des fonctions asynchrones",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier l'exécution des commandes Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Asynchrone Funktionen verketten",
      "description": "In diesem Lab werden wir untersuchen, wie man asynchrone Funktionen in JavaScript verketten kann. Wir werden lernen, wie man durch ein Array von Funktionen mit asynchronen Ereignissen iteriert und die nächste Funktion aufruft, wenn jedes Ereignis abgeschlossen ist. Am Ende des Labs sollten Sie in der Lage sein, eine Reihe asynchroner Operationen in einer bestimmten Reihenfolge effizient auszuführen.",
      "meta": {
        "title": "Asynchrone Funktionen verketten: Beherrschen von asynchronem JavaScript",
        "description": "Lernen Sie, wie man eine Reihe asynchroner Operationen in einer bestimmten Reihenfolge effizient mit JavaScript ausführt.",
        "keywords": "javascript, asynchron, javascript Übung, Online-JavaScript-Übung, Funktionen, JavaScript-Lab, JavaScript-Lehrer, async, Verkettung"
      },
      "details": {
        "steps": [
          {
            "title": "Asynchrone Funktionen verketten",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen der Ausführung von Node-Befehlen",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Eingabetaste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "非同期関数のチェーン化",
      "description": "この実験では、JavaScript において非同期関数をチェーン化する方法を探ります。非同期イベントを含む関数の配列をループし、各イベントが完了したときに次の関数を呼び出す方法を学びます。実験が終了すると、特定の順序で一連の非同期操作を効率的に実行できるようになります。",
      "meta": {
        "title": "非同期関数のチェーン化：非同期 JavaScript をマスターする",
        "description": "JavaScript を使って、特定の順序で一連の非同期操作を効率的に実行する方法を学びましょう。",
        "keywords": "javascript, 非同期, javascript の練習, オンラインでの javascript の練習, 関数, javascript の実験, javascript の講師, 非同期, チェーン化"
      },
      "details": {
        "steps": [
          {
            "title": "非同期関数のチェーン化",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Node コマンドの実行を確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で 'node' と入力して Enter キーを押すことで、JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Последовательное выполнение асинхронных функций",
      "description": "В этом практическом занятии мы изучим, как последовательно вызывать асинхронные функции в JavaScript. Мы узнаем, как пройти по массиву функций, содержащих асинхронные события, и вызывать функцию next, когда каждое событие завершится. В конце практического занятия вы сможете эффективно выполнять серию асинхронных операций в определенном порядке.",
      "meta": {
        "title": "Последовательное выполнение асинхронных функций: мастерство в асинхронном JavaScript",
        "description": "Изучите, как эффективно выполнять серию асинхронных операций в определенном порядке с использованием JavaScript.",
        "keywords": "javascript, асинхронный, практика javascript, онлайн практика javascript, функции, практическое занятие javascript, преподаватель javascript, async, последовательное выполнение"
      },
      "details": {
        "steps": [
          {
            "title": "Последовательное выполнение асинхронных функций",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить выполнение команд Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
