{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Run Promises in Series",
  "description": "In this lab, we will be exploring how to run an array of promises in series using JavaScript. We will be using the Array.prototype.reduce() method to create a promise chain, where each promise returns the next promise when resolved. By the end of this lab, you will have a better understanding of how to execute promises sequentially, taking your programming skills to the next level.",
  "meta": {
    "title": "Run Promises in Series: Mastering Asynchronous JavaScript",
    "description": "Explore how to run an array of promises in series using JavaScript's promise chain.",
    "keywords": "javascript, asynchronous, javascript practice, series, javascript tutor, javascript practice online, javascript lab, promises, promise chain"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Run Promises in Series",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands in ZSH History",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "依次运行 Promise",
      "description": "在本实验中，我们将探索如何使用 JavaScript 依次运行一系列 Promise。我们将使用 Array.prototype.reduce() 方法创建一个 Promise 链，其中每个 Promise 在解决后返回下一个 Promise。在本实验结束时，你将更好地理解如何按顺序执行 Promise，从而将你的编程技能提升到一个新的水平。",
      "meta": {
        "title": "依次运行 Promise：掌握异步 JavaScript",
        "description": "探索如何使用 JavaScript 的 Promise 链依次运行一系列 Promise。",
        "keywords": "javascript, 异步，javascript 练习，依次，javascript 教程，在线 javascript 练习，javascript 实验，Promise, Promise 链"
      },
      "details": {
        "steps": [
          {
            "title": "依次运行 Promise",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "在 ZSH 历史记录中验证 Node 命令",
                "file": "verify1-1.sh",
                "hint": "通过在终端/SSH 中输入'node'并按回车键，可以运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Ejecutar Promesas en Serie",
      "description": "En este laboratorio, exploraremos cómo ejecutar una matriz de promesas en serie usando JavaScript. Utilizaremos el método Array.prototype.reduce() para crear una cadena de promesas, donde cada promesa devuelve la siguiente promesa cuando se resuelve. Al final de este laboratorio, tendrás una mejor comprensión de cómo ejecutar promesas secuencialmente, elevando tus habilidades de programación al siguiente nivel.",
      "meta": {
        "title": "Ejecutar Promesas en Serie: Dominando el JavaScript Asincrónico",
        "description": "Explora cómo ejecutar una matriz de promesas en serie usando la cadena de promesas de JavaScript.",
        "keywords": "javascript, asíncrono, práctica de javascript, serie, tutor de javascript, práctica de javascript en línea, laboratorio de javascript, promesas, cadena de promesas"
      },
      "details": {
        "steps": [
          {
            "title": "Ejecutar Promesas en Serie",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar los comandos de Node en el historial de ZSH",
                "file": "verify1-1.sh",
                "hint": "Se puede ejecutar JavaScript en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Exécuter des promesses en série",
      "description": "Dans ce laboratoire, nous allons explorer comment exécuter une série de promesses en utilisant JavaScript. Nous allons utiliser la méthode Array.prototype.reduce() pour créer une chaîne de promesses, où chaque promesse renvoie la prochaine promesse lorsqu'elle est résolue. À la fin de ce laboratoire, vous aurez une meilleure compréhension de la manière d'exécuter séquentiellement des promesses, ce qui portera vos compétences de programmation à un niveau supérieur.",
      "meta": {
        "title": "Exécuter des promesses en série : Maîtriser le JavaScript asynchrone",
        "description": "Explorez comment exécuter une série de promesses en utilisant la chaîne de promesses JavaScript.",
        "keywords": "javascript, asynchrone, pratique javascript, série, tuteur javascript, pratique javascript en ligne, laboratoire javascript, promesses, chaîne de promesses"
      },
      "details": {
        "steps": [
          {
            "title": "Exécuter des promesses en série",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier les commandes Node dans l'historique ZSH",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Promises nacheinander ausführen",
      "description": "In diesem Lab werden wir untersuchen, wie man in JavaScript eine Reihe von Promises nacheinander ausführt. Wir werden die Array.prototype.reduce()-Methode verwenden, um eine Promise-Kette zu erstellen, bei der jedes Promise beim Auflösen das nächste Promise zurückgibt. Am Ende dieses Labs werden Sie ein besseres Verständnis dafür haben, wie man Promises sequentiell ausführt und Ihre Programmierfähigkeiten auf die nächste Stufe heben.",
      "meta": {
        "title": "Promises nacheinander ausführen: Beherrschen von asynchronem JavaScript",
        "description": "Erkunden Sie, wie man in JavaScript eine Reihe von Promises nacheinander ausführt, indem man eine Promise-Kette verwendet.",
        "keywords": "javascript, asynchron, JavaScript Übung, Reihe, JavaScript-Lehrer, Online-JavaScript-Übung, JavaScript-Lab, Promises, Promise-Kette"
      },
      "details": {
        "steps": [
          {
            "title": "Promises nacheinander ausführen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen von Node-Befehlen in der ZSH-Geschichte",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Eingabetaste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "直列でプロミスを実行する",
      "description": "この実験では、JavaScript を使って一連のプロミスを直列で実行する方法を探ります。`Array.prototype.reduce()` メソッドを使ってプロミスチェーンを作成し、各プロミスは解決したときに次のプロミスを返します。この実験が終わるとき、あなたはプロミスを順次実行する方法をより深く理解しており、プログラミングスキルが向上します。",
      "meta": {
        "title": "直列でプロミスを実行する：非同期 JavaScript をマスターする",
        "description": "JavaScript のプロミスチェーンを使って、一連のプロミスを直列で実行する方法を探りましょう。",
        "keywords": "javascript, 非同期，javascript 練習，直列，javascript チューター, オンライン javascript 練習，javascript 実験，プロミス，プロミスチェーン"
      },
      "details": {
        "steps": [
          {
            "title": "直列でプロミスを実行する",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ZSH 履歴の Node コマンドを確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で 'node' と入力して Enter キーを押すことで JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Выполнение промисов последовательно",
      "description": "В этом практическом занятии мы изучим, как последовательно выполнять массив промисов с использованием JavaScript. Мы будем использовать метод Array.prototype.reduce(), чтобы создать цепочку промисов, где каждый промис возвращает следующий промис при успешном завершении. В конце этого практического занятия вы будете лучше понимать, как последовательно выполнять промисы, повышая свои навыки программирования на новый уровень.",
      "meta": {
        "title": "Выполнение промисов последовательно: мастерство в асинхронном JavaScript",
        "description": "Изучите, как последовательно выполнять массив промисов с использованием цепочки промисов в JavaScript.",
        "keywords": "javascript, асинхронный, практика javascript, последовательно, преподаватель javascript, онлайн практика javascript, лабораторная работа javascript, промисы, цепочка промисов"
      },
      "details": {
        "steps": [
          {
            "title": "Выполнение промисов последовательно",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить команды Node в истории ZSH",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "일련의 프로미스 실행",
      "description": "이 랩에서는 JavaScript 를 사용하여 프로미스 배열을 순차적으로 실행하는 방법을 살펴봅니다. Array.prototype.reduce() 메서드를 사용하여 프로미스 체인을 생성하고, 각 프로미스는 해결될 때 다음 프로미스를 반환합니다. 이 랩을 마치면 프로미스를 순차적으로 실행하는 방법에 대한 이해도가 높아져 프로그래밍 기술을 한 단계 더 발전시킬 수 있습니다.",
      "meta": {
        "title": "일련의 프로미스 실행: 비동기 JavaScript 마스터하기",
        "description": "JavaScript 의 프로미스 체인을 사용하여 프로미스 배열을 순차적으로 실행하는 방법을 알아보세요.",
        "keywords": "javascript, 비동기, javascript 연습, 순차, javascript 튜터, javascript 온라인 연습, javascript 랩, 프로미스, 프로미스 체인, 자바스크립트, 비동기 프로그래밍, 프로미스 순차 실행"
      },
      "details": {
        "steps": [
          {
            "title": "일련의 프로미스 실행",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "ZSH 히스토리에서 Node 명령어 확인",
                "file": "verify1-1.sh",
                "hint": "'node'를 입력하고 Enter 키를 눌러 터미널/SSH 에서 JavaScript 를 실행할 수 있습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Executar Promises em Série",
      "description": "Neste laboratório, exploraremos como executar um array de promises em série usando JavaScript. Usaremos o método Array.prototype.reduce() para criar uma cadeia de promises, onde cada promise retorna a próxima promise quando resolvida. Ao final deste laboratório, você terá uma melhor compreensão de como executar promises sequencialmente, levando suas habilidades de programação ao próximo nível.",
      "meta": {
        "title": "Executar Promises em Série: Dominando JavaScript Assíncrono",
        "description": "Explore como executar um array de promises em série usando a cadeia de promises do JavaScript. Aprenda a otimizar o fluxo assíncrono do seu código.",
        "keywords": "javascript, assíncrono, prática javascript, série, tutorial javascript, prática javascript online, laboratório javascript, promises, cadeia de promises, promises em sequência"
      },
      "details": {
        "steps": [
          {
            "title": "Executar Promises em Série",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar Comandos Node no Histórico ZSH",
                "file": "verify1-1.sh",
                "hint": "JavaScript pode ser executado no Terminal/SSH digitando 'node' e pressionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
