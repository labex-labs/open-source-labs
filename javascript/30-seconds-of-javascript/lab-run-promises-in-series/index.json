{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Run Promises in Series",
  "description": "In this lab, we will be exploring how to run an array of promises in series using JavaScript. We will be using the Array.prototype.reduce() method to create a promise chain, where each promise returns the next promise when resolved. By the end of this lab, you will have a better understanding of how to execute promises sequentially, taking your programming skills to the next level.",
  "meta": {
    "title": "Run Promises in Series: Mastering Asynchronous JavaScript",
    "description": "Explore how to run an array of promises in series using JavaScript's promise chain.",
    "keywords": "javascript, asynchronous, javascript practice, series, javascript tutor, javascript practice online, javascript lab, promises, promise chain"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Run Promises in Series",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands in ZSH History",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/async_prog",
          "javascript/comp_ops",
          "javascript/data_types",
          "javascript/higher_funcs",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "依次运行Promise",
      "description": "在本实验中，我们将探索如何使用JavaScript依次运行一系列Promise。我们将使用Array.prototype.reduce()方法创建一个Promise链，其中每个Promise在解决后返回下一个Promise。在本实验结束时，你将更好地理解如何按顺序执行Promise，从而将你的编程技能提升到一个新的水平。",
      "meta": {
        "title": "依次运行Promise：掌握异步JavaScript",
        "description": "探索如何使用JavaScript的Promise链依次运行一系列Promise。",
        "keywords": "javascript, 异步, javascript练习, 依次, javascript教程, 在线javascript练习, javascript实验, Promise, Promise链"
      },
      "details": {
        "steps": [
          {
            "title": "依次运行Promise",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "在ZSH历史记录中验证Node命令",
                "file": "verify1-1.sh",
                "hint": "通过在终端/SSH中输入'node'并按回车键，可以运行JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Ejecutar Promesas en Serie",
      "description": "En este laboratorio, exploraremos cómo ejecutar una matriz de promesas en serie usando JavaScript. Utilizaremos el método Array.prototype.reduce() para crear una cadena de promesas, donde cada promesa devuelve la siguiente promesa cuando se resuelve. Al final de este laboratorio, tendrás una mejor comprensión de cómo ejecutar promesas secuencialmente, elevando tus habilidades de programación al siguiente nivel.",
      "meta": {
        "title": "Ejecutar Promesas en Serie: Dominando el JavaScript Asincrónico",
        "description": "Explora cómo ejecutar una matriz de promesas en serie usando la cadena de promesas de JavaScript.",
        "keywords": "javascript, asíncrono, práctica de javascript, serie, tutor de javascript, práctica de javascript en línea, laboratorio de javascript, promesas, cadena de promesas"
      },
      "details": {
        "steps": [
          {
            "title": "Ejecutar Promesas en Serie",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar los comandos de Node en el historial de ZSH",
                "file": "verify1-1.sh",
                "hint": "Se puede ejecutar JavaScript en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Exécuter des promesses en série",
      "description": "Dans ce laboratoire, nous allons explorer comment exécuter une série de promesses en utilisant JavaScript. Nous allons utiliser la méthode Array.prototype.reduce() pour créer une chaîne de promesses, où chaque promesse renvoie la prochaine promesse lorsqu'elle est résolue. À la fin de ce laboratoire, vous aurez une meilleure compréhension de la manière d'exécuter séquentiellement des promesses, ce qui portera vos compétences de programmation à un niveau supérieur.",
      "meta": {
        "title": "Exécuter des promesses en série : Maîtriser le JavaScript asynchrone",
        "description": "Explorez comment exécuter une série de promesses en utilisant la chaîne de promesses JavaScript.",
        "keywords": "javascript, asynchrone, pratique javascript, série, tuteur javascript, pratique javascript en ligne, laboratoire javascript, promesses, chaîne de promesses"
      },
      "details": {
        "steps": [
          {
            "title": "Exécuter des promesses en série",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier les commandes Node dans l'historique ZSH",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Promises nacheinander ausführen",
      "description": "In diesem Lab werden wir untersuchen, wie man in JavaScript eine Reihe von Promises nacheinander ausführt. Wir werden die Array.prototype.reduce()-Methode verwenden, um eine Promise-Kette zu erstellen, bei der jedes Promise beim Auflösen das nächste Promise zurückgibt. Am Ende dieses Labs werden Sie ein besseres Verständnis dafür haben, wie man Promises sequentiell ausführt und Ihre Programmierfähigkeiten auf die nächste Stufe heben.",
      "meta": {
        "title": "Promises nacheinander ausführen: Beherrschen von asynchronem JavaScript",
        "description": "Erkunden Sie, wie man in JavaScript eine Reihe von Promises nacheinander ausführt, indem man eine Promise-Kette verwendet.",
        "keywords": "javascript, asynchron, JavaScript Übung, Reihe, JavaScript-Lehrer, Online-JavaScript-Übung, JavaScript-Lab, Promises, Promise-Kette"
      },
      "details": {
        "steps": [
          {
            "title": "Promises nacheinander ausführen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen von Node-Befehlen in der ZSH-Geschichte",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Eingabetaste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "直列でプロミスを実行する",
      "description": "この実験では、JavaScript を使って一連のプロミスを直列で実行する方法を探ります。`Array.prototype.reduce()` メソッドを使ってプロミスチェーンを作成し、各プロミスは解決したときに次のプロミスを返します。この実験が終わるとき、あなたはプロミスを順次実行する方法をより深く理解しており、プログラミングスキルが向上します。",
      "meta": {
        "title": "直列でプロミスを実行する：非同期 JavaScript をマスターする",
        "description": "JavaScript のプロミスチェーンを使って、一連のプロミスを直列で実行する方法を探りましょう。",
        "keywords": "javascript, 非同期, javascript 練習, 直列, javascript チューター, オンライン javascript 練習, javascript 実験, プロミス, プロミスチェーン"
      },
      "details": {
        "steps": [
          {
            "title": "直列でプロミスを実行する",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ZSH履歴のNodeコマンドを確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSHで 'node' と入力してEnterキーを押すことでJavaScriptを実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Выполнение промисов последовательно",
      "description": "В этом практическом занятии мы изучим, как последовательно выполнять массив промисов с использованием JavaScript. Мы будем использовать метод Array.prototype.reduce(), чтобы создать цепочку промисов, где каждый промис возвращает следующий промис при успешном завершении. В конце этого практического занятия вы будете лучше понимать, как последовательно выполнять промисы, повышая свои навыки программирования на новый уровень.",
      "meta": {
        "title": "Выполнение промисов последовательно: мастерство в асинхронном JavaScript",
        "description": "Изучите, как последовательно выполнять массив промисов с использованием цепочки промисов в JavaScript.",
        "keywords": "javascript, асинхронный, практика javascript, последовательно, преподаватель javascript, онлайн практика javascript, лабораторная работа javascript, промисы, цепочка промисов"
      },
      "details": {
        "steps": [
          {
            "title": "Выполнение промисов последовательно",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить команды Node в истории ZSH",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
