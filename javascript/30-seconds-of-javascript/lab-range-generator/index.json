{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Generating Range Values with JavaScript Generators",
  "description": "In this lab, we will explore how to create a rangeGenerator function in JavaScript that generates all values in a given range using a specified step. We will use a while loop and the yield keyword to return each value and increment by the specified step. By the end of this lab, you will have a better understanding of how to create custom generators in JavaScript and their practical applications.",
  "meta": {
    "title": "JavaScript Range Generator | Custom Generators",
    "description": "Learn how to create a JavaScript range generator function using a while loop and the yield keyword. Explore practical applications of custom generators.",
    "keywords": "JavaScript, range generator, custom generators, while loop, yield, programming tutorial"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Range Generator",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands in Zsh History",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/comp_ops",
          "javascript/data_types",
          "javascript/debugging",
          "javascript/loops",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用 JavaScript 生成器生成范围值",
      "description": "在本实验中，我们将探索如何在 JavaScript 中创建一个 rangeGenerator 函数，该函数使用指定的步长生成给定范围内的所有值。我们将使用 while 循环和 yield 关键字来返回每个值，并按指定的步长递增。在本实验结束时，你将更好地理解如何在 JavaScript 中创建自定义生成器及其实际应用。",
      "meta": {
        "title": "JavaScript 范围生成器 | 自定义生成器",
        "description": "学习如何使用 while 循环和 yield 关键字创建 JavaScript 范围生成器函数。探索自定义生成器的实际应用。",
        "keywords": "JavaScript, 范围生成器，自定义生成器，while 循环，yield, 编程教程"
      },
      "details": {
        "steps": [
          {
            "title": "范围生成器",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "在 Zsh 历史记录中验证 Node 命令",
                "file": "verify1-1.sh",
                "hint": "通过在终端/SSH 中输入'node'并按回车键，可以运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Generando valores de rango con generadores de JavaScript",
      "description": "En este laboratorio, exploraremos cómo crear una función rangeGenerator en JavaScript que genere todos los valores en un rango dado utilizando un paso especificado. Utilizaremos un bucle while y la palabra clave yield para devolver cada valor e incrementarlo en el paso especificado. Al final de este laboratorio, tendrás una mejor comprensión de cómo crear generadores personalizados en JavaScript y sus aplicaciones prácticas.",
      "meta": {
        "title": "Generador de rango de JavaScript | Generadores personalizados",
        "description": "Aprende cómo crear una función generadora de rango de JavaScript utilizando un bucle while y la palabra clave yield. Explora las aplicaciones prácticas de los generadores personalizados.",
        "keywords": "JavaScript, generador de rango, generadores personalizados, bucle while, yield, tutorial de programación"
      },
      "details": {
        "steps": [
          {
            "title": "Generador de rango",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar comandos de Node en el historial de Zsh",
                "file": "verify1-1.sh",
                "hint": "Se puede ejecutar JavaScript en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Générer des valeurs de plage avec des générateurs JavaScript",
      "description": "Dans ce laboratoire, nous allons explorer comment créer une fonction rangeGenerator en JavaScript qui génère toutes les valeurs dans une plage donnée en utilisant un pas spécifié. Nous utiliserons une boucle while et le mot-clé yield pour renvoyer chaque valeur et incrémenter par le pas spécifié. À la fin de ce laboratoire, vous aurez une meilleure compréhension de la manière de créer des générateurs personnalisés en JavaScript et de leurs applications pratiques.",
      "meta": {
        "title": "Générateur de plage JavaScript | Générateurs personnalisés",
        "description": "Découvrez comment créer une fonction génératrice de plage JavaScript en utilisant une boucle while et le mot-clé yield. Explorez les applications pratiques des générateurs personnalisés.",
        "keywords": "JavaScript, générateur de plage, générateurs personnalisés, boucle while, yield, tutoriel de programmation"
      },
      "details": {
        "steps": [
          {
            "title": "Générateur de plage",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier les commandes Node dans l'historique Zsh",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Generieren von Bereichswerten mit JavaScript-Generatoren",
      "description": "In diesem Lab werden wir untersuchen, wie man in JavaScript eine rangeGenerator-Funktion erstellt, die alle Werte in einem angegebenen Bereich mit einem angegebenen Schritt erzeugt. Wir werden eine while-Schleife und das yield-Schlüsselwort verwenden, um jeden Wert zurückzugeben und um den angegebenen Schritt zu erhöhen. Am Ende dieses Labs werden Sie ein besseres Verständnis dafür haben, wie man in JavaScript benutzerdefinierte Generatoren erstellt und wie sie in der Praxis eingesetzt werden.",
      "meta": {
        "title": "JavaScript-Bereichsgenerator | Benutzerdefinierte Generatoren",
        "description": "Lernen Sie, wie man eine JavaScript-Bereichsgeneratorfunktion mit einer while-Schleife und dem yield-Schlüsselwort erstellt. Entdecken Sie praktische Anwendungen von benutzerdefinierten Generatoren.",
        "keywords": "JavaScript, Bereichsgenerator, benutzerdefinierte Generatoren, while-Schleife, yield, Programmier-Tutorial"
      },
      "details": {
        "steps": [
          {
            "title": "Bereichsgenerator",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen von Node-Befehlen in der Zsh-Historie",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Enter-Taste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "JavaScript ジェネレータを使った範囲の値の生成",
      "description": "この実験では、JavaScript で `rangeGenerator` 関数を作成する方法を検討します。この関数は、指定されたステップを使って、指定された範囲内のすべての値を生成します。`while` ループと `yield` キーワードを使って、各値を返し、指定されたステップで増分します。この実験が終了するまでに、JavaScript でカスタム ジェネレータを作成する方法とその実際の応用について、より深い理解を得ることができます。",
      "meta": {
        "title": "JavaScript 範囲生成器 | カスタム ジェネレータ",
        "description": "while ループと yield キーワードを使って JavaScript の範囲生成器関数を作成する方法を学びましょう。カスタム ジェネレータの実際の応用を探求しましょう。",
        "keywords": "JavaScript, 範囲生成器，カスタム ジェネレータ，while ループ，yield, プログラミング チュートリアル"
      },
      "details": {
        "steps": [
          {
            "title": "範囲生成器",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Zsh 履歴の Node コマンドを確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で 'node' と入力して Enter キーを押すことで、JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Генерация значений диапазона с использованием генераторов JavaScript",
      "description": "В этом практическом занятии мы изучим, как создать функцию rangeGenerator на JavaScript, которая генерирует все значения в заданном диапазоне с использованием заданного шага. Мы будем использовать цикл while и ключевое слово yield, чтобы возвращать каждое значение и увеличивать его на заданный шаг. В конце этого практического занятия вы будете лучше понимать, как создавать пользовательские генераторы на JavaScript и их практические применения.",
      "meta": {
        "title": "Генератор диапазона JavaScript | Пользовательские генераторы",
        "description": "Изучите, как создать функцию генератора диапазона JavaScript с использованием цикла while и ключевого слова yield. Исследуйте практические применения пользовательских генераторов.",
        "keywords": "JavaScript, генератор диапазона, пользовательские генераторы, цикл while, yield, учебник по программированию"
      },
      "details": {
        "steps": [
          {
            "title": "Генератор диапазона",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить команды Node в истории Zsh",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
