{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Composing Functions Efficiently in JavaScript",
  "description": "In this lab, we will explore the concept of function composition in JavaScript. We will learn how to combine multiple functions into a single function that performs a sequence of operations in a left-to-right order. Through the use of the pipeFunctions function, we will discover the benefits of function composition and how it can simplify our code and make it more readable.",
  "meta": {
    "title": "JavaScript Function Composition | Programming Tutorials",
    "description": "Learn how to combine multiple functions into a single function using function composition in JavaScript. Discover the benefits of pipeFunctions and simplify your code.",
    "keywords": "JavaScript, function composition, pipeFunctions, programming tutorials, coding, left-to-right composition"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Pipe Functions",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands In Zsh History",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/comp_ops",
          "javascript/data_types",
          "javascript/higher_funcs",
          "javascript/spread_rest",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "在 JavaScript 中高效组合函数",
      "description": "在本实验中，我们将探索 JavaScript 中函数组合的概念。我们将学习如何将多个函数组合成一个函数，该函数按从左到右的顺序执行一系列操作。通过使用 pipeFunctions 函数，我们将发现函数组合的好处，以及它如何简化我们的代码并使其更具可读性。",
      "meta": {
        "title": "JavaScript 函数组合 | 编程教程",
        "description": "学习如何在 JavaScript 中使用函数组合将多个函数组合成一个函数。发现 pipeFunctions 的好处并简化你的代码。",
        "keywords": "JavaScript, 函数组合，pipeFunctions, 编程教程，编码，从左到右组合"
      },
      "details": {
        "steps": [
          {
            "title": "管道函数",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "在 Zsh 历史记录中验证 Node 命令",
                "file": "verify1-1.sh",
                "hint": "通过输入'node'并按 Enter 键，可以在终端/SSH 中运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Componer funciones eficientemente en JavaScript",
      "description": "En este laboratorio, exploraremos el concepto de composición de funciones en JavaScript. Aprenderemos cómo combinar múltiples funciones en una sola función que realice una secuencia de operaciones en un orden de izquierda a derecha. A través del uso de la función pipeFunctions, descubriremos los beneficios de la composición de funciones y cómo puede simplificar nuestro código y hacerlo más legible.",
      "meta": {
        "title": "Composición de funciones de JavaScript | Tutoriales de programación",
        "description": "Aprende cómo combinar múltiples funciones en una sola función utilizando la composición de funciones en JavaScript. Descubre los beneficios de pipeFunctions y simplifica tu código.",
        "keywords": "JavaScript, composición de funciones, pipeFunctions, tutoriales de programación, codificación, composición de izquierda a derecha"
      },
      "details": {
        "steps": [
          {
            "title": "Funciones de tubería",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar comandos de Node en el historial de Zsh",
                "file": "verify1-1.sh",
                "hint": "Se puede ejecutar JavaScript en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Composer efficacement des fonctions en JavaScript",
      "description": "Dans ce laboratoire, nous allons explorer le concept de composition de fonctions en JavaScript. Nous apprendrons à combiner plusieurs fonctions en une seule fonction qui effectue une séquence d'opérations dans un ordre de gauche à droite. En utilisant la fonction pipeFunctions, nous découvrirons les avantages de la composition de fonctions et comment elle peut simplifier notre code et le rendre plus lisible.",
      "meta": {
        "title": "Composition de fonctions JavaScript | Tutoriels de programmation",
        "description": "Apprenez à combiner plusieurs fonctions en une seule fonction en utilisant la composition de fonctions en JavaScript. Découvrez les avantages de pipeFunctions et simplifiez votre code.",
        "keywords": "JavaScript, composition de fonctions, pipeFunctions, tutoriels de programmation, codage, composition de gauche à droite"
      },
      "details": {
        "steps": [
          {
            "title": "Fonctions de tuyau",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier les commandes Node dans l'historique Zsh",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Efficiente Funktionskomposition in JavaScript",
      "description": "In diesem Lab werden wir das Konzept der Funktionskomposition in JavaScript erkunden. Wir werden lernen, wie mehrere Funktionen zu einer einzigen Funktion kombiniert werden können, die eine Reihe von Operationen in einer links-nach-rechts-Reihenfolge ausführt. Mit Hilfe der pipeFunctions-Funktion werden wir die Vorteile der Funktionskomposition entdecken und wie sie unseren Code vereinfachen und lesbarer machen kann.",
      "meta": {
        "title": "JavaScript-Funktionskomposition | Programmier-Tutorials",
        "description": "Lernen Sie, wie Sie mehrere Funktionen zu einer einzigen Funktion kombinieren, indem Sie die Funktionskomposition in JavaScript verwenden. Entdecken Sie die Vorteile von pipeFunctions und vereinfachen Sie Ihren Code.",
        "keywords": "JavaScript, Funktionskomposition, pipeFunctions, Programmier-Tutorials, Programmieren, links-nach-rechts-Komposition"
      },
      "details": {
        "steps": [
          {
            "title": "Pipenfunktionen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen von Node-Befehlen in der Zsh-Geschichte",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Enter-Taste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "JavaScript での関数の効率的な合成",
      "description": "この実験では、JavaScript における関数合成の概念を探求します。複数の関数を左から右の順序で一連の操作を行う単一の関数に結合する方法を学びます。`pipeFunctions` 関数を使用することで、関数合成の利点と、コードを簡略化して読みやすくする方法を見つけます。",
      "meta": {
        "title": "JavaScript 関数合成 | プログラミングチュートリアル",
        "description": "JavaScript で関数合成を使って複数の関数を単一の関数に結合する方法を学びましょう。`pipeFunctions` の利点を見つけて、コードを簡略化しましょう。",
        "keywords": "JavaScript, 関数合成，pipeFunctions, プログラミングチュートリアル，コーディング，左から右の合成"
      },
      "details": {
        "steps": [
          {
            "title": "パイプ関数",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Zsh 履歴における Node コマンドを確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で 'node' と入力して Enter キーを押すことで、JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Эффективная композиция функций в JavaScript",
      "description": "В этом практическом занятии мы изучим концепцию композиции функций в JavaScript. Мы узнаем, как комбинировать несколько функций в одну функцию, которая выполняет последовательность операций в порядке слева направо. С помощью функции pipeFunctions мы узнаем о преимуществах композиции функций и о том, как она может упростить наш код и сделать его более читаемым.",
      "meta": {
        "title": "Композиция функций в JavaScript | Руководства по программированию",
        "description": "Изучите, как комбинировать несколько функций в одну функцию с использованием композиции функций в JavaScript. Откройте для себя преимущества pipeFunctions и упростите свой код.",
        "keywords": "JavaScript, композиция функций, pipeFunctions, руководства по программированию, программирование, композиция слева направо"
      },
      "details": {
        "steps": [
          {
            "title": "Функции-каналы (Pipe Functions)",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить команды Node в истории Zsh",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
