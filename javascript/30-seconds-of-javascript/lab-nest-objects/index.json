{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Recursive Nesting of Linked JavaScript Objects",
  "description": "In this lab, we will explore a JavaScript function called nest that recursively nests objects linked to one another in a flat array. The function uses recursion, Array.prototype.filter(), and Array.prototype.map() to filter and nest the items based on their id and parent_id properties. By the end of this lab, you will have a better understanding of how to use recursion to create nested objects in JavaScript.",
  "meta": {
    "title": "Recursively Nest JavaScript Objects | Coding Tutorial",
    "description": "Explore a JavaScript function called 'nest' that recursively nests objects linked to one another in a flat array. Learn how to use recursion, Array.prototype.filter(), and Array.prototype.map() to create nested objects.",
    "keywords": "JavaScript, Recursion, Nested Objects, Array.prototype.filter, Array.prototype.map"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Nest Objects",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Command Usage",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "JavaScript 中相互链接对象的递归嵌套",
      "description": "在本实验中，我们将探索一个名为 nest 的 JavaScript 函数，它会递归地将相互链接的对象嵌套在一个扁平数组中。该函数使用递归、Array.prototype.filter() 和 Array.prototype.map() 根据对象的 id 和 parent_id 属性来过滤和嵌套这些项。完成本实验后，你将更好地理解如何使用递归在 JavaScript 中创建嵌套对象。",
      "meta": {
        "title": "递归嵌套 JavaScript 对象 | 编码教程",
        "description": "探索一个名为 'nest' 的 JavaScript 函数，它会递归地将相互链接的对象嵌套在一个扁平数组中。学习如何使用递归、Array.prototype.filter() 和 Array.prototype.map() 创建嵌套对象。",
        "keywords": "JavaScript, 递归，嵌套对象，Array.prototype.filter, Array.prototype.map"
      },
      "details": {
        "steps": [
          {
            "title": "嵌套对象",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Node 命令的用法",
                "file": "verify1-1.sh",
                "hint": "在终端/SSH 中，通过输入 'node' 并按下回车键即可运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Anidamiento recursivo de objetos JavaScript vinculados",
      "description": "En este laboratorio, exploraremos una función de JavaScript llamada nest que anida recursivamente objetos vinculados entre sí en una matriz plana. La función utiliza recursividad, Array.prototype.filter() y Array.prototype.map() para filtrar y anidar los elementos basados en sus propiedades id y parent_id. Al final de este laboratorio, tendrás una mejor comprensión de cómo utilizar la recursividad para crear objetos anidados en JavaScript.",
      "meta": {
        "title": "Anidar objetos JavaScript recursivamente | Tutorial de codificación",
        "description": "Explore una función de JavaScript llamada 'nest' que anida recursivamente objetos vinculados entre sí en una matriz plana. Aprenda cómo utilizar la recursividad, Array.prototype.filter() y Array.prototype.map() para crear objetos anidados.",
        "keywords": "JavaScript, Recursividad, Objetos anidados, Array.prototype.filter, Array.prototype.map"
      },
      "details": {
        "steps": [
          {
            "title": "Anidar objetos",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el uso del comando Node",
                "file": "verify1-1.sh",
                "hint": "Se puede ejecutar JavaScript en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Anatomie récursive des objets JavaScript liés",
      "description": "Dans ce laboratoire, nous explorerons une fonction JavaScript appelée nest qui imbrique de manière récursive des objets liés les uns aux autres dans un tableau plat. La fonction utilise la récursion, Array.prototype.filter() et Array.prototype.map() pour filtrer et imbriquer les éléments en fonction de leurs propriétés id et parent_id. À la fin de ce laboratoire, vous comprendrez mieux comment utiliser la récursion pour créer des objets imbriqués en JavaScript.",
      "meta": {
        "title": "Imbriquer récursivement des objets JavaScript | Tutoriel de codage",
        "description": "Explorez une fonction JavaScript appelée 'nest' qui imbrique de manière récursive des objets liés les uns aux autres dans un tableau plat. Découvrez comment utiliser la récursion, Array.prototype.filter() et Array.prototype.map() pour créer des objets imbriqués.",
        "keywords": "JavaScript, Récursion, Objets imbriqués, Array.prototype.filter, Array.prototype.map"
      },
      "details": {
        "steps": [
          {
            "title": "Imbriquer des objets",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier l'utilisation de la commande Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Rekursive Verschachtelung von verknüpften JavaScript-Objekten",
      "description": "In diesem Lab werden wir eine JavaScript-Funktion namens nest untersuchen, die Objekte, die miteinander verknüpft sind, in einem flachen Array rekursiv verschachtelt. Die Funktion verwendet Rekursion, Array.prototype.filter() und Array.prototype.map(), um die Elemente basierend auf ihren id- und parent_id-Eigenschaften zu filtern und zu verschachteln. Am Ende dieses Labs werden Sie ein besseres Verständnis dafür haben, wie Sie Rekursion verwenden, um verschachtelte Objekte in JavaScript zu erstellen.",
      "meta": {
        "title": "Rekursiv verschachtelte JavaScript-Objekte | Code-Tutorial",
        "description": "Entdecken Sie eine JavaScript-Funktion namens 'nest', die Objekte, die miteinander verknüpft sind, in einem flachen Array rekursiv verschachtelt. Lernen Sie, wie Sie Rekursion, Array.prototype.filter() und Array.prototype.map() verwenden, um verschachtelte Objekte zu erstellen.",
        "keywords": "JavaScript, Rekursion, Verschachtelte Objekte, Array.prototype.filter, Array.prototype.map"
      },
      "details": {
        "steps": [
          {
            "title": "Objekte verschachteln",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen der Verwendung des Node-Befehls",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Enter-Taste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "リンクされた JavaScript オブジェクトの再帰的なネスト",
      "description": "この実験では、フラットな配列に相互にリンクされたオブジェクトを再帰的にネストする `nest` と呼ばれる JavaScript 関数を調べます。この関数は再帰、`Array.prototype.filter()`、および `Array.prototype.map()` を使用して、項目の `id` と `parent_id` プロパティに基づいて項目をフィルタリングしてネストします。この実験が終了するとき、JavaScript で再帰を使用してネストされたオブジェクトを作成する方法をより深く理解しているでしょう。",
      "meta": {
        "title": "再帰的に JavaScript オブジェクトをネストする | コーディングチュートリアル",
        "description": "フラットな配列に相互にリンクされたオブジェクトを再帰的にネストする `nest` と呼ばれる JavaScript 関数を調べます。再帰、`Array.prototype.filter()`、および `Array.prototype.map()` を使用してネストされたオブジェクトを作成する方法を学びましょう。",
        "keywords": "JavaScript, 再帰，ネストされたオブジェクト，Array.prototype.filter, Array.prototype.map"
      },
      "details": {
        "steps": [
          {
            "title": "オブジェクトをネストする",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Node コマンドの使用を確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で 'node' と入力して Enter キーを押すことで、JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Рекурсивное вложение связанных объектов JavaScript",
      "description": "В этой лабораторной работе мы исследуем функцию JavaScript под названием nest, которая рекурсивно вкладывает объекты, связанные друг с другом, в плоский массив. Функция использует рекурсию, Array.prototype.filter() и Array.prototype.map() для фильтрации и вложения элементов на основе их свойств id и parent_id. В конце этой лабораторной работы вы будете лучше понимать, как использовать рекурсию для создания вложенных объектов в JavaScript.",
      "meta": {
        "title": "Рекурсивно вкладывать объекты JavaScript | Руководство по программированию",
        "description": "Изучите функцию JavaScript под названием 'nest', которая рекурсивно вкладывает объекты, связанные друг с другом, в плоский массив. Изучите, как использовать рекурсию, Array.prototype.filter() и Array.prototype.map() для создания вложенных объектов.",
        "keywords": "JavaScript, Рекурсия, Вложенные объекты, Array.prototype.filter, Array.prototype.map"
      },
      "details": {
        "steps": [
          {
            "title": "Вложить объекты",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить использование команды Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "JavaScript 에서 재귀를 이용한 연결된 객체 중첩",
      "description": "이 랩에서는 평면 배열에서 서로 연결된 객체를 재귀적으로 중첩하는 'nest'라는 JavaScript 함수를 살펴봅니다. 이 함수는 재귀, Array.prototype.filter(), Array.prototype.map() 을 사용하여 id 및 parent_id 속성을 기반으로 항목을 필터링하고 중첩합니다. 이 랩을 마치면 JavaScript 에서 재귀를 사용하여 중첩된 객체를 만드는 방법에 대한 이해도가 높아질 것입니다.",
      "meta": {
        "title": "JavaScript 객체 재귀 중첩 | 코딩 튜토리얼",
        "description": "평면 배열에서 서로 연결된 객체를 재귀적으로 중첩하는 'nest'라는 JavaScript 함수를 살펴보세요. 재귀, Array.prototype.filter(), Array.prototype.map() 을 사용하여 중첩된 객체를 만드는 방법을 알아보세요.",
        "keywords": "JavaScript, 재귀, 중첩 객체, Array.prototype.filter, Array.prototype.map, 자바스크립트 객체 중첩, 자바스크립트 재귀"
      },
      "details": {
        "steps": [
          {
            "title": "객체 중첩",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "Node 명령어 사용 확인",
                "file": "verify1-1.sh",
                "hint": "터미널/SSH 에서 'node'를 입력하고 Enter 키를 눌러 JavaScript 를 실행할 수 있습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Aninhamento Recursivo de Objetos JavaScript Vinculados",
      "description": "Neste laboratório, exploraremos uma função JavaScript chamada 'nest' que aninha recursivamente objetos ligados uns aos outros em um array plano. A função utiliza recursão, Array.prototype.filter() e Array.prototype.map() para filtrar e aninhar os itens com base em suas propriedades 'id' e 'parent_id'. Ao final deste laboratório, você terá uma melhor compreensão de como usar a recursão para criar objetos aninhados em JavaScript.",
      "meta": {
        "title": "Aninhar Objetos JavaScript Recursivamente | Tutorial de Codificação",
        "description": "Explore uma função JavaScript chamada 'nest' que aninha recursivamente objetos ligados uns aos outros em um array plano. Aprenda como usar recursão, Array.prototype.filter() e Array.prototype.map() para criar objetos aninhados.",
        "keywords": "JavaScript, Recursão, Objetos Aninhados, Array.prototype.filter, Array.prototype.map, Tutorial JavaScript, Aninhamento de Objetos"
      },
      "details": {
        "steps": [
          {
            "title": "Aninhar Objetos",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar Uso do Comando Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript pode ser executado no Terminal/SSH digitando 'node' e pressionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
