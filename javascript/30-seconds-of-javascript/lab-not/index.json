{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Exploring JavaScript Logical Not Operator",
  "description": "In this lab, we will explore the concept of the logical not operator in JavaScript. Specifically, we will create a function that takes a boolean value and returns its inverse using the ! operator. Through this exercise, you will gain a deeper understanding of how logical operations work in JavaScript and how they can be used in everyday programming tasks.",
  "meta": {
    "title": "Logical Not Operator | JavaScript Fundamentals",
    "description": "Explore the concept of the logical not operator in JavaScript and learn how to create a function that returns the inverse of a boolean value.",
    "keywords": "JavaScript, logical not operator, boolean, programming, coding, tutorial"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Logical Not",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands in ZSH History",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/comp_ops",
          "javascript/data_types",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "探索JavaScript逻辑非运算符",
      "description": "在本实验中，我们将探讨JavaScript中逻辑非运算符的概念。具体来说，我们将创建一个函数，该函数接受一个布尔值，并使用 `!` 运算符返回其相反值。通过这个练习，你将更深入地理解逻辑运算在JavaScript中的工作方式，以及它们如何在日常编程任务中使用。",
      "meta": {
        "title": "逻辑非运算符 | JavaScript基础",
        "description": "探索JavaScript中逻辑非运算符的概念，并学习如何创建一个返回布尔值相反值的函数。",
        "keywords": "JavaScript, 逻辑非运算符, 布尔值, 编程, 编码, 教程"
      },
      "details": {
        "steps": [
          {
            "title": "逻辑非",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "在ZSH历史记录中验证Node命令",
                "file": "verify1-1.sh",
                "hint": "通过在终端/SSH中输入'node'并按回车键，可以运行JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Explorando el operador lógico no de JavaScript",
      "description": "En este laboratorio, exploraremos el concepto del operador lógico no en JavaScript. Específicamente, crearemos una función que tome un valor booleano y devuelva su inverso utilizando el operador!. A través de este ejercicio, obtendrás una comprensión más profunda de cómo funcionan las operaciones lógicas en JavaScript y cómo se pueden utilizar en tareas de programación cotidianas.",
      "meta": {
        "title": "Operador lógico no | Fundamentos de JavaScript",
        "description": "Explora el concepto del operador lógico no en JavaScript y aprende cómo crear una función que devuelva el inverso de un valor booleano.",
        "keywords": "JavaScript, operador lógico no, booleano, programación, codificación, tutorial"
      },
      "details": {
        "steps": [
          {
            "title": "No Lógico",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar los comandos de Node en el historial de ZSH",
                "file": "verify1-1.sh",
                "hint": "JavaScript se puede ejecutar en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Explorer l'opérateur logique non (`not`) en JavaScript",
      "description": "Dans ce laboratoire, nous allons explorer le concept de l'opérateur logique non (`not`) en JavaScript. Plus précisément, nous allons créer une fonction qui prend une valeur booléenne et renvoie son inverse en utilisant l'opérateur `!`. Grâce à cet exercice, vous comprendrez mieux comment les opérations logiques fonctionnent en JavaScript et comment elles peuvent être utilisées dans les tâches de programmation quotidiennes.",
      "meta": {
        "title": "Opérateur logique non (`not`) | Fondamentals JavaScript",
        "description": "Explorez le concept de l'opérateur logique non (`not`) en JavaScript et apprenez à créer une fonction qui renvoie l'inverse d'une valeur booléenne.",
        "keywords": "JavaScript, opérateur logique non (`not`), booléen, programmation, codage, tutoriel"
      },
      "details": {
        "steps": [
          {
            "title": "Non logique",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier les commandes Node dans l'historique ZSH",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Das Erkunden des logischen Negationsoperators in JavaScript",
      "description": "In diesem Lab werden wir das Konzept des logischen Negationsoperators in JavaScript erkunden. Genauer gesagt werden wir eine Funktion erstellen, die einen booleschen Wert annimmt und dessen Inverse mithilfe des!-Operators zurückgibt. Durch diese Übung werden Sie ein tieferes Verständnis dafür erlangen, wie logische Operationen in JavaScript funktionieren und wie sie in alltäglichen Programmieraufgaben eingesetzt werden können.",
      "meta": {
        "title": "Logischer Negationsoperator | JavaScript-Grundlagen",
        "description": "Erkunden Sie das Konzept des logischen Negationsoperators in JavaScript und lernen Sie, wie Sie eine Funktion erstellen, die die Umkehrung eines booleschen Werts zurückgibt.",
        "keywords": "JavaScript, logischer Negationsoperator, boolesch, Programmierung, Codierung, Tutorial"
      },
      "details": {
        "steps": [
          {
            "title": "Logischer Negation",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen von Node-Befehlen in der ZSH-Historie",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Enter-Taste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "JavaScriptの論理否定演算子を探る",
      "description": "この実験では、JavaScriptにおける論理否定演算子の概念を探ります。具体的には、`!`演算子を使用してブール値を受け取り、その逆を返す関数を作成します。この演習を通じて、JavaScriptにおける論理演算がどのように機能するか、また日常のプログラミングタスクでどのように使用できるかを深く理解することができます。",
      "meta": {
        "title": "論理否定演算子 | JavaScriptの基本",
        "description": "JavaScriptにおける論理否定演算子の概念を探り、ブール値の逆を返す関数を作成する方法を学びましょう。",
        "keywords": "JavaScript, 論理否定演算子, ブール値, プログラミング, コーディング, チュートリアル"
      },
      "details": {
        "steps": [
          {
            "title": "論理否定",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ZSH履歴におけるNodeコマンドを確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSHで'node'と入力してEnterキーを押すことでJavaScriptを実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Изучение логического оператора отрицания в JavaScript",
      "description": "В этом лабораторном задании мы будем изучать концепцию логического оператора отрицания в JavaScript. В частности, мы создадим функцию, которая принимает логическое значение и возвращает его обратное с использованием оператора!. С помощью этого упражнения вы получите более глубокое понимание того, как работают логические операции в JavaScript и как они могут быть использованы в повседневных задачах программирования.",
      "meta": {
        "title": "Логический оператор отрицания | Основы JavaScript",
        "description": "Изучите концепцию логического оператора отрицания в JavaScript и узнайте, как создать функцию, которая возвращает обратное значение логическому значению.",
        "keywords": "JavaScript, логический оператор отрицания, логическое, программирование, кодирование, учебник"
      },
      "details": {
        "steps": [
          {
            "title": "Логическое отрицание",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить команды Node в истории ZSH",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
