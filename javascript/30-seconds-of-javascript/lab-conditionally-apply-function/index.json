{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Apply Function When Condition Is Met",
  "description": "In this lab, we will explore the concept of higher-order functions in JavaScript and learn how to use them to create more flexible and reusable code. Specifically, we will focus on the when function, which takes a condition and a callback function as arguments and returns a new function that applies the callback only when the condition is met. By the end of the lab, you will have a better understanding of functional programming principles and how to apply them in your JavaScript projects.",
  "meta": {
    "title": "JavaScript Higher-Order Functions | Functional Programming",
    "description": "Explore the concept of higher-order functions in JavaScript and learn how to use them to create more flexible and reusable code. Discover the power of the 'when' function and its applications.",
    "keywords": "JavaScript, higher-order functions, functional programming, when function, conditional execution, reusable code"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Apply Function When Condition Is Met",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands in ZSH History",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/comp_ops",
          "javascript/data_types",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "在条件满足时应用函数",
      "description": "在本实验中，我们将探索 JavaScript 中的高阶函数概念，并学习如何使用它们来创建更灵活、可复用的代码。具体来说，我们将重点关注 when 函数，它接受一个条件和一个回调函数作为参数，并返回一个新函数，该新函数仅在条件满足时才应用回调。在实验结束时，你将对函数式编程原则以及如何在你的 JavaScript 项目中应用它们有更深入的理解。",
      "meta": {
        "title": "JavaScript 高阶函数 | 函数式编程",
        "description": "探索 JavaScript 中的高阶函数概念，学习如何使用它们来创建更灵活、可复用的代码。发现 when 函数的强大功能及其应用。",
        "keywords": "JavaScript, 高阶函数，函数式编程，when 函数，条件执行，可复用代码"
      },
      "details": {
        "steps": [
          {
            "title": "在条件满足时应用函数",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "在 ZSH 历史记录中验证 Node 命令",
                "file": "verify1-1.sh",
                "hint": "通过输入'node'并按 Enter 键，可以在终端/SSH 中运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Aplicar función cuando se cumple la condición",
      "description": "En este laboratorio, exploraremos el concepto de funciones de orden superior en JavaScript y aprenderemos cómo utilizarlas para crear código más flexible y reutilizable. En particular, nos centraremos en la función when, que toma una condición y una función de devolución de llamada como argumentos y devuelve una nueva función que aplica la devolución de llamada solo cuando se cumple la condición. Al final del laboratorio, tendrás una mejor comprensión de los principios de programación funcional y cómo aplicarlos en tus proyectos de JavaScript.",
      "meta": {
        "title": "Funciones de orden superior de JavaScript | Programación funcional",
        "description": "Explora el concepto de funciones de orden superior en JavaScript y aprende cómo utilizarlas para crear código más flexible y reutilizable. Descubre el poder de la función 'when' y sus aplicaciones.",
        "keywords": "JavaScript, funciones de orden superior, programación funcional, función when, ejecución condicional, código reutilizable"
      },
      "details": {
        "steps": [
          {
            "title": "Aplicar función cuando se cumple la condición",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar comandos de Node en el historial de ZSH",
                "file": "verify1-1.sh",
                "hint": "Se puede ejecutar JavaScript en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Appliquer une fonction lorsque la condition est remplie",
      "description": "Dans ce laboratoire, nous explorerons le concept de fonctions de premier ordre en JavaScript et apprendrons à les utiliser pour créer du code plus flexible et réutilisable. Plus précisément, nous nous concentrerons sur la fonction when, qui prend une condition et une fonction de rappel en arguments et renvoie une nouvelle fonction qui applique le rappel seulement lorsque la condition est remplie. À la fin du laboratoire, vous aurez une meilleure compréhension des principes de la programmation fonctionnelle et de la manière d'appliquer ces principes dans vos projets JavaScript.",
      "meta": {
        "title": "Fonctions de premier ordre JavaScript | Programmation fonctionnelle",
        "description": "Explorez le concept de fonctions de premier ordre en JavaScript et apprenez à les utiliser pour créer du code plus flexible et réutilisable. Découvrez le pouvoir de la fonction 'when' et ses applications.",
        "keywords": "JavaScript, fonctions de premier ordre, programmation fonctionnelle, fonction when, exécution conditionnelle, code réutilisable"
      },
      "details": {
        "steps": [
          {
            "title": "Appliquer une fonction lorsque la condition est remplie",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier les commandes Node dans l'historique ZSH",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Funktion anwenden, wenn eine Bedingung erfüllt ist",
      "description": "In diesem Lab werden wir das Konzept höherer Funktionen in JavaScript erkunden und lernen, wie wir sie verwenden, um flexibleres und wiederverwendbares Code zu schreiben. Insbesondere werden wir uns auf die when-Funktion konzentrieren, die eine Bedingung und eine Callback-Funktion als Argumente nimmt und eine neue Funktion zurückgibt, die die Callback-Funktion nur dann anwendet, wenn die Bedingung erfüllt ist. Am Ende des Labs werden Sie ein besseres Verständnis der funktionalen Programmierungsprinzipien haben und wissen, wie Sie sie in Ihren JavaScript-Projekten anwenden.",
      "meta": {
        "title": "JavaScript - höhere Funktionen | Funktional Programmierung",
        "description": "Erkunden Sie das Konzept höherer Funktionen in JavaScript und lernen Sie, wie Sie sie verwenden, um flexibleres und wiederverwendbares Code zu schreiben. Entdecken Sie die Macht der 'when'-Funktion und ihre Anwendungen.",
        "keywords": "JavaScript, höhere Funktionen, funktionales Programmierung, when-Funktion, bedingte Ausführung, wiederverwendbarer Code"
      },
      "details": {
        "steps": [
          {
            "title": "Funktion anwenden, wenn eine Bedingung erfüllt ist",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen von Node-Befehlen in der ZSH-Historie",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Enter-Taste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "条件が満たされたときに関数を適用する",
      "description": "この実験では、JavaScript における高階関数の概念を探り、それを使ってより柔軟で再利用可能なコードを作成する方法を学びます。具体的には、条件とコールバック関数を引数にとり、条件が満たされたときにのみコールバックを適用する新しい関数を返す `when` 関数に焦点を当てます。実験が終了するまでに、関数型プログラミングの原則とそれを JavaScript プロジェクトでどのように適用するかをより深く理解するようになります。",
      "meta": {
        "title": "JavaScript の高階関数 | 関数型プログラミング",
        "description": "JavaScript における高階関数の概念を探り、それを使ってより柔軟で再利用可能なコードを作成する方法を学びます。'when'関数の力とその応用を発見しましょう。",
        "keywords": "JavaScript, 高階関数，関数型プログラミング，when 関数，条件付き実行，再利用可能なコード"
      },
      "details": {
        "steps": [
          {
            "title": "条件が満たされたときに関数を適用する",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ZSH 履歴の Node コマンドを確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で'node'と入力して Enter キーを押すことで JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Применение функции при выполнении условия",
      "description": "В этом практическом занятии мы изучим концепцию высших порядковых функций в JavaScript и научимся использовать их для создания более гибкого и повторно используемого кода. В частности, мы сосредоточимся на функции when, которая принимает условие и функцию обратного вызова в качестве аргументов и возвращает новую функцию, которая применяет функцию обратного вызова только при выполнении условия. В конце практического занятия вы будете иметь более глубокое понимание принципов функционального программирования и способов их применения в своих проектах на JavaScript.",
      "meta": {
        "title": "Высшие порядковые функции JavaScript | Функциональное программирование",
        "description": "Изучаем концепцию высших порядковых функций в JavaScript и узнаем, как ими пользоваться для создания более гибкого и повторно используемого кода. Откроем силу функции 'when' и ее применения.",
        "keywords": "JavaScript, высшие порядковые функции, функциональное программирование, функция when, условное выполнение, повторно используемый код"
      },
      "details": {
        "steps": [
          {
            "title": "Применение функции при выполнении условия",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить команды Node в истории ZSH",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
