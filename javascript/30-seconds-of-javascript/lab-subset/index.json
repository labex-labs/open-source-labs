{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Subset of Iterable",
  "description": "In this lab, we will explore how to check if a subset of values in one iterable is contained in another iterable. We will use the Set constructor and Array.prototype.every() to create a function that checks if all values in the first iterable are present in the second iterable. By the end of this lab, you will have a better understanding of how to work with sets in JavaScript.",
  "meta": {
    "title": "Subset of Iterable: Mastering Set Operations in JavaScript",
    "description": "Explore how to check if a subset of values in one iterable is contained in another iterable using Set and Array.prototype.every().",
    "keywords": "javascript, javascript practice, subset, javascript practice online, set, iterable, javascript lab, javascript tutor, array"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Subset of Iterable",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands in ZSH History",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/comp_ops",
          "javascript/data_types",
          "javascript/spread_rest",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "可迭代对象的子集",
      "description": "在本实验中，我们将探索如何检查一个可迭代对象中的值子集是否包含在另一个可迭代对象中。我们将使用 Set 构造函数和 Array.prototype.every() 来创建一个函数，该函数检查第一个可迭代对象中的所有值是否都存在于第二个可迭代对象中。在本实验结束时，你将对如何在 JavaScript 中使用集合有更深入的理解。",
      "meta": {
        "title": "可迭代对象的子集：掌握 JavaScript 中的集合操作",
        "description": "探索如何使用 Set 和 Array.prototype.every() 检查一个可迭代对象中的值子集是否包含在另一个可迭代对象中。",
        "keywords": "JavaScript, JavaScript 练习，子集，在线 JavaScript 练习，集合，可迭代对象，JavaScript 实验，JavaScript 教程，数组"
      },
      "details": {
        "steps": [
          {
            "title": "可迭代对象的子集",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "在 ZSH 历史记录中验证 Node 命令",
                "file": "verify1-1.sh",
                "hint": "通过在终端/SSH 中输入'node'并按回车键，可以运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Subconjunto de Iterable",
      "description": "En este laboratorio, exploraremos cómo comprobar si un subconjunto de valores en un iterable está contenido en otro iterable. Usaremos el constructor Set y Array.prototype.every() para crear una función que compruebe si todos los valores en el primer iterable están presentes en el segundo iterable. Al final de este laboratorio, tendrás una mejor comprensión de cómo trabajar con conjuntos en JavaScript.",
      "meta": {
        "title": "Subconjunto de Iterable: Dominando las Operaciones de Conjunto en JavaScript",
        "description": "Explora cómo comprobar si un subconjunto de valores en un iterable está contenido en otro iterable utilizando Set y Array.prototype.every().",
        "keywords": "javascript, práctica de javascript, subconjunto, práctica de javascript en línea, conjunto, iterable, laboratorio de javascript, tutor de javascript, matriz"
      },
      "details": {
        "steps": [
          {
            "title": "Subconjunto de Iterable",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar los comandos de Node en el historial de ZSH",
                "file": "verify1-1.sh",
                "hint": "Se puede ejecutar JavaScript en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Sous-ensemble d'itérable",
      "description": "Dans ce laboratoire, nous allons explorer la manière de vérifier si un sous-ensemble de valeurs dans un itérable est contenu dans un autre itérable. Nous utiliserons le constructeur Set et Array.prototype.every() pour créer une fonction qui vérifie si toutes les valeurs du premier itérable sont présentes dans le second itérable. À la fin de ce laboratoire, vous aurez une meilleure compréhension de la manière de travailler avec les ensembles en JavaScript.",
      "meta": {
        "title": "Sous-ensemble d'itérable : Maîtriser les opérations sur les ensembles en JavaScript",
        "description": "Explorez la manière de vérifier si un sous-ensemble de valeurs dans un itérable est contenu dans un autre itérable en utilisant Set et Array.prototype.every().",
        "keywords": "javascript, pratique javascript, sous-ensemble, pratique javascript en ligne, ensemble, itérable, laboratoire javascript, tuteur javascript, tableau"
      },
      "details": {
        "steps": [
          {
            "title": "Sous-ensemble d'itérable",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier les commandes Node dans l'historique ZSH",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Teilmenge von Iterable",
      "description": "In diesem Lab werden wir untersuchen, wie man überprüft, ob eine Teilmenge von Werten in einem Iterable in einem anderen Iterable enthalten ist. Wir werden den Set-Konstruktor und Array.prototype.every() verwenden, um eine Funktion zu erstellen, die überprüft, ob alle Werte im ersten Iterable im zweiten Iterable vorhanden sind. Am Ende dieses Labs werden Sie ein besseres Verständnis dafür haben, wie man mit Sets in JavaScript umgeht.",
      "meta": {
        "title": "Teilmenge von Iterable: Beherrschen von Set-Operationen in JavaScript",
        "description": "Entdecken Sie, wie man überprüft, ob eine Teilmenge von Werten in einem Iterable in einem anderen Iterable enthalten ist, indem Sie Set und Array.prototype.every() verwenden.",
        "keywords": "javascript, javascript Übung, Teilmenge, Online-JavaScript-Übung, Set, Iterable, JavaScript-Lab, JavaScript-Tutor, Array"
      },
      "details": {
        "steps": [
          {
            "title": "Teilmenge von Iterable",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen von Node-Befehlen in der ZSH-Historie",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Enter-Taste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "反復可能オブジェクトのサブセット",
      "description": "この実験では、1 つの反復可能オブジェクトの値のサブセットが別の反復可能オブジェクトに含まれているかどうかを確認する方法を探ります。Set コンストラクタと Array.prototype.every() を使って、最初の反復可能オブジェクトのすべての値が 2 番目の反復可能オブジェクトに存在するかどうかを確認する関数を作成します。この実験が終了するまでに、JavaScript におけるセットの使い方をより深く理解するようになります。",
      "meta": {
        "title": "反復可能オブジェクトのサブセット：JavaScript におけるセット操作のマスター",
        "description": "Set と Array.prototype.every() を使って、1 つの反復可能オブジェクトの値のサブセットが別の反復可能オブジェクトに含まれているかどうかを確認する方法を探ります。",
        "keywords": "javascript, javascript 練習，サブセット，オンライン javascript 練習，セット，反復可能オブジェクト，javascript 実験，javascript チューター, 配列"
      },
      "details": {
        "steps": [
          {
            "title": "反復可能オブジェクトのサブセット",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "ZSH 履歴における Node コマンドを確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で 'node' と入力して Enter キーを押すことで JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Подмножество итерируемого объекта",
      "description": "В этом практическом занятии мы изучим, как проверить, содержится ли подмножество значений одного итерируемого объекта в другом итерируемом объекте. Мы будем использовать конструктор Set и метод Array.prototype.every(), чтобы создать функцию, которая проверяет, присутствуют ли все значения в первом итерируемом объекте во втором итерируемом объекте. В конце этого практического занятия у вас будет лучше понимание, как работать с множествами в JavaScript.",
      "meta": {
        "title": "Подмножество итерируемого объекта: мастерство в операциях с множествами в JavaScript",
        "description": "Изучите, как проверить, содержится ли подмножество значений одного итерируемого объекта в другом итерируемом объекте с использованием Set и Array.prototype.every().",
        "keywords": "javascript, практика javascript, подмножество, онлайн практика javascript, множество, итерируемый объект, практическое занятие javascript, преподаватель javascript, массив"
      },
      "details": {
        "steps": [
          {
            "title": "Подмножество итерируемого объекта",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить команды Node в истории ZSH",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
