{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Run Function Asynchronously",
  "description": "In this lab, we will learn how to execute long-running functions asynchronously by using a Web Worker. The purpose of the lab is to teach developers how to run functions in a separate thread, allowing them to avoid blocking the UI while the function is executing. The lab provides a practical example of how to create a Web Worker and use it to run a function.",
  "meta": {
    "title": "Asynchronous Function Execution with Web Workers",
    "description": "Learn how to run long-running functions asynchronously using Web Workers to avoid blocking the UI.",
    "keywords": "concurrency, javascript, asynchronous, web workers, javascript practice, javascript practice online, javascript lab, function execution, javascript tutor"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": true,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Run Function Asynchronously",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Commands Executed",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/async_prog",
          "javascript/comp_ops",
          "javascript/data_types",
          "javascript/debugging",
          "javascript/loops",
          "javascript/obj_manip",
          "javascript/template_lit",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "异步运行函数",
      "description": "在本实验中，我们将学习如何使用 Web Worker 异步执行长时间运行的函数。本实验的目的是教导开发者如何在单独的线程中运行函数，从而在函数执行时避免阻塞用户界面。本实验提供了一个关于如何创建 Web Worker 并使用它来运行函数的实际示例。",
      "meta": {
        "title": "使用 Web Workers 进行异步函数执行",
        "description": "学习如何使用 Web Workers 异步运行长时间运行的函数以避免阻塞用户界面。",
        "keywords": "并发，JavaScript, 异步，Web Workers, JavaScript 实践，在线 JavaScript 实践，JavaScript 实验，函数执行，JavaScript 教程"
      },
      "details": {
        "steps": [
          {
            "title": "异步运行函数",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证已执行的 Node 命令",
                "file": "verify1-1.sh",
                "hint": "在终端/SSH 中输入 'node' 并回车即可运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Ejecutar funciones asíncronamente",
      "description": "En este laboratorio, aprenderemos a ejecutar funciones de larga duración de manera asíncrona mediante el uso de un Web Worker. El objetivo del laboratorio es enseñar a los desarrolladores a ejecutar funciones en un hilo separado, lo que les permite evitar bloquear la interfaz de usuario mientras la función está en ejecución. El laboratorio proporciona un ejemplo práctico de cómo crear un Web Worker y utilizarlo para ejecutar una función.",
      "meta": {
        "title": "Ejecución de funciones asíncronas con Web Workers",
        "description": "Aprende a ejecutar funciones de larga duración de manera asíncrona utilizando Web Workers para evitar bloquear la interfaz de usuario.",
        "keywords": "concurrencia, javascript, asíncrono, web workers, práctica de javascript, práctica de javascript en línea, laboratorio de javascript, ejecución de funciones, tutor de javascript"
      },
      "details": {
        "steps": [
          {
            "title": "Ejecutar funciones asíncronas",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar comandos de Node ejecutados",
                "file": "verify1-1.sh",
                "hint": "Se puede ejecutar JavaScript en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Exécuter des fonctions de manière asynchrone",
      "description": "Dans ce laboratoire, nous allons apprendre à exécuter des fonctions à long terme de manière asynchrone en utilisant un Web Worker. Le but du laboratoire est d'enseigner aux développeurs comment exécuter des fonctions dans un fil séparé, leur permettant d'éviter de bloquer l'interface utilisateur pendant que la fonction est en cours d'exécution. Le laboratoire fournit un exemple pratique de création d'un Web Worker et de son utilisation pour exécuter une fonction.",
      "meta": {
        "title": "Exécution de fonctions asynchrones avec Web Workers",
        "description": "Apprenez à exécuter des fonctions à long terme de manière asynchrone en utilisant Web Workers pour éviter de bloquer l'interface utilisateur.",
        "keywords": "concurrence, javascript, asynchrone, web workers, pratique javascript, pratique javascript en ligne, laboratoire javascript, exécution de fonction, tuteur javascript"
      },
      "details": {
        "steps": [
          {
            "title": "Exécuter des fonctions de manière asynchrone",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier les commandes Node exécutées",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Funktion asynchron ausführen",
      "description": "In diesem Lab werden wir lernen, wie man langlaufende Funktionen asynchron mithilfe eines Web Workers ausführt. Ziel des Labs ist es, Entwicklern zu beibringen, Funktionen in einem separaten Thread auszuführen, um so die Blockierung der Benutzeroberfläche während der Ausführung der Funktion zu vermeiden. Das Lab bietet ein praktisches Beispiel dafür, wie man einen Web Worker erstellt und ihn verwendet, um eine Funktion auszuführen.",
      "meta": {
        "title": "Asynchrone Funktionsausführung mit Web Workers",
        "description": "Lernen Sie, wie man langlaufende Funktionen asynchron mit Web Workers ausführt, um die Benutzeroberfläche nicht zu blockieren.",
        "keywords": "Konkurrenz, JavaScript, asynchron, Web Worker, JavaScript Übung, Online-JavaScript-Übung, JavaScript-Lab, Funktionsausführung, JavaScript-Tutor"
      },
      "details": {
        "steps": [
          {
            "title": "Funktion asynchron ausführen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen, ob die Node-Befehle ausgeführt wurden",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Eingabetaste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "非同期で関数を実行する",
      "description": "この実験では、Web Worker を使用して長時間実行される関数を非同期で実行する方法を学びます。この実験の目的は、開発者に関数を別のスレッドで実行する方法を教え、関数の実行中に UI をブロックしないようにすることです。この実験では、Web Worker を作成して関数を実行する方法の実際の例を示します。",
      "meta": {
        "title": "Web Worker による非同期関数の実行",
        "description": "Web Worker を使用して長時間実行される関数を非同期で実行し、UI をブロックしない方法を学びましょう。",
        "keywords": "並行処理，JavaScript, 非同期，Web Worker, JavaScript の練習，オンラインでの JavaScript の練習，JavaScript の実験，関数の実行，JavaScript の指導"
      },
      "details": {
        "steps": [
          {
            "title": "非同期で関数を実行する",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "実行された Node コマンドを確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で 'node' と入力して Enter キーを押すことで、JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Выполнение функций асинхронно",
      "description": "В этом практическом занятии мы научимся выполнять длительно выполняющиеся функции асинхронно с использованием Web Worker. Целью практического занятия является обучение разработчикам выполнять функции в отдельном потоке, что позволяет избегать блокировки интерфейса пользователя во время выполнения функции. Практическое занятие представляет собой пример создания Web Worker и его использования для выполнения функции.",
      "meta": {
        "title": "Асинхронное выполнение функций с Web Worker",
        "description": "Изучите, как выполнять длительно выполняющиеся функции асинхронно с использованием Web Worker, чтобы избежать блокировки интерфейса пользователя.",
        "keywords": "параллелизм, javascript, асинхронность, web worker, практика javascript, онлайн практика javascript, практическое занятие javascript, выполнение функции, преподавание javascript"
      },
      "details": {
        "steps": [
          {
            "title": "Выполнение функций асинхронно",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить выполнение команд Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "함수 비동기 실행",
      "description": "이 랩에서는 Web Worker 를 사용하여 오래 실행되는 함수를 비동기적으로 실행하는 방법을 배웁니다. 이 랩의 목적은 개발자가 함수를 별도의 스레드에서 실행하여 함수가 실행되는 동안 UI 를 차단하지 않도록 하는 방법을 가르치는 것입니다. 이 랩은 Web Worker 를 생성하고 이를 사용하여 함수를 실행하는 실용적인 예제를 제공합니다.",
      "meta": {
        "title": "Web Worker 를 사용한 비동기 함수 실행",
        "description": "UI 차단을 방지하기 위해 Web Worker 를 사용하여 오래 실행되는 함수를 비동기적으로 실행하는 방법을 알아보세요.",
        "keywords": "동시성, 자바스크립트, 비동기, 웹 워커, 자바스크립트 실습, 자바스크립트 온라인 실습, 자바스크립트 랩, 함수 실행, 자바스크립트 튜터"
      },
      "details": {
        "steps": [
          {
            "title": "함수 비동기 실행",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "노드 명령어 실행 확인",
                "file": "verify1-1.sh",
                "hint": "터미널/SSH 에서 'node'를 입력하고 Enter 키를 눌러 JavaScript 를 실행할 수 있습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Executar Função Assincronamente",
      "description": "Neste laboratório, aprenderemos como executar funções de longa duração de forma assíncrona usando um Web Worker. O objetivo do laboratório é ensinar aos desenvolvedores como executar funções em uma thread separada, permitindo que evitem o bloqueio da UI enquanto a função é executada. O laboratório fornece um exemplo prático de como criar um Web Worker e usá-lo para executar uma função.",
      "meta": {
        "title": "Execução de Funções Assíncronas com Web Workers",
        "description": "Aprenda a executar funções de longa duração de forma assíncrona usando Web Workers para evitar o bloqueio da UI. Melhore o desempenho do seu JavaScript!",
        "keywords": "concorrência, javascript, assíncrono, web workers, prática javascript, prática javascript online, laboratório javascript, execução de função, tutorial javascript"
      },
      "details": {
        "steps": [
          {
            "title": "Executar Função Assincronamente",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar Comandos Node Executados",
                "file": "verify1-1.sh",
                "hint": "JavaScript pode ser executado no Terminal/SSH digitando 'node' e pressionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
