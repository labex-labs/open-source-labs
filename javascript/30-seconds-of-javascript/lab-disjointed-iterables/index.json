{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Disjointed Iterables in JavaScript",
  "description": "In this lab, we will dive into the concept of disjointed iterables in JavaScript. We will learn how to use the Set constructor and Array.prototype.every() method to check if two iterables have any common values. By the end of this lab, you will have a solid understanding of how to implement this functionality in your JavaScript code.",
  "meta": {
    "title": "Disjointed Iterables in JavaScript | Set | Array.every()",
    "description": "Explore the concept of disjointed iterables in JavaScript. Learn how to use Set and Array.every() to check if two iterables have any common values.",
    "keywords": "JavaScript, Disjointed Iterables, Set, Array.every(), Programming Tutorials"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Disjointed Iterables",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Node Command Usage",
            "file": "verify1-1.sh",
            "hint": "JavaScript can be run in the Terminal/SSH by typing 'node' and pressing Enter.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "javascript/arith_ops",
          "javascript/comp_ops",
          "javascript/data_types",
          "javascript/spread_rest",
          "javascript/variables"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["Lotus-7"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-code/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-code"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "JavaScript 中的不相交可迭代对象",
      "description": "在本实验中，我们将深入探讨 JavaScript 中不相交可迭代对象的概念。我们将学习如何使用 Set 构造函数和 Array.prototype.every() 方法来检查两个可迭代对象是否有任何共同的值。在本实验结束时，你将对如何在你的 JavaScript 代码中实现此功能有扎实的理解。",
      "meta": {
        "title": "JavaScript 中的不相交可迭代对象 | Set | Array.every()",
        "description": "探索 JavaScript 中不相交可迭代对象的概念。学习如何使用 Set 和 Array.every() 来检查两个可迭代对象是否有任何共同的值。",
        "keywords": "JavaScript, 不相交可迭代对象，Set, Array.every(), 编程教程"
      },
      "details": {
        "steps": [
          {
            "title": "不相交的可迭代对象",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Node 命令的用法",
                "file": "verify1-1.sh",
                "hint": "在终端/SSH 中，通过输入 'node' 并按下回车键，可以运行 JavaScript。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Iterables Disjuntos en JavaScript",
      "description": "En este laboratorio, profundizaremos en el concepto de iterables disjuntos en JavaScript. Aprenderemos a usar el constructor Set y el método Array.prototype.every() para comprobar si dos iterables tienen valores comunes. Al final de este laboratorio, tendrás una comprensión sólida de cómo implementar esta funcionalidad en tu código JavaScript.",
      "meta": {
        "title": "Iterables Disjuntos en JavaScript | Set | Array.every()",
        "description": "Explora el concepto de iterables disjuntos en JavaScript. Aprende a usar Set y Array.every() para comprobar si dos iterables tienen valores comunes.",
        "keywords": "JavaScript, Iterables Disjuntos, Set, Array.every(), Tutoriales de Programación"
      },
      "details": {
        "steps": [
          {
            "title": "Iterables Disjuntos",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el uso del comando Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript se puede ejecutar en la Terminal/SSH escribiendo 'node' y presionando Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Itérateurs disjoints en JavaScript",
      "description": "Dans ce laboratoire, nous allons approfondir le concept d'itérateurs disjoints en JavaScript. Nous allons apprendre à utiliser le constructeur Set et la méthode Array.prototype.every() pour vérifier si deux itérateurs ont des valeurs communes. À la fin de ce laboratoire, vous aurez une compréhension solide de la manière d'implémenter cette fonctionnalité dans votre code JavaScript.",
      "meta": {
        "title": "Itérateurs disjoints en JavaScript | Set | Array.every()",
        "description": "Explorez le concept d'itérateurs disjoints en JavaScript. Apprenez à utiliser Set et Array.every() pour vérifier si deux itérateurs ont des valeurs communes.",
        "keywords": "JavaScript, Itérateurs disjoints, Set, Array.every(), Didacticiels de programmation"
      },
      "details": {
        "steps": [
          {
            "title": "Itérateurs disjoints",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier l'utilisation de la commande Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript peut être exécuté dans le Terminal/SSH en tapant 'node' et en appuyant sur Entrée."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Disjunkte Iterierbare in JavaScript",
      "description": "In diesem Lab werden wir uns mit dem Konzept disjunkter Iterierbare in JavaScript befassen. Wir werden lernen, wie man den Set-Konstruktor und die Array.prototype.every()-Methode verwendet, um zu überprüfen, ob zwei Iterierbare gemeinsame Werte haben. Am Ende dieses Labs werden Sie eine solide Vorstellung davon haben, wie man diese Funktionalität in Ihrem JavaScript-Code implementiert.",
      "meta": {
        "title": "Disjunkte Iterierbare in JavaScript | Set | Array.every()",
        "description": "Erkunden Sie das Konzept disjunkter Iterierbare in JavaScript. Lernen Sie, wie man Set und Array.every() verwendet, um zu überprüfen, ob zwei Iterierbare gemeinsame Werte haben.",
        "keywords": "JavaScript, Disjunkte Iterierbare, Set, Array.every(), Programmierungstutorials"
      },
      "details": {
        "steps": [
          {
            "title": "Disjunkte Iterierbare",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren der Verwendung des Node-Befehls",
                "file": "verify1-1.sh",
                "hint": "JavaScript kann im Terminal/SSH ausgeführt werden, indem man 'node' eingibt und die Eingabetaste drückt."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "JavaScript における互いに排他的な反復可能オブジェクト",
      "description": "この実験では、JavaScript における互いに排他的な反復可能オブジェクトの概念について深く掘り下げます。2 つの反復可能オブジェクトに共通する値があるかどうかを確認するために、Set コンストラクターと Array.prototype.every() メソッドをどのように使用するかを学びます。この実験が終了するとき、JavaScript コードでこの機能を実装する方法を十分に理解しているでしょう。",
      "meta": {
        "title": "JavaScript における互いに排他的な反復可能オブジェクト | Set | Array.every()",
        "description": "JavaScript における互いに排他的な反復可能オブジェクトの概念を探ります。Set と Array.every() を使用して、2 つの反復可能オブジェクトに共通する値があるかどうかを確認する方法を学びましょう。",
        "keywords": "JavaScript, 互いに排他的な反復可能オブジェクト，Set, Array.every(), プログラミング チュートリアル"
      },
      "details": {
        "steps": [
          {
            "title": "互いに排他的な反復可能オブジェクト",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Node コマンドの使用を確認する",
                "file": "verify1-1.sh",
                "hint": "ターミナル/SSH で 'node' と入力して Enter キーを押すことで、JavaScript を実行できます。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Разделяемые итерируемые объекты в JavaScript",
      "description": "В этом практическом занятии мы углубимся в концепцию разделяемых итерируемых объектов в JavaScript. Мы узнаем, как использовать конструктор Set и метод Array.prototype.every() для проверки, имеют ли два итерируемых объекта общие значения. В конце этого практического занятия вы будете уверенно знать, как реализовать эту функциональность в своем коде на JavaScript.",
      "meta": {
        "title": "Разделяемые итерируемые объекты в JavaScript | Set | Array.every()",
        "description": "Изучите концепцию разделяемых итерируемых объектов в JavaScript. Узнайте, как использовать Set и Array.every(), чтобы проверить, имеют ли два итерируемых объекта общие значения.",
        "keywords": "JavaScript, Разделяемые итерируемые объекты, Set, Array.every(), Руководства по программированию"
      },
      "details": {
        "steps": [
          {
            "title": "Разделяемые итерируемые объекты",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить использование команды Node",
                "file": "verify1-1.sh",
                "hint": "JavaScript можно запустить в Терминале/SSH, введя 'node' и нажав Enter."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
