{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Reference Cycles Can Leak Memory",
  "description": "In this lab, we explore how Rust's memory safety guarantees make it difficult but not impossible to accidentally create memory leaks, specifically when using Rc<T> and RefCell<T> which can result in reference cycles that prevent values from being dropped and thus leaking memory.",
  "meta": {
    "title": "Reference Cycles Can Leak Memory in Rust",
    "description": "Explore how Rust's memory safety guarantees make it difficult but not impossible to accidentally create memory leaks using Rc",
    "keywords": "rust playground, rc, reference cycles, memory leaks, rust tutor, rust online compiler, rust commands, rust practice, rust online, rust online playground"
  },
  "difficulty": "Beginner",
  "time": 30,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Reference Cycles Can Leak Memory",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      },
      {
        "title": "Creating a Reference Cycle",
        "text": "en/step2.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify2-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/method_syntax",
          "rust/operator_overloading",
          "rust/traits",
          "rust/variable_declarations"
        ]
      },
      {
        "title": "Preventing Reference Cycles Using Weak<T>",
        "text": "en/step3.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify3-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      },
      {
        "title": "Creating a Tree Data Structure: A Node with Child Nodes",
        "text": "en/step4.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify4-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/method_syntax",
          "rust/operator_overloading",
          "rust/variable_declarations"
        ]
      },
      {
        "title": "Adding a Reference from a Child to Its Parent",
        "text": "en/step5.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify5-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/method_syntax",
          "rust/operator_overloading",
          "rust/variable_declarations"
        ]
      },
      {
        "title": "Visualizing Changes to strong_count and weak_count",
        "text": "en/step6.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify6-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/method_syntax",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/book/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/book"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "引用循环可能导致内存泄漏",
      "description": "在本实验中，我们探讨 Rust 的内存安全保障如何使得意外创建内存泄漏变得困难但并非不可能，特别是在使用 Rc<T>和 RefCell<T>时，这可能会导致引用循环，从而阻止值被释放并进而导致内存泄漏。",
      "meta": {
        "title": "Rust 中引用循环可能导致内存泄漏",
        "description": "探索 Rust 的内存安全保障如何使得使用 Rc 意外创建内存泄漏变得困难但并非不可能",
        "keywords": "Rust 游乐场，Rc, 引用循环，内存泄漏，Rust 教程，Rust 在线编译器，Rust 命令，Rust 练习，Rust 在线，Rust 在线游乐场"
      },
      "details": {
        "steps": [
          {
            "title": "引用循环可能导致内存泄漏",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          },
          {
            "title": "创建引用循环",
            "text": "zh/step2.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify2-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          },
          {
            "title": "使用 Weak<T>防止引用循环",
            "text": "zh/step3.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify3-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          },
          {
            "title": "创建树状数据结构：带有子节点的节点",
            "text": "zh/step4.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify4-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          },
          {
            "title": "添加从子节点到其父节点的引用",
            "text": "zh/step5.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify5-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          },
          {
            "title": "可视化强引用计数和弱引用计数的变化",
            "text": "zh/step6.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify6-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Los ciclos de referencia pueden deslevar memoria",
      "description": "En este laboratorio, exploramos cómo las garantías de seguridad de memoria de Rust hacen difícil pero no imposible accidentalmente crear desechos de memoria, específicamente cuando se utiliza Rc<T> y RefCell<T>, lo que puede resultar en ciclos de referencia que impiden que los valores se eliminen y, por lo tanto, desleven memoria.",
      "meta": {
        "title": "Los ciclos de referencia pueden deslevar memoria en Rust",
        "description": "Explore cómo las garantías de seguridad de memoria de Rust hacen difícil pero no imposible accidentalmente crear desechos de memoria usando Rc",
        "keywords": "rust playground, rc, ciclos de referencia, desechos de memoria, tutor de rust, compilador en línea de rust, comandos de rust, práctica de rust, rust en línea, playground en línea de rust"
      },
      "details": {
        "steps": [
          {
            "title": "Los ciclos de referencia pueden deslevar memoria",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          },
          {
            "title": "Creando un ciclo de referencia",
            "text": "es/step2.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify2-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          },
          {
            "title": "Evitando ciclos de referencia usando Weak<T>",
            "text": "es/step3.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify3-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          },
          {
            "title": "Creando una estructura de datos de árbol: Un nodo con nodos hijos",
            "text": "es/step4.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify4-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          },
          {
            "title": "Agregando una referencia de un hijo a su padre",
            "text": "es/step5.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify5-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          },
          {
            "title": "Visualizando los cambios en strong_count y weak_count",
            "text": "es/step6.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify6-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Les cycles de référence peuvent fuitier la mémoire",
      "description": "Dans ce laboratoire, nous explorons la manière dont les garanties de sécurité mémoire de Rust rendent difficile mais pas impossible de créer accidentellement des fuites mémoire, en particulier lorsqu'on utilise Rc<T> et RefCell<T> qui peuvent entraîner des cycles de référence empêchant les valeurs d'être supprimées et donc fuitant la mémoire.",
      "meta": {
        "title": "Les cycles de référence peuvent fuitier la mémoire en Rust",
        "description": "Explorez la manière dont les garanties de sécurité mémoire de Rust rendent difficile mais pas impossible de créer accidentellement des fuites mémoire en utilisant Rc",
        "keywords": "plateforme de pratique Rust, rc, cycles de référence, fuites mémoire, tutoriel Rust, compilateur en ligne Rust, commandes Rust, pratique Rust, Rust en ligne, plateforme de pratique Rust en ligne"
      },
      "details": {
        "steps": [
          {
            "title": "Les cycles de référence peuvent fuitier la mémoire",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          },
          {
            "title": "Création d'un cycle de référence",
            "text": "fr/step2.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify2-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          },
          {
            "title": "Prévenir les cycles de référence en utilisant Weak<T>",
            "text": "fr/step3.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify3-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          },
          {
            "title": "Création d'une structure de données arborescente : Un nœud avec des nœuds enfants",
            "text": "fr/step4.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify4-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          },
          {
            "title": "Ajout d'une référence d'un enfant à son parent",
            "text": "fr/step5.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify5-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          },
          {
            "title": "Visualiser les modifications de strong_count et weak_count",
            "text": "fr/step6.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify6-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Referenzzyklen können Speicher verlieren",
      "description": "In diesem Lab untersuchen wir, wie Rusts Garantien zur Arbeitsspeichersicherheit es schwierig, aber nicht unmöglich machen, versehentlich Speicherlecks zu erzeugen, insbesondere wenn Rc<T> und RefCell<T> verwendet werden, was zu Referenzzyklen führen kann, die verhindern, dass Werte gelöscht werden und somit Speicher verlieren.",
      "meta": {
        "title": "Referenzzyklen können in Rust Speicher verlieren",
        "description": "Untersuchen Sie, wie Rusts Garantien zur Arbeitsspeichersicherheit es schwierig, aber nicht unmöglich machen, versehentlich Speicherlecks mit Rc zu erzeugen",
        "keywords": "Rust-Spielplatz, rc, Referenzzyklen, Speicherlecks, Rust-Tutor, Rust-Online-Compiler, Rust-Befehle, Rust-Praxis, Rust-Online, Rust-Online-Spielplatz"
      },
      "details": {
        "steps": [
          {
            "title": "Referenzzyklen können Speicher verlieren",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          },
          {
            "title": "Erstellen eines Referenzzyklus",
            "text": "de/step2.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify2-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          },
          {
            "title": "Verhindern von Referenzzyklen mit Weak<T>",
            "text": "de/step3.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify3-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          },
          {
            "title": "Erstellen einer Baum-Datenstruktur: Ein Knoten mit Kindknoten",
            "text": "de/step4.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify4-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          },
          {
            "title": "Hinzufügen einer Referenz von einem Kind zu seinem Elternteil",
            "text": "de/step5.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify5-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          },
          {
            "title": "Visualisierung von Änderungen an strong_count und weak_count",
            "text": "de/step6.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify6-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "参照サイクルによるメモリリーク",
      "description": "この実験では、Rust のメモリセーフティ保証が、偶然にメモリリークを作成することを困難にはしますが不可能ではない方法を探ります。特に、Rc<T>と RefCell<T>を使用する場合、参照サイクルが発生して値が破棄されず、メモリがリークする可能性があります。",
      "meta": {
        "title": "Rust における参照サイクルによるメモリリーク",
        "description": "Rust のメモリセーフティ保証が、Rc を使用して偶然にメモリリークを作成することを困難にはしますが不可能ではない方法を探ります。",
        "keywords": "rust playground, rc, 参照サイクル，メモリリーク，rust tutor, rust オンラインコンパイラ，rust コマンド，rust 練習，rust オンライン，rust オンライン playground"
      },
      "details": {
        "steps": [
          {
            "title": "参照サイクルによるメモリリーク",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップでは現在検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップでは現在検証はありません"
              }
            ]
          },
          {
            "title": "参照サイクルの作成",
            "text": "ja/step2.md",
            "verify": [
              {
                "name": "このステップでは現在検証はありません",
                "file": "verify2-1.sh",
                "hint": "このステップでは現在検証はありません"
              }
            ]
          },
          {
            "title": "Weak<T>を使用した参照サイクルの防止",
            "text": "ja/step3.md",
            "verify": [
              {
                "name": "このステップでは現在検証はありません",
                "file": "verify3-1.sh",
                "hint": "このステップでは現在検証はありません"
              }
            ]
          },
          {
            "title": "木データ構造の作成：子ノードを持つノード",
            "text": "ja/step4.md",
            "verify": [
              {
                "name": "このステップでは現在検証はありません",
                "file": "verify4-1.sh",
                "hint": "このステップでは現在検証はありません"
              }
            ]
          },
          {
            "title": "子ノードから親ノードへの参照の追加",
            "text": "ja/step5.md",
            "verify": [
              {
                "name": "このステップでは現在検証はありません",
                "file": "verify5-1.sh",
                "hint": "このステップでは現在検証はありません"
              }
            ]
          },
          {
            "title": "strong_count と weak_count の変化を視覚化する",
            "text": "ja/step6.md",
            "verify": [
              {
                "name": "このステップでは現在検証はありません",
                "file": "verify6-1.sh",
                "hint": "このステップでは現在検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Циклы ссылок могут утечь память",
      "description": "В этой лабораторной работе мы исследуем, как гарантии безопасности памяти Rust делают сложным, но не невозможным случайно создать утечку памяти, особенно при использовании Rc<T> и RefCell<T>, которые могут привести к циклам ссылок, препятствующим удалению значений и, следовательно, утечке памяти.",
      "meta": {
        "title": "Циклы ссылок могут утечь память в Rust",
        "description": "Исследуйте, как гарантии безопасности памяти Rust делают сложным, но не невозможным случайно создать утечку памяти с использованием Rc",
        "keywords": "игровой площадка Rust, rc, циклы ссылок, утечки памяти, преподаватель Rust, онлайн-компилятор Rust, команды Rust, практика Rust, онлайн Rust, онлайн-игровая площадка Rust"
      },
      "details": {
        "steps": [
          {
            "title": "Циклы ссылок могут утечь память",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          },
          {
            "title": "Создание цикла ссылок",
            "text": "ru/step2.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify2-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          },
          {
            "title": "Предотвращение циклов ссылок с использованием Weak<T>",
            "text": "ru/step3.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify3-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          },
          {
            "title": "Создание древовидной структуры данных: Узел с дочерними узлами",
            "text": "ru/step4.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify4-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          },
          {
            "title": "Добавление ссылки от дочернего элемента к его родителю",
            "text": "ru/step5.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify5-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          },
          {
            "title": "Визуализация изменений strong_count и weak_count",
            "text": "ru/step6.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify6-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "참조 사이클은 메모리 누수를 발생시킬 수 있습니다",
      "description": "이 랩에서는 Rust 의 메모리 안전 보장이 실수로 메모리 누수를 생성하는 것을 어렵게 만들지만 불가능하게 하지는 않는 방법을 살펴봅니다. 특히 Rc<T>와 RefCell<T>를 사용할 때 참조 사이클이 발생하여 값이 drop 되지 않아 메모리 누수가 발생할 수 있습니다.",
      "meta": {
        "title": "Rust 에서 참조 사이클로 인한 메모리 누수 발생",
        "description": "Rust 의 메모리 안전 보장이 Rc 를 사용하여 실수로 메모리 누수를 생성하는 것을 어렵게 만드는 방법을 알아보세요.",
        "keywords": "러스트 플레이그라운드, rc, 참조 사이클, 메모리 누수, 러스트 튜터, 러스트 온라인 컴파일러, 러스트 명령어, 러스트 연습, 러스트 온라인, 러스트 온라인 플레이그라운드"
      },
      "details": {
        "steps": [
          {
            "title": "참조 사이클은 메모리 누수를 발생시킬 수 있습니다",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다"
              }
            ]
          },
          {
            "title": "참조 사이클 생성하기",
            "text": "ko/step2.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다",
                "file": "verify2-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다"
              }
            ]
          },
          {
            "title": "Weak<T>를 사용하여 참조 사이클 방지하기",
            "text": "ko/step3.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다",
                "file": "verify3-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다"
              }
            ]
          },
          {
            "title": "트리 자료 구조 생성: 자식 노드를 가진 노드",
            "text": "ko/step4.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다",
                "file": "verify4-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다"
              }
            ]
          },
          {
            "title": "자식 노드에서 부모 노드로의 참조 추가",
            "text": "ko/step5.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다",
                "file": "verify5-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다"
              }
            ]
          },
          {
            "title": "strong_count 및 weak_count 변경 시각화",
            "text": "ko/step6.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다",
                "file": "verify6-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다"
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Ciclos de Referência Podem Causar Vazamento de Memória",
      "description": "Neste laboratório, exploramos como as garantias de segurança de memória do Rust tornam difícil, mas não impossível, criar acidentalmente vazamentos de memória, especificamente ao usar Rc<T> e RefCell<T>, o que pode resultar em ciclos de referência que impedem que os valores sejam descartados e, portanto, vazem memória.",
      "meta": {
        "title": "Ciclos de Referência e Vazamento de Memória em Rust - Tutorial",
        "description": "Explore como as garantias de segurança de memória do Rust tornam difícil, mas não impossível, criar vazamentos de memória acidentalmente usando Rc. Aprenda sobre ciclos de referência e como evitá-los.",
        "keywords": "rust playground, rc, ciclos de referência, vazamento de memória, tutorial rust, compilador online rust, comandos rust, prática rust, rust online, playground rust online"
      },
      "details": {
        "steps": [
          {
            "title": "Ciclos de Referência Podem Causar Vazamento de Memória",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Esta etapa não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Esta etapa não possui verificação no momento"
              }
            ]
          },
          {
            "title": "Criando um Ciclo de Referência",
            "text": "pt/step2.md",
            "verify": [
              {
                "name": "Esta etapa não possui verificação no momento",
                "file": "verify2-1.sh",
                "hint": "Esta etapa não possui verificação no momento"
              }
            ]
          },
          {
            "title": "Prevenindo Ciclos de Referência Usando Weak<T>",
            "text": "pt/step3.md",
            "verify": [
              {
                "name": "Esta etapa não possui verificação no momento",
                "file": "verify3-1.sh",
                "hint": "Esta etapa não possui verificação no momento"
              }
            ]
          },
          {
            "title": "Criando uma Estrutura de Dados em Árvore: Um Nó com Nós Filhos",
            "text": "pt/step4.md",
            "verify": [
              {
                "name": "Esta etapa não possui verificação no momento",
                "file": "verify4-1.sh",
                "hint": "Esta etapa não possui verificação no momento"
              }
            ]
          },
          {
            "title": "Adicionando uma Referência de um Filho para seu Pai",
            "text": "pt/step5.md",
            "verify": [
              {
                "name": "Esta etapa não possui verificação no momento",
                "file": "verify5-1.sh",
                "hint": "Esta etapa não possui verificação no momento"
              }
            ]
          },
          {
            "title": "Visualizando as Mudanças em strong_count e weak_count",
            "text": "pt/step6.md",
            "verify": [
              {
                "name": "Esta etapa não possui verificação no momento",
                "file": "verify6-1.sh",
                "hint": "Esta etapa não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
