{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Concise Control Flow with if Let",
  "description": "In this lab, we explore the concise control flow of the if let syntax, which allows for combining if and let in a shorter and more readable way to handle values that match one pattern while ignoring the rest.",
  "meta": {
    "title": "Concise Control Flow with if Let | Rust Programming",
    "description": "Learn the concise control flow of the if let syntax in Rust programming. Explore how to handle values that match one pattern while ignoring the rest.",
    "keywords": "Rust, Programming, Control Flow, if let, Pattern Matching"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Concise Control Flow with if let",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/method_syntax",
          "rust/mutable_variables",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/book/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/book"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用 if let 的简洁控制流",
      "description": "在本实验中，我们探索 if let 语法的简洁控制流，它允许以更短且更易读的方式将 if 和 let 结合起来，以处理匹配一种模式的值，同时忽略其他值。",
      "meta": {
        "title": "使用 if let 的简洁控制流 | Rust 编程",
        "description": "学习 Rust 编程中 if let 语法的简洁控制流。探索如何处理匹配一种模式的值，同时忽略其他值。",
        "keywords": "Rust, 编程，控制流，if let, 模式匹配"
      },
      "details": {
        "steps": [
          {
            "title": "使用 if let 的简洁控制流",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Flujo de control conciso con if let",
      "description": "En esta práctica, exploramos el flujo de control conciso de la sintaxis if let, que permite combinar if y let de una manera más corta y legible para manejar valores que coinciden con un patrón mientras ignoramos el resto.",
      "meta": {
        "title": "Flujo de control conciso con if let | Programación Rust",
        "description": "Aprende el flujo de control conciso de la sintaxis if let en la programación Rust. Explora cómo manejar valores que coinciden con un patrón mientras ignoras el resto.",
        "keywords": "Rust, Programación, Flujo de control, if let, Coincidencia de patrones"
      },
      "details": {
        "steps": [
          {
            "title": "Flujo de control conciso con if let",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Flux de contrôle concis avec if let",
      "description": "Dans ce laboratoire, nous explorons le flux de contrôle concis de la syntaxe if let, qui permet de combiner if et let d'une manière plus courte et plus lisible pour traiter les valeurs qui correspondent à un motif tout en ignorant le reste.",
      "meta": {
        "title": "Flux de contrôle concis avec if let | Programmation Rust",
        "description": "Découvrez le flux de contrôle concis de la syntaxe if let en programmation Rust. Explorez comment traiter les valeurs qui correspondent à un motif tout en ignorant le reste.",
        "keywords": "Rust, Programmation, Flux de contrôle, if let, Correspondance de motifs"
      },
      "details": {
        "steps": [
          {
            "title": "Flux de contrôle concis avec if let",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Prägnanter Kontrollfluss mit if let",
      "description": "In diesem Lab erkunden wir den prägnanten Kontrollfluss der if let-Syntax, die es ermöglicht, if und let in kürzerer und lesbarerer Weise zu kombinieren, um Werte zu behandeln, die einem Muster entsprechen, während der Rest ignoriert wird.",
      "meta": {
        "title": "Prägnanter Kontrollfluss mit if Let | Rust-Programmierung",
        "description": "Lernen Sie den prägnanten Kontrollfluss der if let-Syntax in der Rust-Programmierung. Entdecken Sie, wie Sie Werte behandeln, die einem Muster entsprechen, während der Rest ignoriert wird.",
        "keywords": "Rust, Programmierung, Kontrollfluss, if let, Mustermatching"
      },
      "details": {
        "steps": [
          {
            "title": "Prägnanter Kontrollfluss mit if let",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "if let による簡潔な制御フロー",
      "description": "この実験では、if let 構文の簡潔な制御フローを調べます。これにより、if と let を組み合わせて、より短く読みやすい方法で、1 つのパターンに一致する値を処理し、それ以外を無視することができます。",
      "meta": {
        "title": "if let による簡潔な制御フロー | Rust プログラミング",
        "description": "Rust プログラミングにおける if let 構文の簡潔な制御フローを学びましょう。1 つのパターンに一致する値を処理し、それ以外を無視する方法を探りましょう。",
        "keywords": "Rust, プログラミング，制御フロー, if let, パターンマッチング"
      },
      "details": {
        "steps": [
          {
            "title": "if let による簡潔な制御フロー",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップでは現在検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップでは現在検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Концизный контрольный поток с if let",
      "description": "В этой лабораторной работе мы исследуем краткий контрольный поток синтаксиса if let, который позволяет комбинировать if и let в более короткой и читаемой форме для обработки значений, соответствующих одному шаблону, игнорируя остальные.",
      "meta": {
        "title": "Концизный контрольный поток с if let | Программирование на Rust",
        "description": "Изучите краткий контрольный поток синтаксиса if let в программировании на Rust. Изучите, как обрабатывать значения, соответствующие одному шаблону, игнорируя остальные.",
        "keywords": "Rust, Программирование, Контрольный поток, if let, Соответствие шаблону"
      },
      "details": {
        "steps": [
          {
            "title": "Концизный контрольный поток с if let",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
