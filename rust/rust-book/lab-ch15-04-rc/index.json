{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Rc<T>, the Reference Counted Smart Pointer",
  "description": "In this lab, we will be exploring the use of Rc<T> (reference counting) in Rust for enabling multiple owners of a value by tracking the number of references to the value and ensuring it is only cleaned up when there are no owners.",
  "meta": {
    "title": "Rc<T>: Reference Counted Smart Pointer | Rust Programming",
    "description": "Learn about Rc<T>, the reference counting smart pointer in Rust, and how it enables multiple ownership of values in Rust programming.",
    "keywords": "Rust, Rc<T>, Reference Counting, Smart Pointer, Ownership, Heap Allocation"
  },
  "difficulty": "Beginner",
  "time": 15,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Rc<T>, the Reference Counted Smart Pointer",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      },
      {
        "title": "Using Rc<T> to Share Data",
        "text": "en/step2.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify2-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/method_syntax",
          "rust/operator_overloading",
          "rust/variable_declarations"
        ]
      },
      {
        "title": "Cloning an Rc<T> Increases the Reference Count",
        "text": "en/step3.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify3-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/method_syntax",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/book/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/book"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rc<T>，引用计数智能指针",
      "description": "在本实验中，我们将探索在 Rust 中使用 Rc<T>（引用计数），通过跟踪对值的引用数量并确保只有在没有所有者时才清理该值，从而实现一个值的多个所有者。",
      "meta": {
        "title": "Rc<T>：引用计数智能指针 | Rust 编程",
        "description": "了解 Rust 中的引用计数智能指针 Rc<T>，以及它如何在 Rust 编程中实现值的多重所有权。",
        "keywords": "Rust，Rc<T>，引用计数，智能指针，所有权，堆分配"
      },
      "details": {
        "steps": [
          {
            "title": "Rc<T>，引用计数智能指针",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          },
          {
            "title": "使用 Rc<T> 共享数据",
            "text": "zh/step2.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify2-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          },
          {
            "title": "克隆 Rc<T> 会增加引用计数",
            "text": "zh/step3.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify3-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Rc<T>, el puntero inteligente con conteo de referencias",
      "description": "En esta práctica, exploraremos el uso de Rc<T> (conteo de referencias) en Rust para permitir que múltiples variables posean un mismo valor, mediante el seguimiento del número de referencias a ese valor y asegurándonos de que solo se elimine cuando no tenga propietarios.",
      "meta": {
        "title": "Rc<T>: Puntero inteligente con conteo de referencias | Programación Rust",
        "description": "Aprende sobre Rc<T>, el puntero inteligente con conteo de referencias en Rust, y cómo permite la propiedad múltiple de valores en el lenguaje de programación Rust.",
        "keywords": "Rust, Rc<T>, Conteo de referencias, Puntero inteligente, Propiedad, Asignación en el montón"
      },
      "details": {
        "steps": [
          {
            "title": "Rc<T>, el puntero inteligente con conteo de referencias",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "En este momento, este paso no tiene verificaciones",
                "file": "verify1-1.sh",
                "hint": "En este momento, este paso no tiene verificaciones"
              }
            ]
          },
          {
            "title": "Usando Rc<T> para compartir datos",
            "text": "es/step2.md",
            "verify": [
              {
                "name": "En este momento, este paso no tiene verificaciones",
                "file": "verify2-1.sh",
                "hint": "En este momento, este paso no tiene verificaciones"
              }
            ]
          },
          {
            "title": "Clonar un Rc<T> aumenta el recuento de referencias",
            "text": "es/step3.md",
            "verify": [
              {
                "name": "En este momento, este paso no tiene verificaciones",
                "file": "verify3-1.sh",
                "hint": "En este momento, este paso no tiene verificaciones"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Rc<T>, le pointeur intelligent à comptage de références",
      "description": "Dans ce laboratoire, nous explorerons l'utilisation de Rc<T> (comptage de références) en Rust pour permettre à plusieurs propriétaires d'une valeur en suivant le nombre de références à cette valeur et en veillant à ce qu'elle ne soit nettoyée que lorsqu'il n'y a pas de propriétaires.",
      "meta": {
        "title": "Rc<T> : Pointeur intelligent à comptage de références | Programmation Rust",
        "description": "Découvrez Rc<T>, le pointeur intelligent à comptage de références en Rust, et comment il permet la propriété multiple de valeurs dans la programmation Rust.",
        "keywords": "Rust, Rc<T>, Comptage de références, Pointeur intelligent, Propriété, Allocation mémoire"
      },
      "details": {
        "steps": [
          {
            "title": "Rc<T>, le pointeur intelligent à comptage de références",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          },
          {
            "title": "Utiliser Rc<T> pour partager des données",
            "text": "fr/step2.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify2-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          },
          {
            "title": "Cloner un Rc<T> augmente le compte de référence",
            "text": "fr/step3.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify3-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Rc<T>, der referenzzählende Smart Pointer",
      "description": "In diesem Lab werden wir die Verwendung von Rc<T> (Referenzzählung) in Rust untersuchen, um es möglich zu machen, dass ein Wert mehrere Besitzer hat, indem wir die Anzahl der Referenzen auf den Wert verfolgen und sicherstellen, dass er nur bereinigt wird, wenn es keine Besitzer gibt.",
      "meta": {
        "title": "Rc<T>: Referenzzählender Smart Pointer | Rust-Programmierung",
        "description": "Lernen Sie über Rc<T>, den referenzzählenden Smart Pointer in Rust, und wie er die Mehrfachbesitz von Werten in der Rust-Programmierung ermöglicht.",
        "keywords": "Rust, Rc<T>, Referenzzählung, Smart Pointer, Eigentum, Heap-Zuweisung"
      },
      "details": {
        "steps": [
          {
            "title": "Rc<T>, der referenzzählende Smart Pointer",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          },
          {
            "title": "Verwendung von Rc<T> zum Teilen von Daten",
            "text": "de/step2.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify2-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          },
          {
            "title": "Das Klonen eines Rc<T> erhöht die Referenzzählung",
            "text": "de/step3.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify3-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rc<T>、参照カウントスマートポインタ",
      "description": "この実験では、Rust における Rc<T>（参照カウント）の使用方法を検討します。これは、値への参照数を追跡することで、値の複数の所有者を可能にし、所有者がいなくなったときにのみクリーンアップされることを保証します。",
      "meta": {
        "title": "Rc<T>：参照カウントスマートポインタ | Rust プログラミング",
        "description": "Rust における参照カウントスマートポインタである Rc<T>について学び、Rust プログラミングにおいて値の複数の所有権を可能にする方法を学びましょう。",
        "keywords": "Rust、Rc<T>、参照カウント、スマートポインタ、所有権、ヒープ割り当て"
      },
      "details": {
        "steps": [
          {
            "title": "Rc<T>、参照カウントスマートポインタ",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在、検証項目がありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在、検証項目がありません"
              }
            ]
          },
          {
            "title": "Rc<T>を使ってデータを共有する",
            "text": "ja/step2.md",
            "verify": [
              {
                "name": "このステップには現在、検証項目がありません",
                "file": "verify2-1.sh",
                "hint": "このステップには現在、検証項目がありません"
              }
            ]
          },
          {
            "title": "Rc<T>をクローンすると参照カウントが増える",
            "text": "ja/step3.md",
            "verify": [
              {
                "name": "このステップには現在、検証項目がありません",
                "file": "verify3-1.sh",
                "hint": "このステップには現在、検証項目がありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Rc<T>, умный указатель с подсчетом ссылок",
      "description": "В этой лабораторной работе мы будем изучать использование Rc<T> (подсчета ссылок) в Rust для обеспечения нескольких владельцев значения путем отслеживания количества ссылок на значение и гарантии его очистки только в том случае, если не осталось владельцев.",
      "meta": {
        "title": "Rc<T>: умный указатель с подсчетом ссылок | Программирование на Rust",
        "description": "Изучите Rc<T>, умный указатель с подсчетом ссылок в Rust, и как он позволяет иметь несколько владельцев значений в программировании на Rust.",
        "keywords": "Rust, Rc<T>, Подсчет ссылок, Умный указатель, Владение, Выделение памяти в куче"
      },
      "details": {
        "steps": [
          {
            "title": "Rc<T>, умный указатель с подсчетом ссылок",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          },
          {
            "title": "Использование Rc<T> для разделения данных",
            "text": "ru/step2.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify2-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          },
          {
            "title": "Клонирование Rc<T> увеличивает счетчик ссылок",
            "text": "ru/step3.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify3-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "Rc<T>, 참조 카운트 스마트 포인터",
      "description": "이 랩에서는 Rust 에서 값에 대한 참조 수를 추적하고 소유자가 없을 때만 정리하여 값의 다중 소유를 가능하게 하는 Rc<T>(참조 카운팅) 의 사용법을 살펴봅니다.",
      "meta": {
        "title": "Rc<T>: 참조 카운트 스마트 포인터 | Rust 프로그래밍",
        "description": "Rust 에서 참조 카운팅 스마트 포인터인 Rc<T>에 대해 배우고, Rust 프로그래밍에서 값의 다중 소유를 어떻게 가능하게 하는지 알아보세요.",
        "keywords": "Rust, Rc<T>, 참조 카운팅, 스마트 포인터, 소유권, 힙 할당"
      },
      "details": {
        "steps": [
          {
            "title": "Rc<T>, 참조 카운트 스마트 포인터",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          },
          {
            "title": "Rc<T>를 사용하여 데이터 공유하기",
            "text": "ko/step2.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify2-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          },
          {
            "title": "Rc<T> 복제 시 참조 카운트 증가",
            "text": "ko/step3.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify3-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Rc<T>, o Smart Pointer com Contagem de Referências",
      "description": "Neste laboratório, exploraremos o uso de Rc<T> (contagem de referências) em Rust para permitir múltiplos proprietários de um valor, rastreando o número de referências ao valor e garantindo que ele seja limpo somente quando não houver proprietários.",
      "meta": {
        "title": "Rc<T>: Smart Pointer com Contagem de Referências em Rust | Programação Rust",
        "description": "Aprenda sobre Rc<T>, o smart pointer com contagem de referências em Rust, e como ele possibilita a propriedade múltipla de valores na programação Rust. Descubra como gerenciar a memória de forma eficiente com Rc<T> e evite erros comuns de gerenciamento de memória.",
        "keywords": "Rust, Rc<T>, Contagem de Referências, Smart Pointer, Propriedade, Alocação no Heap, Gerenciamento de Memória Rust"
      },
      "details": {
        "steps": [
          {
            "title": "Rc<T>, o Smart Pointer com Contagem de Referências",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Esta etapa não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Esta etapa não possui verificação no momento"
              }
            ]
          },
          {
            "title": "Usando Rc<T> para Compartilhar Dados",
            "text": "pt/step2.md",
            "verify": [
              {
                "name": "Esta etapa não possui verificação no momento",
                "file": "verify2-1.sh",
                "hint": "Esta etapa não possui verificação no momento"
              }
            ]
          },
          {
            "title": "Clonar um Rc<T> Aumenta a Contagem de Referências",
            "text": "pt/step3.md",
            "verify": [
              {
                "name": "Esta etapa não possui verificação no momento",
                "file": "verify3-1.sh",
                "hint": "Esta etapa não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
