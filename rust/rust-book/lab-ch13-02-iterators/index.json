{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Processing a Series of Items with Iterators",
  "description": "In this lab, we will explore how to process a series of items using iterators, which are lazy and allow us to iterate over a sequence of items without having to reimplement the logic ourselves.",
  "meta": {
    "title": "Processing a Series of Items with Iterators | Rust Programming",
    "description": "Learn how to process a series of items using iterators in Rust, a powerful and efficient programming language.",
    "keywords": "Rust, Iterators, Processing, Series, Items, Programming, Tutorials"
  },
  "difficulty": "Beginner",
  "time": 25,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Processing a Series of Items with Iterators",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      },
      {
        "title": "The Iterator Trait and the next Method",
        "text": "en/step2.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify2-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      },
      {
        "title": "Methods That Consume the Iterator",
        "text": "en/step3.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify3-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      },
      {
        "title": "Methods That Produce Other Iterators",
        "text": "en/step4.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify4-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      },
      {
        "title": "Using Closures That Capture Their Environment",
        "text": "en/step5.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify5-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/book/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/book"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用迭代器处理一系列项目",
      "description": "在本实验中，我们将探索如何使用迭代器处理一系列项目。迭代器是惰性的，使我们能够遍历项目序列，而无需自己重新实现逻辑。",
      "meta": {
        "title": "使用迭代器处理一系列项目 | Rust 编程",
        "description": "学习如何在强大且高效的编程语言 Rust 中使用迭代器处理一系列项目。",
        "keywords": "Rust, 迭代器，处理，系列，项目，编程，教程"
      },
      "details": {
        "steps": [
          {
            "title": "使用迭代器处理一系列项目",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          },
          {
            "title": "迭代器 trait 与 next 方法",
            "text": "zh/step2.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify2-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          },
          {
            "title": "消耗迭代器的方法",
            "text": "zh/step3.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify3-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          },
          {
            "title": "产生其他迭代器的方法",
            "text": "zh/step4.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify4-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          },
          {
            "title": "使用捕获其环境的闭包",
            "text": "zh/step5.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify5-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Procesamiento de una serie de elementos con iteradores",
      "description": "En este laboratorio, exploraremos cómo procesar una serie de elementos utilizando iteradores, que son perezosos y nos permiten iterar sobre una secuencia de elementos sin tener que reimplementar la lógica nosotros mismos.",
      "meta": {
        "title": "Procesamiento de una serie de elementos con iteradores | Programación Rust",
        "description": "Aprende cómo procesar una serie de elementos utilizando iteradores en Rust, un lenguaje de programación potente y eficiente.",
        "keywords": "Rust, Iteradores, Procesamiento, Serie, Elementos, Programación, Tutoriales"
      },
      "details": {
        "steps": [
          {
            "title": "Procesamiento de una serie de elementos con iteradores",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          },
          {
            "title": "El Trait Iterator y el método next",
            "text": "es/step2.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify2-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          },
          {
            "title": "Métodos que consumen el iterador",
            "text": "es/step3.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify3-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          },
          {
            "title": "Métodos que producen otros iteradores",
            "text": "es/step4.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify4-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          },
          {
            "title": "Usando clausuras que capturan su entorno",
            "text": "es/step5.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify5-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Traiter une série d'éléments avec des itérateurs",
      "description": "Dans ce laboratoire, nous allons explorer la manière de traiter une série d'éléments à l'aide d'itérateurs, qui sont paresseux et nous permettent d'itérer sur une séquence d'éléments sans avoir à réimplémenter la logique nous-mêmes.",
      "meta": {
        "title": "Traiter une série d'éléments avec des itérateurs | Programmation Rust",
        "description": "Découvrez comment traiter une série d'éléments à l'aide d'itérateurs en Rust, un langage de programmation puissant et efficace.",
        "keywords": "Rust, Itérateurs, Traitement, Série, Éléments, Programmation, Tutoriels"
      },
      "details": {
        "steps": [
          {
            "title": "Traiter une série d'éléments avec des itérateurs",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          },
          {
            "title": "Le trait Itérateur et la méthode next",
            "text": "fr/step2.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify2-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          },
          {
            "title": "Méthodes qui consomment l'itérateur",
            "text": "fr/step3.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify3-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          },
          {
            "title": "Méthodes qui produisent d'autres itérateurs",
            "text": "fr/step4.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify4-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          },
          {
            "title": "Utilisation de closures qui capturent leur environnement",
            "text": "fr/step5.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify5-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Verarbeiten einer Reihe von Elementen mit Iteratoren",
      "description": "In diesem Lab werden wir untersuchen, wie man eine Reihe von Elementen mit Iteratoren verarbeitet. Iteratoren sind träge und ermöglichen es uns, über eine Sequenz von Elementen zu iterieren, ohne dass wir die Logik selbst neu implementieren müssen.",
      "meta": {
        "title": "Verarbeiten einer Reihe von Elementen mit Iteratoren | Rust-Programmierung",
        "description": "Lernen Sie, wie Sie in Rust, eine leistungsstarke und effiziente Programmiersprache, eine Reihe von Elementen mit Iteratoren verarbeiten.",
        "keywords": "Rust, Iteratoren, Verarbeitung, Reihe, Elemente, Programmierung, Tutorials"
      },
      "details": {
        "steps": [
          {
            "title": "Verarbeiten einer Reihe von Elementen mit Iteratoren",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          },
          {
            "title": "Das Iterator-Trait und die next-Methode",
            "text": "de/step2.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify2-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          },
          {
            "title": "Methoden, die den Iterator konsumieren",
            "text": "de/step3.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify3-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          },
          {
            "title": "Methoden, die andere Iteratoren erzeugen",
            "text": "de/step4.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify4-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          },
          {
            "title": "Verwendung von Closures, die ihre Umgebung aufnehmen",
            "text": "de/step5.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify5-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "反復子を使って一連の項目を処理する",
      "description": "この実験では、反復子を使って一連の項目をどのように処理するかを探ります。反復子は遅延評価であり、自らロジックを再実装することなく、項目のシーケンスを反復処理することができます。",
      "meta": {
        "title": "反復子を使って一連の項目を処理する | Rust プログラミング",
        "description": "強力で効率的なプログラミング言語である Rust で、反復子を使って一連の項目をどのように処理するか学びましょう。",
        "keywords": "Rust, 反復子，処理，シリーズ，項目，プログラミング，チュートリアル"
      },
      "details": {
        "steps": [
          {
            "title": "反復子を使って一連の項目を処理する",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在検証はありません"
              }
            ]
          },
          {
            "title": "反復子トレイトと next メソッド",
            "text": "ja/step2.md",
            "verify": [
              {
                "name": "このステップには現在検証はありません",
                "file": "verify2-1.sh",
                "hint": "このステップには現在検証はありません"
              }
            ]
          },
          {
            "title": "反復子を消費するメソッド",
            "text": "ja/step3.md",
            "verify": [
              {
                "name": "このステップには現在検証はありません",
                "file": "verify3-1.sh",
                "hint": "このステップには現在検証はありません"
              }
            ]
          },
          {
            "title": "他の反復子を生成するメソッド",
            "text": "ja/step4.md",
            "verify": [
              {
                "name": "このステップには現在検証はありません",
                "file": "verify4-1.sh",
                "hint": "このステップには現在検証はありません"
              }
            ]
          },
          {
            "title": "その環境をキャプチャするクロージャの使用",
            "text": "ja/step5.md",
            "verify": [
              {
                "name": "このステップには現在検証はありません",
                "file": "verify5-1.sh",
                "hint": "このステップには現在検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Обработка серии элементов с использованием итераторов",
      "description": "В этой лабораторной работе мы изучим, как обрабатывать серию элементов с использованием итераторов, которые ленивые и позволяют нам перебирать последовательность элементов, не переписывая логику самостоятельно.",
      "meta": {
        "title": "Обработка серии элементов с использованием итераторов | Программирование на Rust",
        "description": "Изучите, как обрабатывать серию элементов с использованием итераторов в Rust, мощном и эффективном языке программирования.",
        "keywords": "Rust, Итераторы, Обработка, Серия, Элементы, Программирование, Руководства"
      },
      "details": {
        "steps": [
          {
            "title": "Обработка серии элементов с использованием итераторов",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          },
          {
            "title": "Трейт Iterator и метод next",
            "text": "ru/step2.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify2-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          },
          {
            "title": "Методы, которые потребляют итератор",
            "text": "ru/step3.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify3-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          },
          {
            "title": "Методы, которые создают другие итераторы",
            "text": "ru/step4.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify4-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          },
          {
            "title": "Использование замыканий, которые захватывают свою среду",
            "text": "ru/step5.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify5-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "반복자를 사용한 일련의 항목 처리",
      "description": "이 랩에서는 반복자를 사용하여 일련의 항목을 처리하는 방법을 살펴봅니다. 반복자는 지연 (lazy) 방식으로 작동하며, 자체적으로 로직을 다시 구현하지 않고도 일련의 항목을 반복할 수 있게 해줍니다.",
      "meta": {
        "title": "반복자를 사용한 일련의 항목 처리 | Rust 프로그래밍",
        "description": "강력하고 효율적인 프로그래밍 언어인 Rust 에서 반복자를 사용하여 일련의 항목을 처리하는 방법을 알아보세요.",
        "keywords": "Rust, 반복자, 처리, 일련, 항목, 프로그래밍, 튜토리얼, Rust 반복자, Rust 튜토리얼"
      },
      "details": {
        "steps": [
          {
            "title": "반복자를 사용한 일련의 항목 처리",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          },
          {
            "title": "Iterator 트레이트와 next 메서드",
            "text": "ko/step2.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify2-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          },
          {
            "title": "Iterator 를 소비하는 메서드",
            "text": "ko/step3.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify3-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          },
          {
            "title": "다른 Iterator 를 생성하는 메서드",
            "text": "ko/step4.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify4-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          },
          {
            "title": "환경을 캡처하는 클로저 사용",
            "text": "ko/step5.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify5-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Processando uma Série de Itens com Iteradores",
      "description": "Neste laboratório, exploraremos como processar uma série de itens usando iteradores, que são *lazy* (preguiçosos) e nos permitem iterar sobre uma sequência de itens sem ter que reimplementar a lógica por conta própria.",
      "meta": {
        "title": "Processamento de Séries de Itens com Iteradores | Programação Rust",
        "description": "Aprenda como processar uma série de itens usando iteradores em Rust, uma linguagem de programação poderosa e eficiente. Descubra como otimizar o processamento de dados e melhorar o desempenho do seu código.",
        "keywords": "Rust, Iteradores, Processamento, Séries, Itens, Programação, Tutoriais, Linguagem Rust, Iteração, Dados"
      },
      "details": {
        "steps": [
          {
            "title": "Processando uma Série de Itens com Iteradores",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          },
          {
            "title": "A Trait Iterator e o Método next",
            "text": "pt/step2.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify2-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          },
          {
            "title": "Métodos que Consomem o Iterator",
            "text": "pt/step3.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify3-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          },
          {
            "title": "Métodos que Produzem Outros Iterators",
            "text": "pt/step4.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify4-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          },
          {
            "title": "Usando Closures que Capturam Seu Ambiente",
            "text": "pt/step5.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify5-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
