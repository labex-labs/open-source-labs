{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Cleanup with Rust's Drop Trait",
  "description": "In this lab, we explore the Drop trait in Rust, which allows for customization of cleanup actions when a value goes out of scope, typically used in smart pointers, and can be implemented by providing a drop method that is automatically called by Rust, avoiding the need for explicit cleanup code.",
  "meta": {
    "title": "Running Code on Cleanup with the Drop Trait | Rust Programming",
    "description": "Learn how to use the Drop trait in Rust to customize cleanup actions when a value goes out of scope, a key concept in smart pointers.",
    "keywords": "Rust, Drop Trait, Smart Pointers, Memory Management, Cleanup, Programming"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Running Code on Cleanup with the Drop Trait",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/drop_trait",
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/method_syntax",
          "rust/string_type",
          "rust/traits",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/book/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/book"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用 Rust 的 Drop 特性进行清理",
      "description": "在本实验中，我们探索 Rust 中的 Drop 特性，它允许在值超出作用域时自定义清理操作，通常用于智能指针，并且可以通过提供一个由 Rust 自动调用的 drop 方法来实现，从而避免了显式清理代码的需要。",
      "meta": {
        "title": "使用 Drop 特性在清理时运行代码 | Rust 编程",
        "description": "学习如何在 Rust 中使用 Drop 特性，以便在值超出作用域时自定义清理操作，这是智能指针中的一个关键概念。",
        "keywords": "Rust, Drop 特性, 智能指针, 内存管理, 清理, 编程"
      },
      "details": {
        "steps": [
          {
            "title": "使用 Drop 特性在清理时运行代码",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Limpieza con el trato Drop de Rust",
      "description": "En esta práctica, exploramos el trato Drop en Rust, que permite la personalización de las acciones de limpieza cuando un valor sale de ámbito, generalmente utilizado en punteros inteligentes, y se puede implementar proporcionando un método drop que es llamado automáticamente por Rust, evitando la necesidad de código de limpieza explícito.",
      "meta": {
        "title": "Ejecutar código en la limpieza con el trato Drop | Programación Rust",
        "description": "Aprende cómo usar el trato Drop en Rust para personalizar las acciones de limpieza cuando un valor sale de ámbito, un concepto clave en los punteros inteligentes.",
        "keywords": "Rust, trato Drop, Punteros inteligentes, Gestión de memoria, Limpieza, Programación"
      },
      "details": {
        "steps": [
          {
            "title": "Ejecutar código en la limpieza con el trato Drop",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificaciones en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificaciones en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Nettoyage avec le trait Drop de Rust",
      "description": "Dans ce laboratoire, nous explorons le trait Drop en Rust, qui permet de personnaliser les actions de nettoyage lorsqu'une valeur sort de portée, généralement utilisé dans les pointeurs intelligents, et peut être implémenté en fournissant une méthode drop qui est automatiquement appelée par Rust, évitant ainsi la nécessité de code de nettoyage explicite.",
      "meta": {
        "title": "Exécution de code lors de la nettoyage avec le trait Drop | Programmation Rust",
        "description": "Découvrez comment utiliser le trait Drop en Rust pour personnaliser les actions de nettoyage lorsqu'une valeur sort de portée, un concept clé dans les pointeurs intelligents.",
        "keywords": "Rust, Trait Drop, Pointeurs Intelligents, Gestion de la Mémoire, Nettoyage, Programmation"
      },
      "details": {
        "steps": [
          {
            "title": "Exécution de code lors de la nettoyage avec le trait Drop",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Bereinigung mit dem Drop-Trait in Rust",
      "description": "In diesem Lab untersuchen wir das Drop-Trait in Rust, das es ermöglicht, die Bereinigungsmethoden anzupassen, wenn ein Wert außer Gültigkeitsbereich gelangt. Dies wird normalerweise in Smart-Pointern verwendet und kann durch die Bereitstellung einer drop-Methode implementiert werden, die von Rust automatisch aufgerufen wird, wodurch expliziter Bereinigungs-Code entfällt.",
      "meta": {
        "title": "Code beim Aufräumen mit dem Drop-Trait ausführen | Rust-Programmierung",
        "description": "Lernen Sie, wie Sie das Drop-Trait in Rust verwenden, um die Bereinigungsmethoden anzupassen, wenn ein Wert außer Gültigkeitsbereich gelangt, ein Schlüsselkonzept in Smart-Pointern.",
        "keywords": "Rust, Drop-Trait, Smart-Pointer, Arbeitsspeicherverwaltung, Bereinigung, Programmierung"
      },
      "details": {
        "steps": [
          {
            "title": "Code beim Aufräumen mit dem Drop-Trait ausführen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "RustのDropトレイトを使ったクリーンアップ",
      "description": "この実験では、RustのDropトレイトを調べます。これは、値がスコープ外になるときのクリーンアップアクションのカスタマイズを可能にします。主にスマートポインタで使用され、Rustによって自動的に呼び出されるdropメソッドを提供することで実装できます。これにより、明示的なクリーンアップコードが不要になります。",
      "meta": {
        "title": "Dropトレイトを使ったクリーンアップ時のコード実行 | Rustプログラミング",
        "description": "RustでDropトレイトを使って、値がスコープ外になるときのクリーンアップアクションをカスタマイズする方法を学びましょう。これは、スマートポインタの重要な概念です。",
        "keywords": "Rust, Dropトレイト, スマートポインタ, メモリ管理, クリーンアップ, プログラミング"
      },
      "details": {
        "steps": [
          {
            "title": "Dropトレイトを使ったクリーンアップ時のコード実行",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップでは現在検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップでは現在検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Очистка с использованием трейта Drop в Rust",
      "description": "В этой лабораторной работе мы исследуем трейт Drop в Rust, который позволяет настраивать действия по очистке, когда значение выходит за пределы области видимости, обычно используется в умных указателях, и может быть реализован путём предоставления метода drop, который автоматически вызывается Rust, избавляя от необходимости явного кода по очистке.",
      "meta": {
        "title": "Запуск кода при очистке с помощью трейта Drop | Программирование на Rust",
        "description": "Изучите, как использовать трейт Drop в Rust для настройки действий по очистке, когда значение выходит за пределы области видимости, важный концепт в умных указателях.",
        "keywords": "Rust, трейт Drop, умные указатели, управление памятью, очистка, программирование"
      },
      "details": {
        "steps": [
          {
            "title": "Запуск кода при очистке с помощью трейта Drop",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
