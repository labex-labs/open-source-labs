{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Rust Panic Handling and Memory Safety",
  "description": "In this lab, we learn about the panic! macro in Rust, which can be used to generate a panic and start unwinding its stack, causing the program to report the panic message and exit. The runtime takes care of freeing all the resources owned by the thread by calling the destructor of its objects. We also look at an example of using the panic! macro to handle division by zero and verify that it doesn't result in memory leaks using Valgrind.",
  "meta": {
    "title": "Rust Programming | Panic Handling and Memory Safety",
    "description": "Learn about the Rust programming language's `panic!` macro, which can be used to generate a panic and start unwinding the stack, ensuring memory safety.",
    "keywords": "Rust, programming, panic, memory safety, error handling"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "panic!",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/method_syntax",
          "rust/operator_overloading",
          "rust/panic_usage",
          "rust/string_type",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 恐慌处理与内存安全",
      "description": "在本实验中，我们学习 Rust 中的 `panic!` 宏，它可用于引发恐慌并开始展开堆栈，导致程序报告恐慌消息并退出。运行时会通过调用对象的析构函数来释放线程拥有的所有资源。我们还将查看一个使用 `panic!` 宏处理除零错误的示例，并使用 Valgrind 验证它不会导致内存泄漏。",
      "meta": {
        "title": "Rust 编程 | 恐慌处理与内存安全",
        "description": "了解 Rust 编程语言的 `panic!` 宏，它可用于引发恐慌并开始展开堆栈，确保内存安全。",
        "keywords": "Rust, 编程, 恐慌, 内存安全, 错误处理"
      },
      "details": {
        "steps": [
          {
            "title": "恐慌！",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
