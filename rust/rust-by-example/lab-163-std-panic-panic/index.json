{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Rust Panic Handling and Memory Safety",
  "description": "In this lab, we learn about the panic! macro in Rust, which can be used to generate a panic and start unwinding its stack, causing the program to report the panic message and exit. The runtime takes care of freeing all the resources owned by the thread by calling the destructor of its objects. We also look at an example of using the panic! macro to handle division by zero and verify that it doesn't result in memory leaks using Valgrind.",
  "meta": {
    "title": "Rust Programming | Panic Handling and Memory Safety",
    "description": "Learn about the Rust programming language's `panic!` macro, which can be used to generate a panic and start unwinding the stack, ensuring memory safety.",
    "keywords": "Rust, programming, panic, memory safety, error handling"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "panic!",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/method_syntax",
          "rust/operator_overloading",
          "rust/panic_usage",
          "rust/string_type",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 恐慌处理与内存安全",
      "description": "在本实验中，我们学习 Rust 中的 `panic!` 宏，它可用于引发恐慌并开始展开堆栈，导致程序报告恐慌消息并退出。运行时会通过调用对象的析构函数来释放线程拥有的所有资源。我们还将查看一个使用 `panic!` 宏处理除零错误的示例，并使用 Valgrind 验证它不会导致内存泄漏。",
      "meta": {
        "title": "Rust 编程 | 恐慌处理与内存安全",
        "description": "了解 Rust 编程语言的 `panic!` 宏，它可用于引发恐慌并开始展开堆栈，确保内存安全。",
        "keywords": "Rust, 编程，恐慌，内存安全，错误处理"
      },
      "details": {
        "steps": [
          {
            "title": "恐慌！",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Manejo de errores y seguridad de memoria en Rust",
      "description": "En este laboratorio, aprendemos sobre la macro panic! en Rust, que se puede utilizar para generar un error y comenzar a deshacerse de su pila, lo que hace que el programa informe el mensaje de error y salga. La ejecución del programa se encarga de liberar todos los recursos propiedad del hilo llamando al destructor de sus objetos. También examinamos un ejemplo de uso de la macro panic! para manejar la división por cero y verificamos que no se produzcan fugas de memoria utilizando Valgrind.",
      "meta": {
        "title": "Programación en Rust | Manejo de errores y seguridad de memoria",
        "description": "Aprende sobre la macro `panic!` del lenguaje de programación Rust, que se puede utilizar para generar un error y comenzar a deshacerse de la pila, garantizando la seguridad de memoria.",
        "keywords": "Rust, programación, error, seguridad de memoria, manejo de errores"
      },
      "details": {
        "steps": [
          {
            "title": "panic!",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "En este momento, este paso no tiene verificación",
                "file": "verify1-1.sh",
                "hint": "En este momento, este paso no tiene verificación"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Gestion des panneaux et sécurité mémoire en Rust",
      "description": "Dans ce laboratoire, nous étudions la macro panic! en Rust, qui peut être utilisée pour générer une panique et commencer à dérouler sa pile, entraînant la sortie du programme en rapportant le message de panique. Le runtime prend soin de libérer toutes les ressources appartenant au fil en appelant le destructeur de ses objets. Nous examinons également un exemple d'utilisation de la macro panic! pour gérer la division par zéro et vérifions qu'elle ne résulte pas de fuites mémoire en utilisant Valgrind.",
      "meta": {
        "title": "Programmation Rust | Gestion des panneaux et sécurité mémoire",
        "description": "Découvrez la macro `panic!` du langage de programmation Rust, qui peut être utilisée pour générer une panique et commencer à dérouler la pile, garantissant la sécurité mémoire.",
        "keywords": "Rust, programmation, panique, sécurité mémoire, gestion d'erreurs"
      },
      "details": {
        "steps": [
          {
            "title": "panic!",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Rust Panikbehandlung und Arbeitsspeichersicherheit",
      "description": "In diesem Lab lernen wir über das panic!-Makro in Rust, das verwendet werden kann, um einen Fehler zu erzeugen und den Stapel zu entspannen, was dazu führt, dass das Programm die Fehlermeldung ausgibt und beendet wird. Die Laufzeit kümmert sich darum, alle von einem Thread besitzten Ressourcen freizugeben, indem sie den Destruktor seiner Objekte aufruft. Wir betrachten auch ein Beispiel für die Verwendung des panic!-Makros, um Division durch Null zu behandeln, und überprüfen, dass dies keine Arbeitsspeicherlecks verursacht, indem wir Valgrind verwenden.",
      "meta": {
        "title": "Rust-Programmierung | Panikbehandlung und Arbeitsspeichersicherheit",
        "description": "Lernen Sie über das panic!-Makro der Rust-Programmiersprache, das verwendet werden kann, um einen Fehler zu erzeugen und den Stapel zu entspannen, um die Arbeitsspeichersicherheit zu gewährleisten.",
        "keywords": "Rust, Programmierung, Panik, Arbeitsspeichersicherheit, Fehlerbehandlung"
      },
      "details": {
        "steps": [
          {
            "title": "panic!",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust のパニック処理とメモリセーフティ",
      "description": "この実験では、Rust の `panic!`マクロについて学びます。このマクロは、パニックを発生させ、スタックをアンワインドし始めるために使用でき、プログラムにパニックメッセージを報告させて終了させます。ランタイムは、そのオブジェクトのデストラクタを呼び出すことによって、スレッドが所有するすべてのリソースを解放することを担当します。また、`panic!` マクロを使用してゼロ除算を処理する例を見て、Valgrind を使用してメモリリークが発生しないことを確認します。",
      "meta": {
        "title": "Rust プログラミング | パニック処理とメモリセーフティ",
        "description": "Rust プログラミング言語の `panic!` マクロについて学びましょう。このマクロは、パニックを発生させ、スタックをアンワインドし始めるために使用でき、メモリセーフティを保証します。",
        "keywords": "Rust, プログラミング，パニック，メモリセーフティ，エラー処理"
      },
      "details": {
        "steps": [
          {
            "title": "panic!",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップでは現在検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップでは現在検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Обработка паники и безопасность памяти в Rust",
      "description": "В этом практическом занятии мы изучаем макрос panic! в Rust, который можно использовать для генерации паники и начала разматывания стека, что заставляет программу вывести сообщение о панике и завершиться. Время выполнения освобождает все ресурсы, принадлежащие потоку, вызывая деструктор его объектов. Мы также рассмотрим пример использования макроса panic! для обработки деления на ноль и проверим, что это не приводит к утечкам памяти с использованием Valgrind.",
      "meta": {
        "title": "Программирование на Rust | Обработка паники и безопасность памяти",
        "description": "Изучите макрос `panic!` языка программирования Rust, который можно использовать для генерации паники и начала разматывания стека, обеспечивая безопасность памяти.",
        "keywords": "Rust, программирование, паника, безопасность памяти, обработка ошибок"
      },
      "details": {
        "steps": [
          {
            "title": "panic!",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
