{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Operator Overloading in Rust",
  "description": "In this lab, we explore operator overloading in Rust and how it can be achieved through traits. Operators in Rust can be overloaded using traits, which allows them to perform different tasks based on their input arguments. The + operator, for example, is syntactic sugar for the add method and can be used by any implementor of the Add trait. The traits that overload operators, including Add, can be found in core::ops. The provided Rust code demonstrates how to overload the + operator for custom types Foo and Bar, resulting in different output types FooBar and BarFoo respectively.",
  "meta": {
    "title": "Mastering Operator Overloading in Rust",
    "description": "Explore the power of operator overloading in Rust and learn how to create custom types with unique behaviors.",
    "keywords": "rust playground, software development, rust tutor, rust online compiler, operator overloading, rust commands, traits, rust practice, rust online playground, rust online"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Operator Overloading",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 中的运算符重载",
      "description": "在本实验中，我们探索 Rust 中的运算符重载，以及如何通过 trait 来实现它。Rust 中的运算符可以使用 trait 进行重载，这使得它们能够根据输入参数执行不同的任务。例如，`+` 运算符是 `add` 方法的语法糖，任何实现了 `Add` trait 的类型都可以使用它。包括 `Add` 在内的用于重载运算符的 trait 可以在 `core::ops` 中找到。提供的 Rust 代码展示了如何为自定义类型 `Foo` 和 `Bar` 重载 `+` 运算符，分别得到不同的输出类型 `FooBar` 和 `BarFoo`。",
      "meta": {
        "title": "掌握 Rust 中的运算符重载",
        "description": "探索 Rust 中运算符重载的强大功能，并学习如何创建具有独特行为的自定义类型。",
        "keywords": "rust 游乐场，软件开发，rust 教程，rust 在线编译器，运算符重载，rust 命令，traits, rust 练习，rust 在线游乐场，rust 在线"
      },
      "details": {
        "steps": [
          {
            "title": "运算符重载",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Sobrecarga de operadores en Rust",
      "description": "En este laboratorio, exploramos la sobrecarga de operadores en Rust y cómo se puede lograr a través de traits. Los operadores en Rust se pueden sobrecargar utilizando traits, lo que les permite realizar diferentes tareas según sus argumentos de entrada. El operador +, por ejemplo, es azúcar sintáctico para el método add y puede ser utilizado por cualquier implementador del trait Add. Los traits que sobrecargan operadores, incluyendo Add, se pueden encontrar en core::ops. El código Rust proporcionado demuestra cómo sobrecargar el operador + para los tipos personalizados Foo y Bar, lo que resulta en tipos de salida diferentes FooBar y BarFoo respectivamente.",
      "meta": {
        "title": "Dominando la sobrecarga de operadores en Rust",
        "description": "Explora el poder de la sobrecarga de operadores en Rust y aprende cómo crear tipos personalizados con comportamientos únicos.",
        "keywords": "rust playground, desarrollo de software, tutor de rust, compilador en línea de rust, sobrecarga de operadores, comandos de rust, traits, práctica de rust, playground en línea de rust, rust en línea"
      },
      "details": {
        "steps": [
          {
            "title": "Sobrecarga de operadores",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Surchargement d'opérateurs en Rust",
      "description": "Dans ce laboratoire, nous explorons le surchargement d'opérateurs en Rust et comment il peut être réalisé grâce à des traits. Les opérateurs en Rust peuvent être surchargés à l'aide de traits, ce qui leur permet d'effectuer différentes tâches en fonction de leurs arguments d'entrée. L'opérateur +, par exemple, est un sucre syntaxique pour la méthode add et peut être utilisé par tout implémentateur du trait Add. Les traits qui surchargent les opérateurs, y compris Add, se trouvent dans core::ops. Le code Rust fourni montre comment surcharger l'opérateur + pour les types personnalisés Foo et Bar, donnant respectivement des types de sortie différents FooBar et BarFoo.",
      "meta": {
        "title": "Maîtriser le surchargement d'opérateurs en Rust",
        "description": "Explorez le pouvoir du surchargement d'opérateurs en Rust et apprenez à créer des types personnalisés avec des comportements uniques.",
        "keywords": "plateforme de pratique Rust, développement logiciel, tuteur Rust, compilateur en ligne Rust, surchargement d'opérateurs, commandes Rust, traits, pratique Rust, plateforme de pratique en ligne Rust, Rust en ligne"
      },
      "details": {
        "steps": [
          {
            "title": "Surchargement d'opérateurs",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Operatorüberladung in Rust",
      "description": "In diesem Lab untersuchen wir die Operatorüberladung in Rust und wie dies durch Traits erreicht werden kann. Operatoren in Rust können mithilfe von Traits überladen werden, was es ihnen ermöglicht, unterschiedliche Aufgaben basierend auf ihren Eingabeargumenten auszuführen. Der +-Operator ist beispielsweise syntaktischer Zucker für die add-Methode und kann von jedem Implementierer des Add-Traits verwendet werden. Die Traits, die Operatoren überladen, einschließlich Add, können in core::ops gefunden werden. Der bereitgestellte Rust-Code zeigt, wie der +-Operator für benutzerdefinierte Typen Foo und Bar überladen wird, was jeweils zu unterschiedlichen Ausgabetypen FooBar und BarFoo führt.",
      "meta": {
        "title": "Meisterhaftigkeit in der Operatorüberladung in Rust",
        "description": "Entdecken Sie die Macht der Operatorüberladung in Rust und lernen Sie, wie Sie benutzerdefinierte Typen mit einzigartigen Verhaltensweisen erstellen.",
        "keywords": "rust playground，软件开发，rust tutor, rust 在线编译器，Operatorüberladung, rust Befehle, Traits, rust Übung, rust 在线游乐场，rust 在线"
      },
      "details": {
        "steps": [
          {
            "title": "Operatorüberladung",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust における演算子のオーバーロード",
      "description": "この実験では、Rust における演算子のオーバーロードと、トレイトを通じてそれを実現する方法を探ります。Rust の演算子は、トレイトを使用してオーバーロードできます。これにより、演算子は入力引数に基づいて異なるタスクを実行できます。たとえば、`+` 演算子は `add`メソッドのシンタックス・シュガーであり、`Add`トレイトの実装者によって使用できます。演算子をオーバーロードするトレイト、`Add` を含めて、`core::ops` にあります。提供された Rust コードは、カスタム型 `Foo`と `Bar`に対して`+` 演算子をオーバーロードする方法を示しており、それぞれ異なる出力型`FooBar` と `BarFoo` を生成します。",
      "meta": {
        "title": "Rust における演算子のオーバーロードをマスターする",
        "description": "Rust における演算子のオーバーロードの力を探求し、独自の動作を持つカスタム型を作成する方法を学びましょう。",
        "keywords": "rust playground, ソフトウェア開発，rust tutor, rust オンラインコンパイラ，演算子のオーバーロード，rust コマンド，トレイト，rust 練習，rust オンライン playground, rust オンライン"
      },
      "details": {
        "steps": [
          {
            "title": "演算子のオーバーロード",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップでは現在検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップでは現在検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Перегрузка операторов в Rust",
      "description": "В этом лабораторном задании мы исследуем перегрузку операторов в Rust и то, как это можно достичь с использованием трейтов. Операторы в Rust можно перегрузить с использованием трейтов, что позволяет им выполнять разные задачи в зависимости от своих входных аргументов. Например, оператор + является синтаксическим сахаром для метода add и может использоваться любым реализатором трейта Add. Трейты, которые перегружают операторы, включая Add, можно найти в core::ops. Предоставленный код на Rust демонстрирует, как перегрузить оператор + для пользовательских типов Foo и Bar, в результате чего получаются разные типы вывода FooBar и BarFoo соответственно.",
      "meta": {
        "title": "Мастерство в перегрузке операторов в Rust",
        "description": "Исследуйте мощь перегрузки операторов в Rust и научитесь создавать пользовательские типы с уникальными поведениями.",
        "keywords": "rust playground, разработка программного обеспечения, преподаватель Rust, онлайн-компилятор Rust, перегрузка операторов, команды Rust, трейты, практика Rust, онлайн-площадка Rust, Rust онлайн"
      },
      "details": {
        "steps": [
          {
            "title": "Перегрузка операторов",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "Rust 에서의 연산자 오버로딩",
      "description": "이 랩에서는 Rust 에서 연산자 오버로딩을 살펴보고 트레이트를 통해 어떻게 구현할 수 있는지 알아봅니다. Rust 의 연산자는 트레이트를 사용하여 오버로딩할 수 있으며, 이를 통해 입력 인수에 따라 다른 작업을 수행할 수 있습니다. 예를 들어, + 연산자는 add 메서드의 구문적 설탕이며 Add 트레이트를 구현하는 모든 객체에서 사용할 수 있습니다. Add 를 포함하여 연산자를 오버로딩하는 트레이트는 core::ops 에서 찾을 수 있습니다. 제공된 Rust 코드는 사용자 정의 타입 Foo 와 Bar 에 대해 + 연산자를 오버로딩하여 각각 다른 출력 타입 FooBar 와 BarFoo 를 생성하는 방법을 보여줍니다.",
      "meta": {
        "title": "Rust 연산자 오버로딩 마스터하기",
        "description": "Rust 에서 연산자 오버로딩의 강력함을 탐구하고 고유한 동작을 가진 사용자 정의 타입을 만드는 방법을 배우세요.",
        "keywords": "러스트 플레이그라운드, 소프트웨어 개발, 러스트 튜터, 러스트 온라인 컴파일러, 연산자 오버로딩, 러스트 명령어, 트레이트, 러스트 연습, 러스트 온라인 플레이그라운드, 러스트 온라인"
      },
      "details": {
        "steps": [
          {
            "title": "연산자 오버로딩",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Sobrecarga de Operadores em Rust",
      "description": "Neste laboratório, exploramos a sobrecarga de operadores em Rust e como ela pode ser alcançada através de traits. Os operadores em Rust podem ser sobrecarregados usando traits, o que lhes permite realizar diferentes tarefas com base em seus argumentos de entrada. O operador +, por exemplo, é açúcar sintático para o método add e pode ser usado por qualquer implementador da trait Add. As traits que sobrecarregam operadores, incluindo Add, podem ser encontradas em core::ops. O código Rust fornecido demonstra como sobrecarregar o operador + para tipos personalizados Foo e Bar, resultando em diferentes tipos de saída FooBar e BarFoo, respectivamente.",
      "meta": {
        "title": "Dominando a Sobrecarga de Operadores em Rust - Guia Completo",
        "description": "Explore o poder da sobrecarga de operadores em Rust e aprenda a criar tipos personalizados com comportamentos únicos. Domine as técnicas de programação em Rust com este tutorial prático.",
        "keywords": "rust playground, desenvolvimento de software, tutorial rust, compilador online rust, sobrecarga de operadores, comandos rust, traits, prática rust, playground online rust, rust online, programação rust, tutorial rust português"
      },
      "details": {
        "steps": [
          {
            "title": "Sobrecarga de Operadores",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
