{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Operator Overloading in Rust",
  "description": "In this lab, we explore operator overloading in Rust and how it can be achieved through traits. Operators in Rust can be overloaded using traits, which allows them to perform different tasks based on their input arguments. The + operator, for example, is syntactic sugar for the add method and can be used by any implementor of the Add trait. The traits that overload operators, including Add, can be found in core::ops. The provided Rust code demonstrates how to overload the + operator for custom types Foo and Bar, resulting in different output types FooBar and BarFoo respectively.",
  "meta": {
    "title": "Mastering Operator Overloading in Rust",
    "description": "Explore the power of operator overloading in Rust and learn how to create custom types with unique behaviors.",
    "keywords": "rust playground, software development, rust tutor, rust online compiler, operator overloading, rust commands, traits, rust practice, rust online playground, rust online"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Operator Overloading",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/method_syntax",
          "rust/operator_overloading",
          "rust/string_type",
          "rust/traits"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 中的运算符重载",
      "description": "在本实验中，我们探索 Rust 中的运算符重载，以及如何通过 trait 来实现它。Rust 中的运算符可以使用 trait 进行重载，这使得它们能够根据输入参数执行不同的任务。例如，`+` 运算符是 `add` 方法的语法糖，任何实现了 `Add` trait 的类型都可以使用它。包括 `Add` 在内的用于重载运算符的 trait 可以在 `core::ops` 中找到。提供的 Rust 代码展示了如何为自定义类型 `Foo` 和 `Bar` 重载 `+` 运算符，分别得到不同的输出类型 `FooBar` 和 `BarFoo`。",
      "meta": {
        "title": "掌握 Rust 中的运算符重载",
        "description": "探索 Rust 中运算符重载的强大功能，并学习如何创建具有独特行为的自定义类型。",
        "keywords": "rust 游乐场, 软件开发, rust 教程, rust 在线编译器, 运算符重载, rust 命令, traits, rust 练习, rust 在线游乐场, rust 在线"
      },
      "details": {
        "steps": [
          {
            "title": "运算符重载",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
