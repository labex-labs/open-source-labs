{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Command-Line Argument Parsing in Rust",
  "description": "In this lab, we have an example of argument parsing using pattern matching in Rust. The program takes command-line arguments and performs different operations based on the number and type of arguments passed. If no arguments are passed, it prints a message. If a single argument is passed and it can be parsed as the integer 42, it prints 'This is the answer!'. If a command and an integer argument are passed, it performs either an increase or decrease operation on the integer. If any other number of arguments are passed, it shows a help message explaining the correct usage of the program.",
  "meta": {
    "title": "Rust Argument Parsing | Command-Line Programming",
    "description": "Learn how to use pattern matching for argument parsing in Rust. Perform different operations based on the number and type of arguments passed.",
    "keywords": "Rust, Argument Parsing, Pattern Matching, Command-Line Programming, Increase, Decrease"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Argument parsing",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/method_syntax",
          "rust/operator_overloading",
          "rust/string_type",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 中的命令行参数解析",
      "description": "在本实验中，我们有一个在 Rust 中使用模式匹配进行参数解析的示例。该程序接受命令行参数，并根据传递的参数数量和类型执行不同的操作。如果没有传递参数，它会打印一条消息。如果传递了一个参数并且可以将其解析为整数 42，它会打印“这就是答案！”。如果传递了一个命令和一个整数参数，它会对该整数执行增加或减少操作。如果传递了任何其他数量的参数，它会显示一条帮助消息，解释程序的正确用法。",
      "meta": {
        "title": "Rust 参数解析 | 命令行编程",
        "description": "学习如何在 Rust 中使用模式匹配进行参数解析。根据传递的参数数量和类型执行不同的操作。",
        "keywords": "Rust, 参数解析，模式匹配，命令行编程，增加，减少"
      },
      "details": {
        "steps": [
          {
            "title": "参数解析",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Análisis de argumentos de línea de comandos en Rust",
      "description": "En este laboratorio, tenemos un ejemplo de análisis de argumentos utilizando coincidencia de patrones en Rust. El programa toma argumentos de línea de comandos y realiza diferentes operaciones según el número y el tipo de argumentos pasados. Si no se pasan argumentos, imprime un mensaje. Si se pasa un solo argumento y se puede analizar como el entero 42, imprime 'This is the answer!'. Si se pasan un comando y un argumento entero, realiza una operación de aumento o disminución en el entero. Si se pasan cualquier otro número de argumentos, muestra un mensaje de ayuda que explica el uso correcto del programa.",
      "meta": {
        "title": "Análisis de argumentos en Rust | Programación de línea de comandos",
        "description": "Aprende a usar la coincidencia de patrones para el análisis de argumentos en Rust. Realiza diferentes operaciones según el número y el tipo de argumentos pasados.",
        "keywords": "Rust, Análisis de argumentos, Coincidencia de patrones, Programación de línea de comandos, Aumento, Disminución"
      },
      "details": {
        "steps": [
          {
            "title": "Análisis de argumentos",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificaciones en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificaciones en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Analyse d'arguments de ligne de commande en Rust",
      "description": "Dans ce laboratoire, nous avons un exemple d'analyse d'arguments en utilisant la correspondance de motifs en Rust. Le programme prend des arguments de ligne de commande et effectue différentes opérations en fonction du nombre et du type d'arguments passés. Si aucun argument n'est passé, il affiche un message. Si un seul argument est passé et qu'il peut être analysé comme l'entier 42, il affiche 'This is the answer!'. Si une commande et un argument entier sont passés, il effectue une opération d'augmentation ou de diminution sur l'entier. Si un nombre quelconque d'autres arguments est passé, il affiche un message d'aide expliquant la bonne utilisation du programme.",
      "meta": {
        "title": "Analyse d'arguments Rust | Programmation de ligne de commande",
        "description": "Découvrez comment utiliser la correspondance de motifs pour l'analyse d'arguments en Rust. Effectuez différentes opérations en fonction du nombre et du type d'arguments passés.",
        "keywords": "Rust, Analyse d'arguments, Correspondance de motifs, Programmation de ligne de commande, Augmentation, Diminution"
      },
      "details": {
        "steps": [
          {
            "title": "Analyse d'arguments",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Argument-Parsing in der Kommandozeile mit Rust",
      "description": "In diesem Lab haben wir ein Beispiel für das Parsen von Argumenten mit Mustererkennung in Rust. Das Programm nimmt Kommandozeilenargumente entgegen und führt unterschiedliche Operationen basierend auf der Anzahl und dem Typ der übergebenen Argumente aus. Wenn keine Argumente übergeben werden, druckt es eine Nachricht. Wenn ein einzelnes Argument übergeben wird und es als die ganze Zahl 42 interpretiert werden kann, druckt es 'Dies ist die Antwort!'. Wenn ein Befehl und ein ganzzahliges Argument übergeben werden, führt es eine Erhöhungs- oder Verringerungsoperation auf der ganzen Zahl durch. Wenn eine andere Anzahl von Argumenten übergeben wird, zeigt es eine Hilfsmeldung, die die korrekte Verwendung des Programms erklärt.",
      "meta": {
        "title": "Rust Argument-Parsing | Programmierung in der Kommandozeile",
        "description": "Lernen Sie, wie Sie Mustererkennung für das Argument-Parsing in Rust verwenden. Führen Sie unterschiedliche Operationen basierend auf der Anzahl und dem Typ der übergebenen Argumente durch.",
        "keywords": "Rust, Argument-Parsing, Mustererkennung, Programmierung in der Kommandozeile, Erhöhen, Verringern"
      },
      "details": {
        "steps": [
          {
            "title": "Argument-Parsing",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust でのコマンドライン引数解析",
      "description": "この実験では、Rust でのパターンマッチングを使った引数解析の例を示します。このプログラムはコマンドライン引数を受け取り、渡された引数の数と型に基づいて異なる操作を行います。引数が渡されなければ、メッセージを表示します。引数が 1 つだけ渡され、それが整数 42 として解析できる場合、「これが答えです！」と表示します。コマンドと整数引数が渡された場合、整数に対して増加または減少操作を行います。それ以外の数の引数が渡された場合、プログラムの正しい使い方を説明するヘルプメッセージを表示します。",
      "meta": {
        "title": "Rust 引数解析 | コマンドラインプログラミング",
        "description": "Rust で引数解析にパターンマッチングをどのように使うか学びましょう。渡された引数の数と型に基づいて異なる操作を行います。",
        "keywords": "Rust, 引数解析，パターンマッチング，コマンドラインプログラミング，増加，減少"
      },
      "details": {
        "steps": [
          {
            "title": "引数解析",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在検証項目がありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在検証項目がありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Разбор аргументов командной строки в Rust",
      "description": "В этом лабораторном задании мы рассмотрим пример разбора аргументов с использованием сопоставления шаблонов в Rust. Программа принимает аргументы командной строки и выполняет различные операции в зависимости от количества и типа переданных аргументов. Если аргументы не передаются, программа выводит сообщение. Если передается один аргумент и он может быть преобразован в целое число 42, программа выводит 'This is the answer!'. Если передаются команда и аргумент-целое число, программа выполняет операцию увеличения или уменьшения целого числа. Если передается любое другое количество аргументов, программа выводит сообщение помощи, которое объясняет правильное использование программы.",
      "meta": {
        "title": "Разбор аргументов в Rust | Программирование командной строки",
        "description": "Изучите, как использовать сопоставление шаблонов для разбора аргументов в Rust. Выполняйте различные операции в зависимости от количества и типа переданных аргументов.",
        "keywords": "Rust, Разбор аргументов, Сопоставление шаблонов, Программирование командной строки, Увеличение, Уменьшение"
      },
      "details": {
        "steps": [
          {
            "title": "Разбор аргументов",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "Rust 명령줄 인수 분석",
      "description": "이 실습에서는 Rust 에서 패턴 매칭을 사용하여 인수 분석 예제를 보여줍니다. 프로그램은 명령줄 인수를 받아 전달된 인수의 개수와 유형에 따라 다른 작업을 수행합니다. 인수가 전달되지 않으면 메시지를 출력합니다. 하나의 인수가 전달되고 정수 42 로 구문 분석될 수 있으면 '정답입니다!'를 출력합니다. 명령과 정수 인수가 전달되면 정수에 대한 증가 또는 감소 작업을 수행합니다. 다른 개수의 인수가 전달되면 프로그램 사용법을 설명하는 도움말 메시지를 표시합니다.",
      "meta": {
        "title": "Rust 인수 분석 | 명령줄 프로그래밍",
        "description": "Rust 에서 패턴 매칭을 사용하여 인수 분석하는 방법을 배우세요. 전달된 인수의 개수와 유형에 따라 다른 작업을 수행하세요.",
        "keywords": "Rust, 인수 분석, 패턴 매칭, 명령줄 프로그래밍, 증가, 감소, 명령줄 인수, Rust 명령줄 앱, 인수 처리, 파싱, 42"
      },
      "details": {
        "steps": [
          {
            "title": "인수 분석",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Análise de Argumentos de Linha de Comando em Rust",
      "description": "Neste laboratório, temos um exemplo de análise de argumentos usando correspondência de padrões em Rust. O programa recebe argumentos da linha de comando e executa diferentes operações com base no número e tipo de argumentos passados. Se nenhum argumento for passado, imprime uma mensagem. Se um único argumento for passado e puder ser analisado como o inteiro 42, imprime 'Esta é a resposta!'. Se um comando e um argumento inteiro forem passados, executa uma operação de aumento ou diminuição no inteiro. Se qualquer outro número de argumentos for passado, exibe uma mensagem de ajuda explicando o uso correto do programa.",
      "meta": {
        "title": "Análise de Argumentos em Rust | Programação de Linha de Comando",
        "description": "Aprenda como usar correspondência de padrões para análise de argumentos em Rust. Execute diferentes operações com base no número e tipo de argumentos passados.",
        "keywords": "Rust, Análise de Argumentos, Correspondência de Padrões, Programação de Linha de Comando, Aumentar, Diminuir, Argumentos da Linha de Comando"
      },
      "details": {
        "steps": [
          {
            "title": "Análise de Argumentos",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
