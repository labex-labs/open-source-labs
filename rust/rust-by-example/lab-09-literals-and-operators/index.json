{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Literals and Operators",
  "description": "In this lab, we explore the use of literals and operators in Rust. Literals such as integers, floats, characters, strings, booleans, and the unit type can be expressed using their literal forms. Integers can also be expressed in hexadecimal, octal, or binary notation. Underscores can be used to improve readability in numeric literals. Rust supports scientific E-notation for float literals. Operators such as addition, subtraction, logical operations, bitwise operations, and shift operations are available in Rust.",
  "meta": {
    "title": "Exploring Literals and Operators in Rust",
    "description": "Dive into the world of Rust's literals and operators, from integers and floats to logical and bitwise operations.",
    "keywords": "rust, rust playground, coding, rust online compiler, rust tutor, rust commands, rust practice, rust online playground, literals, rust online"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Literals and operators",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/boolean_type",
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/operator_overloading",
          "rust/type_casting"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "字面量和运算符",
      "description": "在本实验中，我们探索 Rust 中字面量和运算符的使用。诸如整数、浮点数、字符、字符串、布尔值和单元类型等字面量可以使用它们的字面形式来表示。整数也可以用十六进制、八进制或二进制表示法来表示。下划线可用于提高数字字面量的可读性。Rust 支持浮点数的科学 E 表示法。Rust 中提供了加法、减法、逻辑运算、位运算和移位运算等运算符。",
      "meta": {
        "title": "探索 Rust 中的字面量和运算符",
        "description": "深入了解 Rust 的字面量和运算符世界，从整数和浮点数到逻辑和位运算。",
        "keywords": "Rust，Rust 游乐场，编码，Rust 在线编译器，Rust 教程，Rust 命令，Rust 练习，Rust 在线游乐场，字面量，Rust 在线"
      },
      "details": {
        "steps": [
          {
            "title": "字面量和运算符",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Literales y Operadores",
      "description": "En este laboratorio, exploramos el uso de literales y operadores en Rust. Los literales como enteros, flotantes, caracteres, cadenas, booleanos y el tipo unitario se pueden expresar utilizando sus formas literales. Los enteros también se pueden expresar en notación hexadecimal, octal o binaria. Los guiones bajos se pueden utilizar para mejorar la legibilidad en literales numéricos. Rust admite la notación científica E para literales de punto flotante. Los operadores como la adición, la resta, las operaciones lógicas, las operaciones bit a bit y las operaciones de desplazamiento están disponibles en Rust.",
      "meta": {
        "title": "Explorando Literales y Operadores en Rust",
        "description": "Sumérgete en el mundo de los literales y operadores de Rust, desde enteros y flotantes hasta operaciones lógicas y bit a bit.",
        "keywords": "rust, rust playground, codificación, compilador en línea de rust, tutor de rust, comandos de rust, práctica de rust, playground en línea de rust, literales, rust en línea"
      },
      "details": {
        "steps": [
          {
            "title": "Literales y operadores",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Littéraux et opérateurs",
      "description": "Dans ce laboratoire, nous explorons l'utilisation de littéraux et d'opérateurs en Rust. Les littéraux tels que les entiers, les flottants, les caractères, les chaînes de caractères, les booléens et le type unité peuvent être exprimés sous forme littérale. Les entiers peuvent également être exprimés en notation hexadécimale, octale ou binaire. Les tirets de soulignement peuvent être utilisés pour améliorer la lisibilité des littéraux numériques. Rust prend en charge la notation scientifique E pour les littéraux de flottants. Les opérateurs tels que l'addition, la soustraction, les opérations logiques, les opérations bit-à-bit et les opérations de décalage sont disponibles en Rust.",
      "meta": {
        "title": "Explorer les littéraux et les opérateurs en Rust",
        "description": "Plongez dans le monde des littéraux et des opérateurs de Rust, des entiers et des flottants aux opérations logiques et bit-à-bit.",
        "keywords": "rust, rust playground, codage, compilateur en ligne rust, tuteur rust, commandes rust, pratique rust, terrain de jeu en ligne rust, littéraux, rust en ligne"
      },
      "details": {
        "steps": [
          {
            "title": "Littéraux et opérateurs",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Literale und Operatoren",
      "description": "In diesem Lab untersuchen wir die Verwendung von Literalen und Operatoren in Rust. Literale wie Ganzzahlen, Gleitkommazahlen, Zeichen, Strings, Boole'sche Werte und der Einheitstyp können in ihrer Literalform ausgedrückt werden. Ganzzahlen können auch in hexadezimaler, oktaler oder binärer Notation dargestellt werden. Unterstriche können zur Verbesserung der Lesbarkeit in numerischen Literalen verwendet werden. Rust unterstützt die wissenschaftliche E-Notation für Gleitkomma-Literale. Operatoren wie Addition, Subtraktion, logische Operationen, bitweise Operationen und Shift-Operationen sind in Rust verfügbar.",
      "meta": {
        "title": "Das Erkunden von Literalen und Operatoren in Rust",
        "description": "Taucht in die Welt von Rusts Literalen und Operatoren ein, von Ganzzahlen und Gleitkommazahlen bis zu logischen und bitweisen Operationen.",
        "keywords": "rust, rust playground, coding, rust online compiler, rust tutor, rust commands, rust practice, rust online playground, literale, rust online"
      },
      "details": {
        "steps": [
          {
            "title": "Literale und Operatoren",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "リテラルと演算子",
      "description": "この実験では、Rust におけるリテラルと演算子の使い方を探ります。整数、浮動小数点数、文字、文字列、ブール値、およびユニット型などのリテラルは、それぞれのリテラル形式を使って表現できます。整数は、16 進数、8 進数、または 2 進数表記でも表現できます。アンダースコアを使って、数値リテラルの読みやすさを向上させることができます。Rust は、浮動小数点数リテラルに対して科学的な E 表記をサポートしています。加算、減算、論理演算、ビット演算、およびシフト演算などの演算子が Rust に用意されています。",
      "meta": {
        "title": "Rust におけるリテラルと演算子の探索",
        "description": "整数や浮動小数点数から論理演算やビット演算まで、Rust のリテラルと演算子の世界に没入しましょう。",
        "keywords": "rust, rust playground, コーディング，rust オンラインコンパイラ，rust チューター, rust コマンド，rust 練習，rust オンラインプレイグラウンド，リテラル，rust オンライン"
      },
      "details": {
        "steps": [
          {
            "title": "リテラルと演算子",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在、検証項目はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在、検証項目はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Литералы и операторы",
      "description": "В этом лабораторном задании мы исследуем использование литералов и операторов в Rust. Литералы, такие как целые числа, числа с плавающей точкой, символы, строки, логические значения и единичный тип, могут быть выражены с использованием их литеральных форм. Целые числа также могут быть выражены в шестнадцатеричной, восьмеричной или двоичной записи. Нижние подчеркивания можно использовать для улучшения читаемости в числовых литералах. Rust поддерживает научную запись E для литералов с плавающей точкой. В Rust доступны операторы, такие как сложение, вычитание, логические операции, побитовые операции и операции сдвига.",
      "meta": {
        "title": "Исследование литералов и операторов в Rust",
        "description": "Погрузитесь в мир литералов и операторов Rust, от целых чисел и чисел с плавающей точкой до логических и побитовых операций.",
        "keywords": "rust, rust playground, coding, rust online compiler, rust tutor, rust commands, rust practice, rust online playground, literals, rust online"
      },
      "details": {
        "steps": [
          {
            "title": "Литералы и операторы",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "리터럴과 연산자",
      "description": "이 랩에서는 Rust 에서 리터럴과 연산자의 사용법을 살펴봅니다. 정수, 부동 소수점 숫자, 문자, 문자열, 부울 값 및 유닛 타입과 같은 리터럴은 해당 리터럴 형태로 표현할 수 있습니다. 정수는 16 진수, 8 진수 또는 2 진수 표기법으로도 표현할 수 있습니다. 숫자 리터럴의 가독성을 높이기 위해 밑줄을 사용할 수 있습니다. Rust 는 부동 소수점 리터럴에 대한 과학적 E-표기법을 지원합니다. 덧셈, 뺄셈, 논리 연산, 비트 연산 및 시프트 연산과 같은 연산자를 Rust 에서 사용할 수 있습니다.",
      "meta": {
        "title": "Rust 에서 리터럴과 연산자 탐구",
        "description": "정수와 부동 소수점 숫자부터 논리 및 비트 연산까지, Rust 의 리터럴과 연산자 세계로 뛰어들어 보세요.",
        "keywords": "러스트, rust playground, 코딩, 러스트 온라인 컴파일러, 러스트 튜터, 러스트 명령어, 러스트 연습, 러스트 온라인 playground, 리터럴, 러스트 온라인"
      },
      "details": {
        "steps": [
          {
            "title": "리터럴과 연산자",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Literais e Operadores",
      "description": "Neste laboratório, exploramos o uso de literais e operadores em Rust. Literais como inteiros, floats (ponto flutuante), caracteres, strings, booleanos e o tipo unitário podem ser expressos usando suas formas literais. Inteiros também podem ser expressos em notação hexadecimal, octal ou binária. Underscores (sublinhados) podem ser usados para melhorar a legibilidade em literais numéricos. Rust suporta notação científica E para literais de ponto flutuante. Operadores como adição, subtração, operações lógicas, operações bitwise (bitwise) e operações de deslocamento estão disponíveis em Rust.",
      "meta": {
        "title": "Explorando Literais e Operadores em Rust: Guia Completo",
        "description": "Aprenda sobre literais e operadores em Rust, desde inteiros e floats até operações lógicas e bitwise. Pratique e aprimore suas habilidades de programação em Rust.",
        "keywords": "rust, playground rust, programação rust, compilador rust online, tutorial rust, comandos rust, prática rust, playground online rust, literais rust, operadores rust, aprender rust"
      },
      "details": {
        "steps": [
          {
            "title": "Literais e operadores",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
