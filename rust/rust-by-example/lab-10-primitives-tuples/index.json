{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Exploring Rust Tuples and Transposing Matrices",
  "description": "In this lab, we explore tuples in Rust. Tuples are collections of values of different types and are constructed using parentheses. They can be used as function arguments and return values, allowing functions to return multiple values. Tuples can also be used as members of other tuples. Rust provides tuple indexing to access values in a tuple. Tuples are printable and can be destructured to create bindings. Additionally, we learn how to add the fmt::Display trait to a struct to customize its printing format. Finally, we are given an activity to implement a transpose function that swaps two elements in a matrix.",
  "meta": {
    "title": "Rust Tuples | Programming Tutorials",
    "description": "Explore the power of tuples in Rust programming language. Learn how to use tuples as function arguments, return values, and matrix operations.",
    "keywords": "Rust, Tuples, Programming, Tutorials, Matrix, Transpose"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Tuples",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/boolean_type",
          "rust/expressions_statements",
          "rust/floating_types",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/type_casting",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "探索 Rust 元组与矩阵转置",
      "description": "在本实验中，我们探索 Rust 中的元组。元组是不同类型值的集合，使用括号构建。它们可用作函数参数和返回值，使函数能够返回多个值。元组也可用作其他元组的成员。Rust 提供元组索引来访问元组中的值。元组是可打印的，并且可以解构以创建绑定。此外，我们将学习如何向结构体添加 `fmt::Display` 特性以自定义其打印格式。最后，我们有一个活动，要求实现一个 `transpose` 函数，该函数用于交换矩阵中的两个元素。",
      "meta": {
        "title": "Rust 元组 | 编程教程",
        "description": "探索 Rust 编程语言中元组的强大功能。学习如何将元组用作函数参数、返回值以及进行矩阵操作。",
        "keywords": "Rust, 元组, 编程, 教程, 矩阵, 转置"
      },
      "details": {
        "steps": [
          {
            "title": "元组",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Explorando tuplas de Rust y transponiendo matrices",
      "description": "En este laboratorio, exploramos las tuplas en Rust. Las tuplas son colecciones de valores de diferentes tipos y se construyen utilizando paréntesis. Pueden usarse como argumentos y valores de retorno de funciones, lo que permite a las funciones devolver múltiples valores. Las tuplas también se pueden usar como miembros de otras tuplas. Rust proporciona un índice de tupla para acceder a los valores de una tupla. Las tuplas son imprimibles y se pueden desestructurar para crear enlaces. Además, aprendemos cómo agregar el trato fmt::Display a una estructura para personalizar su formato de impresión. Finalmente, se nos da una actividad para implementar una función de transposición que intercambia dos elementos en una matriz.",
      "meta": {
        "title": "Tuplas de Rust | Tutoriales de programación",
        "description": "Explora el poder de las tuplas en el lenguaje de programación Rust. Aprende cómo usar las tuplas como argumentos de función, valores de retorno y operaciones de matrices.",
        "keywords": "Rust, Tuplas, Programación, Tutoriales, Matriz, Transposición"
      },
      "details": {
        "steps": [
          {
            "title": "Tuplas",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "En este momento, este paso no tiene verificaciones",
                "file": "verify1-1.sh",
                "hint": "En este momento, este paso no tiene verificaciones"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Explorer les tuples Rust et transposer des matrices",
      "description": "Dans ce laboratoire, nous explorons les tuples en Rust. Les tuples sont des collections de valeurs de différents types et sont construits en utilisant des parenthèses. Ils peuvent être utilisés comme arguments de fonction et valeurs de retour, permettant aux fonctions de retourner plusieurs valeurs. Les tuples peuvent également être utilisés comme membres d'autres tuples. Rust fournit un indexage de tuple pour accéder aux valeurs dans un tuple. Les tuples sont imprimables et peuvent être décomposés pour créer des liaisons. En outre, nous apprenons comment ajouter le trait fmt::Display à une structure pour personnaliser son format d'impression. Enfin, nous recevons une activité pour implémenter une fonction de transposition qui échange deux éléments dans une matrice.",
      "meta": {
        "title": "Tuples Rust | Tutoriels de programmation",
        "description": "Explorez le pouvoir des tuples dans le langage de programmation Rust. Apprenez à utiliser les tuples comme arguments de fonction, valeurs de retour et opérations sur les matrices.",
        "keywords": "Rust, Tuples, Programmation, Tutoriels, Matrice, Transposition"
      },
      "details": {
        "steps": [
          {
            "title": "Tuples",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Das Entdecken von Rust-Tupeln und der Transposition von Matrizen",
      "description": "In diesem Labo untersuchen wir Tupel in Rust. Tupel sind Sammlungen von Werten unterschiedlicher Typen und werden mit runden Klammern konstruiert. Sie können als Funktionsargumente und Rückgabewerte verwendet werden, was es Funktionen ermöglicht, mehrere Werte zurückzugeben. Tupel können auch als Elemente anderer Tupel verwendet werden. Rust bietet Tupel-Indexierung an, um auf Werte in einem Tupel zuzugreifen. Tupel sind druckbar und können dekonstruiert werden, um Bindungen zu erstellen. Darüber hinaus lernen wir, wie wir das fmt::Display-Attribut zu einer Struktur hinzufügen, um das Druckformat zu personalisieren. Schließlich erhalten wir eine Aufgabe, um eine Transpose-Funktion zu implementieren, die zwei Elemente in einer Matrix tauscht.",
      "meta": {
        "title": "Rust-Tupel | Programmier-Tutorials",
        "description": "Entdecken Sie die Macht von Tupeln in der Rust-Programmiersprache. Lernen Sie, wie Sie Tupel als Funktionsargumente, Rückgabewerte und Matrixoperationen verwenden.",
        "keywords": "Rust, Tupel, Programmierung, Tutorials, Matrix, Transponieren"
      },
      "details": {
        "steps": [
          {
            "title": "Tupel",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rustのタプルと行列の転置を探索する",
      "description": "この実験では、Rustのタプルを調べます。タプルは、異なる型の値のコレクションで、丸括弧を使って構築されます。関数の引数や返り値として使うことができ、関数が複数の値を返すことを可能にします。タプルは、他のタプルの要素としても使うことができます。Rustは、タプル内の値にアクセスするためのタプルインデックスを提供します。タプルは表示可能で、バインディングを作成するために分解することができます。また、構造体にfmt::Displayトレイトを追加して、その表示形式をカスタマイズする方法を学びます。最後に、行列内の2つの要素を交換するtranspose関数を実装するアクティビティが与えられます。",
      "meta": {
        "title": "Rustのタプル | プログラミングチュートリアル",
        "description": "Rustプログラミング言語におけるタプルの力を探求しましょう。関数の引数、返り値、行列演算としてタプルをどのように使うか学びましょう。",
        "keywords": "Rust, タプル, プログラミング, チュートリアル, 行列, 転置"
      },
      "details": {
        "steps": [
          {
            "title": "タプル",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在、検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在、検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Изучение кортежей в Rust и транспонирование матриц",
      "description": "В этой лабораторной работе мы исследуем кортежи в Rust. Кортежи - это коллекции значений разных типов, которые создаются с использованием круглых скобок. Они могут использоваться в качестве аргументов функций и возвращаемых значений, что позволяет функциям возвращать несколько значений. Кортежи также могут использоваться в качестве членов других кортежей. Rust предоставляет индексирование кортежей для доступа к значениям в кортеже. Кортежи можно выводить на печать и их можно деструктурировать для создания связей. Кроме того, мы узнаем, как добавить трейт fmt::Display к структуре для настройки формата ее вывода. Наконец, мы получаем задание по реализации функции транспонирования, которая меняет местами два элемента в матрице.",
      "meta": {
        "title": "Кортежи в Rust | Руководства по программированию",
        "description": "Изучите возможности кортежей в языке программирования Rust. Найдите, как использовать кортежи в качестве аргументов функций, возвращаемых значений и операций с матрицами.",
        "keywords": "Rust, Кортежи, Программирование, Руководства, Матрица, Транспонирование"
      },
      "details": {
        "steps": [
          {
            "title": "Кортежи",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
