{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Writing Rust Functions",
  "description": "In this lab, we learn how to write functions in Rust. Functions are declared using the fn keyword, and their arguments are type annotated. The return type, if applicable, is specified after an arrow ->. The final expression in the function serves as the return value, but the return statement can be used to return a value earlier. The lab provides an example of rewriting the FizzBuzz program using functions, demonstrating the use of functions that return boolean values, functions that return the unit type (), and functions without specified return types.",
  "meta": {
    "title": "Write Efficient Rust Functions with Ease",
    "description": "Learn how to write powerful Rust functions that optimize your code and improve performance.",
    "keywords": "rust playground, coding, functions, optimization, rust online compiler, rust commands, rust tutor, rust practice, rust online playground, rust online"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Functions",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/boolean_type",
          "rust/expressions_statements",
          "rust/for_loop",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/operator_overloading",
          "rust/string_type"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "编写 Rust 函数",
      "description": "在本实验中，我们学习如何在 Rust 中编写函数。函数使用 fn 关键字声明，其参数需进行类型标注。如果有返回类型，则在箭头 -> 之后指定。函数中的最后一个表达式用作返回值，但也可以使用 return 语句提前返回一个值。本实验提供了一个使用函数重写 FizzBuzz 程序的示例，展示了返回布尔值的函数、返回单元类型 () 的函数以及未指定返回类型的函数的用法。",
      "meta": {
        "title": "轻松编写高效的 Rust 函数",
        "description": "学习如何编写强大的 Rust 函数，优化代码并提高性能。",
        "keywords": "rust 游乐场，编码，函数，优化，rust 在线编译器，rust 命令，rust 教程，rust 练习，rust 在线游乐场，rust 在线"
      },
      "details": {
        "steps": [
          {
            "title": "函数",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Escribir funciones en Rust",
      "description": "En este laboratorio, aprendemos cómo escribir funciones en Rust. Las funciones se declaran utilizando la palabra clave fn, y sus argumentos se anotan con su tipo. El tipo de retorno, si aplica, se especifica después de una flecha ->. La última expresión en la función sirve como valor de retorno, pero la instrucción return se puede utilizar para devolver un valor antes. El laboratorio proporciona un ejemplo de cómo reescribir el programa FizzBuzz utilizando funciones, demostrando el uso de funciones que devuelven valores booleanos, funciones que devuelven el tipo unitario (), y funciones sin un tipo de retorno especificado.",
      "meta": {
        "title": "Escribe funciones eficientes en Rust con facilidad",
        "description": "Aprende cómo escribir funciones poderosas en Rust que optimicen tu código y mejoren el rendimiento.",
        "keywords": "playground de Rust, codificación, funciones, optimización, compilador en línea de Rust, comandos de Rust, tutor de Rust, práctica de Rust, playground en línea de Rust, Rust en línea"
      },
      "details": {
        "steps": [
          {
            "title": "Funciones",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "En este momento, este paso no tiene verificación",
                "file": "verify1-1.sh",
                "hint": "En este momento, este paso no tiene verificación"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Écrire des fonctions en Rust",
      "description": "Dans ce laboratoire, nous apprenons à écrire des fonctions en Rust. Les fonctions sont déclarées à l'aide du mot clé fn, et leurs arguments sont annotés avec leur type. Le type de retour, le cas échéant, est spécifié après une flèche ->. La dernière expression dans la fonction sert de valeur de retour, mais l'instruction return peut être utilisée pour renvoyer une valeur plus tôt. Le laboratoire fournit un exemple de réécriture du programme FizzBuzz à l'aide de fonctions, démontrant l'utilisation de fonctions qui renvoient des valeurs booléennes, de fonctions qui renvoient le type unité (), et de fonctions sans type de retour spécifié.",
      "meta": {
        "title": "Écrire des fonctions Rust performantes facilement",
        "description": "Apprenez à écrire des fonctions Rust puissantes qui optimisent votre code et améliorent les performances.",
        "keywords": "plateforme de test Rust, codage, fonctions, optimisation, compilateur en ligne Rust, commandes Rust, tuteur Rust, pratique Rust, plateforme de test en ligne Rust, Rust en ligne"
      },
      "details": {
        "steps": [
          {
            "title": "Fonctions",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Schreiben von Rust-Funktionen",
      "description": "In diesem Lab lernen wir, wie man in Rust Funktionen schreibt. Funktionen werden mit dem Schlüsselwort fn deklariert, und ihre Argumente werden mit Typangaben versehen. Der Rückgabetyp, sofern vorhanden, wird nach einer Pfeilrichtung -> angegeben. Der letzte Ausdruck in der Funktion dient als Rückgabewert, aber der return-Befehl kann verwendet werden, um einen Wert früher zurückzugeben. Das Lab bietet ein Beispiel zur Umgestaltung des FizzBuzz-Programms mit Funktionen, was den Gebrauch von Funktionen zeigt, die boolesche Werte zurückgeben, Funktionen, die den Einheitstyp () zurückgeben, und Funktionen ohne angegebenen Rückgabetyp.",
      "meta": {
        "title": "Schreiben Sie effiziente Rust-Funktionen mit Leichtigkeit",
        "description": "Lernen Sie, wie man leistungsstarke Rust-Funktionen schreibt, die Ihren Code optimieren und die Leistung verbessern.",
        "keywords": "Rust-Spielfeld, Programmieren, Funktionen, Optimierung, Online-Compiler für Rust, Rust-Befehle, Rust-Tutorium, Rust-Praxis, Online-Spielfeld für Rust, Rust-Online"
      },
      "details": {
        "steps": [
          {
            "title": "Funktionen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust 関数の書き方",
      "description": "この実験では、Rust で関数を書く方法を学びます。関数は `fn` キーワードを使って宣言され、その引数には型注釈が付けられます。返却型が必要な場合は、矢印 `->` の後に指定します。関数内の最後の式が返却値となりますが、`return` 文を使ってより早く値を返すこともできます。この実験では、関数を使って FizzBuzz プログラムを書き直す例を示し、ブール値を返す関数、単位型 `()` を返す関数、および返却型が指定されていない関数の使い方を示します。",
      "meta": {
        "title": "簡単に効率的な Rust 関数を書く",
        "description": "コードを最適化し、パフォーマンスを向上させる強力な Rust 関数の書き方を学びましょう。",
        "keywords": "rust playground, コーディング，関数，最適化，rust オンラインコンパイラ，rust コマンド，rust チューター, rust 練習，rust オンライン playground, rust オンライン"
      },
      "details": {
        "steps": [
          {
            "title": "関数",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Пишем функции на Rust",
      "description": "В этом практическом занятии мы узнаем, как писать функции на Rust. Функции объявляются с использованием ключевого слова fn, а их аргументы аннотируются типом. Возвращаемый тип, если он есть, указывается после стрелки ->. Последнее выражение в функции служит значением возврата, но оператор return можно использовать, чтобы вернуть значение раньше. В практическом занятии приводится пример переписания программы FizzBuzz с использованием функций, демонстрирующий использование функций, возвращающих логические значения, функций, возвращающих тип () и функций без указанного возвращаемого типа.",
      "meta": {
        "title": "Пишите эффективные функции на Rust с легкостью",
        "description": "Изучите, как писать мощные функции на Rust, которые оптимизируют ваш код и повышают производительность.",
        "keywords": "игровая площадка Rust, программирование, функции, оптимизация, онлайн-компилятор Rust, команды Rust, преподаватель Rust, практика Rust, онлайн-игровая площадка Rust, Rust онлайн"
      },
      "details": {
        "steps": [
          {
            "title": "Функции",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "Rust 함수 작성하기",
      "description": "이 실습에서는 Rust 에서 함수를 작성하는 방법을 배웁니다. 함수는 `fn` 키워드를 사용하여 선언되며, 인수는 타입으로 주석 처리됩니다. 반환 타입 (필요한 경우) 은 화살표 `->` 뒤에 명시됩니다. 함수의 마지막 표현식이 반환 값으로 사용되지만, `return` 문을 사용하여 값을 더 일찍 반환할 수 있습니다. 이 실습에서는 함수를 사용하여 FizzBuzz 프로그램을 다시 작성하는 예제를 제공하여 부울 값을 반환하는 함수, 단위 타입 `()` 를 반환하는 함수, 반환 타입이 명시되지 않은 함수의 사용법을 보여줍니다.",
      "meta": {
        "title": "쉽게 효율적인 Rust 함수 작성하기",
        "description": "코드를 최적화하고 성능을 향상시키는 강력한 Rust 함수 작성 방법을 배우세요.",
        "keywords": "러스트 플레이그라운드, 코딩, 함수, 최적화, 러스트 온라인 컴파일러, 러스트 명령어, 러스트 튜터, 러스트 연습, 러스트 온라인 플레이그라운드, 러스트 온라인, rust 함수, rust 코딩, rust 프로그래밍, 러스트 실습"
      },
      "details": {
        "steps": [
          {
            "title": "함수",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Escrevendo Funções em Rust",
      "description": "Neste laboratório, aprendemos a escrever funções em Rust. As funções são declaradas usando a palavra-chave `fn`, e seus argumentos são anotados com tipos. O tipo de retorno, se aplicável, é especificado após uma seta `->`. A expressão final na função serve como o valor de retorno, mas a instrução `return` pode ser usada para retornar um valor mais cedo. O laboratório fornece um exemplo de reescrita do programa FizzBuzz usando funções, demonstrando o uso de funções que retornam valores booleanos, funções que retornam o tipo unitário `()` e funções sem tipos de retorno especificados.",
      "meta": {
        "title": "Escreva Funções Rust Eficientes com Facilidade",
        "description": "Aprenda a escrever funções Rust poderosas que otimizam seu código e melhoram o desempenho.",
        "keywords": "rust, funções rust, programação rust, código rust, otimização rust, compilador online rust, comandos rust, tutorial rust, prática rust, playground rust, rust online"
      },
      "details": {
        "steps": [
          {
            "title": "Funções",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Esta etapa não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Esta etapa não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
