{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Using Rust Match Guards",
  "description": "In this lab, we learn about using match guards in Rust to filter arms based on conditions. The match guard is added after the pattern and is represented by the if keyword followed by a condition. The guard condition allows us to further refine the matching of patterns and perform additional checks before executing the corresponding arm of the match expression. However, it is important to note that the compiler does not consider guard conditions when checking pattern coverage, so it's necessary to ensure that all patterns are still covered by the match expression.",
  "meta": {
    "title": "Mastering Rust Match Guards",
    "description": "Discover the power of match guards in Rust to refine pattern matching and perform additional checks.",
    "keywords": "rust playground, conditional logic, pattern matching, programming tutorial, rust tutor, rust online compiler, rust online, rust commands, rust practice, match guards"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Guards",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/error_propagation",
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/match_operator",
          "rust/method_syntax",
          "rust/pattern_matching",
          "rust/string_type",
          "rust/struct_instantiate",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用 Rust 匹配守卫",
      "description": "在本实验中，我们学习如何在 Rust 中使用匹配守卫根据条件来过滤分支。匹配守卫添加在模式之后，由 if 关键字后跟一个条件表示。守卫条件使我们能够进一步细化模式匹配，并在执行匹配表达式的相应分支之前执行额外的检查。但是，需要注意的是，编译器在检查模式覆盖范围时不会考虑守卫条件，因此有必要确保匹配表达式仍然覆盖所有模式。",
      "meta": {
        "title": "精通 Rust 匹配守卫",
        "description": "探索 Rust 中匹配守卫的强大功能，以细化模式匹配并执行额外检查。",
        "keywords": "rust 游乐场，条件逻辑，模式匹配，编程教程，rust 教程，rust 在线编译器，rust 在线，rust 命令，rust 练习，匹配守卫"
      },
      "details": {
        "steps": [
          {
            "title": "守卫",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Usando Filtros de Coincidencia (Match Guards) en Rust",
      "description": "En este laboratorio, aprendemos a usar los filtros de coincidencia (`match guards`) en Rust para filtrar los brazos (`arms`) basados en condiciones. El filtro de coincidencia se agrega después del patrón y está representado por la palabra clave `if` seguida de una condición. La condición del filtro nos permite refinar aún más la coincidencia de patrones y realizar comprobaciones adicionales antes de ejecutar el brazo correspondiente de la expresión `match`. Sin embargo, es importante tener en cuenta que el compilador no considera las condiciones de filtro al comprobar la cobertura de patrones, por lo que es necesario asegurarse de que todos los patrones sigan estando cubiertos por la expresión `match`.",
      "meta": {
        "title": "Dominando los Filtros de Coincidencia (Match Guards) en Rust",
        "description": "Descubre el poder de los filtros de coincidencia (`match guards`) en Rust para refinar la coincidencia de patrones y realizar comprobaciones adicionales.",
        "keywords": "rust playground, lógica condicional, coincidencia de patrones, tutorial de programación, tutor de rust, compilador en línea de rust, rust en línea, comandos de rust, práctica de rust, filtros de coincidencia (`match guards`)"
      },
      "details": {
        "steps": [
          {
            "title": "Filtros (Guards)",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "En este momento, este paso no tiene verificaciones",
                "file": "verify1-1.sh",
                "hint": "En este momento, este paso no tiene verificaciones"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Utilisation des vérifications de correspondance en Rust",
      "description": "Dans ce laboratoire, nous apprenons à utiliser les vérifications de correspondance en Rust pour filtrer les branches en fonction de conditions. La vérification de correspondance est ajoutée après le motif et est représentée par le mot clé if suivi d'une condition. La condition de vérification nous permet de raffiner davantage la correspondance des motifs et d'effectuer des vérifications supplémentaires avant d'exécuter la branche correspondante de l'expression match. Cependant, il est important de noter que le compilateur ne considère pas les conditions de vérification lors de la vérification de la couverture des motifs, il est donc nécessaire de s'assurer que tous les motifs sont toujours couverts par l'expression match.",
      "meta": {
        "title": "Maîtriser les vérifications de correspondance en Rust",
        "description": "Découvrez le pouvoir des vérifications de correspondance en Rust pour raffiner la correspondance des motifs et effectuer des vérifications supplémentaires.",
        "keywords": "plateforme de pratique Rust, logique conditionnelle, correspondance des motifs, tutoriel de programmation, tuteur Rust, compilateur en ligne Rust, Rust en ligne, commandes Rust, pratique Rust, vérifications de correspondance"
      },
      "details": {
        "steps": [
          {
            "title": "Vérifications de correspondance",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Das Verwenden von Rust Match Guards",
      "description": "In diesem Lab lernen wir, wie in Rust Match Guards verwendet werden, um Arme basierend auf Bedingungen zu filtern. Der Match Guard wird nach dem Muster hinzugefügt und wird durch das if-Schlüsselwort gefolgt von einer Bedingung dargestellt. Die Bedingung des Guards ermöglicht es uns, die Übereinstimmung von Mustern weiter zu verfeinern und zusätzliche Prüfungen durchzuführen, bevor der entsprechende Arm des Match-Ausdrucks ausgeführt wird. Es ist jedoch wichtig zu beachten, dass der Compiler die Guard-Bedingungen nicht bei der Prüfung der Musterabdeckung berücksichtigt, sodass es erforderlich ist, sicherzustellen, dass alle Muster weiterhin von dem Match-Ausdruck abgedeckt werden.",
      "meta": {
        "title": "Das Beherrschen von Rust Match Guards",
        "description": "Entdecken Sie die Macht von Match Guards in Rust, um die Musterzuordnung zu verfeinern und zusätzliche Prüfungen durchzuführen.",
        "keywords": "rust playground, bedingende Logik, Musterzuordnung, Programmier-Tutorial, Rust-Tutor, Rust-Online-Compiler, Rust-Online, Rust-Befehle, Rust-Praxis, Match Guards"
      },
      "details": {
        "steps": [
          {
            "title": "Guards",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust のマッチガードの使用方法",
      "description": "この実験では、Rust でマッチガードを使って条件に基づいてアームをフィルタリングする方法を学びます。マッチガードはパターンの後に追加され、条件を表す if キーワードで表されます。ガード条件により、パターンのマッチングをさらに微調整し、マッチ式の対応するアームを実行する前に追加のチェックを行うことができます。ただし、コンパイラはパターンのカバレッジをチェックする際にガード条件を考慮しないため、マッチ式によってすべてのパターンが依然としてカバーされることを確認する必要があります。",
      "meta": {
        "title": "Rust のマッチガードをマスターする",
        "description": "Rust におけるマッチガードの力を発見して、パターンマッチングを微調整し、追加のチェックを行いましょう。",
        "keywords": "rust playground, 条件論理，パターンマッチング，プログラミングチュートリアル，rust tutor, rust オンラインコンパイラ，rust オンライン，rust コマンド，rust 練習，マッチガード"
      },
      "details": {
        "steps": [
          {
            "title": "ガード",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Использование match guards в Rust",
      "description": "В этом лабе мы узнаем, как использовать match guards в Rust для фильтрации ветвей на основе условий. Match guard добавляется после шаблона и представляется ключевым словом if, за которым следует условие. Условие guard позволяет нам дополнительно уточнить сопоставление шаблонов и выполнить дополнительные проверки перед выполнением соответствующей ветви match-выражения. Однако важно помнить, что компилятор не учитывает условия guard при проверке покрытия шаблонов, поэтому необходимо убедиться, что все шаблоны по-прежнему покрываются match-выражением.",
      "meta": {
        "title": "Мастерство в match guards Rust",
        "description": "Откройте силу match guards в Rust для уточнения сопоставления шаблонов и выполнения дополнительных проверок.",
        "keywords": "rust playground, логика условия, сопоставление шаблонов, учебник по программированию, наставник Rust, онлайн-компилятор Rust, онлайн Rust, команды Rust, практика Rust, match guards"
      },
      "details": {
        "steps": [
          {
            "title": "Guards",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "Rust 매치 가드 사용법",
      "description": "이 실습에서는 Rust 에서 매치 가드를 사용하여 조건에 따라 분기를 필터링하는 방법을 배웁니다. 매치 가드는 패턴 뒤에 추가되며, if 키워드와 조건으로 표현됩니다. 가드 조건은 패턴 일치를 더욱 세분화하고 매치 표현식의 해당 분기를 실행하기 전에 추가적인 검사를 수행할 수 있도록 합니다. 그러나 컴파일러는 패턴 커버리지 확인 시 가드 조건을 고려하지 않으므로 매치 표현식이 여전히 모든 패턴을 커버하는지 확인해야 합니다.",
      "meta": {
        "title": "Rust 매치 가드 마스터하기",
        "description": "Rust 에서 매치 가드의 힘을 활용하여 패턴 일치를 세분화하고 추가 검사를 수행하는 방법을 알아보세요.",
        "keywords": "러스트 플레이그라운드, 조건부 논리, 패턴 일치, 프로그래밍 튜토리얼, 러스트 튜터, 러스트 온라인 컴파일러, 러스트 온라인, 러스트 명령어, 러스트 연습, 매치 가드, 러스트 매치"
      },
      "details": {
        "steps": [
          {
            "title": "가드",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Utilizando Filtros (Guards) em Rust",
      "description": "Neste laboratório, aprendemos a utilizar filtros (guards) em expressões `match` em Rust para filtrar ramos com base em condições. O filtro é adicionado após o padrão e é representado pela palavra-chave `if` seguida de uma condição. A condição do filtro permite refinar ainda mais a correspondência de padrões e realizar verificações adicionais antes de executar o ramo correspondente da expressão `match`. No entanto, é importante notar que o compilador não considera as condições de filtro ao verificar a cobertura dos padrões, sendo necessário garantir que todos os padrões ainda estejam cobertos pela expressão `match`.",
      "meta": {
        "title": "Dominando Filtros (Guards) em Expressões Match de Rust",
        "description": "Descubra o poder dos filtros (guards) em Rust para refinar a correspondência de padrões e realizar verificações adicionais.",
        "keywords": "Rust, match, guards, filtros, expressões match, programação Rust, tutoriais Rust, exemplos Rust, tutoria Rust, prática Rust, desenvolvimento Rust, aprendizado Rust, código Rust, linguagem Rust, programação funcional, padrões de correspondência, lógica condicional, compilador online Rust, playground Rust"
      },
      "details": {
        "steps": [
          {
            "title": "Filtros",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
