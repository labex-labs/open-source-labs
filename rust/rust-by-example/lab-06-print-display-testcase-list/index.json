{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Implement fmt::Display for List in Rust",
  "description": "In this lab, we are implementing fmt::Display for a structure called List which contains a Vec in Rust. The challenge is to handle each element sequentially using the write! macro, as it generates a fmt::Result which needs to be properly handled. To address this, we can use the ? operator to check if write! returns an error and return it if it does, otherwise continue with the execution. By implementing fmt::Display for List, we can iterate over the elements in the vector and print them within square brackets, separated by commas. The task is to modify the program to also print the index of each element in the vector. The expected output after the modification is [0: 1, 1: 2, 2: 3].",
  "meta": {
    "title": "Rust Programming | Implementing fmt::Display for a List Structure",
    "description": "Learn how to implement the fmt::Display trait for a Rust structure called List, which contains a Vec. Discover the proper handling of fmt::Result using the ? operator.",
    "keywords": "Rust, Programming, fmt::Display, List, Vec, fmt::Result, ?"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Testcase: List",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/method_syntax",
          "rust/operator_overloading",
          "rust/traits",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "在 Rust 中为 List 实现 fmt::Display",
      "description": "在这个实验中，我们要为 Rust 中一个名为 List 的结构体实现 fmt::Display，该结构体包含一个 Vec。挑战在于使用 write! 宏按顺序处理每个元素，因为它会生成一个 fmt::Result，需要对其进行正确处理。为了解决这个问题，我们可以使用？运算符检查 write! 是否返回错误，如果返回错误则返回该错误，否则继续执行。通过为 List 实现 fmt::Display，我们可以遍历向量中的元素，并在方括号内打印它们，元素之间用逗号分隔。任务是修改程序，使其还能打印向量中每个元素的索引。修改后的预期输出是 [0: 1, 1: 2, 2: 3]。",
      "meta": {
        "title": "Rust 编程 | 为 List 结构体实现 fmt::Display",
        "description": "学习如何为 Rust 中一个名为 List 的结构体实现 fmt::Display 特性，该结构体包含一个 Vec。了解如何使用？运算符正确处理 fmt::Result。",
        "keywords": "Rust, 编程，fmt::Display, List, Vec, fmt::Result,?"
      },
      "details": {
        "steps": [
          {
            "title": "测试用例：List",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Implementar fmt::Display para List en Rust",
      "description": "En este laboratorio, estamos implementando fmt::Display para una estructura llamada List que contiene un Vec en Rust. El desafío es manejar cada elemento secuencialmente utilizando la macro write!, ya que genera un fmt::Result que debe ser manejado adecuadamente. Para abordar esto, podemos utilizar el operador? para comprobar si write! devuelve un error y devolverlo si es así, de lo contrario continuar con la ejecución. Al implementar fmt::Display para List, podemos iterar sobre los elementos del vector y mostrarlos dentro de corchetes, separados por comas. La tarea es modificar el programa para que también muestre el índice de cada elemento del vector. La salida esperada después de la modificación es [0: 1, 1: 2, 2: 3].",
      "meta": {
        "title": "Programación en Rust | Implementando fmt::Display para una Estructura List",
        "description": "Aprende cómo implementar el trato fmt::Display para una estructura en Rust llamada List, que contiene un Vec. Descubre el manejo adecuado de fmt::Result utilizando el operador?.",
        "keywords": "Rust, Programación, fmt::Display, List, Vec, fmt::Result,?"
      },
      "details": {
        "steps": [
          {
            "title": "Caso de prueba: List",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "En este momento, este paso no tiene verificaciones",
                "file": "verify1-1.sh",
                "hint": "En este momento, este paso no tiene verificaciones"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Implémenter fmt::Display pour List en Rust",
      "description": "Dans ce laboratoire, nous implémentons fmt::Display pour une structure appelée List qui contient un Vec en Rust. Le défi est de traiter chaque élément séquentiellement en utilisant la macro write!, car elle génère un fmt::Result qui doit être correctement géré. Pour y remédier, nous pouvons utiliser l'opérateur? pour vérifier si write! renvoie une erreur et la renvoyer si c'est le cas, sinon continuer l'exécution. En implémentant fmt::Display pour List, nous pouvons itérer sur les éléments du vecteur et les imprimer entre crochets, séparés par des virgules. L'exercice est de modifier le programme pour imprimer également l'index de chaque élément dans le vecteur. La sortie attendue après la modification est [0: 1, 1: 2, 2: 3].",
      "meta": {
        "title": "Programmation Rust | Implémentation de fmt::Display pour une structure List",
        "description": "Découvrez comment implémenter le trait fmt::Display pour une structure Rust appelée List, qui contient un Vec. Apprenez à gérer correctement fmt::Result en utilisant l'opérateur?.",
        "keywords": "Rust, Programmation, fmt::Display, List, Vec, fmt::Result,?"
      },
      "details": {
        "steps": [
          {
            "title": "Testcase: List",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Implementiere fmt::Display für List in Rust",
      "description": "In diesem Lab implementieren wir fmt::Display für eine Struktur namens List, die in Rust ein Vec enthält. Die Herausforderung besteht darin, jedes Element sequentiell mit dem write!-Makro zu verarbeiten, da es ein fmt::Result generiert, das richtig behandelt werden muss. Um dies anzugehen, können wir den?-Operator verwenden, um zu überprüfen, ob write! einen Fehler zurückgibt, und ihn zurückzugeben, wenn dies der Fall ist, andernfalls mit der Ausführung fortfahren. Indem wir fmt::Display für List implementieren, können wir über die Elemente im Vektor iterieren und sie in eckigen Klammern drucken, getrennt durch Kommata. Die Aufgabe besteht darin, das Programm zu modifizieren, um auch den Index jedes Elements im Vektor auszugeben. Die erwartete Ausgabe nach der Modifikation lautet [0: 1, 1: 2, 2: 3].",
      "meta": {
        "title": "Rust-Programmierung | Implementierung von fmt::Display für eine List-Struktur",
        "description": "Lernen Sie, wie Sie das fmt::Display-Trait für eine Rust-Struktur namens List implementieren, die ein Vec enthält. Entdecken Sie die richtige Behandlung von fmt::Result mit dem?-Operator.",
        "keywords": "Rust, Programmierung, fmt::Display, List, Vec, fmt::Result,?"
      },
      "details": {
        "steps": [
          {
            "title": "Testfall: List",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust で List に対して fmt::Display を実装する",
      "description": "この実験では、Rust の Vec を含む List と呼ばれる構造体に対して fmt::Display を実装します。課題は、write! マクロを使用して各要素を順次処理することです。これは fmt::Result を生成するため、適切に処理する必要があります。これに対処するために、write! がエラーを返すかどうかを確認し、返した場合はそれを返し、そうでなければ実行を続けるために？演算子を使用できます。List に対して fmt::Display を実装することで、ベクトル内の要素を反復処理し、角括弧内にコンマ区切りで表示することができます。課題は、プログラムを修正して、ベクトル内の各要素のインデックスも表示することです。修正後の期待される出力は [0: 1, 1: 2, 2: 3] です。",
      "meta": {
        "title": "Rust プログラミング | List 構造体に対する fmt::Display の実装",
        "description": "List と呼ばれる Rust 構造体に対して fmt::Display トレイトをどのように実装するか学びましょう。この構造体には Vec が含まれています。? 演算子を使用した fmt::Result の適切な処理方法を見つけましょう。",
        "keywords": "Rust, プログラミング，fmt::Display, List, Vec, fmt::Result,?"
      },
      "details": {
        "steps": [
          {
            "title": "テストケース：List",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在検証がありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在検証がありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Реализация fmt::Display для List в Rust",
      "description": "В этом лабораторном задании мы реализуем fmt::Display для структуры под названием List, которая содержит Vec в Rust. Задача заключается в последовательном обработке каждого элемента с использованием макроса write!, так как он генерирует fmt::Result, которое необходимо обработать правильно. Для этого мы можем использовать оператор? для проверки, возвращает ли write! ошибку, и возвращать ее, если это так, в противном случае продолжать выполнение. Реализовав fmt::Display для List, мы можем перебирать элементы в векторе и выводить их в квадратных скобках, разделенных запятыми. Задача - модифицировать программу так, чтобы она также выводила индекс каждого элемента в векторе. Ожидаемый вывод после модификации: [0: 1, 1: 2, 2: 3].",
      "meta": {
        "title": "Программирование на Rust | Реализация fmt::Display для структуры List",
        "description": "Изучите, как реализовать трейт fmt::Display для структуры на Rust под названием List, которая содержит Vec. Откройте правильное управление fmt::Result с использованием оператора?.",
        "keywords": "Rust, Программирование, fmt::Display, List, Vec, fmt::Result,?"
      },
      "details": {
        "steps": [
          {
            "title": "Тестовый случай: List",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На этом этапе проверок нет",
                "file": "verify1-1.sh",
                "hint": "На этом этапе проверок нет"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
