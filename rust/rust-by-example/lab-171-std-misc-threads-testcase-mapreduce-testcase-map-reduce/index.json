{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Parallel Data Processing in Rust",
  "description": "In this lab, the Rust programming language is explored for its ability to parallelize data processing using a map-reduce algorithm. The example code calculates the sum of all digits in a block of numbers by dividing the data into segments and processing each segment in a separate thread. The Rust standard library provides threading primitives that prevent data races and guarantee thread safety. The program also demonstrates Rust's understanding of passing read-only references across thread boundaries. Additionally, the code showcases the use of closures, iterators, and the join() method to combine the intermediate results of each thread into a final sum. To ensure efficiency, the program can be modified to chunk the data into a limited number of segments, rather than depending on user-inputted data that may lead to an excessive number of threads.",
  "meta": {
    "title": "Rust Programming | Parallel Data Processing | Map-Reduce Algorithm",
    "description": "Explore Rust's ability to parallelize data processing using a map-reduce algorithm. Calculate the sum of digits in a block of numbers by dividing the data into segments and processing each segment in a separate thread.",
    "keywords": "Rust, Parallel Processing, Map-Reduce, Multithreading, Data Processing, Digit Sum"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Testcase: map-reduce",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/error_propagation",
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/method_syntax",
          "rust/mutable_variables",
          "rust/operator_overloading",
          "rust/string_type",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 中的并行数据处理",
      "description": "在本实验中，探索了 Rust 编程语言使用 map-reduce 算法并行化数据处理的能力。示例代码通过将数据分成多个段，并在单独的线程中处理每个段，来计算一组数字中所有数字的总和。Rust 标准库提供了防止数据竞争并保证线程安全的线程原语。该程序还展示了 Rust 对跨线程边界传递只读引用的理解。此外，代码展示了如何使用闭包、迭代器和 join() 方法将每个线程的中间结果组合成最终的总和。为了确保效率，可以修改程序，将数据分块成有限数量的段，而不是依赖于可能导致过多线程的用户输入数据。",
      "meta": {
        "title": "Rust 编程 | 并行数据处理 | Map-Reduce 算法",
        "description": "探索 Rust 使用 map-reduce 算法并行化数据处理的能力。通过将数据分成段并在单独线程中处理每个段来计算一组数字中的数字总和。",
        "keywords": "Rust, 并行处理，Map-Reduce, 多线程，数据处理，数字总和"
      },
      "details": {
        "steps": [
          {
            "title": "测试用例：map-reduce",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Procesamiento de datos paralelos en Rust",
      "description": "En este laboratorio, se explora el lenguaje de programación Rust por su capacidad para paralelizar el procesamiento de datos utilizando un algoritmo map-reduce. El código de ejemplo calcula la suma de todos los dígitos en un bloque de números dividiendo los datos en segmentos y procesando cada segmento en un hilo separado. La biblioteca estándar de Rust proporciona primitivas de subprocesamiento que evitan las carreras de datos y garantizan la seguridad de los subprocesos. El programa también demuestra la comprensión de Rust de pasar referencias de solo lectura a través de los límites de los subprocesos. Además, el código muestra el uso de closures, iteradores y el método join() para combinar los resultados intermedios de cada subproceso en una suma final. Para garantizar la eficiencia, el programa se puede modificar para dividir los datos en un número limitado de segmentos, en lugar de depender de datos ingresados por el usuario que pueden conducir a un número excesivo de subprocesos.",
      "meta": {
        "title": "Programación Rust | Procesamiento de datos paralelos | Algoritmo map-reduce",
        "description": "Explora la capacidad de Rust para paralelizar el procesamiento de datos utilizando un algoritmo map-reduce. Calcula la suma de dígitos en un bloque de números dividiendo los datos en segmentos y procesando cada segmento en un hilo separado.",
        "keywords": "Rust, Procesamiento paralelo, Map-Reduce, Multihilos, Procesamiento de datos, Suma de dígitos"
      },
      "details": {
        "steps": [
          {
            "title": "Caso de prueba: map-reduce",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificaciones en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificaciones en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Traitement parallèle des données en Rust",
      "description": "Dans ce laboratoire, le langage de programmation Rust est exploré pour sa capacité à paralléliser le traitement des données à l'aide d'un algorithme map-reduce. Le code d'exemple calcule la somme de tous les chiffres dans un bloc de nombres en divisant les données en segments et en traitant chaque segment dans un thread séparé. La bibliothèque standard Rust fournit des primitives de threading qui empêchent les courses de données et garantissent la sécurité des threads. Le programme démontre également la compréhension de Rust du passage de références en lecture seule à travers les limites des threads. De plus, le code montre l'utilisation de closures, d'itérateurs et de la méthode join() pour combiner les résultats intermédiaires de chaque thread en une somme finale. Pour garantir l'efficacité, le programme peut être modifié pour découper les données en un nombre limité de segments, plutôt que de dépendre des données saisies par l'utilisateur qui peuvent entraîner un nombre excessif de threads.",
      "meta": {
        "title": "Programmation Rust | Traitement parallèle des données | Algorithme map-reduce",
        "description": "Explorez la capacité de Rust à paralléliser le traitement des données à l'aide d'un algorithme map-reduce. Calculez la somme des chiffres dans un bloc de nombres en divisant les données en segments et en traitant chaque segment dans un thread séparé.",
        "keywords": "Rust, Traitement parallèle, Map-Reduce, Multithreading, Traitement des données, Somme des chiffres"
      },
      "details": {
        "steps": [
          {
            "title": "Testcase: map-reduce",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Parallele Datenverarbeitung in Rust",
      "description": "In diesem Lab wird die Programmiersprache Rust untersucht, um ihre Fähigkeit zur Parallelisierung der Datenverarbeitung mit einem Map-Reduce-Algorithmus zu erproben. Der Beispielcode berechnet die Summe aller Ziffern in einem Block von Zahlen, indem er die Daten in Segmente aufteilt und jedes Segment in einem separaten Thread verarbeitet. Die Rust-Standardbibliothek bietet Threading-Primitive, die Datenkonflikte verhindern und die Threadsicherheit gewährleisten. Das Programm zeigt auch Rust's Verständnis der Übergabe von schreibgeschützten Referenzen über Threadgrenzen. Darüber hinaus zeigt der Code die Verwendung von Closures, Iterators und der join()-Methode, um die Zwischenergebnisse jedes Threads zu einer endgültigen Summe zu kombinieren. Um die Effizienz zu gewährleisten, kann das Programm so modifiziert werden, dass die Daten in eine begrenzte Anzahl von Segmenten aufgeteilt werden, anstatt von benutzerdefinierten Daten abhängig zu sein, die möglicherweise zu einer übermäßigen Anzahl von Threads führen.",
      "meta": {
        "title": "Rust-Programmierung | Parallele Datenverarbeitung | Map-Reduce-Algorithmus",
        "description": "Erkunden Sie Rust's Fähigkeit zur Parallelisierung der Datenverarbeitung mit einem Map-Reduce-Algorithmus. Berechnen Sie die Summe der Ziffern in einem Block von Zahlen, indem Sie die Daten in Segmente aufteilen und jedes Segment in einem separaten Thread verarbeiten.",
        "keywords": "Rust, Parallele Verarbeitung, Map-Reduce, Multithreading, Datenverarbeitung, Ziffernsumme"
      },
      "details": {
        "steps": [
          {
            "title": "Testfall: map-reduce",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust における並列データ処理",
      "description": "この実験では、マップリデュースアルゴリズムを使ってデータ処理を並列化する能力について、Rust プログラミング言語を調べます。サンプルコードは、データをセグメントに分割し、各セグメントを別のスレッドで処理することで、数字のブロック内のすべての桁の合計を計算します。Rust 標準ライブラリは、データ競合を防止し、スレッドセーフを保証するスレッドプリミティブを提供します。このプログラムはまた、スレッド境界を越えて読み取り専用参照を渡す Rust の理解を示しています。さらに、コードはクロージャ、反復子、および join() メソッドの使用を示しており、各スレッドの中間結果を最終的な合計に結合しています。効率を保証するために、プログラムは、過度の数のスレッドにつながる可能性のあるユーザー入力データに依存する代わりに、データを制限された数のセグメントにチャンク化するように修正できます。",
      "meta": {
        "title": "Rust プログラミング | 並列データ処理 | マップリデュースアルゴリズム",
        "description": "マップリデュースアルゴリズムを使って Rust のデータ処理並列化能力を探求しましょう。データをセグメントに分割し、各セグメントを別のスレッドで処理することで、数字のブロック内の桁の合計を計算します。",
        "keywords": "Rust, 並列処理，マップリデュース，マルチスレッド，データ処理，桁の合計"
      },
      "details": {
        "steps": [
          {
            "title": "テストケース：マップリデュース",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在検証がありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在検証がありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Параллельная обработка данных в Rust",
      "description": "В этой лабораторной работе исследуется язык программирования Rust в связи с его способностью параллелизировать обработку данных с использованием алгоритма map-reduce. Примерный код вычисляет сумму всех цифр в блоке чисел, разделяя данные на сегменты и обрабатывая каждый сегмент в отдельном потоке. Стандартная библиотека Rust предоставляет примитивы для потоков, которые предотвращают гонку данных и гарантируют безопасность потоков. Программа также демонстрирует, как Rust обрабатывает передачу только для чтения ссылок через границы потоков. Кроме того, код показывает использование замыканий, итераторов и метода join() для объединения промежуточных результатов каждого потока в окончательную сумму. Чтобы обеспечить эффективность, программу можно модифицировать так, чтобы разбивать данные на ограниченное количество сегментов, а не полагаться на пользовательский ввод данных, который может привести к чрезмерному количеству потоков.",
      "meta": {
        "title": "Программирование на Rust | Параллельная обработка данных | Алгоритм Map-Reduce",
        "description": "Изучите способность Rust параллелизировать обработку данных с использованием алгоритма map-reduce. Вычислите сумму цифр в блоке чисел, разделив данные на сегменты и обработав каждый сегмент в отдельном потоке.",
        "keywords": "Rust, Параллельная обработка, Map-Reduce, Многопоточность, Обработка данных, Сумма цифр"
      },
      "details": {
        "steps": [
          {
            "title": "Тестовый случай: map-reduce",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "Rust 를 이용한 병렬 데이터 처리",
      "description": "이 실습에서는 Rust 프로그래밍 언어를 사용하여 맵 - 리듀스 알고리즘을 통해 데이터 처리를 병렬화하는 방법을 탐색합니다. 예제 코드는 데이터를 세그먼트로 나누고 각 세그먼트를 별도의 스레드에서 처리하여 숫자 블록의 모든 자릿수 합계를 계산합니다. Rust 표준 라이브러리는 데이터 경합을 방지하고 스레드 안전성을 보장하는 스레드 원시 요소를 제공합니다. 또한, 프로그램은 스레드 경계를 가로질러 읽기 전용 참조를 전달하는 Rust 의 이해 방식을 보여줍니다. 추가적으로, 코드는 클로저, 반복자 및 join() 메서드를 사용하여 각 스레드의 중간 결과를 최종 합계로 결합하는 방법을 보여줍니다. 효율성을 위해 프로그램은 사용자 입력 데이터에 의존하여 과도한 스레드를 생성하는 대신 데이터를 제한된 수의 세그먼트로 나누도록 수정할 수 있습니다.",
      "meta": {
        "title": "Rust 프로그래밍 | 병렬 데이터 처리 | 맵 - 리듀스 알고리즘",
        "description": "맵 - 리듀스 알고리즘을 사용하여 Rust 의 데이터 처리 병렬화 기능을 탐색하세요. 데이터를 세그먼트로 나누고 각 세그먼트를 별도의 스레드에서 처리하여 숫자 블록의 자릿수 합계를 계산합니다.",
        "keywords": "Rust, 병렬 처리, 맵 - 리듀스, 멀티스레딩, 데이터 처리, 자릿수 합계, Rust 병렬 프로그래밍, Rust 데이터 병렬화"
      },
      "details": {
        "steps": [
          {
            "title": "실습: 맵 - 리듀스",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Processamento Paralelo de Dados em Rust",
      "description": "Neste laboratório, a linguagem de programação Rust é explorada pela sua capacidade de paralelizar o processamento de dados usando um algoritmo map-reduce. O código de exemplo calcula a soma de todos os dígitos num bloco de números, dividindo os dados em segmentos e processando cada segmento numa thread separada. A biblioteca padrão do Rust fornece primitivas de threading que evitam corridas de dados e garantem a segurança das threads. O programa também demonstra a compreensão do Rust em relação à passagem de referências de leitura-somente através de fronteiras de threads. Além disso, o código demonstra o uso de closures, iteradores e o método join() para combinar os resultados intermediários de cada thread numa soma final. Para garantir a eficiência, o programa pode ser modificado para dividir os dados em um número limitado de segmentos, em vez de depender de dados de entrada do utilizador que podem levar a um número excessivo de threads.",
      "meta": {
        "title": "Programação Rust | Processamento Paralelo de Dados | Algoritmo Map-Reduce",
        "description": "Explore a capacidade do Rust de paralelizar o processamento de dados usando um algoritmo map-reduce. Calcule a soma dos dígitos num bloco de números dividindo os dados em segmentos e processando cada segmento numa thread separada.",
        "keywords": "Rust, Processamento Paralelo, Map-Reduce, Multithreading, Processamento de Dados, Soma de Dígitos, Programação Rust, Algoritmo MapReduce, Processamento Paralelo em Rust"
      },
      "details": {
        "steps": [
          {
            "title": "Caso de Teste: map-reduce",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
