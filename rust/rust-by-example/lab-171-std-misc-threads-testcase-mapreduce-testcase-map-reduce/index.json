{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Parallel Data Processing in Rust",
  "description": "In this lab, the Rust programming language is explored for its ability to parallelize data processing using a map-reduce algorithm. The example code calculates the sum of all digits in a block of numbers by dividing the data into segments and processing each segment in a separate thread. The Rust standard library provides threading primitives that prevent data races and guarantee thread safety. The program also demonstrates Rust's understanding of passing read-only references across thread boundaries. Additionally, the code showcases the use of closures, iterators, and the join() method to combine the intermediate results of each thread into a final sum. To ensure efficiency, the program can be modified to chunk the data into a limited number of segments, rather than depending on user-inputted data that may lead to an excessive number of threads.",
  "meta": {
    "title": "Rust Programming | Parallel Data Processing | Map-Reduce Algorithm",
    "description": "Explore Rust's ability to parallelize data processing using a map-reduce algorithm. Calculate the sum of digits in a block of numbers by dividing the data into segments and processing each segment in a separate thread.",
    "keywords": "Rust, Parallel Processing, Map-Reduce, Multithreading, Data Processing, Digit Sum"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Testcase: map-reduce",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/error_propagation",
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/method_syntax",
          "rust/mutable_variables",
          "rust/operator_overloading",
          "rust/string_type",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 中的并行数据处理",
      "description": "在本实验中，探索了 Rust 编程语言使用 map-reduce 算法并行化数据处理的能力。示例代码通过将数据分成多个段，并在单独的线程中处理每个段，来计算一组数字中所有数字的总和。Rust 标准库提供了防止数据竞争并保证线程安全的线程原语。该程序还展示了 Rust 对跨线程边界传递只读引用的理解。此外，代码展示了如何使用闭包、迭代器和 join() 方法将每个线程的中间结果组合成最终的总和。为了确保效率，可以修改程序，将数据分块成有限数量的段，而不是依赖于可能导致过多线程的用户输入数据。",
      "meta": {
        "title": "Rust 编程 | 并行数据处理 | Map-Reduce 算法",
        "description": "探索 Rust 使用 map-reduce 算法并行化数据处理的能力。通过将数据分成段并在单独线程中处理每个段来计算一组数字中的数字总和。",
        "keywords": "Rust, 并行处理, Map-Reduce, 多线程, 数据处理, 数字总和"
      },
      "details": {
        "steps": [
          {
            "title": "测试用例：map-reduce",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
