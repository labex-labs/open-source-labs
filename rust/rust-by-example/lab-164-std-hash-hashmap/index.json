{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Rust HashMap Data Storage Tutorial",
  "description": "In this lab, we learn about HashMap in Rust, which is used to store values by key. HashMap keys can be of various types, including booleans, integers, strings, or any other type that implements the Eq and Hash traits. HashMaps can grow and shrink dynamically based on the number of elements. We can create a HashMap with a specific capacity using HashMap::with_capacity(uint) or use HashMap::new() to get a HashMap with a default initial capacity. The provided code example demonstrates the usage of HashMap by storing contact names and phone numbers and performing operations like insertion, retrieval, modification, and removal.",
  "meta": {
    "title": "Rust HashMap | Programming Tutorials",
    "description": "Learn about the Rust HashMap data structure, which allows storing values by key. Discover how to create, manipulate, and use HashMaps in your Rust applications.",
    "keywords": "Rust, HashMap, Data Structures, Programming Tutorials, Key-Value Pairs"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "HashMap",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/error_propagation",
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/lifetime_specifiers",
          "rust/method_syntax",
          "rust/mutable_variables",
          "rust/operator_overloading",
          "rust/string_type",
          "rust/type_casting",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 语言的 HashMap 数据存储教程",
      "description": "在本实验中，我们学习 Rust 语言中的 HashMap，它用于按键存储值。HashMap 的键可以是各种类型，包括布尔值、整数、字符串，或者任何其他实现了 Eq 和 Hash 特征的类型。HashMap 可以根据元素数量动态增长和收缩。我们可以使用 HashMap::with_capacity(uint) 创建具有特定容量的 HashMap，或者使用 HashMap::new() 获取具有默认初始容量的 HashMap。提供的代码示例通过存储联系人姓名和电话号码并执行插入、检索、修改和删除等操作来演示 HashMap 的用法。",
      "meta": {
        "title": "Rust 语言的 HashMap | 编程教程",
        "description": "了解 Rust 语言的 HashMap 数据结构，它允许按键存储值。探索如何在你的 Rust 应用程序中创建、操作和使用 HashMap。",
        "keywords": "Rust, HashMap, 数据结构，编程教程，键值对"
      },
      "details": {
        "steps": [
          {
            "title": "哈希映射表（HashMap）",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Tutorial de almacenamiento de datos HashMap en Rust",
      "description": "En este laboratorio, aprendemos sobre HashMap en Rust, que se utiliza para almacenar valores por clave. Las claves de HashMap pueden ser de varios tipos, incluyendo booleanos, enteros, cadenas o cualquier otro tipo que implemente los rasgos Eq y Hash. Los HashMaps pueden crecer y contraerse dinámicamente en función del número de elementos. Podemos crear un HashMap con una capacidad específica utilizando HashMap::with_capacity(uint) o utilizar HashMap::new() para obtener un HashMap con una capacidad inicial predeterminada. El ejemplo de código proporcionado demuestra el uso de HashMap al almacenar nombres y números de teléfono de contactos y realizar operaciones como inserción, recuperación, modificación y eliminación.",
      "meta": {
        "title": "HashMap de Rust | Tutoriales de programación",
        "description": "Aprende sobre la estructura de datos HashMap de Rust, que permite almacenar valores por clave. Descubre cómo crear, manipular y utilizar HashMaps en tus aplicaciones de Rust.",
        "keywords": "Rust, HashMap, Estructuras de datos, Tutoriales de programación, Pairs de clave-valor"
      },
      "details": {
        "steps": [
          {
            "title": "HashMap",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "En este momento, este paso no tiene verificación",
                "file": "verify1-1.sh",
                "hint": "En este momento, este paso no tiene verificación"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Tutoriel sur le stockage de données avec HashMap en Rust",
      "description": "Dans ce laboratoire, nous apprenons à utiliser HashMap en Rust, qui est utilisé pour stocker des valeurs par clé. Les clés de HashMap peuvent être de différents types, y compris des booléens, des entiers, des chaînes de caractères ou tout autre type qui implémente les traits Eq et Hash. Les HashMaps peuvent croître et rétrécir dynamiquement en fonction du nombre d'éléments. Nous pouvons créer un HashMap avec une capacité spécifique en utilisant HashMap::with_capacity(uint) ou utiliser HashMap::new() pour obtenir un HashMap avec une capacité initiale par défaut. L'exemple de code fourni montre comment utiliser HashMap en stockant des noms de contacts et des numéros de téléphone et en effectuant des opérations telles que l'insertion, la récupération, la modification et la suppression.",
      "meta": {
        "title": "HashMap en Rust | Tutoriels de programmation",
        "description": "Découvrez la structure de données HashMap en Rust, qui permet de stocker des valeurs par clé. Apprenez à créer, manipuler et utiliser des HashMaps dans vos applications Rust.",
        "keywords": "Rust, HashMap, Structures de données, Tutoriels de programmation, Paires clé-valeur"
      },
      "details": {
        "steps": [
          {
            "title": "HashMap",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Rust HashMap - Tutorial zur Datenspeicherung",
      "description": "In diesem Lab lernen wir über HashMap in Rust, das verwendet wird, um Werte nach Schlüssel zu speichern. HashMap-Schlüssel können verschiedene Typen haben, darunter Booleans, Integer, Strings oder jeder andere Typ, der das Eq- und Hash-Trait implementiert. HashMaps können sich dynamisch in Abhängigkeit von der Anzahl der Elemente erweitern und verkleinern. Wir können ein HashMap mit einer bestimmten Kapazität mit HashMap::with_capacity(uint) erstellen oder HashMap::new() verwenden, um ein HashMap mit einer standardmäßigen Anfangskapazität zu erhalten. Das bereitgestellte Codebeispiel demonstriert die Verwendung von HashMap, indem Kontaktnamen und Telefonnummern gespeichert werden und Operationen wie das Einfügen, Abrufen, Ändern und Entfernen durchgeführt werden.",
      "meta": {
        "title": "Rust HashMap | Programmier-Tutorials",
        "description": "Lernen Sie über die Rust-HashMap-Datenstruktur, die es ermöglicht, Werte nach Schlüssel zu speichern. Entdecken Sie, wie Sie HashMaps in Ihren Rust-Anwendungen erstellen, manipulieren und verwenden.",
        "keywords": "Rust, HashMap, Datenstrukturen, Programmier-Tutorials, Schlüssel-Wert-Paare"
      },
      "details": {
        "steps": [
          {
            "title": "HashMap",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust の HashMap データ格納チュートリアル",
      "description": "この実験では、Rust の HashMap について学びます。これは、キーを使って値を格納するために使用されます。HashMap のキーは、ブール値、整数、文字列、または Eq と Hash トレイトを実装する他の任意の型であることができます。HashMap は、要素の数に基づいて動的に拡大および縮小することができます。HashMap::with_capacity(uint) を使って特定の容量で HashMap を作成することもできますし、デフォルトの初期容量で HashMap を取得するには HashMap::new() を使います。提供されたコード例は、連絡先の名前と電話番号を格納し、挿入、取得、変更、および削除などの操作を行うことで HashMap の使い方を示しています。",
      "meta": {
        "title": "Rust の HashMap | プログラミングチュートリアル",
        "description": "キーを使って値を格納できる Rust の HashMap データ構造について学びましょう。Rust アプリケーションで HashMap を作成、操作、および使用する方法を見つけましょう。",
        "keywords": "Rust, HashMap, データ構造，プログラミングチュートリアル，キー-値ペア"
      },
      "details": {
        "steps": [
          {
            "title": "HashMap",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップは現在検証がありません",
                "file": "verify1-1.sh",
                "hint": "このステップは現在検証がありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Руководство по хранению данных в Rust HashMap",
      "description": "В этом лабе мы узнаем о HashMap в Rust, который используется для хранения значений по ключу. Ключи HashMap могут быть разных типов, включая булевы значения, целые числа, строки или любой другой тип, реализующий трейты Eq и Hash. HashMaps могут динамически увеличиваться и уменьшаться в зависимости от количества элементов. Мы можем создать HashMap с определенной емкостью с использованием HashMap::with_capacity(uint) или использовать HashMap::new(), чтобы получить HashMap с начальным значением емкости по умолчанию. Пример кода, приведенный ниже, демонстрирует использование HashMap путем хранения имен контактов и номеров телефонов и выполнения операций, таких как вставка, получение, изменение и удаление.",
      "meta": {
        "title": "Rust HashMap | Руководства по программированию",
        "description": "Изучите структуру данных Rust HashMap, которая позволяет хранить значения по ключу. Узнать, как создавать, манипулировать и использовать HashMaps в своих приложениях на Rust.",
        "keywords": "Rust, HashMap, Структуры данных, Руководства по программированию, Пара ключ-значение"
      },
      "details": {
        "steps": [
          {
            "title": "HashMap",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
