{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Exploring Rust Generics Functionality",
  "description": "In this lab, we will be exploring the topic of generics, which involves generalizing types and functionalities to handle a broader range of cases, reducing code duplication. The syntax for generics in Rust involves specifying type parameters using angle brackets, such as <T>. By using generics, we can create generic functions that can accept arguments of any type. Furthermore, we can define generic types that can work with different concrete types.",
  "meta": {
    "title": "Rust Generics | Programming Fundamentals",
    "description": "Explore the power of generics in Rust, a language that allows you to write code that works with different data types, reducing duplication and increasing flexibility.",
    "keywords": "Rust, Generics, Programming, Fundamentals, Type Parameters"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Generics",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "探索 Rust 泛型功能",
      "description": "在本实验中，我们将探索泛型的主题，泛型涉及将类型和功能进行泛化，以处理更广泛的情况，减少代码重复。Rust 中泛型的语法涉及使用尖括号指定类型参数，例如 <T>。通过使用泛型，我们可以创建能够接受任何类型参数的泛型函数。此外，我们还可以定义能够与不同具体类型一起工作的泛型类型。",
      "meta": {
        "title": "Rust 泛型 | 编程基础",
        "description": "探索 Rust 中泛型的强大功能，这是一种允许你编写可与不同数据类型配合使用的代码的语言，可减少重复并提高灵活性。",
        "keywords": "Rust, 泛型，编程，基础，类型参数"
      },
      "details": {
        "steps": [
          {
            "title": "泛型",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Explorando la funcionalidad de genéricos en Rust",
      "description": "En este laboratorio, exploraremos el tema de los genéricos, que implica generalizar tipos y funcionalidades para manejar una gama más amplia de casos y reducir la duplicación de código. La sintaxis de los genéricos en Rust implica especificar parámetros de tipo usando corchetes angulares, como <T>. Al usar genéricos, podemos crear funciones genéricas que pueden aceptar argumentos de cualquier tipo. Además, podemos definir tipos genéricos que pueden trabajar con diferentes tipos concretos.",
      "meta": {
        "title": "Genéricos de Rust | Fundamentos de Programación",
        "description": "Explora el poder de los genéricos en Rust, un lenguaje que te permite escribir código que funcione con diferentes tipos de datos, reduciendo la duplicación y aumentando la flexibilidad.",
        "keywords": "Rust, Genéricos, Programación, Fundamentos, Parámetros de Tipo"
      },
      "details": {
        "steps": [
          {
            "title": "Genéricos",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificaciones en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificaciones en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Explorer la fonctionnalité des génériques en Rust",
      "description": "Dans ce laboratoire, nous allons explorer le sujet des génériques, qui consiste à généraliser les types et les fonctionnalités pour traiter une plage plus large de cas et réduire la duplication de code. La syntaxe des génériques en Rust consiste à spécifier des paramètres de type à l'aide de crochets, tels que <T>. En utilisant des génériques, nous pouvons créer des fonctions génériques qui peuvent accepter des arguments de n'importe quel type. De plus, nous pouvons définir des types génériques qui peuvent fonctionner avec différents types concrets.",
      "meta": {
        "title": "Génériques Rust | Fondamentals de la programmation",
        "description": "Explorez le pouvoir des génériques en Rust, un langage qui vous permet d'écrire du code qui fonctionne avec différents types de données, réduisant la duplication et augmentant la flexibilité.",
        "keywords": "Rust, Génériques, Programmation, Fondamentals, Paramètres de type"
      },
      "details": {
        "steps": [
          {
            "title": "Génériques",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Das Rust Generics-Funktionalität erkunden",
      "description": "In diesem Lab werden wir das Thema Generics erkunden, das das Verallgemeinern von Typen und Funktionalitäten umfasst, um eine größere Bandbreite von Fällen zu behandeln und die Code-Duplizierung zu reduzieren. Die Syntax für Generics in Rust besteht darin, Typ-Parameter mit spitzen Klammern anzugeben, wie <T>. Mit Hilfe von Generics können wir generische Funktionen erstellen, die Argumente beliebigen Typs akzeptieren. Darüber hinaus können wir generische Typen definieren, die mit verschiedenen konkreten Typen zusammenarbeiten können.",
      "meta": {
        "title": "Rust Generics | Programmiergrundlagen",
        "description": "Entdecken Sie die Macht von Generics in Rust, einer Sprache, die es Ihnen ermöglicht, Code zu schreiben, der mit verschiedenen Datentypen funktioniert, die Duplizierung reduziert und die Flexibilität erhöht.",
        "keywords": "Rust, Generics, Programmierung, Grundlagen, Typ-Parameter"
      },
      "details": {
        "steps": [
          {
            "title": "Generics",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust ジェネリクス機能の探究",
      "description": "この実験では、ジェネリクスのトピックを探究します。ジェネリクスとは、型と機能を汎用化して、より幅広いケースを処理し、コードの重複を減らすことができます。Rust のジェネリクスの構文では、角括弧を使って型パラメータを指定します。たとえば <T> のようにです。ジェネリクスを使うことで、任意の型の引数を受け取ることができる汎用関数を作成できます。さらに、異なる具体的な型と共に動作する汎用型を定義することもできます。",
      "meta": {
        "title": "Rust ジェネリクス | プログラミングの基礎",
        "description": "Rust におけるジェネリクスの力を探求しましょう。この言語を使えば、異なるデータ型で動作するコードを書くことができ、重複を減らし、柔軟性を高めることができます。",
        "keywords": "Rust, ジェネリクス，プログラミング，基礎，型パラメータ"
      },
      "details": {
        "steps": [
          {
            "title": "ジェネリクス",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップは現在検証がありません",
                "file": "verify1-1.sh",
                "hint": "このステップは現在検証がありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Исследование функциональности обобщений в Rust",
      "description": "В этой лабораторной работе мы будем исследовать тему обобщений, которая включает в себя обобщение типов и функциональностей для обработки более широкого круга случаев и уменьшения дублирования кода. Синтаксис обобщений в Rust предусматривает указание параметров типа с использованием угловых скобок, например, <T>. С использованием обобщений мы можем создавать обобщенные функции, которые могут принимать аргументы любого типа. Кроме того, мы можем определить обобщенные типы, которые могут работать с разными конкретными типами.",
      "meta": {
        "title": "Обобщения в Rust | Основы программирования",
        "description": "Исследуйте мощь обобщений в Rust, языке, который позволяет писать код, работающий с разными типами данных, уменьшая дублирование и повышая гибкость.",
        "keywords": "Rust, Обобщения, Программирование, Основы, Параметры типа"
      },
      "details": {
        "steps": [
          {
            "title": "Обобщения",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "Rust 제네릭 기능 탐색",
      "description": "이 실습에서는 제네릭 (Generics) 개념을 탐색합니다. 제네릭은 다양한 타입과 기능을 일반화하여 코드 중복을 줄이는 방법입니다. Rust 에서 제네릭은 <T>와 같이 꺾쇠 괄호를 사용하여 타입 매개변수를 지정합니다. 제네릭을 사용하면 모든 타입의 인수를 받을 수 있는 제네릭 함수를 만들 수 있습니다. 또한, 다양한 구체적인 타입과 함께 작동할 수 있는 제네릭 타입을 정의할 수 있습니다.",
      "meta": {
        "title": "Rust 제네릭 | 프로그래밍 기초",
        "description": "Rust 에서 다양한 데이터 타입과 함께 작동하는 코드를 작성하여 중복을 줄이고 유연성을 높이는 제네릭의 힘을 탐험하세요.",
        "keywords": "Rust, 제네릭, 프로그래밍, 기초, 타입 매개변수, Rust 제네릭 실습, 제네릭 함수, 제네릭 타입"
      },
      "details": {
        "steps": [
          {
            "title": "제네릭",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Explorando a Funcionalidade de Genéricos em Rust",
      "description": "Neste laboratório, exploraremos o conceito de genéricos em Rust, que envolve a generalização de tipos e funcionalidades para lidar com uma gama mais ampla de casos, reduzindo a duplicação de código. A sintaxe de genéricos em Rust envolve a especificação de parâmetros de tipo usando colchetes angulares, como <T>. Ao utilizar genéricos, podemos criar funções genéricas que podem aceitar argumentos de qualquer tipo. Além disso, podemos definir tipos genéricos que podem funcionar com diferentes tipos concretos.",
      "meta": {
        "title": "Genéricos em Rust | Fundamentos de Programação",
        "description": "Explore o poder dos genéricos em Rust, uma linguagem que permite escrever código que funciona com diferentes tipos de dados, reduzindo a duplicação e aumentando a flexibilidade.",
        "keywords": "Rust, Genéricos, Programação, Fundamentos, Parâmetros de Tipo, Tipos Genéricos, Código Genérico"
      },
      "details": {
        "steps": [
          {
            "title": "Genéricos",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
