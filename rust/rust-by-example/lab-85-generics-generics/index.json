{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Exploring Rust Generics Functionality",
  "description": "In this lab, we will be exploring the topic of generics, which involves generalizing types and functionalities to handle a broader range of cases, reducing code duplication. The syntax for generics in Rust involves specifying type parameters using angle brackets, such as <T>. By using generics, we can create generic functions that can accept arguments of any type. Furthermore, we can define generic types that can work with different concrete types.",
  "meta": {
    "title": "Rust Generics | Programming Fundamentals",
    "description": "Explore the power of generics in Rust, a language that allows you to write code that works with different data types, reducing duplication and increasing flexibility.",
    "keywords": "Rust, Generics, Programming, Fundamentals, Type Parameters"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Generics",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/operator_overloading",
          "rust/type_casting",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "探索 Rust 泛型功能",
      "description": "在本实验中，我们将探索泛型的主题，泛型涉及将类型和功能进行泛化，以处理更广泛的情况，减少代码重复。Rust 中泛型的语法涉及使用尖括号指定类型参数，例如 <T>。通过使用泛型，我们可以创建能够接受任何类型参数的泛型函数。此外，我们还可以定义能够与不同具体类型一起工作的泛型类型。",
      "meta": {
        "title": "Rust 泛型 | 编程基础",
        "description": "探索 Rust 中泛型的强大功能，这是一种允许你编写可与不同数据类型配合使用的代码的语言，可减少重复并提高灵活性。",
        "keywords": "Rust, 泛型, 编程, 基础, 类型参数"
      },
      "details": {
        "steps": [
          {
            "title": "泛型",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
