{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Rust Operator Simplifies Error Handling",
  "description": "In this lab, the ? operator is introduced as a way to make code cleaner when chaining results. It is used at the end of an expression returning a Result and simplifies the code by automatically handling the Err and Ok branches. The example provided demonstrates how to use the ? operator in Rust to handle various math operations and their potential errors.",
  "meta": {
    "title": "Simplifying Error Handling with Rust Operator",
    "description": "Discover how the Rust `?` operator can streamline error handling and make your code more concise.",
    "keywords": "rust playground, error handling, software development, operator, rust online compiler, rust tutor, rust commands, rust practice, rust online playground, rust online"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "?",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/floating_types",
          "rust/function_syntax",
          "rust/method_syntax",
          "rust/operator_overloading",
          "rust/panic_usage",
          "rust/string_type",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 运算符简化错误处理",
      "description": "在本实验中，引入了 `?` 运算符，作为一种在链式结果时使代码更简洁的方法。它用于返回 `Result` 的表达式末尾，并通过自动处理 `Err` 和 `Ok` 分支来简化代码。提供的示例演示了如何在 Rust 中使用 `?` 运算符来处理各种数学运算及其潜在错误。",
      "meta": {
        "title": "使用 Rust 运算符简化错误处理",
        "description": "探索 Rust 的 `?` 运算符如何简化错误处理并使你的代码更简洁。",
        "keywords": "Rust 在线编译器，Rust 教程，Rust 命令，Rust 练习，Rust 在线游乐场，Rust 在线，Rust 游乐场，错误处理，软件开发，运算符"
      },
      "details": {
        "steps": [
          {
            "title": "?",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "El operador de Rust simplifica el manejo de errores",
      "description": "En este laboratorio, se introduce el operador? como una forma de hacer que el código sea más limpio al encadenar resultados. Se utiliza al final de una expresión que devuelve un Result y simplifica el código al manejar automáticamente las ramas Err y Ok. El ejemplo proporcionado demuestra cómo utilizar el operador? en Rust para manejar diversas operaciones matemáticas y sus posibles errores.",
      "meta": {
        "title": "Simplificando el manejo de errores con el operador de Rust",
        "description": "Descubre cómo el operador `?` de Rust puede racionalizar el manejo de errores y hacer que tu código sea más conciso.",
        "keywords": "playground de Rust, manejo de errores, desarrollo de software, operador, compilador en línea de Rust, tutor de Rust, comandos de Rust, práctica de Rust, playground en línea de Rust, Rust en línea"
      },
      "details": {
        "steps": [
          {
            "title": "?",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "En este momento, este paso no tiene verificación",
                "file": "verify1-1.sh",
                "hint": "En este momento, este paso no tiene verificación"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "L'opérateur Rust simplifie la gestion des erreurs",
      "description": "Dans ce laboratoire, l'opérateur `?` est introduit comme un moyen de rendre le code plus propre lorsqu'on chaîne des résultats. Il est utilisé à la fin d'une expression renvoyant un `Result` et simplifie le code en gérant automatiquement les branches `Err` et `Ok`. L'exemple fourni montre comment utiliser l'opérateur `?` en Rust pour gérer diverses opérations mathématiques et leurs éventuelles erreurs.",
      "meta": {
        "title": "Simplifier la gestion des erreurs avec l'opérateur Rust",
        "description": "Découvrez comment l'opérateur Rust `?` peut rationaliser la gestion des erreurs et rendre votre code plus concis.",
        "keywords": "plateforme de pratique Rust, gestion des erreurs, développement logiciel, opérateur, compilateur en ligne Rust, tuteur Rust, commandes Rust, pratique Rust, plateforme de pratique en ligne Rust, Rust en ligne"
      },
      "details": {
        "steps": [
          {
            "title": "?",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Rust-Operator vereinfacht die Fehlerbehandlung",
      "description": "In diesem Lab wird der?-Operator als Möglichkeit eingeführt, um den Code bei der Verkettung von Ergebnissen sauberer zu gestalten. Er wird am Ende eines Ausdrucks verwendet, der ein Result zurückgibt, und vereinfacht den Code, indem er die Err- und Ok-Zweige automatisch behandelt. Das bereitgestellte Beispiel zeigt, wie der?-Operator in Rust verwendet wird, um verschiedene mathematische Operationen und deren potenzielle Fehler zu behandeln.",
      "meta": {
        "title": "Fehlerbehandlung mit Rust-Operator vereinfachen",
        "description": "Entdecken Sie, wie der Rust-`?`-Operator die Fehlerbehandlung vereinfachen und Ihren Code präziser gestalten kann.",
        "keywords": "rust playground, Fehlerbehandlung，软件开发，Operator, rust online compiler, rust tutor, rust Befehle, rust Übung, rust online playground, rust online"
      },
      "details": {
        "steps": [
          {
            "title": "?",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust 演算子によるエラーハンドリングの簡略化",
      "description": "この実験では、結果をチェーン化する際にコードをクリーンにする方法として `?` 演算子が導入されます。これは `Result` を返す式の末尾で使用され、`Err` と `Ok` のブランチを自動的に処理することでコードを簡略化します。提供された例では、Rust で `?` 演算子を使用してさまざまな数学演算とその潜在的なエラーを処理する方法を示しています。",
      "meta": {
        "title": "Rust 演算子を使ったエラーハンドリングの簡略化",
        "description": "Rust の `?` 演算子がどのようにエラーハンドリングを効率化し、コードをより簡潔にするかをご紹介します。",
        "keywords": "rust playground, エラーハンドリング，ソフトウェア開発，演算子，rust オンラインコンパイラ，rust チューター, rust コマンド，rust 練習，rust オンライン playground, rust オンライン"
      },
      "details": {
        "steps": [
          {
            "title": "?",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在検証がありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在検証がありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Оператор Rust упрощает обработку ошибок",
      "description": "В этом лабораторном задании оператор `?` представлен в качестве способа упрощения кода при цепочке результатов. Он используется в конце выражения, возвращающего `Result`, и упрощает код, автоматически обрабатывая ветви `Err` и `Ok`. Приведенный пример демонстрирует, как использовать оператор `?` в Rust для обработки различных математических операций и их возможных ошибок.",
      "meta": {
        "title": "Упрощение обработки ошибок с помощью оператора Rust",
        "description": "Узнайте, как оператор Rust `?` может упростить обработку ошибок и сделать ваш код более компактным.",
        "keywords": "игровой уголок Rust, обработка ошибок, разработка программного обеспечения, оператор, онлайн-компилятор Rust, преподаватель Rust, команды Rust, практика Rust, онлайн-игровой уголок Rust, Rust онлайн"
      },
      "details": {
        "steps": [
          {
            "title": "?",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
