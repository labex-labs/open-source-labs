{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Handling Errors with Box in Rust",
  "description": "In this lab, the code demonstrates how to use the Box type to preserve original errors by wrapping them, allowing for dynamic error handling, and the Std library's From trait helps in converting any type that implements the Error trait into the trait object Box<Error>. It includes an example of converting and handling errors using Box with a custom error type.",
  "meta": {
    "title": "Rust Error Handling | Box Error Wrapping",
    "description": "Learn how to use the Rust Box type to preserve original errors, handle dynamic error types, and convert errors to Box<Error> with the From trait.",
    "keywords": "Rust, error handling, Box, dynamic errors, error conversion, From trait"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Boxing errors",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/method_syntax",
          "rust/operator_overloading",
          "rust/string_type",
          "rust/traits",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "在 Rust 中使用 Box 处理错误",
      "description": "在本实验中，代码展示了如何使用 Box 类型通过包装来保留原始错误，从而实现动态错误处理，并且 Std 库的 From 特性有助于将任何实现 Error 特性的类型转换为特性对象 Box<Error>。它包含一个使用 Box 和自定义错误类型进行错误转换和处理的示例。",
      "meta": {
        "title": "Rust 错误处理 | Box 错误包装",
        "description": "了解如何使用 Rust 的 Box 类型来保留原始错误、处理动态错误类型以及通过 From 特性将错误转换为 Box<Error>。",
        "keywords": "Rust, 错误处理，Box, 动态错误，错误转换，From 特性"
      },
      "details": {
        "steps": [
          {
            "title": "用 Box 包装错误",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Manejo de errores con Box en Rust",
      "description": "En este laboratorio, el código demuestra cómo utilizar el tipo Box para preservar los errores originales al envolverlos, lo que permite un manejo dinámico de errores, y el trato From de la biblioteca Std ayuda a convertir cualquier tipo que implemente el trato Error en el objeto de trato Box<Error>. Incluye un ejemplo de conversión y manejo de errores utilizando Box con un tipo de error personalizado.",
      "meta": {
        "title": "Manejo de errores en Rust | Envolver errores con Box",
        "description": "Aprende cómo utilizar el tipo Box en Rust para preservar los errores originales, manejar tipos de error dinámicos y convertir errores a Box<Error> con el trato From.",
        "keywords": "Rust, manejo de errores, Box, errores dinámicos, conversión de errores, trato From"
      },
      "details": {
        "steps": [
          {
            "title": "Empaquetar errores",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Gérer les erreurs avec Box en Rust",
      "description": "Dans ce laboratoire, le code montre comment utiliser le type Box pour conserver les erreurs originales en les enveloppant, permettant un traitement dynamique des erreurs, et le trait From de la bibliothèque Std aide à convertir tout type qui implémente le trait Error en l'objet trait Box<Error>. Il inclut un exemple de conversion et de traitement d'erreurs en utilisant Box avec un type d'erreur personnalisé.",
      "meta": {
        "title": "Gestion des erreurs en Rust | Emballage d'erreurs avec Box",
        "description": "Découvrez comment utiliser le type Box en Rust pour conserver les erreurs originales, gérer les types d'erreurs dynamiques et convertir les erreurs en Box<Error> avec le trait From.",
        "keywords": "Rust, gestion des erreurs, Box, erreurs dynamiques, conversion d'erreurs, trait From"
      },
      "details": {
        "steps": [
          {
            "title": "Encapsulation des erreurs avec Box",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Fehlerbehandlung mit Box in Rust",
      "description": "In diesem Lab zeigt der Code, wie man den Box-Typ verwendet, um ursprüngliche Fehler zu bewahren, indem man sie umschließt, um eine dynamische Fehlerbehandlung zu ermöglichen. Das From-Attribut der Std-Bibliothek hilft dabei, beliebige Typen, die das Error-Attribut implementieren, in das Attributobjekt Box<Error> umzuwandeln. Es enthält ein Beispiel zur Umwandlung und Behandlung von Fehlern mit Box mit einem benutzerdefinierten Fehlertyp.",
      "meta": {
        "title": "Rust-Fehlerbehandlung | Box-Fehlerumschließung",
        "description": "Lernen Sie, wie man den Rust-Box-Typ verwendet, um ursprüngliche Fehler zu bewahren, dynamische Fehlertypen zu behandeln und Fehler in Box<Error> mit dem From-Attribut umzuwandeln.",
        "keywords": "Rust, Fehlerbehandlung, Box, dynamische Fehler, Fehlerumwandlung, From-Attribut"
      },
      "details": {
        "steps": [
          {
            "title": "Fehler in eine Box packen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifikation",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifikation"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust における Box を使ったエラー処理",
      "description": "この実験では、コードは Box 型を使用してエラーをラップすることで元のエラーを保持し、動的なエラー処理を可能にする方法を示しており、Std ライブラリの From トレイトは、Error トレイトを実装する任意の型をトレイトオブジェクト Box<Error>に変換するのに役立ちます。これには、カスタムエラー型を使用して Box を使ってエラーを変換および処理する例が含まれています。",
      "meta": {
        "title": "Rust のエラー処理 | Box によるエラーのラップ",
        "description": "Rust の Box 型を使って元のエラーを保持し、動的なエラー型を処理し、From トレイトを使ってエラーを Box<Error>に変換する方法を学びましょう。",
        "keywords": "Rust, エラー処理，Box, 動的エラー, エラー変換，From トレイト"
      },
      "details": {
        "steps": [
          {
            "title": "エラーのボックス化",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Обработка ошибок с использованием Box в Rust",
      "description": "В этом лабе код демонстрирует, как использовать тип Box для сохранения исходных ошибок, оборачивая их, что позволяет динамически обрабатывать ошибки, а трейт From из библиотеки Std помогает преобразовать любой тип, реализующий трейт Error, в объект трейта Box<Error>. Включается пример преобразования и обработки ошибок с использованием Box с пользовательским типом ошибки.",
      "meta": {
        "title": "Обработка ошибок в Rust | Оборачивание ошибок с использованием Box",
        "description": "Изучите, как использовать тип Box в Rust для сохранения исходных ошибок, обработки динамических типов ошибок и преобразования ошибок в Box<Error> с использованием трейта From.",
        "keywords": "Rust, обработка ошибок, Box, динамические ошибки, преобразование ошибок, трейт From"
      },
      "details": {
        "steps": [
          {
            "title": "Boxing ошибок",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На этом этапе проверок нет",
                "file": "verify1-1.sh",
                "hint": "На этом этапе проверок нет"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "Rust 에서 Box 를 사용한 오류 처리",
      "description": "이 랩에서는 Box 타입을 사용하여 원래의 오류를 래핑하여 보존하는 방법을 보여줍니다. 이를 통해 동적 오류 처리가 가능하며, Std 라이브러리의 From 트레이트는 Error 트레이트를 구현하는 모든 타입을 트레이트 객체 Box<Error>로 변환하는 데 도움을 줍니다. 사용자 정의 오류 타입을 사용하여 Box 로 오류를 변환하고 처리하는 예제를 포함합니다.",
      "meta": {
        "title": "Rust 오류 처리 | Box 오류 래핑 (Box Error Wrapping)",
        "description": "Rust Box 타입을 사용하여 원래 오류를 보존하고, 동적 오류 타입을 처리하며, From 트레이트를 사용하여 오류를 Box<Error>로 변환하는 방법을 알아보세요.",
        "keywords": "Rust, 오류 처리, Box, 동적 오류, 오류 변환, From 트레이트"
      },
      "details": {
        "steps": [
          {
            "title": "오류 Box 처리 (Boxing errors)",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Manipulação de Erros com Box em Rust",
      "description": "Neste laboratório, o código demonstra como usar o tipo Box para preservar erros originais, encapsulando-os, permitindo o tratamento dinâmico de erros, e o trait From da biblioteca Std auxilia na conversão de qualquer tipo que implemente o trait Error no objeto trait Box<Error>. Inclui um exemplo de conversão e tratamento de erros usando Box com um tipo de erro personalizado.",
      "meta": {
        "title": "Tratamento de Erros em Rust | Box para Encapsulamento de Erros",
        "description": "Aprenda como usar o tipo Box do Rust para preservar erros originais, lidar com tipos de erros dinâmicos e converter erros para Box<Error> com o trait From.",
        "keywords": "Rust, tratamento de erros, Box, erros dinâmicos, conversão de erros, trait From"
      },
      "details": {
        "steps": [
          {
            "title": "Encapsulamento de erros (Boxing errors)",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Esta etapa não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Esta etapa não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
