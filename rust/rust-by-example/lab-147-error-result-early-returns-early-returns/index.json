{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Handling Errors with Early Returns in Rust",
  "description": "In this lab, we explore the concept of early returns as a way to handle errors in Rust. The example code demonstrates how we can use match statements and early returns to handle errors gracefully, making the code easier to read and write. We also discuss the limitations of explicit error handling and introduce the use of the ? operator for cases where we need to unwrap values without risking a panic.",
  "meta": {
    "title": "Rust Programming | Error Handling | Early Returns",
    "description": "Explore the concept of early returns in Rust for graceful error handling, making your code easier to read and write.",
    "keywords": "Rust, Programming, Error Handling, Early Returns, Unwrap, Combinators"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Early returns",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/operator_overloading",
          "rust/string_type",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "在 Rust 中使用提前返回处理错误",
      "description": "在本实验中，我们探讨提前返回的概念，将其作为在 Rust 中处理错误的一种方式。示例代码展示了如何使用 match 语句和提前返回优雅地处理错误，使代码更易于读写。我们还讨论了显式错误处理的局限性，并介绍了在需要解包值而又不引发恐慌的情况下使用？运算符。",
      "meta": {
        "title": "Rust 编程 | 错误处理 | 提前返回",
        "description": "探索 Rust 中提前返回的概念，以实现优雅的错误处理，让你的代码更易于读写。",
        "keywords": "Rust，编程，错误处理，提前返回，解包，组合器"
      },
      "details": {
        "steps": [
          {
            "title": "提前返回",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Manejo de errores con retornos tempranos en Rust",
      "description": "En este laboratorio, exploramos el concepto de retornos tempranos como una forma de manejar errores en Rust. El código de ejemplo demuestra cómo podemos usar declaraciones match y retornos tempranos para manejar errores de manera elegante, lo que hace que el código sea más fácil de leer y escribir. También discutimos las limitaciones del manejo explícito de errores e introducimos el uso del operador? para casos en los que necesitamos desempaquetar valores sin correr el riesgo de causar un panic.",
      "meta": {
        "title": "Programación en Rust | Manejo de errores | Retornos tempranos",
        "description": "Explora el concepto de retornos tempranos en Rust para un manejo de errores elegante, haciéndo que tu código sea más fácil de leer y escribir.",
        "keywords": "Rust, Programación, Manejo de errores, Retornos tempranos, Desempaquetar, Combinadores"
      },
      "details": {
        "steps": [
          {
            "title": "Retornos tempranos",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificaciones en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificaciones en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Gérer les erreurs avec des retours anticipés en Rust",
      "description": "Dans ce laboratoire, nous explorons le concept de retours anticipés comme moyen de gérer les erreurs en Rust. Le code d'exemple montre comment nous pouvons utiliser des instructions match et des retours anticipés pour gérer les erreurs de manière gracieuse, rendant le code plus facile à lire et à écrire. Nous discutons également des limites du traitement explicite des erreurs et présentons l'utilisation de l'opérateur? pour les cas où nous devons extraire des valeurs sans risquer de déclencher une panique.",
      "meta": {
        "title": "Programmation Rust | Gestion des erreurs | Retours anticipés",
        "description": "Explorez le concept de retours anticipés en Rust pour une gestion gracieuse des erreurs, rendant votre code plus facile à lire et à écrire.",
        "keywords": "Rust, Programmation, Gestion des erreurs, Retours anticipés, Extraction, Combinateurs"
      },
      "details": {
        "steps": [
          {
            "title": "Retours anticipés",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Fehlerbehandlung mit frühen Rückgaben in Rust",
      "description": "In diesem Lab untersuchen wir das Konzept von frühen Rückgaben als Möglichkeit, Fehler in Rust zu behandeln. Der Beispielcode zeigt, wie wir match-Anweisungen und frühe Rückgaben verwenden können, um Fehler 优雅 zu behandeln und den Code einfacher zu lesen und zu schreiben. Wir diskutieren auch die Grenzen der expliziten Fehlerbehandlung und stellen die Verwendung des?-Operators für Fälle vor, in denen wir Werte entpacken müssen, ohne dass es zu einem Panikfall kommt.",
      "meta": {
        "title": "Rust-Programmierung | Fehlerbehandlung | Frühe Rückgaben",
        "description": "Entdecken Sie das Konzept von frühen Rückgaben in Rust für eine fehlerfreie Fehlerbehandlung und einen einfacheren Code.",
        "keywords": "Rust, Programmierung, Fehlerbehandlung, Frühe Rückgaben, Entpacken, Kombinatoren"
      },
      "details": {
        "steps": [
          {
            "title": "Frühe Rückgaben",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust における早期リターンによるエラー処理",
      "description": "この実験では、Rust でエラーを処理するための早期リターンの概念を検討します。サンプルコードは、match 文と早期リターンを使ってエラーを円滑に処理し、コードの読み書きを容易にする方法を示しています。また、明示的なエラー処理の制限についても説明し、パニックを起こすリスクなく値をアンラップする必要がある場合の？演算子の使用方法を紹介します。",
      "meta": {
        "title": "Rust プログラミング | エラー処理 | 早期リターン",
        "description": "Rust における早期リターンの概念を探索して、円滑なエラー処理を行い、コードの読み書きを容易にしましょう。",
        "keywords": "Rust, プログラミング，エラー処理，早期リターン，アンラップ，コンビネータ"
      },
      "details": {
        "steps": [
          {
            "title": "早期リターン",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップは現在検証がありません",
                "file": "verify1-1.sh",
                "hint": "このステップは現在検証がありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Обработка ошибок с использованием ранних возвратов в Rust",
      "description": "В этой лабораторной работе мы исследуем концепцию ранних возвратов как способ обработки ошибок в Rust. Примерный код демонстрирует, как мы можем использовать операторы match и ранние возвраты для обработки ошибок с элегантностью, делая код легче читать и писать. Мы также обсуждаем ограничения явной обработки ошибок и вводим использование оператора? для случаев, когда нам нужно раскрыть значения без риска паники.",
      "meta": {
        "title": "Программирование на Rust | Обработка ошибок | Ранние возвраты",
        "description": "Исследуйте концепцию ранних возвратов в Rust для элегантной обработки ошибок, делая ваш код легче читать и писать.",
        "keywords": "Rust, Программирование, Обработка ошибок, Ранние возвраты, Раскрытие, Комбинаторы"
      },
      "details": {
        "steps": [
          {
            "title": "Ранние возвраты",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
