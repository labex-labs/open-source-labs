{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Conditional Compilation with Rust's cfg Attribute",
  "description": "In this lab, you will learn about the cfg attribute and cfg! macro in Rust, which allow for conditional checks in configuration and evaluation, respectively. The cfg attribute enables conditional compilation, while the cfg! macro evaluates to true or false at run-time. Code blocks using cfg! must be valid regardless of the evaluation result, unlike #[cfg] which can remove code.",
  "meta": {
    "title": "Rust Programming | Conditional Compilation | Configuration Checks",
    "description": "Learn about the Rust `cfg` attribute and `cfg!` macro for conditional compilation and run-time checks. Explore how to use these features to build robust and adaptable Rust applications.",
    "keywords": "Rust, Conditional Compilation, Configuration Checks, `cfg` Attribute, `cfg!` Macro"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "cfg",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用 Rust 的 cfg 属性进行条件编译",
      "description": "在本实验中，你将学习 Rust 中的 cfg 属性和 cfg! 宏，它们分别允许在配置和求值中进行条件检查。cfg 属性启用条件编译，而 cfg! 宏在运行时求值为 true 或 false。与可以移除代码的 #[cfg] 不同，使用 cfg! 的代码块无论求值结果如何都必须有效。",
      "meta": {
        "title": "Rust 编程 | 条件编译 | 配置检查",
        "description": "了解用于条件编译和运行时检查的 Rust `cfg` 属性和 `cfg!` 宏。探索如何使用这些功能来构建健壮且适应性强的 Rust 应用程序。",
        "keywords": "Rust, 条件编译，配置检查，`cfg` 属性，`cfg!` 宏"
      },
      "details": {
        "steps": [
          {
            "title": "cfg",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Compilación condicional con el atributo cfg de Rust",
      "description": "En este laboratorio, aprenderá sobre el atributo cfg y la macro cfg! en Rust, que permiten realizar comprobaciones condicionales en la configuración y la evaluación, respectivamente. El atributo cfg habilita la compilación condicional, mientras que la macro cfg! se evalúa a verdadero o falso en tiempo de ejecución. Los bloques de código que usan cfg! deben ser válidos independientemente del resultado de la evaluación, a diferencia de #[cfg] que puede eliminar código.",
      "meta": {
        "title": "Programación Rust | Compilación condicional | Comprobaciones de configuración",
        "description": "Aprenda sobre el atributo Rust `cfg` y la macro `cfg!` para la compilación condicional y las comprobaciones en tiempo de ejecución. Explore cómo usar estas características para construir aplicaciones Rust robustas y adaptables.",
        "keywords": "Rust, Compilación condicional, Comprobaciones de configuración, Atributo `cfg`, Macro `cfg!"
      },
      "details": {
        "steps": [
          {
            "title": "cfg",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificaciones en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificaciones en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Compilation conditionnelle avec l'attribut cfg de Rust",
      "description": "Dans ce laboratoire, vous allez découvrir l'attribut cfg et le macro cfg! en Rust, qui permettent respectivement des vérifications conditionnelles dans la configuration et l'évaluation. L'attribut cfg active la compilation conditionnelle, tandis que le macro cfg! évalue à vrai ou faux au moment de l'exécution. Les blocs de code utilisant cfg! doivent être valides indépendamment du résultat de l'évaluation, contrairement à #[cfg] qui peut supprimer du code.",
      "meta": {
        "title": "Programmation Rust | Compilation conditionnelle | Vérifications de configuration",
        "description": "Découvrez l'attribut Rust `cfg` et le macro `cfg!` pour la compilation conditionnelle et les vérifications au moment de l'exécution. Explorez comment utiliser ces fonctionnalités pour construire des applications Rust robustes et adaptables.",
        "keywords": "Rust, Compilation conditionnelle, Vérifications de configuration, Attribut `cfg`, Macro `cfg!"
      },
      "details": {
        "steps": [
          {
            "title": "cfg",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Bedingte Kompilierung mit dem Rust-cfg-Attribut",
      "description": "In diesem Lab lernst du über das `cfg`-Attribut und das `cfg!`-Makro in Rust, die jeweils bedingte Prüfungen bei der Konfiguration und der Auswertung ermöglichen. Das `cfg`-Attribut ermöglicht die bedingte Kompilierung, während das `cfg!`-Makro zur Laufzeit als wahr oder falsch ausgewertet wird. Codeblöcke, die `cfg!` verwenden, müssen unabhängig vom Auswertungsergebnis gültig sein, im Gegensatz zu `#[cfg]`, das Code entfernen kann.",
      "meta": {
        "title": "Rust-Programmierung | Bedingte Kompilierung | Konfigurationsprüfungen",
        "description": "Lerne über das Rust-`cfg`-Attribut und das `cfg!`-Makro für die bedingte Kompilierung und die Laufzeitprüfungen. Erkunde, wie du diese Funktionen verwendest, um robuste und anpassbare Rust-Anwendungen zu erstellen.",
        "keywords": "Rust, Bedingte Kompilierung, Konfigurationsprüfungen, `cfg`-Attribut, `cfg!`-Makro"
      },
      "details": {
        "steps": [
          {
            "title": "cfg",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust の cfg 属性を使った条件付きコンパイル",
      "description": "この実験では、Rust の cfg 属性と cfg! マクロについて学びます。これらはそれぞれ、構成と評価における条件付きチェックを可能にします。cfg 属性は条件付きコンパイルを可能にし、cfg! マクロは実行時に真偽値に評価されます。cfg! を使用したコードブロックは、評価結果に関係なく有効でなければなりません。#[cfg] のようにコードを削除できるものとは異なります。",
      "meta": {
        "title": "Rust プログラミング | 条件付きコンパイル | 構成チェック",
        "description": "Rust の `cfg` 属性と `cfg!` マクロについて学び、条件付きコンパイルと実行時チェックを行いましょう。これらの機能を使って、堅牢で適応性の高い Rust アプリケーションを構築する方法を探求しましょう。",
        "keywords": "Rust, 条件付きコンパイル，構成チェック，`cfg` 属性，`cfg!` マクロ"
      },
      "details": {
        "steps": [
          {
            "title": "cfg",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップは現在、検証項目がありません",
                "file": "verify1-1.sh",
                "hint": "このステップは現在、検証項目がありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Условная компиляция с использованием атрибута cfg в Rust",
      "description": "В этом лабе вы узнаете о атрибуте cfg и макросе cfg! в Rust, которые позволяют выполнять условные проверки при настройке и вычислении соответственно. Атрибут cfg позволяет выполнять условную компиляцию, в то время как макрос cfg! вычисляется в true или false во время выполнения. Блоки кода, использующие cfg!, должны быть валидными независимо от результата вычисления, в отличие от #[cfg], который может удалять код.",
      "meta": {
        "title": "Программирование на Rust | Условная компиляция | Проверки конфигурации",
        "description": "Изучите атрибут Rust `cfg` и макрос `cfg!` для условной компиляции и проверок во время выполнения. Изучите, как использовать эти функции для создания надежных и адаптивных приложений на Rust.",
        "keywords": "Rust, Условная компиляция, Проверки конфигурации, Атрибут `cfg`, Макрос `cfg!"
      },
      "details": {
        "steps": [
          {
            "title": "cfg",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "Rust 의 cfg 속성을 이용한 조건부 컴파일",
      "description": "이 실습에서는 Rust 의 cfg 속성과 cfg! 매크로를 통해 구성 및 평가에서 조건부 검사를 수행하는 방법을 배웁니다. cfg 속성은 조건부 컴파일을 활성화하고, cfg! 매크로는 런타임에 참 또는 거짓으로 평가됩니다. cfg! 를 사용하는 코드 블록은 #[cfg] 와 달리 평가 결과와 관계없이 유효해야 합니다.",
      "meta": {
        "title": "Rust 프로그래밍 | 조건부 컴파일 | 구성 검사",
        "description": "Rust 의 cfg 속성과 cfg! 매크로를 사용하여 조건부 컴파일 및 런타임 검사를 수행하는 방법을 배우고, 이 기능을 활용하여 강력하고 적응력 있는 Rust 애플리케이션을 구축하는 방법을 탐색하세요.",
        "keywords": "Rust, 조건부 컴파일, 구성 검사, cfg 속성, cfg! 매크로, Rust cfg, Rust 조건부 컴파일, Rust 구성 검사"
      },
      "details": {
        "steps": [
          {
            "title": "cfg 단계",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Compilação Condicional com o Atributo cfg do Rust",
      "description": "Neste laboratório, você aprenderá sobre o atributo cfg e a macro cfg! em Rust, que permitem verificações condicionais em configuração e avaliação, respectivamente. O atributo cfg permite compilação condicional, enquanto a macro cfg! avalia para verdadeiro ou falso em tempo de execução. Blocos de código usando cfg! devem ser válidos, independentemente do resultado da avaliação, ao contrário de #[cfg], que pode remover código.",
      "meta": {
        "title": "Programação em Rust | Compilação Condicional | Verificações de Configuração",
        "description": "Aprenda sobre o atributo Rust `cfg` e a macro `cfg!` para compilação condicional e verificações em tempo de execução. Explore como usar esses recursos para criar aplicações Rust robustas e adaptáveis.",
        "keywords": "Rust, Compilação Condicional, Verificações de Configuração, Atributo `cfg`, Macro `cfg!`, Rust cfg, Rust compilação condicional, Rust verificações de configuração"
      },
      "details": {
        "steps": [
          {
            "title": "cfg",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Esta etapa não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Esta etapa não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
