{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Arrays and Slices",
  "description": "In this lab, we will explore arrays and slices in Rust. An array is a collection of objects of the same type stored in contiguous memory, and its length is known at compile time. On the other hand, a slice is similar to an array but its length is not known at compile time. Slices can be used to borrow a section of an array. We will also cover how to create arrays, access elements, calculate the length, allocate memory, borrow arrays as slices, and work with empty slices. Additionally, we will discuss how to safely access array elements using .get() method and handle out-of-bounds errors.",
  "meta": {
    "title": "Exploring Arrays and Slices in Rust",
    "description": "Dive into the world of arrays and slices in Rust, learn how to create, access, and manipulate these data structures.",
    "keywords": "data structures, rust playground, arrays, rust tutor, slices, rust online compiler, rust commands, rust practice, rust online playground, rust online"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Arrays and Slices",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "数组和切片",
      "description": "在本实验中，我们将探索 Rust 中的数组和切片。数组是存储在连续内存中且类型相同的对象的集合，其长度在编译时已知。另一方面，切片类似于数组，但其长度在编译时未知。切片可用于借用数组的一部分。我们还将介绍如何创建数组、访问元素、计算长度、分配内存、将数组作为切片借用以及处理空切片。此外，我们将讨论如何使用.get() 方法安全地访问数组元素并处理越界错误。",
      "meta": {
        "title": "探索 Rust 中的数组和切片",
        "description": "深入了解 Rust 中的数组和切片世界，学习如何创建、访问和操作这些数据结构。",
        "keywords": "数据结构，Rust 游乐场，数组，Rust 教程，切片，Rust 在线编译器，Rust 命令，Rust 练习，Rust 在线游乐场，Rust 在线"
      },
      "details": {
        "steps": [
          {
            "title": "数组和切片",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Arrays y Slices",
      "description": "En este laboratorio, exploraremos arrays y slices en Rust. Un array es una colección de objetos del mismo tipo almacenados en memoria contigua, y su longitud es conocida en tiempo de compilación. Por otro lado, un slice es similar a un array, pero su longitud no es conocida en tiempo de compilación. Los slices se pueden utilizar para prestar una sección de un array. También cubriremos cómo crear arrays, acceder a elementos, calcular la longitud, asignar memoria, prestar arrays como slices y trabajar con slices vacíos. Además, discutiremos cómo acceder de manera segura a los elementos de un array utilizando el método.get() y manejar errores de desbordamiento.",
      "meta": {
        "title": "Explorando Arrays y Slices en Rust",
        "description": "Sumérgete en el mundo de los arrays y los slices en Rust, aprende cómo crear, acceder y manipular estas estructuras de datos.",
        "keywords": "estructuras de datos, playground de Rust, arrays, tutor de Rust, slices, compilador en línea de Rust, comandos de Rust, práctica de Rust, playground en línea de Rust, Rust en línea"
      },
      "details": {
        "steps": [
          {
            "title": "Arrays y Slices",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Tableaux et tranches",
      "description": "Dans ce laboratoire, nous allons explorer les tableaux et les tranches en Rust. Un tableau est une collection d'objets du même type stockés en mémoire contiguë, et sa longueur est connue à la compilation. En revanche, une tranche est similaire à un tableau, mais sa longueur n'est pas connue à la compilation. Les tranches peuvent être utilisées pour emprunter une section d'un tableau. Nous aborderons également la création de tableaux, l'accès aux éléments, le calcul de la longueur, l'allocation de mémoire, l'emprunt de tableaux sous forme de tranches et la manipulation de tranches vides. De plus, nous discuterons de la manière de sécuriser l'accès aux éléments du tableau en utilisant la méthode.get() et de gérer les erreurs liées aux indices hors limites.",
      "meta": {
        "title": "Explorer les tableaux et les tranches en Rust",
        "description": "Plongez dans le monde des tableaux et des tranches en Rust, apprenez à créer, accéder et manipuler ces structures de données.",
        "keywords": "structures de données, terrain de jeu Rust, tableaux, tuteur Rust, tranches, compilateur en ligne Rust, commandes Rust, pratique Rust, terrain de jeu en ligne Rust, Rust en ligne"
      },
      "details": {
        "steps": [
          {
            "title": "Tableaux et tranches",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Arrays und Slices",
      "description": "In diesem Lab werden wir Arrays und Slices in Rust erkunden. Ein Array ist eine Sammlung von Objekten vom gleichen Typ, die in zusammenhängender Speicherstelle gespeichert sind, und seine Länge ist zur Compile-Zeit bekannt. Ein Slice hingegen ähnelt sich einem Array，但其 Länge ist zur Compile-Zeit nicht bekannt. Slices können verwendet werden, um einen Abschnitt eines Arrays zu entleihen. Wir werden auch behandeln, wie Arrays erstellt werden, Elemente abgerufen werden, die Länge berechnet wird, Speicher zugewiesen wird, Arrays als Slices entliehen werden und mit leeren Slices gearbeitet wird. Darüber hinaus werden wir diskutieren, wie man sicher Elemente eines Arrays mit der.get()-Methode zugreift und außereinander liegende Fehler behandelt.",
      "meta": {
        "title": "Das Erkunden von Arrays und Slices in Rust",
        "description": "Taucht in die Welt von Arrays und Slices in Rust ein und lernen Sie, wie Sie diese Datenstrukturen erstellen, zugreifen und manipulieren.",
        "keywords": "Datenstrukturen, Rust-Spielfeld, Arrays, Rust-Tutor, Slices, Rust-Online-Compiler, Rust-Befehle, Rust-Praxis, Rust-Online-Spielfeld, Rust-Online"
      },
      "details": {
        "steps": [
          {
            "title": "Arrays und Slices",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "配列とスライス",
      "description": "この実験では、Rust の配列とスライスを調べます。配列は、連続したメモリに格納された同じ型のオブジェクトのコレクションであり、その長さはコンパイル時に既知です。一方、スライスは配列に似ていますが、その長さはコンパイル時には既知ではありません。スライスは、配列の一部を借用するために使用できます。また、配列の作成方法、要素のアクセス方法、長さの計算方法、メモリの割り当て方法、配列をスライスとして借用する方法、空のスライスの操作方法についても説明します。さらに、`.get()` メソッドを使用して配列要素を安全にアクセスし、境界外エラーを処理する方法についても説明します。",
      "meta": {
        "title": "Rust における配列とスライスの探索",
        "description": "Rust の配列とスライスの世界に没入し、これらのデータ構造を作成、アクセス、操作する方法を学びましょう。",
        "keywords": "データ構造，Rust プレイグラウンド，配列，Rust チューター, スライス，Rust オンラインコンパイラ，Rust コマンド，Rust 練習，Rust オンラインプレイグラウンド，Rust オンライン"
      },
      "details": {
        "steps": [
          {
            "title": "配列とスライス",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在、検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在、検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Массивы и срезы",
      "description": "В этой лабораторной работе мы изучим массивы и срезы в Rust. Массив — это коллекция объектов одного типа, хранящихся в последовательных ячейках памяти, и его длина известна на этапе компиляции. Срез, напротив, похож на массив, но его длина неизвестна на этапе компиляции. Срезы можно использовать для взятия части массива. Также рассмотрим, как создавать массивы, получать доступ к элементам, вычислять длину, выделять память, брать массивы в качестве срезов и работать с пустыми срезами. Кроме того, обсудим, как безопасно получать доступ к элементам массива с помощью метода.get() и обрабатывать ошибки выхода за границы.",
      "meta": {
        "title": "Изучение массивов и срезов в Rust",
        "description": "Погрузитесь в мир массивов и срезов в Rust, узнайте, как создавать, получать доступ к и манипулировать этими структурами данных.",
        "keywords": "структуры данных, игровая площадка Rust, массивы, Руководство по Rust, срезы, онлайн-компилятор Rust, команды Rust, практика Rust, онлайн-игровая площадка Rust, Rust онлайн"
      },
      "details": {
        "steps": [
          {
            "title": "Массивы и срезы",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "배열과 슬라이스",
      "description": "이 랩에서는 Rust 에서 배열과 슬라이스를 탐구합니다. 배열은 동일한 타입의 객체들을 연속된 메모리에 저장하는 컬렉션이며, 그 길이는 컴파일 시간에 알려져 있습니다. 반면에 슬라이스는 배열과 유사하지만, 그 길이는 컴파일 시간에 알려져 있지 않습니다. 슬라이스는 배열의 일부분을 빌려오는 데 사용될 수 있습니다. 또한 배열 생성, 요소 접근, 길이 계산, 메모리 할당, 배열을 슬라이스로 빌려오기, 빈 슬라이스 작업 방법도 다룹니다. 더불어, .get() 메서드를 사용하여 배열 요소에 안전하게 접근하고, 범위를 벗어난 오류를 처리하는 방법에 대해서도 논의합니다.",
      "meta": {
        "title": "Rust 에서 배열과 슬라이스 탐구하기",
        "description": "Rust 에서 배열과 슬라이스의 세계로 들어가, 이러한 데이터 구조를 생성, 접근 및 조작하는 방법을 배우세요.",
        "keywords": "데이터 구조, 러스트 플레이그라운드, 배열, 러스트 튜터, 슬라이스, 러스트 온라인 컴파일러, 러스트 명령어, 러스트 연습, 러스트 온라인 플레이그라운드, 러스트 온라인"
      },
      "details": {
        "steps": [
          {
            "title": "배열과 슬라이스",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Arrays e Slices",
      "description": "Neste laboratório, exploraremos arrays e slices em Rust. Um array é uma coleção de objetos do mesmo tipo armazenados em memória contígua, e seu comprimento é conhecido em tempo de compilação. Por outro lado, um slice é semelhante a um array, mas seu comprimento não é conhecido em tempo de compilação. Slices podem ser usados para emprestar uma seção de um array. Também abordaremos como criar arrays, acessar elementos, calcular o comprimento, alocar memória, emprestar arrays como slices e trabalhar com slices vazios. Além disso, discutiremos como acessar com segurança os elementos do array usando o método .get() e lidar com erros fora dos limites.",
      "meta": {
        "title": "Explorando Arrays e Slices em Rust - Tutorial e Prática",
        "description": "Mergulhe no mundo de arrays e slices em Rust, aprenda a criar, acessar e manipular essas estruturas de dados. Comece a praticar e aprimorar suas habilidades em Rust agora!",
        "keywords": "estruturas de dados, rust playground, arrays rust, tutorial rust, slices rust, compilador rust online, comandos rust, prática rust, playground rust online, rust online, aprender rust, curso rust"
      },
      "details": {
        "steps": [
          {
            "title": "Arrays e Slices",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
