{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Rust FizzBuzz Loop Programming",
  "description": "In this lab, we learn about the while keyword, which is used to create a loop that continues executing as long as a specified condition is true. To illustrate its usage, we write a program in Rust called FizzBuzz. The program uses a while loop to iterate through numbers from 1 to 100. Inside the loop, it checks if the current number is divisible by 3 and 5 (i.e., a multiple of 15) and prints 'fizzbuzz' in such cases. If the number is only divisible by 3, it prints 'fizz', and if it is only divisible by 5, it prints 'buzz'. For all other numbers, it simply prints the number itself. The loop continues until the counter variable reaches 101, incrementing it after printing each number or label.",
  "meta": {
    "title": "Master Rust FizzBuzz with While Loops",
    "description": "Learn how to use Rust's while loop to create the classic FizzBuzz program, a popular coding exercise.",
    "keywords": "rust playground, while loop, fizzbuzz, programming tutorial, rust tutor, coding exercise, rust online compiler, rust commands, rust practice, rust online"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "while",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/mutable_variables",
          "rust/string_type",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 实现 FizzBuzz 循环编程",
      "description": "在本实验中，我们学习 `while` 关键字，它用于创建一个只要指定条件为真就会持续执行的循环。为了说明其用法，我们用 Rust 编写一个名为 FizzBuzz 的程序。该程序使用 `while` 循环遍历从 1 到 100 的数字。在循环内部，它会检查当前数字是否能被 3 和 5 整除（即 15 的倍数），若是则打印 \"fizzbuzz\"。如果数字仅能被 3 整除，就打印 \"fizz\"，若仅能被 5 整除，则打印 \"buzz\"。对于所有其他数字，它只打印数字本身。循环会持续进行，直到计数器变量达到 101，每次打印完数字或标签后都会递增计数器变量。",
      "meta": {
        "title": "使用 While 循环掌握 Rust FizzBuzz",
        "description": "学习如何使用 Rust 的 while 循环创建经典的 FizzBuzz 程序，这是一个流行的编码练习。",
        "keywords": "Rust 在线编译器, while 循环, FizzBuzz, 编程教程, Rust 练习, 编码练习, Rust 在线, Rust 命令, Rust 游乐场, Rust 导师"
      },
      "details": {
        "steps": [
          {
            "title": "while",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Programación de bucles FizzBuzz en Rust",
      "description": "En este laboratorio, aprendemos sobre la palabra clave while, que se utiliza para crear un bucle que continúa ejecutándose mientras una condición especificada sea verdadera. Para ilustrar su uso, escribimos un programa en Rust llamado FizzBuzz. El programa utiliza un bucle while para iterar a través de los números del 1 al 100. Dentro del bucle, verifica si el número actual es divisible por 3 y 5 (es decir, un múltiplo de 15) y muestra 'fizzbuzz' en tales casos. Si el número es divisible solo por 3, muestra 'fizz', y si es divisible solo por 5, muestra 'buzz'. Para todos los demás números, simplemente muestra el número en sí mismo. El bucle continúa hasta que la variable contador alcanza 101, incrementándola después de mostrar cada número o etiqueta.",
      "meta": {
        "title": "Domina FizzBuzz en Rust con Bucles While",
        "description": "Aprende cómo usar el bucle while de Rust para crear el clásico programa FizzBuzz, un popular ejercicio de codificación.",
        "keywords": "playground de rust, bucle while, fizzbuzz, tutorial de programación, tutor de rust, ejercicio de codificación, compilador en línea de rust, comandos de rust, práctica de rust, rust en línea"
      },
      "details": {
        "steps": [
          {
            "title": "while",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "En este momento, este paso no tiene verificaciones",
                "file": "verify1-1.sh",
                "hint": "En este momento, este paso no tiene verificaciones"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Programmation de boucle FizzBuzz en Rust",
      "description": "Dans ce laboratoire, nous apprenons le mot clé while, qui est utilisé pour créer une boucle qui continue à s'exécuter tant qu'une condition spécifiée est vraie. Pour illustrer son utilisation, nous écrivons un programme en Rust appelé FizzBuzz. Le programme utilise une boucle while pour itérer sur les nombres de 1 à 100. À l'intérieur de la boucle, il vérifie si le nombre actuel est divisible par 3 et 5 (c'est-à-dire un multiple de 15) et imprime 'fizzbuzz' dans de tels cas. Si le nombre est divisible uniquement par 3, il imprime 'fizz', et s'il est divisible uniquement par 5, il imprime 'buzz'. Pour tous les autres nombres, il imprime simplement le nombre lui-même. La boucle continue jusqu'à ce que la variable compteur atteigne 101, en l'incrémentant après avoir imprimé chaque nombre ou étiquette.",
      "meta": {
        "title": "Maîtrisez FizzBuzz en Rust avec des boucles While",
        "description": "Découvrez comment utiliser la boucle while de Rust pour créer le programme classique FizzBuzz, un exercice de codage populaire.",
        "keywords": "plateforme de codage Rust, boucle while, FizzBuzz, tutoriel de programmation, tuteur Rust, exercice de codage, compilateur en ligne Rust, commandes Rust, pratique Rust, en ligne Rust"
      },
      "details": {
        "steps": [
          {
            "title": "while",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Rust FizzBuzz-Schleifenprogrammierung",
      "description": "In diesem Lab lernen wir über das Schlüsselwort while, das dazu verwendet wird, eine Schleife zu erstellen, die solange ausgeführt wird, wie eine bestimmte Bedingung wahr ist. Um seine Verwendung zu veranschaulichen, schreiben wir ein Programm in Rust namens FizzBuzz. Das Programm verwendet eine while-Schleife, um durch die Zahlen von 1 bis 100 zu iterieren. Innerhalb der Schleife wird überprüft, ob die aktuelle Zahl durch 3 und 5 teilbar ist (d. h. ein Vielfaches von 15), und in diesen Fällen wird 'fizzbuzz' ausgegeben. Wenn die Zahl nur durch 3 teilbar ist, wird 'fizz' ausgegeben, und wenn sie nur durch 5 teilbar ist, wird 'buzz' ausgegeben. Für alle anderen Zahlen wird einfach die Zahl selbst ausgegeben. Die Schleife wird fortgesetzt, bis die Zählvariable 101 erreicht, und erhöht sie sich nach jedem Drucken einer Zahl oder eines Labels um 1.",
      "meta": {
        "title": "Meistere Rust FizzBuzz mit While-Schleifen",
        "description": "Lerne, wie du die while-Schleife in Rust verwendest, um das klassische FizzBuzz-Programm zu erstellen, eine beliebte Programmieraufgabe.",
        "keywords": "rust playground, while-Schleife, fizzbuzz, Programmier-Tutorial, rust-Lehrer, Programmieraufgabe, rust Online-Compiler, rust-Befehle, rust Übung, rust Online"
      },
      "details": {
        "steps": [
          {
            "title": "while",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust の FizzBuzz ループプログラミング",
      "description": "この実験では、指定された条件が真の間、実行を続けるループを作成するために使用される while キーワードについて学びます。その使い方を示すために、Rust で FizzBuzz と呼ばれるプログラムを書きます。このプログラムは while ループを使って 1 から 100 までの数を反復処理します。ループ内では、現在の数が 3 と 5 の両方で割り切れる（つまり 15 の倍数）場合、その場合には \"fizzbuzz\" を出力します。数が 3 でのみ割り切れる場合、\"fizz\" を出力し、5 でのみ割り切れる場合、\"buzz\" を出力します。それ以外のすべての数については、その数自体を出力します。カウンタ変数が 101 に達するまでループが続き、各数またはラベルを出力した後にそれをインクリメントします。",
      "meta": {
        "title": "While ループを使って Rust の FizzBuzz をマスターする",
        "description": "人気のコーディング演習である古典的な FizzBuzz プログラムを作成するために、Rust の while ループをどのように使用するか学びましょう。",
        "keywords": "rust プレイグラウンド, while ループ, fizzbuzz, プログラミング チュートリアル, rust チューター, コーディング演習, rust オンライン コンパイラ, rust コマンド, rust 練習, rust オンライン"
      },
      "details": {
        "steps": [
          {
            "title": "while",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップは現在検証がありません",
                "file": "verify1-1.sh",
                "hint": "このステップは現在検証がありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Программирование цикла FizzBuzz на Rust",
      "description": "В этом практическом занятии мы познакомимся с ключевым словом while, которое используется для создания цикла, который продолжает выполняться, пока заданное условие истинно. Чтобы проиллюстрировать его использование, мы напишем программу на Rust под названием FizzBuzz. Программа использует цикл while для перебора чисел от 1 до 100. Внутри цикла она проверяет, делится ли текущее число на 3 и 5 (то есть является кратным 15), и в таких случаях выводит \"fizzbuzz\". Если число делится только на 3, выводится \"fizz\", а если только на 5, выводится \"buzz\". Для всех остальных чисел просто выводится само число. Цикл продолжается, пока переменная-счетчик не достигнет 101, увеличивая ее после вывода каждого числа или метки.",
      "meta": {
        "title": "Освойте FizzBuzz на Rust с использованием циклов while",
        "description": "Изучите, как использовать цикл while в Rust для создания классической программы FizzBuzz, популярного упражнения по программированию.",
        "keywords": "игровой场 Rust, цикл while, FizzBuzz, учебник по программированию, наставник Rust, упражнение по программированию, онлайн-компилятор Rust, команды Rust, практика Rust, Rust онлайн"
      },
      "details": {
        "steps": [
          {
            "title": "while",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На этом этапе проверок нет",
                "file": "verify1-1.sh",
                "hint": "На этом этапе проверок нет"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
