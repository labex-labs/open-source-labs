{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Implementing Iterators in Rust",
  "description": "In this lab, we learn about the Iterator trait in Rust, which is used to implement iterators over collections such as arrays. The Iterator trait requires the next method to be defined for the iterator, and can be manually implemented in an impl block or automatically defined for arrays and ranges. The for construct can be used to conveniently turn some collections into iterators using the .into_iter() method. The lab provides an example implementation of the Fibonacci sequence generator as an iterator, showcasing how to define the next method and use the Iterator trait. Additionally, it demonstrates the use of take and skip methods to manipulate iterators, as well as the iter method for iterating over arrays.",
  "meta": {
    "title": "Rust Iterators | Programming Tutorials",
    "description": "Learn about the Iterator trait in Rust, how to implement iterators, and explore examples of Fibonacci sequence generators and array iteration.",
    "keywords": "Rust, Iterators, Programming Tutorials, Fibonacci, Arrays"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Iterators",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/for_loop",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/method_syntax",
          "rust/mutable_variables",
          "rust/operator_overloading",
          "rust/traits",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "在 Rust 中实现迭代器",
      "description": "在本实验中，我们学习 Rust 中的 `Iterator` 特性，它用于在数组等集合上实现迭代器。`Iterator` 特性要求为迭代器定义 `next` 方法，该方法可以在 `impl` 块中手动实现，也可以为数组和范围自动定义。`for` 结构可用于通过 `.into_iter()` 方法方便地将某些集合转换为迭代器。本实验提供了一个作为迭代器的斐波那契数列生成器的示例实现，展示了如何定义 `next` 方法以及使用 `Iterator` 特性。此外，它还演示了使用 `take` 和 `skip` 方法来操作迭代器，以及使用 `iter` 方法来遍历数组。",
      "meta": {
        "title": "Rust 迭代器 | 编程教程",
        "description": "了解 Rust 中的 `Iterator` 特性、如何实现迭代器，并探索斐波那契数列生成器和数组迭代的示例。",
        "keywords": "Rust, 迭代器，编程教程，斐波那契，数组"
      },
      "details": {
        "steps": [
          {
            "title": "迭代器",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Implementando Iteradores en Rust",
      "description": "En este laboratorio, aprendemos sobre el trato Iterator en Rust, que se utiliza para implementar iteradores sobre colecciones como arrays. El trato Iterator requiere que se defina el método next para el iterador, y puede implementarse manualmente en un bloque impl o definirse automáticamente para arrays y rangos. La construcción for se puede utilizar para convertir convenientemente algunas colecciones en iteradores utilizando el método.into_iter(). El laboratorio proporciona una implementación de ejemplo del generador de secuencia de Fibonacci como iterador, mostrando cómo definir el método next y utilizar el trato Iterator. Además, demuestra el uso de los métodos take y skip para manipular iteradores, así como el método iter para iterar sobre arrays.",
      "meta": {
        "title": "Iteradores de Rust | Tutoriales de Programación",
        "description": "Aprende sobre el trato Iterator en Rust, cómo implementar iteradores y explora ejemplos de generadores de secuencia de Fibonacci y iteración de arrays.",
        "keywords": "Rust, Iteradores, Tutoriales de Programación, Fibonacci, Arrays"
      },
      "details": {
        "steps": [
          {
            "title": "Iteradores",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Implémentation d'itérateurs en Rust",
      "description": "Dans ce laboratoire, nous découvrons le trait Iterator en Rust, qui est utilisé pour implémenter des itérateurs sur des collections telles que les tableaux. Le trait Iterator exige que la méthode next soit définie pour l'itérateur, et peut être implémentée manuellement dans un bloc impl ou définie automatiquement pour les tableaux et les plages. La construction for peut être utilisée pour transformer commodément certaines collections en itérateurs en utilisant la méthode.into_iter(). Le laboratoire fournit une implémentation d'exemple du générateur de séquence de Fibonacci en tant qu'itérateur, montrant comment définir la méthode next et utiliser le trait Iterator. De plus, il démontre l'utilisation des méthodes take et skip pour manipuler les itérateurs, ainsi que la méthode iter pour itérer sur les tableaux.",
      "meta": {
        "title": "Itérateurs Rust | Tutoriels de programmation",
        "description": "Découvrez le trait Iterator en Rust, comment implémenter des itérateurs et explorez des exemples de générateurs de séquence de Fibonacci et d'itération sur des tableaux.",
        "keywords": "Rust, Itérateurs, Tutoriels de programmation, Fibonacci, Tableaux"
      },
      "details": {
        "steps": [
          {
            "title": "Itérateurs",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Implementierung von Iteratoren in Rust",
      "description": "In diesem Lab lernen wir das Iterator-Trait in Rust kennen, das verwendet wird, um Iteratoren über Sammlungen wie Arrays zu implementieren. Das Iterator-Trait erfordert, dass die next-Methode für den Iterator definiert wird und kann in einem impl-Block manuell implementiert oder automatisch für Arrays und Bereiche definiert werden. Die for-Konstruktion kann verwendet werden, um einige Sammlungen bequem in Iteratoren umzuwandeln, indem die.into_iter()-Methode verwendet wird. Das Lab bietet eine Beispielimplementierung des Fibonacci-Folgegenerators als Iterator, die zeigt, wie man die next-Methode definiert und das Iterator-Trait verwendet. Darüber hinaus wird die Verwendung der take- und skip-Methoden zum Manipulieren von Iteratoren sowie die iter-Methode zum Iterieren über Arrays demonstriert.",
      "meta": {
        "title": "Rust Iteratoren | Programmier-Tutorials",
        "description": "Lernen Sie das Iterator-Trait in Rust kennen, wie man Iteratoren implementiert und erkunden Sie Beispiele von Fibonacci-Folgegeneratoren und Array-Iteration.",
        "keywords": "Rust, Iteratoren, Programmier-Tutorials, Fibonacci, Arrays"
      },
      "details": {
        "steps": [
          {
            "title": "Iteratoren",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust における反復子の実装",
      "description": "この実験では、Rust の Iterator トレイトについて学びます。このトレイトは、配列などのコレクションに対する反復子を実装するために使用されます。Iterator トレイトでは、反復子に対して next メソッドが定義される必要があり、impl ブロックで手動で実装することも、配列や範囲に対して自動的に定義することもできます。for 構文を使うと、.into_iter() メソッドを使って便利にいくつかのコレクションを反復子に変換することができます。この実験では、反復子としての Fibonacci 数列生成器の例を提供し、next メソッドをどのように定義し、Iterator トレイトをどのように使うかを示しています。また、反復子を操作するための take と skip メソッドの使い方と、配列を反復するための iter メソッドの使い方も示しています。",
      "meta": {
        "title": "Rust の反復子 | プログラミングチュートリアル",
        "description": "Rust の Iterator トレイト、反復子の実装方法、および Fibonacci 数列生成器と配列反復の例を学びましょう。",
        "keywords": "Rust, 反復子，プログラミングチュートリアル，Fibonacci, 配列"
      },
      "details": {
        "steps": [
          {
            "title": "反復子",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Реализация итераторов в Rust",
      "description": "В этой лабораторной работе мы изучаем трейт Iterator в Rust, который используется для реализации итераторов над коллекциями, такими как массивы. Трейт Iterator требует определения метода next для итератора, и его можно реализовать вручную в блоке impl или автоматически определить для массивов и диапазонов. Конструкция for может быть использована для удобного преобразования некоторых коллекций в итераторы с использованием метода.into_iter(). В лабораторной работе приводится пример реализации генератора последовательности Фибоначчи в виде итератора, демонстрирующий, как определить метод next и использовать трейт Iterator. Кроме того, показано использование методов take и skip для управления итераторами, а также метода iter для итерации по массивам.",
      "meta": {
        "title": "Итераторы Rust | Руководства по программированию",
        "description": "Изучите трейт Iterator в Rust, как реализовать итераторы, и ознакомьтесь с примерами генераторов последовательности Фибоначчи и итерации по массивам.",
        "keywords": "Rust, Итераторы, Руководства по программированию, Фибоначчи, Массивы"
      },
      "details": {
        "steps": [
          {
            "title": "Итераторы",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "В настоящий момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "В настоящий момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "Rust 에서 이터레이터 구현하기",
      "description": "이 랩에서는 Rust 의 Iterator 트레이트에 대해 배우고, 배열과 같은 컬렉션에 대한 이터레이터를 구현하는 방법을 익힙니다. Iterator 트레이트는 이터레이터의 next 메서드를 정의해야 하며, impl 블록에서 수동으로 구현하거나 배열 및 범위에 대해 자동으로 정의할 수 있습니다. for 구문을 사용하여 .into_iter() 메서드를 통해 일부 컬렉션을 편리하게 이터레이터로 변환할 수 있습니다. 이 랩은 next 메서드를 정의하고 Iterator 트레이트를 사용하는 방법을 보여주는 피보나치 수열 생성기를 이터레이터로 구현하는 예제를 제공합니다. 또한 take 및 skip 메서드를 사용하여 이터레이터를 조작하는 방법과 배열을 반복하는 iter 메서드의 사용법을 보여줍니다.",
      "meta": {
        "title": "Rust 이터레이터 튜토리얼 | 프로그래밍 학습",
        "description": "Rust 의 Iterator 트레이트, 이터레이터 구현 방법, 피보나치 수열 생성기 및 배열 반복 예제를 알아보세요.",
        "keywords": "Rust, 이터레이터, 프로그래밍 튜토리얼, 피보나치, 배열, Rust 이터레이터 학습"
      },
      "details": {
        "steps": [
          {
            "title": "이터레이터",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Implementando Iteradores em Rust",
      "description": "Neste laboratório, aprendemos sobre o trait Iterator em Rust, que é usado para implementar iteradores sobre coleções como arrays. O trait Iterator requer que o método next seja definido para o iterador, e pode ser implementado manualmente em um bloco impl ou definido automaticamente para arrays e ranges. A construção for pode ser usada para convenientemente transformar algumas coleções em iteradores usando o método .into_iter(). O laboratório fornece um exemplo de implementação do gerador de sequência de Fibonacci como um iterador, mostrando como definir o método next e usar o trait Iterator. Além disso, demonstra o uso dos métodos take e skip para manipular iteradores, bem como o método iter para iterar sobre arrays.",
      "meta": {
        "title": "Iteradores em Rust | Tutoriais de Programação",
        "description": "Aprenda sobre o trait Iterator em Rust, como implementar iteradores e explore exemplos de geradores de sequência de Fibonacci e iteração de arrays.",
        "keywords": "Rust, Iteradores, Tutoriais de Programação, Fibonacci, Arrays, Iteração"
      },
      "details": {
        "steps": [
          {
            "title": "Iteradores",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
