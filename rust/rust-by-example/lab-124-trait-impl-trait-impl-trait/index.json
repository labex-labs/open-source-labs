{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Exploring Rust's Impl Trait Functionality",
  "description": "In this lab, we will explore the usage of impl Trait in Rust, which can be used as an argument type or a return type, simplifying function declarations and allowing for more flexible and concise code.",
  "meta": {
    "title": "Mastering Rust's `impl Trait` | Concise & Flexible Coding",
    "description": "Explore the powerful `impl Trait` feature in Rust, simplifying function declarations and enabling more flexible and concise code.",
    "keywords": "Rust, impl Trait, Argument Type, Return Type, Concise Coding, Flexible Coding"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "impl Trait",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/method_syntax",
          "rust/mutable_variables",
          "rust/operator_overloading",
          "rust/traits",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "探索 Rust 的 impl Trait 功能",
      "description": "在本实验中，我们将探索 Rust 中 impl Trait 的用法，它可用作参数类型或返回类型，简化函数声明并允许编写更灵活简洁的代码。",
      "meta": {
        "title": "掌握 Rust 的 `impl Trait` | 简洁灵活的编码",
        "description": "探索 Rust 中强大的 `impl Trait` 特性，简化函数声明并实现更灵活简洁的代码。",
        "keywords": "Rust, impl Trait, 参数类型, 返回类型, 简洁编码, 灵活编码"
      },
      "details": {
        "steps": [
          {
            "title": "impl Trait",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Explorando la funcionalidad de `impl Trait` en Rust",
      "description": "En este laboratorio, exploraremos el uso de `impl Trait` en Rust, que se puede utilizar como un tipo de argumento o un tipo de retorno, lo que simplifica las declaraciones de funciones y permite un código más flexible y conciso.",
      "meta": {
        "title": "Dominando `impl Trait` de Rust | Codificación concisa y flexible",
        "description": "Explore la poderosa característica `impl Trait` en Rust, simplificando las declaraciones de funciones y permitiendo un código más flexible y conciso.",
        "keywords": "Rust, impl Trait, Tipo de argumento, Tipo de retorno, Codificación concisa, Codificación flexible"
      },
      "details": {
        "steps": [
          {
            "title": "impl Trait",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "En este momento, este paso no tiene verificación",
                "file": "verify1-1.sh",
                "hint": "En este momento, este paso no tiene verificación"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Explorer la fonctionnalité `impl Trait` de Rust",
      "description": "Dans ce laboratoire, nous allons explorer l'utilisation de `impl Trait` en Rust, qui peut être utilisée comme type d'argument ou de retour, simplifiant les déclarations de fonction et permettant un code plus flexible et concise.",
      "meta": {
        "title": "Maîtriser `impl Trait` de Rust | Codage concis et flexible",
        "description": "Explorez la puissante fonctionnalité `impl Trait` en Rust, simplifiant les déclarations de fonction et permettant un code plus flexible et concise.",
        "keywords": "Rust, impl Trait, Type d'argument, Type de retour, Codage concis, Codage flexible"
      },
      "details": {
        "steps": [
          {
            "title": "impl Trait",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Das `impl Trait`-Verhalten in Rust erkunden",
      "description": "In diesem Lab werden wir die Verwendung von `impl Trait` in Rust untersuchen, das als Argumenttyp oder Rückgabetyp verwendet werden kann, was die Funktionsdeklarationen vereinfacht und für flexiblere und präzisere Code ermöglicht.",
      "meta": {
        "title": "Das `impl Trait` in Rust beherrschen | Präzise & flexible Programmierung",
        "description": "Entdecken Sie die leistungsstarke `impl Trait`-Funktion in Rust, die die Funktionsdeklarationen vereinfacht und flexibleres und präziseres Code ermöglicht.",
        "keywords": "Rust, impl Trait, Argumenttyp, Rückgabetyp, präzise Programmierung, flexible Programmierung"
      },
      "details": {
        "steps": [
          {
            "title": "impl Trait",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "RustのImpl Trait機能を探る",
      "description": "この実験では、Rustにおけるimpl Traitの使い方を調べます。これは、引数型または戻り値型として使用でき、関数宣言を簡略化し、より柔軟で簡潔なコードを可能にします。",
      "meta": {
        "title": "Rustの`impl Trait`をマスターする | 簡潔で柔軟なコーディング",
        "description": "Rustにおける強力な`impl Trait`機能を探り、関数宣言を簡略化し、より柔軟で簡潔なコードを可能にします。",
        "keywords": "Rust, impl Trait, 引数型, 戻り値型, 簡潔なコーディング, 柔軟なコーディング"
      },
      "details": {
        "steps": [
          {
            "title": "impl Trait",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップは現在検証がありません",
                "file": "verify1-1.sh",
                "hint": "このステップは現在検証がありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Исследование функциональности `impl Trait` в Rust",
      "description": "В этом лабе мы исследуем использование `impl Trait` в Rust, которое может использоваться в качестве типа аргумента или возвращаемого типа, упрощая объявления функций и позволяя писать более гибкий и компактный код.",
      "meta": {
        "title": "Мастерство в `impl Trait` Rust | Яркий и гибкий код",
        "description": "Исследуйте мощную функцию `impl Trait` в Rust, упрощая объявления функций и позволяя писать более гибкий и компактный код.",
        "keywords": "Rust, impl Trait, Тип аргумента, Возвращаемый тип, Яркий код, Гибкий код"
      },
      "details": {
        "steps": [
          {
            "title": "impl Trait",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
