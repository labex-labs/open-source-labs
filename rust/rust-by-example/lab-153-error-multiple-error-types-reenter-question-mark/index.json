{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Other Uses of ?",
  "description": "In this lab, it is explained that the ? operator in Rust can be used to automatically convert errors into the desired return type, eliminating the need for explicit error handling using map_err.",
  "meta": {
    "title": "Other Uses of the ? Operator in Rust",
    "description": "Explore the versatility of the ? operator in Rust, including its ability to automatically convert errors into the desired return type.",
    "keywords": "rust playground, error handling, automatic error conversion, programming tutorial, operator, rust online compiler, rust tutor, rust commands, rust practice, rust online"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Other uses of ?",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/method_syntax",
          "rust/operator_overloading",
          "rust/string_type",
          "rust/traits",
          "rust/type_casting",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "? 的其他用法",
      "description": "在本实验中，将解释 Rust 中的？运算符可用于自动将错误转换为所需的返回类型，从而无需使用 map_err 进行显式错误处理。",
      "meta": {
        "title": "Rust 中？运算符的其他用法",
        "description": "探索 Rust 中？运算符的多功能性，包括其将错误自动转换为所需返回类型的能力。",
        "keywords": "Rust 游乐场，错误处理，自动错误转换，编程教程，运算符，Rust 在线编译器，Rust 教程，Rust 命令，Rust 练习，Rust 在线"
      },
      "details": {
        "steps": [
          {
            "title": "? 的其他用法",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Otros usos de?",
      "description": "En este laboratorio, se explica que el operador? en Rust se puede utilizar para convertir automáticamente errores en el tipo de retorno deseado, eliminando la necesidad de manejar errores explícitamente utilizando map_err.",
      "meta": {
        "title": "Otros usos del operador? en Rust",
        "description": "Explora la versatilidad del operador? en Rust, incluyendo su capacidad para convertir automáticamente errores en el tipo de retorno deseado.",
        "keywords": "rust playground, manejo de errores, conversión automática de errores, tutorial de programación, operador, compilador en línea de rust, tutor de rust, comandos de rust, práctica de rust, rust en línea"
      },
      "details": {
        "steps": [
          {
            "title": "Otros usos de?",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Autres utilisations de?",
      "description": "Dans ce laboratoire, il est expliqué que l'opérateur? en Rust peut être utilisé pour convertir automatiquement les erreurs dans le type de retour souhaité, éliminant ainsi la nécessité de traiter explicitement les erreurs avec map_err.",
      "meta": {
        "title": "Autres utilisations de l'opérateur? en Rust",
        "description": "Explorez la polyvalence de l'opérateur? en Rust, y compris sa capacité à convertir automatiquement les erreurs dans le type de retour souhaité.",
        "keywords": "plateforme de développement Rust, gestion des erreurs, conversion automatique d'erreurs, tutoriel de programmation, opérateur, compilateur en ligne Rust, tuteur Rust, commandes Rust, pratique Rust, en ligne Rust"
      },
      "details": {
        "steps": [
          {
            "title": "Autres utilisations de?",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Andere Verwendung von?",
      "description": "In diesem Lab wird erklärt, dass der?-Operator in Rust verwendet werden kann, um Fehler automatisch in den gewünschten Rückgabetyp umzuwandeln, wodurch die explizite Fehlerbehandlung mit map_err entfällt.",
      "meta": {
        "title": "Andere Verwendung des?-Operators in Rust",
        "description": "Entdecken Sie die Vielseitigkeit des?-Operators in Rust, einschließlich seiner Fähigkeit, Fehler automatisch in den gewünschten Rückgabetyp umzuwandeln.",
        "keywords": "rust playground, Fehlerbehandlung, automatische Fehlerkonvertierung, Programmier-Tutorial, Operator, rust online compiler, rust tutor, rust Befehle, rust Übung, rust online"
      },
      "details": {
        "steps": [
          {
            "title": "Andere Verwendung von?",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "? のその他の使い方",
      "description": "この実験では、Rust の？演算子を使ってエラーを自動的に望ましい戻り型に変換でき、map_err を使った明示的なエラー処理が不要であることを説明します。",
      "meta": {
        "title": "Rust における？演算子のその他の使い方",
        "description": "Rust における？演算子の多様性を探り、エラーを自動的に望ましい戻り型に変換するその能力を含めてみましょう。",
        "keywords": "rust プレイグラウンド，エラー処理，自動エラー変換，プログラミングチュートリアル，演算子，rust オンラインコンパイラ，rust チューター, rust コマンド，rust 練習，rust オンライン"
      },
      "details": {
        "steps": [
          {
            "title": "? のその他の使い方",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップは現在検証がありません",
                "file": "verify1-1.sh",
                "hint": "このステップは現在検証がありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Другие用途 оператора ?",
      "description": "В этом лабе объясняется, что оператор `?` в Rust может быть использован для автоматического преобразования ошибок в желаемый тип возврата, устраняя необходимость явной обработки ошибок с использованием `map_err`.",
      "meta": {
        "title": "Другие用途 оператора ? в Rust",
        "description": "Изучите гибкость оператора `?` в Rust, включая его способность автоматически преобразовывать ошибки в желаемый тип возврата.",
        "keywords": "rust playground, обработка ошибок, автоматическое преобразование ошибок, учебник по программированию, оператор, онлайн-компилятор Rust, наставник по Rust, команды Rust, практика Rust, Rust онлайн"
      },
      "details": {
        "steps": [
          {
            "title": "Другие用途 оператора ?",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "?의 다른 사용법",
      "description": "이 랩에서는 Rust 의 ? 연산자가 오류를 원하는 반환 타입으로 자동 변환하여 `map_err` 를 사용한 명시적인 오류 처리를 없앨 수 있음을 설명합니다.",
      "meta": {
        "title": "Rust 에서 ? 연산자의 다른 사용법: 자동 오류 변환",
        "description": "Rust 에서 ? 연산자의 다재다능함을 탐구하세요. 오류를 원하는 반환 타입으로 자동 변환하는 기능을 포함합니다.",
        "keywords": "러스트 플레이그라운드, 오류 처리, 자동 오류 변환, 프로그래밍 튜토리얼, 연산자, 러스트 온라인 컴파일러, 러스트 튜터, 러스트 명령어, 러스트 연습, 러스트 온라인"
      },
      "details": {
        "steps": [
          {
            "title": "?의 다른 사용법",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Outras Utilizações de ?",
      "description": "Neste laboratório, é explicado que o operador `?` em Rust pode ser usado para converter erros automaticamente no tipo de retorno desejado, eliminando a necessidade de tratamento explícito de erros usando `map_err`.",
      "meta": {
        "title": "Outras Utilizações do Operador `?` em Rust: Simplificando o Tratamento de Erros",
        "description": "Explore a versatilidade do operador `?` em Rust e como ele simplifica o tratamento de erros, convertendo-os automaticamente para o tipo de retorno desejado. Aprenda a escrever código Rust mais limpo e eficiente.",
        "keywords": "rust playground, tratamento de erros, conversão automática de erros, tutorial de programação, operador ?, compilador online rust, tutor rust, comandos rust, prática rust, rust online, aprender rust, programação rust, tratamento de exceções rust"
      },
      "details": {
        "steps": [
          {
            "title": "Outras utilizações de ?",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
