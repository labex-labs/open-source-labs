{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Spawning Native Threads in Rust",
  "description": "In this lab, we have a code snippet in Rust that demonstrates how to spawn native OS threads using the spawn function and a moving closure. The code creates a vector to hold the spawned threads, iterates through a range of numbers to spawn multiple threads, and prints a message identifying each thread number. Finally, the main thread waits for each spawned thread to finish using the join function.",
  "meta": {
    "title": "Rust Threading Fundamentals | Spawn Native OS Threads",
    "description": "Learn how to spawn native OS threads in Rust using the spawn function and a moving closure. Explore thread management and synchronization techniques.",
    "keywords": "Rust, Threading, Concurrency, OS Threads, Spawn, Closure"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Threads",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/constants_usage",
          "rust/expressions_statements",
          "rust/for_loop",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/method_syntax",
          "rust/mutable_variables",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "在 Rust 中创建原生线程",
      "description": "在本实验中，我们有一段 Rust 代码片段，展示了如何使用 `spawn` 函数和移动闭包来创建原生操作系统线程。代码创建了一个向量来保存创建的线程，遍历一系列数字以创建多个线程，并打印一条标识每个线程编号的消息。最后，主线程使用 `join` 函数等待每个创建的线程完成。",
      "meta": {
        "title": "Rust 线程基础 | 创建原生操作系统线程",
        "description": "学习如何使用 `spawn` 函数和移动闭包在 Rust 中创建原生操作系统线程。探索线程管理和同步技术。",
        "keywords": "Rust, 线程，并发，操作系统线程，创建，闭包"
      },
      "details": {
        "steps": [
          {
            "title": "线程",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Generar hilos nativos en Rust",
      "description": "En este laboratorio, tenemos un fragmento de código en Rust que demuestra cómo generar hilos nativos del sistema operativo utilizando la función spawn y una clausura móvil. El código crea un vector para almacenar los hilos generados, itera a través de un rango de números para generar múltiples hilos y muestra un mensaje que identifica el número de cada hilo. Finalmente, el hilo principal espera a que cada hilo generado termine utilizando la función join.",
      "meta": {
        "title": "Fundamentos de subprocesamiento en Rust | Generar hilos nativos del sistema operativo",
        "description": "Aprenda cómo generar hilos nativos del sistema operativo en Rust utilizando la función spawn y una clausura móvil. Explore técnicas de administración y sincronización de hilos.",
        "keywords": "Rust, Subprocesamiento, Concurrencia, Hilos del sistema operativo, Generar, Clausura"
      },
      "details": {
        "steps": [
          {
            "title": "Hilos",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Création de threads natifs en Rust",
      "description": "Dans ce laboratoire, nous avons un extrait de code en Rust qui montre comment créer des threads natifs du système d'exploitation à l'aide de la fonction spawn et d'une closure mobile. Le code crée un vecteur pour stocker les threads créés, itère sur une plage de nombres pour créer plusieurs threads et imprime un message identifiant chaque numéro de thread. Enfin, le thread principal attend que chaque thread créé se termine à l'aide de la fonction join.",
      "meta": {
        "title": "Fondamentaux du multithreading en Rust | Création de threads natifs du système d'exploitation",
        "description": "Découvrez comment créer des threads natifs du système d'exploitation en Rust à l'aide de la fonction spawn et d'une closure mobile. Explorez les techniques de gestion et de synchronisation des threads.",
        "keywords": "Rust, Multithreading, Concurrence, Threads du système d'exploitation, Spawn, Closure"
      },
      "details": {
        "steps": [
          {
            "title": "Threads",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Das Erzeugen von nativem Threads in Rust",
      "description": "In diesem Lab haben wir einen Codeausschnitt in Rust, der zeigt, wie man native Betriebssystem-Threads mit der spawn-Funktion und einer verschiebenden Closure erzeugt. Der Code erstellt einen Vektor, um die erzeugten Threads zu speichern, iteriert über einen Zahlenbereich, um mehrere Threads zu erzeugen und gibt eine Nachricht aus, die jede Threadnummer identifiziert. Schließlich wartet der Hauptthread, bis jeder erzeugte Thread mit der join-Funktion abgeschlossen ist.",
      "meta": {
        "title": "Grundlagen der Rust-Threading | Erzeugen von nativem Betriebssystem-Threads",
        "description": "Lernen Sie, wie Sie in Rust native Betriebssystem-Threads mit der spawn-Funktion und einer verschiebenden Closure erzeugen. Entdecken Sie Thread-Management- und Synchronisierungstechniken.",
        "keywords": "Rust, Threading, Concurrency, Betriebssystem-Threads, Spawn, Closure"
      },
      "details": {
        "steps": [
          {
            "title": "Threads",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust でネイティブなスレッドを生成する",
      "description": "この実験では、Rust のコード スニペットを使って、`spawn` 関数と移動クロージャを使ってネイティブな OS スレッドを生成する方法を示します。コードは、生成されたスレッドを保持するためのベクトルを作成し、複数のスレッドを生成するために数値の範囲を反復処理し、各スレッド番号を識別するメッセージを表示します。最後に、メイン スレッドは `join` 関数を使って各生成されたスレッドが終了するのを待ちます。",
      "meta": {
        "title": "Rust のスレッド処理の基本 | ネイティブな OS スレッドを生成する",
        "description": "Rust で `spawn` 関数と移動クロージャを使ってネイティブな OS スレッドを生成する方法を学びましょう。スレッド管理と同期技術を探求しましょう。",
        "keywords": "Rust, スレッド処理，並列処理，OS スレッド，生成，クロージャ"
      },
      "details": {
        "steps": [
          {
            "title": "スレッド",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップでは現在検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップでは現在検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Создание нативных потоков в Rust",
      "description": "В этом лабораторном задании у нас есть фрагмент кода на Rust, который демонстрирует, как создавать нативные потоки операционной системы с использованием функции spawn и перемещающейся замыкания. Код создает вектор для хранения созданных потоков, перебирает диапазон чисел для создания нескольких потоков и выводит сообщение, идентифицирующее номер каждого потока. Наконец, главный поток ожидает завершения каждого созданного потока с использованием функции join.",
      "meta": {
        "title": "Основы многопоточности в Rust | Создание нативных потоков операционной системы",
        "description": "Изучите, как создавать нативные потоки операционной системы в Rust с использованием функции spawn и перемещающейся замыкания. Исследуйте методы управления потоками и синхронизации.",
        "keywords": "Rust, Многопоточность, Параллелизм, Потоки операционной системы, Spawn, Замыкание"
      },
      "details": {
        "steps": [
          {
            "title": "Потоки",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "Rust 에서 네이티브 스레드 생성",
      "description": "이 실습에서는 Rust 코드를 통해 spawn 함수와 이동 가능한 클로저를 사용하여 네이티브 OS 스레드를 생성하는 방법을 보여줍니다. 생성된 스레드를 저장할 벡터를 만들고, 숫자 범위를 반복하여 여러 스레드를 생성하며, 각 스레드 번호를 식별하는 메시지를 출력합니다. 마지막으로 메인 스레드는 join 함수를 사용하여 각 생성된 스레드가 완료될 때까지 기다립니다.",
      "meta": {
        "title": "Rust 스레드 기본 개념 | 네이티브 OS 스레드 생성",
        "description": "spawn 함수와 이동 가능한 클로저를 사용하여 Rust 에서 네이티브 OS 스레드를 생성하는 방법을 배우세요. 스레드 관리 및 동기화 기법을 탐색하세요.",
        "keywords": "Rust, 스레드, 병렬성, OS 스레드, 생성, 클로저, 스레드 생성, Rust 스레드, 네이티브 스레드"
      },
      "details": {
        "steps": [
          {
            "title": "스레드",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Criando Threads Nativas em Rust",
      "description": "Neste laboratório, temos um exemplo de código em Rust que demonstra como criar threads nativas do sistema operacional usando a função spawn e um fecho (closure) móvel. O código cria um vetor para armazenar as threads criadas, itera por um intervalo de números para criar várias threads e imprime uma mensagem identificando o número de cada thread. Finalmente, a thread principal aguarda o término de cada thread criada usando a função join.",
      "meta": {
        "title": "Fundamentos de Threads em Rust | Criando Threads Nativas do SO",
        "description": "Aprenda como criar threads nativas do sistema operacional em Rust usando a função spawn e um fecho (closure) móvel. Explore técnicas de gerenciamento e sincronização de threads.",
        "keywords": "Rust, Threads, Concorrência, Threads do SO, Spawn, Closure, Criar Threads, Threads Nativas"
      },
      "details": {
        "steps": [
          {
            "title": "Threads",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Esta etapa não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Esta etapa não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
