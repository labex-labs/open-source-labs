{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Spawning Native Threads in Rust",
  "description": "In this lab, we have a code snippet in Rust that demonstrates how to spawn native OS threads using the spawn function and a moving closure. The code creates a vector to hold the spawned threads, iterates through a range of numbers to spawn multiple threads, and prints a message identifying each thread number. Finally, the main thread waits for each spawned thread to finish using the join function.",
  "meta": {
    "title": "Rust Threading Fundamentals | Spawn Native OS Threads",
    "description": "Learn how to spawn native OS threads in Rust using the spawn function and a moving closure. Explore thread management and synchronization techniques.",
    "keywords": "Rust, Threading, Concurrency, OS Threads, Spawn, Closure"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Threads",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/constants_usage",
          "rust/expressions_statements",
          "rust/for_loop",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/method_syntax",
          "rust/mutable_variables",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "在 Rust 中创建原生线程",
      "description": "在本实验中，我们有一段 Rust 代码片段，展示了如何使用 `spawn` 函数和移动闭包来创建原生操作系统线程。代码创建了一个向量来保存创建的线程，遍历一系列数字以创建多个线程，并打印一条标识每个线程编号的消息。最后，主线程使用 `join` 函数等待每个创建的线程完成。",
      "meta": {
        "title": "Rust 线程基础 | 创建原生操作系统线程",
        "description": "学习如何使用 `spawn` 函数和移动闭包在 Rust 中创建原生操作系统线程。探索线程管理和同步技术。",
        "keywords": "Rust, 线程, 并发, 操作系统线程, 创建, 闭包"
      },
      "details": {
        "steps": [
          {
            "title": "线程",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
