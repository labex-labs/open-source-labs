{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Exploring Rust Inline Assembly Usage",
  "description": "In this lab, we will explore the usage of inline assembly in Rust using the asm! macro. We will cover the basic usage of inline assembly, inputs and outputs, late output operands, explicit register operands, clobbered registers, symbol operands and ABI clobbers, register template modifiers, memory address operands, labels, and options for optimizing the assembly code.",
  "meta": {
    "title": "Rust Inline Assembly | Programming Tutorials | Code Optimization",
    "description": "Explore the usage of inline assembly in Rust using the asm! macro. Learn about inputs, outputs, late output operands, register operands, clobbered registers, and more to optimize your code.",
    "keywords": "Rust, Inline Assembly, asm! macro, Code Optimization, Programming Tutorials"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Inline assembly",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/method_syntax",
          "rust/mutable_variables",
          "rust/operator_overloading",
          "rust/string_type",
          "rust/type_casting",
          "rust/unsafe_rust",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "探索 Rust 内联汇编的用法",
      "description": "在本实验中，我们将使用 asm! 宏探索 Rust 中内联汇编的用法。我们将涵盖内联汇编的基本用法、输入和输出、延迟输出操作数、显式寄存器操作数、被破坏的寄存器、符号操作数和 ABI 破坏、寄存器模板修饰符、内存地址操作数、标签以及优化汇编代码的选项。",
      "meta": {
        "title": "Rust 内联汇编 | 编程教程 | 代码优化",
        "description": "使用 asm! 宏探索 Rust 中内联汇编的用法。了解输入、输出、延迟输出操作数、寄存器操作数、被破坏的寄存器等，以优化你的代码。",
        "keywords": "Rust, 内联汇编，asm! 宏，代码优化，编程教程"
      },
      "details": {
        "steps": [
          {
            "title": "内联汇编",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Explorando el uso del ensamblado en línea en Rust",
      "description": "En este laboratorio, exploraremos el uso del ensamblado en línea en Rust utilizando la macro asm!. Cubriremos el uso básico del ensamblado en línea, entradas y salidas, operandos de salida tardía, operandos de registro explícitos, registros afectados, operandos de símbolo y afectaciones ABI, modificadores de plantilla de registro, operandos de dirección de memoria, etiquetas y opciones para optimizar el código de ensamblado.",
      "meta": {
        "title": "Ensamblado en línea de Rust | Tutoriales de programación | Optimización de código",
        "description": "Explore el uso del ensamblado en línea en Rust utilizando la macro asm!. Aprenda sobre entradas, salidas, operandos de salida tardía, operandos de registro, registros afectados y más para optimizar su código.",
        "keywords": "Rust, Ensamblado en línea, macro asm!, Optimización de código, Tutoriales de programación"
      },
      "details": {
        "steps": [
          {
            "title": "Ensamblado en línea",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Explorer l'utilisation de l'assemblage en ligne en Rust",
      "description": "Dans ce laboratoire, nous allons explorer l'utilisation de l'assemblage en ligne en Rust à l'aide du macro asm!. Nous aborderons l'utilisation de base de l'assemblage en ligne, les entrées et les sorties, les opérandes de sortie tardive, les opérandes de registre explicites, les registres modifiés, les opérandes de symbole et les modifications ABI, les modificateurs de modèle de registre, les opérandes d'adresse mémoire, les étiquettes et les options pour optimiser le code d'assemblage.",
      "meta": {
        "title": "Assemblage en ligne Rust | Didacticiels de programmation | Optimisation du code",
        "description": "Explorez l'utilisation de l'assemblage en ligne en Rust à l'aide du macro asm!. Découvrez les entrées, les sorties, les opérandes de sortie tardive, les opérandes de registre, les registres modifiés et plus encore pour optimiser votre code.",
        "keywords": "Rust, Assemblage en ligne, macro asm!, Optimisation du code, Didacticiels de programmation"
      },
      "details": {
        "steps": [
          {
            "title": "Assemblage en ligne",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Das Verwenden von Inline-Assembly in Rust erkunden",
      "description": "In diesem Lab werden wir die Verwendung von Inline-Assembly in Rust mit dem asm!-Makro untersuchen. Wir werden die grundlegende Verwendung von Inline-Assembly, Eingaben und Ausgaben, Spätausgabebetreiber, explizite Registerbetreiber, belegte Register, Symbolbetreiber und ABI-Belege, Registervorlagenmodifizierer, Speicheradressbetreiber, Labels und Optionen zur Optimierung des Assemblercodes abdecken.",
      "meta": {
        "title": "Rust Inline-Assembly | Programmierungstutorials | Codeoptimierung",
        "description": "Erkunden Sie die Verwendung von Inline-Assembly in Rust mit dem asm!-Makro. Lernen Sie über Eingaben, Ausgaben, Spätausgabebetreiber, Registerbetreiber, belegte Register und mehr, um Ihren Code zu optimieren.",
        "keywords": "Rust, Inline-Assembly, asm!-Makro, Codeoptimierung, Programmierungstutorials"
      },
      "details": {
        "steps": [
          {
            "title": "Inline-Assembly",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust のインラインアセンブリの使い方を探る",
      "description": "この実験では、asm! マクロを使って Rust でインラインアセンブリの使い方を調べます。インラインアセンブリの基本的な使い方、入出力、遅延出力オペランド、明示的なレジスタオペランド、クロバーされるレジスタ、シンボルオペランドと ABI クロバー、レジスタテンプレート修飾子、メモリアドレスオペランド、ラベル、およびアセンブリコードを最適化するためのオプションについて説明します。",
      "meta": {
        "title": "Rust のインラインアセンブリ | プログラミングチュートリアル | コード最適化",
        "description": "asm! マクロを使って Rust でインラインアセンブリの使い方を探りましょう。入力、出力、遅延出力オペランド、レジスタオペランド、クロバーされるレジスタなどについて学び、コードを最適化しましょう。",
        "keywords": "Rust, インラインアセンブリ，asm! マクロ，コード最適化，プログラミングチュートリアル"
      },
      "details": {
        "steps": [
          {
            "title": "インラインアセンブリ",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在、検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在、検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Изучение использования встроенного ассемблера в Rust",
      "description": "В этой лабораторной работе мы будем изучать использование встроенного ассемблера в Rust с использованием макроса asm!. Мы рассмотрим базовое использование встроенного ассемблера, входы и выходы, операнды позднего вывода, явные операнды регистров, замаскированные регистры, операнды символов и ABI-замаскировки, модификаторы шаблонов регистров, операнды адресов памяти, метки и параметры для оптимизации кода ассемблера.",
      "meta": {
        "title": "Встроенный ассемблер Rust | Руководства по программированию | Оптимизация кода",
        "description": "Изучите использование встроенного ассемблера в Rust с использованием макроса asm!. Изучите о входах, выходах, операндах позднего вывода, операндах регистров, замаскированных регистрах и других аспектах для оптимизации вашего кода.",
        "keywords": "Rust, Встроенный ассемблер, макрос asm!, Оптимизация кода, Руководства по программированию"
      },
      "details": {
        "steps": [
          {
            "title": "Встроенный ассемблер",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "Rust 인라인 어셈블리 사용법 탐색",
      "description": "이 실습에서는 asm! 매크로를 사용하여 Rust 에서 인라인 어셈블리를 사용하는 방법을 탐색합니다. 인라인 어셈블리의 기본 사용법, 입력 및 출력, 늦은 출력 피연산자, 명시적인 레지스터 피연산자, 덮어쓰기 레지스터, 심볼 피연산자 및 ABI 덮어쓰기, 레지스터 템플릿 수정자, 메모리 주소 피연산자, 레이블 및 어셈블리 코드 최적화 옵션을 다룹니다.",
      "meta": {
        "title": "Rust 인라인 어셈블리 | 프로그래밍 튜토리얼 | 코드 최적화",
        "description": "asm! 매크로를 사용하여 Rust 에서 인라인 어셈블리 사용법을 탐색하세요. 입력, 출력, 늦은 출력 피연산자, 레지스터 피연산자, 덮어쓰기 레지스터 등에 대해 배우고 코드를 최적화하세요.",
        "keywords": "Rust, 인라인 어셈블리, asm! 매크로, 코드 최적화, 프로그래밍 튜토리얼, Rust 프로그래밍, 어셈블리 언어, 최적화 기법"
      },
      "details": {
        "steps": [
          {
            "title": "인라인 어셈블리",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Explorando o Uso de Montagem Inline em Rust",
      "description": "Neste laboratório, exploraremos o uso de montagem inline em Rust utilizando o macro asm!. Coberemos o uso básico de montagem inline, entradas e saídas, operandos de saída atrasados, operandos de registo explícitos, registos modificados, operandos de símbolo e clobbers de ABI, modificadores de modelo de registo, operandos de endereço de memória, rótulos e opções para otimizar o código de montagem.",
      "meta": {
        "title": "Montagem Inline em Rust | Tutoriais de Programação | Otimização de Código",
        "description": "Explore o uso de montagem inline em Rust usando o macro asm!. Aprenda sobre entradas, saídas, operandos de saída atrasados, operandos de registo, registos modificados e muito mais para otimizar o seu código.",
        "keywords": "Rust, Montagem Inline, macro asm!, Otimização de Código, Tutoriais de Programação, Programação em Rust"
      },
      "details": {
        "steps": [
          {
            "title": "Montagem Inline",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
