{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Efficient File Reading in Rust",
  "description": "In this lab, we are given a naive implementation and a more efficient implementation for reading lines from a file in Rust. The naive approach uses read_to_string to read the file into a single string and then splits it into lines, while the more efficient approach uses a BufReader to read the file line by line without loading the entire contents into memory.",
  "meta": {
    "title": "Efficient File Reading in Rust | Programming Tutorials",
    "description": "Explore the differences between a naive and efficient approach to reading lines from a file in Rust. Learn how to use BufReader for better performance.",
    "keywords": "Rust, file reading, BufReader, programming tutorials, efficient coding"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "read_lines",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/for_loop",
          "rust/function_syntax",
          "rust/method_syntax",
          "rust/mutable_variables",
          "rust/operator_overloading",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 中的高效文件读取",
      "description": "在本实验中，我们获得了 Rust 中从文件读取行的简单实现和更高效的实现。简单方法使用 read_to_string 将文件读入单个字符串，然后将其拆分为行，而更高效的方法使用 BufReader 逐行读取文件，而不将整个内容加载到内存中。",
      "meta": {
        "title": "Rust 中的高效文件读取 | 编程教程",
        "description": "探索 Rust 中从文件读取行的简单方法和高效方法之间的差异。学习如何使用 BufReader 以获得更好的性能。",
        "keywords": "Rust, 文件读取，BufReader, 编程教程，高效编码"
      },
      "details": {
        "steps": [
          {
            "title": "read_lines",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Lectura eficiente de archivos en Rust",
      "description": "En este laboratorio, se nos da una implementación sencilla y una implementación más eficiente para leer líneas de un archivo en Rust. El enfoque sencillo utiliza read_to_string para leer el archivo en una sola cadena y luego la divide en líneas, mientras que el enfoque más eficiente utiliza un BufReader para leer el archivo línea por línea sin cargar todo el contenido en memoria.",
      "meta": {
        "title": "Lectura eficiente de archivos en Rust | Tutoriales de programación",
        "description": "Explora las diferencias entre un enfoque sencillo y eficiente para leer líneas de un archivo en Rust. Aprende cómo usar BufReader para obtener un mejor rendimiento.",
        "keywords": "Rust, lectura de archivos, BufReader, tutoriales de programación, codificación eficiente"
      },
      "details": {
        "steps": [
          {
            "title": "read_lines",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "En este momento este paso no tiene verificación",
                "file": "verify1-1.sh",
                "hint": "En este momento este paso no tiene verificación"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Lecture de fichiers efficace en Rust",
      "description": "Dans ce laboratoire, on nous donne une implémentation naive et une implémentation plus efficace pour lire les lignes d'un fichier en Rust. L'approche naive utilise read_to_string pour lire le fichier dans une seule chaîne de caractères puis la divise en lignes, tandis que l'approche plus efficace utilise un BufReader pour lire le fichier ligne par ligne sans charger tout le contenu en mémoire.",
      "meta": {
        "title": "Lecture de fichiers efficace en Rust | Tutoriels de programmation",
        "description": "Explorez les différences entre une approche naive et efficace pour lire les lignes d'un fichier en Rust. Apprenez à utiliser BufReader pour une meilleure performance.",
        "keywords": "Rust, lecture de fichiers, BufReader, tutoriels de programmation, codage efficace"
      },
      "details": {
        "steps": [
          {
            "title": "read_lines",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Effizientes Dateilesen in Rust",
      "description": "In diesem Lab erhalten wir eine naive Implementierung und eine effizientere Implementierung für das Lesen von Zeilen aus einer Datei in Rust. Der naive Ansatz verwendet read_to_string, um die Datei in einen einzelnen String zu lesen und teilt ihn dann in Zeilen auf, während der effizientere Ansatz einen BufReader verwendet, um die Datei Zeile für Zeile zu lesen, ohne den gesamten Inhalt in den Speicher zu laden.",
      "meta": {
        "title": "Effizientes Dateilesen in Rust | Programmier-Tutorials",
        "description": "Entdecken Sie die Unterschiede zwischen einem naive und effizienten Ansatz zum Lesen von Zeilen aus einer Datei in Rust. Lernen Sie, wie Sie BufReader für eine bessere Leistung verwenden.",
        "keywords": "Rust, Dateilesen, BufReader, Programmier-Tutorials, effizientes Coding"
      },
      "details": {
        "steps": [
          {
            "title": "read_lines",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust における効率的なファイル読み取り",
      "description": "この実験では、Rust でファイルから行を読み取るための単純な実装と、より効率的な実装が与えられます。単純なアプローチでは、read_to_string を使ってファイルを 1 つの文字列に読み込み、その後にそれを行に分割します。一方、より効率的なアプローチでは、BufReader を使ってファイルを 1 行ずつ読み取り、全体の内容をメモリに読み込まないようにします。",
      "meta": {
        "title": "Rust における効率的なファイル読み取り | プログラミングチュートリアル",
        "description": "Rust でファイルから行を読み取る単純なアプローチと効率的なアプローチの違いを探りましょう。BufReader を使ってより良いパフォーマンスを得る方法を学びましょう。",
        "keywords": "Rust, ファイル読み取り，BufReader, プログラミングチュートリアル，効率的なコーディング"
      },
      "details": {
        "steps": [
          {
            "title": "read_lines",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Эффективное чтение файлов на Rust",
      "description": "В этом лабораторном задании мы получаем наивную реализацию и более эффективную реализацию для чтения строк из файла на Rust. Наивный подход использует read_to_string для чтения файла в одну строку и затем разделяет ее на строки, в то время как более эффективный подход использует BufReader для чтения файла построчно, не загружая все содержимое в память.",
      "meta": {
        "title": "Эффективное чтение файлов на Rust | Руководства по программированию",
        "description": "Изучите различия между наивным и эффективным подходом к чтению строк из файла на Rust. научитесь использовать BufReader для лучшей производительности.",
        "keywords": "Rust, чтение файлов, BufReader, руководства по программированию, эффективное программирование"
      },
      "details": {
        "steps": [
          {
            "title": "read_lines",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
