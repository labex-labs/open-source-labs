{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Rust Linked List Implementation",
  "description": "In this lab, we have an implementation of a linked-list using enums in Rust. The List enum has two variants: Cons, which represents a node with an element and a pointer to the next node, and Nil, which signifies the end of the linked list. The enum has methods such as new to create an empty list, prepend to add an element at the front of the list, len to return the length of the list, and stringify to return a string representation of the list. The provided main function demonstrates the usage of these methods to create and manipulate a linked list.",
  "meta": {
    "title": "Rust Linked List Implementation",
    "description": "Discover the power of Rust's enums in implementing a robust linked list data structure.",
    "keywords": "rust, rust playground, linked list, rust tutor, rust online compiler, rust commands, tutorial, rust practice, rust online playground, rust online"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Testcase: linked-list",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/method_syntax",
          "rust/mutable_variables",
          "rust/operator_overloading",
          "rust/string_type",
          "rust/traits",
          "rust/type_casting",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 实现链表",
      "description": "在本实验中，我们使用 Rust 中的枚举实现了一个链表。List 枚举有两个变体：Cons，表示一个包含元素和指向下一个节点指针的节点；Nil，表示链表的末尾。该枚举具有诸如 new 用于创建空列表、prepend 用于在列表前端添加元素、len 用于返回列表长度以及 stringify 用于返回列表的字符串表示形式等方法。提供的主函数演示了如何使用这些方法来创建和操作链表。",
      "meta": {
        "title": "Rust 实现链表",
        "description": "探索 Rust 枚举在实现强大的链表数据结构中的作用。",
        "keywords": "Rust，Rust 在线游乐场，链表，Rust 教程，Rust 在线编译器，Rust 命令，教程，Rust 练习，Rust 在线游乐场，Rust 在线"
      },
      "details": {
        "steps": [
          {
            "title": "测试用例：链表",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
