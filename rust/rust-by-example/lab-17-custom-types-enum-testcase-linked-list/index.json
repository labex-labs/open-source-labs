{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Rust Linked List Implementation",
  "description": "In this lab, we have an implementation of a linked-list using enums in Rust. The List enum has two variants: Cons, which represents a node with an element and a pointer to the next node, and Nil, which signifies the end of the linked list. The enum has methods such as new to create an empty list, prepend to add an element at the front of the list, len to return the length of the list, and stringify to return a string representation of the list. The provided main function demonstrates the usage of these methods to create and manipulate a linked list.",
  "meta": {
    "title": "Rust Linked List Implementation",
    "description": "Discover the power of Rust's enums in implementing a robust linked list data structure.",
    "keywords": "rust, rust playground, linked list, rust tutor, rust online compiler, rust commands, tutorial, rust practice, rust online playground, rust online"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Testcase: linked-list",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/method_syntax",
          "rust/mutable_variables",
          "rust/operator_overloading",
          "rust/string_type",
          "rust/traits",
          "rust/type_casting",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 实现链表",
      "description": "在本实验中，我们使用 Rust 中的枚举实现了一个链表。List 枚举有两个变体：Cons，表示一个包含元素和指向下一个节点指针的节点；Nil，表示链表的末尾。该枚举具有诸如 new 用于创建空列表、prepend 用于在列表前端添加元素、len 用于返回列表长度以及 stringify 用于返回列表的字符串表示形式等方法。提供的主函数演示了如何使用这些方法来创建和操作链表。",
      "meta": {
        "title": "Rust 实现链表",
        "description": "探索 Rust 枚举在实现强大的链表数据结构中的作用。",
        "keywords": "Rust，Rust 在线游乐场，链表，Rust 教程，Rust 在线编译器，Rust 命令，教程，Rust 练习，Rust 在线游乐场，Rust 在线"
      },
      "details": {
        "steps": [
          {
            "title": "测试用例：链表",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Implementación de lista enlazada en Rust",
      "description": "En este laboratorio, tenemos una implementación de una lista enlazada utilizando enum en Rust. El enum List tiene dos variantes: Cons, que representa un nodo con un elemento y un puntero al siguiente nodo, y Nil, que significa el final de la lista enlazada. El enum tiene métodos como new para crear una lista vacía, prepend para agregar un elemento al principio de la lista, len para devolver la longitud de la lista y stringify para devolver una representación en cadena de la lista. La función principal proporcionada demuestra el uso de estos métodos para crear y manipular una lista enlazada.",
      "meta": {
        "title": "Implementación de lista enlazada en Rust",
        "description": "Descubre el poder de los enum de Rust en la implementación de una estructura de datos de lista enlazada robusta.",
        "keywords": "rust, playground de rust, lista enlazada, tutor de rust, compilador en línea de rust, comandos de rust, tutorial, práctica de rust, playground en línea de rust, rust en línea"
      },
      "details": {
        "steps": [
          {
            "title": "Caso de prueba: lista enlazada",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "En este momento, este paso no tiene verificaciones",
                "file": "verify1-1.sh",
                "hint": "En este momento, este paso no tiene verificaciones"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Implémentation d'une liste chaînée en Rust",
      "description": "Dans ce laboratoire, nous avons une implémentation d'une liste chaînée en utilisant des enums en Rust. L'enum List a deux variantes : Cons, qui représente un nœud avec un élément et un pointeur vers le nœud suivant, et Nil, qui signifie la fin de la liste chaînée. L'enum a des méthodes telles que new pour créer une liste vide, prepend pour ajouter un élément au début de la liste, len pour retourner la longueur de la liste, et stringify pour retourner une représentation sous forme de chaîne de caractères de la liste. La fonction main fournie démontre l'utilisation de ces méthodes pour créer et manipuler une liste chaînée.",
      "meta": {
        "title": "Implémentation d'une liste chaînée en Rust",
        "description": "Découvrez le pouvoir des enums de Rust dans l'implémentation d'une structure de données de liste chaînée robuste.",
        "keywords": "rust, rust playground, liste chaînée, rust tutor, compilateur en ligne rust, commandes rust, tutoriel, pratique rust, playground en ligne rust, rust en ligne"
      },
      "details": {
        "steps": [
          {
            "title": "Testcase : liste chaînée",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Rust Implementierung einer verketteten Liste",
      "description": "In diesem Lab haben wir eine Implementierung einer verketteten Liste mit Enums in Rust. Die Liste-Enumeration hat zwei Varianten: Cons, die einen Knoten mit einem Element und einem Zeiger auf den nächsten Knoten repräsentiert, und Nil, das das Ende der verketteten Liste angibt. Die Enumeration hat Methoden wie new, um eine leere Liste zu erstellen, prepend, um ein Element am Anfang der Liste hinzuzufügen, len, um die Länge der Liste zurückzugeben, und stringify, um eine Zeichenkettendarstellung der Liste zurückzugeben. Die bereitgestellte Hauptfunktion demonstriert die Verwendung dieser Methoden, um eine verkettete Liste zu erstellen und zu manipulieren.",
      "meta": {
        "title": "Rust Implementierung einer verketteten Liste",
        "description": "Entdecken Sie die Macht von Rust-Enumerationen bei der Implementierung einer robusten verketteten Listen-Datenstruktur.",
        "keywords": "rust, rust playground, verkettete liste, rust tutor, rust online compiler, rust Befehle, Tutorial, rust Übung, rust online playground, rust online"
      },
      "details": {
        "steps": [
          {
            "title": "Testfall: verkettete Liste",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust によるリンクリストの実装",
      "description": "この実験では、Rust で enum を使ってリンクリストを実装します。List 列挙型は 2 つのバリアントを持ちます。Cons は要素と次のノードへのポインタを持つノードを表し、Nil はリンクリストの終端を示します。この列挙型には、空のリストを作成する new、リストの先頭に要素を追加する prepend、リストの長さを返す len、およびリストの文字列表現を返す stringify などのメソッドがあります。提供されたメイン関数は、これらのメソッドを使ってリンクリストを作成および操作する方法を示しています。",
      "meta": {
        "title": "Rust によるリンクリストの実装",
        "description": "強力なリンクリストデータ構造を実装する際の Rust の enum の力を発見しましょう。",
        "keywords": "rust, rust playground, リンクリスト，rust tutor, rust オンラインコンパイラ，rust コマンド，チュートリアル，rust 練習，rust オンライン playground, rust オンライン"
      },
      "details": {
        "steps": [
          {
            "title": "テストケース：リンクリスト",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在、検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在、検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Реализация связанного списка на Rust",
      "description": "В этой лабораторной работе мы реализуем связанный список с использованием enum в Rust. Enum List имеет два варианта: Cons, представляющий узел с элементом и указателем на следующий узел, и Nil, означающий конец связанного списка. Enum имеет методы, такие как new для создания пустого списка, prepend для добавления элемента в начало списка, len для возврата длины списка и stringify для возврата строкового представления списка. Предоставленная главная функция демонстрирует использование этих методов для создания и манипулирования связанным списком.",
      "meta": {
        "title": "Реализация связанного списка на Rust",
        "description": "Откройте силу enum Rust при реализации надежной структуры данных связанного списка.",
        "keywords": "rust, rust playground, связанный список, rust tutor, rust онлайн-компилятор, rust команды, учебник, практика rust, rust онлайн-площадка, rust онлайн"
      },
      "details": {
        "steps": [
          {
            "title": "Тестовый случай: связанный список",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент этот шаг не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент этот шаг не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "Rust 연결 리스트 구현",
      "description": "이 실습에서는 Rust 에서 열거형 (enum) 을 사용하여 연결 리스트를 구현하는 방법을 보여줍니다. List 열거형에는 Cons(요소와 다음 노드를 가리키는 포인터를 갖는 노드) 와 Nil(연결 리스트의 끝을 나타냄) 두 가지 변형이 있습니다. 이 열거형에는 빈 리스트를 생성하는 new, 리스트 앞에 요소를 추가하는 prepend, 리스트 길이를 반환하는 len, 리스트를 문자열로 표현하는 stringify 와 같은 메서드가 있습니다. 제공된 main 함수는 이러한 메서드를 사용하여 연결 리스트를 생성하고 조작하는 방법을 보여줍니다.",
      "meta": {
        "title": "Rust 연결 리스트 구현",
        "description": "Rust 의 열거형을 활용하여 강력한 연결 리스트 데이터 구조를 구현하는 방법을 알아보세요.",
        "keywords": "rust, rust 연습, 연결 리스트, rust 튜토리얼, rust 온라인 컴파일러, rust 명령어, 튜토리얼, rust 연습, rust 온라인 연습장, rust 온라인, rust 연결리스트, rust 자료구조"
      },
      "details": {
        "steps": [
          {
            "title": "테스트 케이스: 연결 리스트",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Implementação de Lista Encadeada em Rust",
      "description": "Neste laboratório, temos uma implementação de uma lista encadeada usando enums em Rust. O enum Lista possui duas variantes: Cons, que representa um nó com um elemento e um ponteiro para o próximo nó, e Nil, que indica o fim da lista encadeada. O enum possui métodos como new para criar uma lista vazia, prepend para adicionar um elemento no início da lista, len para retornar o comprimento da lista e stringify para retornar uma representação em string da lista. A função principal fornecida demonstra o uso desses métodos para criar e manipular uma lista encadeada.",
      "meta": {
        "title": "Implementação de Lista Encadeada em Rust",
        "description": "Descubra o poder dos enums do Rust na implementação de uma estrutura de dados robusta de lista encadeada.",
        "keywords": "rust, playground rust, lista encadeada, tutorial rust, compilador online rust, comandos rust, tutorial, prática rust, playground online rust, compilador online rust"
      },
      "details": {
        "steps": [
          {
            "title": "Caso de Teste: lista encadeada",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
