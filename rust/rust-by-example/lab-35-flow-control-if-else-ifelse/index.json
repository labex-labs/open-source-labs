{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Conditional Statements in Rust",
  "description": "In this lab, we learn about using if-else statements in Rust. Similar to other programming languages, if-else statements in Rust don't require parentheses around the condition and each condition is followed by a block of code. These conditionals are expressions, so all branches must return the same type. Within the code example provided, we first check if the variable n is less than 0, and if so, it prints that n is negative. If n is not less than 0, we then check if it is greater than 0 and print that n is positive. Finally, if none of the previous conditions are met, we print that n is zero. Another example demonstrates how the if-else statement can be used as an expression to assign a new value to the variable big_n. If n is between -10 and 10, it prints that n is a small number and assigns 10 * n to big_n. Otherwise, it prints that n is a big number and assigns n / 2 to big_n. The final output of n and big_n is printed at the end.",
  "meta": {
    "title": "Rust Programming | if-else Statements",
    "description": "Learn about using if-else statements in Rust programming language. Explore conditional expressions, branching logic, and more.",
    "keywords": "Rust, programming, if-else, conditional expressions, branching logic"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "if/else",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/operator_overloading",
          "rust/type_casting",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 中的条件语句",
      "description": "在本实验中，我们学习如何在 Rust 中使用 if-else 语句。与其他编程语言类似，Rust 中的 if-else 语句在条件周围不需要括号，并且每个条件后面都跟着一段代码块。这些条件语句是表达式，因此所有分支必须返回相同的类型。在提供的代码示例中，我们首先检查变量 n 是否小于 0，如果是，则打印 n 是负数。如果 n 不小于 0，我们接着检查它是否大于 0，并打印 n 是正数。最后，如果前面的条件都不满足，我们打印 n 是零。另一个示例展示了 if-else 语句如何用作表达式，为变量 big_n 赋一个新值。如果 n 在 -10 到 10 之间，它会打印 n 是一个小数，并将 10 * n 赋给 big_n。否则，它会打印 n 是一个大数，并将 n / 2 赋给 big_n。最后会打印出 n 和 big_n 的最终值。",
      "meta": {
        "title": "Rust 编程 | if-else 语句",
        "description": "了解在 Rust 编程语言中使用 if-else 语句。探索条件表达式、分支逻辑等。",
        "keywords": "Rust, 编程, if-else, 条件表达式, 分支逻辑"
      },
      "details": {
        "steps": [
          {
            "title": "if/else",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Instrucciones Condicionales en Rust",
      "description": "En este laboratorio, aprendemos a usar declaraciones if-else en Rust. Al igual que en otros lenguajes de programación, las declaraciones if-else en Rust no requieren paréntesis alrededor de la condición y cada condición está seguida de un bloque de código. Estas condicionales son expresiones, por lo que todas las ramas deben devolver el mismo tipo. Dentro del ejemplo de código proporcionado, primero comprobamos si la variable n es menor que 0, y si es así, imprime que n es negativa. Si n no es menor que 0, entonces comprobamos si es mayor que 0 e imprimimos que n es positiva. Finalmente, si ninguna de las condiciones anteriores se cumple, imprimimos que n es cero. Otro ejemplo demuestra cómo la declaración if-else se puede usar como una expresión para asignar un nuevo valor a la variable big_n. Si n está entre -10 y 10, imprime que n es un número pequeño y asigna 10 * n a big_n. De lo contrario, imprime que n es un número grande y asigna n / 2 a big_n. La salida final de n y big_n se imprime al final.",
      "meta": {
        "title": "Programación Rust | Declaraciones if-else",
        "description": "Aprende a usar declaraciones if-else en el lenguaje de programación Rust. Explora expresiones condicionales, lógica de bifurcación y más.",
        "keywords": "Rust, programación, if-else, expresiones condicionales, lógica de bifurcación"
      },
      "details": {
        "steps": [
          {
            "title": "if/else",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Instructions conditionnelles en Rust",
      "description": "Dans ce laboratoire, nous apprenons à utiliser les instructions if-else en Rust. Comme dans les autres langages de programmation, les instructions if-else en Rust n'exigent pas de parenthèses autour de la condition et chaque condition est suivie d'un bloc de code. Ces conditionnels sont des expressions, donc toutes les branches doivent renvoyer le même type. Dans l'exemple de code fourni, nous vérifions d'abord si la variable n est inférieure à 0, et si c'est le cas, on imprime que n est négative. Si n n'est pas inférieure à 0, nous vérifions ensuite s'il est supérieur à 0 et on imprime que n est positive. Enfin, si aucune des conditions précédentes n'est remplie, on imprime que n est égale à zéro. Un autre exemple montre comment l'instruction if-else peut être utilisée comme une expression pour assigner une nouvelle valeur à la variable big_n. Si n est compris entre -10 et 10, on imprime que n est un nombre petit et on affecte 10 * n à big_n. Sinon, on imprime que n est un nombre grand et on affecte n / 2 à big_n. La valeur finale de n et big_n est imprimée à la fin.",
      "meta": {
        "title": "Programmation Rust | Instructions if-else",
        "description": "Découvrez comment utiliser les instructions if-else dans le langage de programmation Rust. Explorez les expressions conditionnelles, la logique de branchement et plus encore.",
        "keywords": "Rust, programmation, if-else, expressions conditionnelles, logique de branchement"
      },
      "details": {
        "steps": [
          {
            "title": "if/else",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Bedingte Anweisungen in Rust",
      "description": "In diesem Lab lernen wir, wie if-else-Anweisungen in Rust verwendet werden. Ähnlich wie in anderen Programmiersprachen erfordern if-else-Anweisungen in Rust keine Klammern um die Bedingung, und jeder Bedingung folgt ein Codeblock. Diese bedingten Anweisungen sind Ausdrücke, sodass alle Zweige den gleichen Typ zurückgeben müssen. Innerhalb des bereitgestellten Codebeispiels überprüfen wir zunächst, ob die Variable n kleiner als 0 ist, und wenn ja, drucken wir, dass n negativ ist. Wenn n nicht kleiner als 0 ist, überprüfen wir dann, ob es größer als 0 ist und drucken, dass n positiv ist. Schließlich, wenn keine der vorherigen Bedingungen zutrifft, drucken wir, dass n null ist. Ein weiteres Beispiel zeigt, wie die if-else-Anweisung als Ausdruck verwendet werden kann, um einem neuen Wert der Variable big_n zuzuweisen. Wenn n zwischen -10 und 10 liegt, druckt es, dass n eine kleine Zahl ist und weist 10 * n an big_n zu. Andernfalls druckt es, dass n eine große Zahl ist und weist n / 2 an big_n zu. Die endgültigen Ausgaben von n und big_n werden am Ende gedruckt.",
      "meta": {
        "title": "Rust-Programmierung | if-else-Anweisungen",
        "description": "Lernen Sie, wie if-else-Anweisungen in der Rust-Programmiersprache verwendet werden. Entdecken Sie bedingte Ausdrücke, Verzweigungslogik und mehr.",
        "keywords": "Rust, Programmierung, if-else, bedingte Ausdrücke, Verzweigungslogik"
      },
      "details": {
        "steps": [
          {
            "title": "if/else",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rustにおける条件文",
      "description": "この実験では、Rustでif-else文を使う方法を学びます。他のプログラミング言語と同様に、Rustのif-else文は条件の周りに丸括弧を必要とせず、各条件の後にコードブロックが続きます。これらの条件分岐は式であるため、すべてのブランチは同じ型を返さなければなりません。提供されたコード例では、まず変数nが0未満かどうかをチェックし、その場合はnが負であることを出力します。nが0以上の場合、次に0より大きいかどうかをチェックし、nが正であることを出力します。最後に、以前の条件がすべて満たされない場合、nがゼロであることを出力します。もう1つの例では、if-else文を式として使って変数big_nに新しい値を割り当てる方法を示しています。nが-10から10の間の場合、nが小さな数であることを出力し、big_nに10 * nを割り当てます。それ以外の場合、nが大きな数であることを出力し、big_nにn / 2を割り当てます。最後に、nとbig_nの最終出力を表示します。",
      "meta": {
        "title": "Rustプログラミング | if-else文",
        "description": "Rustプログラミング言語でのif-else文の使い方を学びましょう。条件式、分岐ロジックなどを探求しましょう。",
        "keywords": "Rust, プログラミング, if-else, 条件式, 分岐ロジック"
      },
      "details": {
        "steps": [
          {
            "title": "if/else",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップは現在検証がありません",
                "file": "verify1-1.sh",
                "hint": "このステップは現在検証がありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Условные операторы в Rust",
      "description": "В этом практическом занятии мы узнаем, как использовать операторы if-else в Rust. Подобно другим языкам программирования, в Rust операторы if-else не требуют круглых скобок вокруг условия, и за каждым условием следует блок кода. Эти условные конструкции являются выражениями, поэтому все ветви должны возвращать один и тот же тип. В приведенном ниже кодовом примере мы сначала проверяем, меньше ли переменная n нуля, и если это так, выводим, что n отрицательна. Если n не меньше нуля, мы проверяем, больше ли она нуля, и выводим, что n положительна. Наконец, если ни одно из предыдущих условий не выполняется, мы выводим, что n равно нулю. В другом примере показано, как оператор if-else может быть использован в качестве выражения для присвоения новой значения переменной big_n. Если n находится в диапазоне от -10 до 10, выводится сообщение о том, что n - это маленькое число, и 10 * n присваивается переменной big_n. В противном случае выводится сообщение о том, что n - это большое число, и n / 2 присваивается переменной big_n. В конце выводятся итоговые значения n и big_n.",
      "meta": {
        "title": "Программирование на Rust | Операторы if-else",
        "description": "Изучите использование операторов if-else в языке программирования Rust. Исследуйте условные выражения, логику ветвления и многое другое.",
        "keywords": "Rust, программирование, if-else, условные выражения, логика ветвления"
      },
      "details": {
        "steps": [
          {
            "title": "if/else",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
