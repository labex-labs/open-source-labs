{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Rust Vectors: Resizable Array Essentials",
  "description": "In this lab, we will be learning about vectors, which are re-sizable arrays in Rust that can grow or shrink at any time. A vector is represented using three parameters: a pointer to the data, length, and capacity. The capacity indicates how much memory is reserved for the vector, and when the length surpasses the capacity, the vector is reallocated with a larger capacity. We can collect iterators into vectors using the collect method, initialize vectors using the vec! macro, insert new elements at the end using the push method, and get the number of elements using the len method. We can also access elements using indexing, remove the last element using the pop method, and iterate over the vector using the iter or iter_mut methods. Additionally, there are more methods available for vectors in the std::vec module.",
  "meta": {
    "title": "Rust Vectors: Resizable Arrays | Programming Tutorials",
    "description": "Learn about Rust vectors, which are resizable arrays that can grow or shrink at any time. Explore vector operations like collecting iterators, initializing, inserting, and iterating over vectors.",
    "keywords": "Rust, Vectors, Arrays, Programming, Tutorials"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Vectors",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 向量：可调整大小数组基础",
      "description": "在本实验中，我们将学习向量，它是 Rust 中可重新调整大小的数组，能够随时增长或收缩。向量由三个参数表示：指向数据的指针、长度和容量。容量表示为向量保留了多少内存，当长度超过容量时，向量会重新分配更大的容量。我们可以使用 collect 方法将迭代器收集到向量中，使用 vec! 宏初始化向量，使用 push 方法在末尾插入新元素，并使用 len 方法获取元素数量。我们还可以使用索引访问元素，使用 pop 方法删除最后一个元素，并使用 iter 或 iter_mut 方法遍历向量。此外，std::vec 模块中还有更多适用于向量的方法。",
      "meta": {
        "title": "Rust 向量：可调整大小数组 | 编程教程",
        "description": "了解 Rust 向量，它是可随时增长或收缩的可调整大小数组。探索向量操作，如收集迭代器、初始化、插入和遍历向量。",
        "keywords": "Rust, 向量，数组，编程，教程"
      },
      "details": {
        "steps": [
          {
            "title": "向量",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Vectores de Rust: Esenciales de los Arrays Redimensionables",
      "description": "En este laboratorio, aprenderemos sobre los vectores, que son arrays redimensionables en Rust que pueden crecer o contraerse en cualquier momento. Un vector se representa utilizando tres parámetros: un puntero a los datos, la longitud y la capacidad. La capacidad indica cuánta memoria está reservada para el vector, y cuando la longitud supera la capacidad, el vector se reasigna con una capacidad mayor. Podemos recopilar iteradores en vectores utilizando el método collect, inicializar vectores utilizando la macro vec!, insertar nuevos elementos al final utilizando el método push y obtener el número de elementos utilizando el método len. También podemos acceder a los elementos utilizando la indexación, eliminar el último elemento utilizando el método pop e iterar sobre el vector utilizando los métodos iter o iter_mut. Además, hay más métodos disponibles para los vectores en el módulo std::vec.",
      "meta": {
        "title": "Vectores de Rust: Arrays Redimensionables | Tutoriales de Programación",
        "description": "Aprende sobre los vectores de Rust, que son arrays redimensionables que pueden crecer o contraerse en cualquier momento. Explora operaciones de vectores como recopilar iteradores, inicializar, insertar e iterar sobre vectores.",
        "keywords": "Rust, Vectores, Arrays, Programación, Tutoriales"
      },
      "details": {
        "steps": [
          {
            "title": "Vectores",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Vecteurs Rust : éléments essentiels des tableaux redimensionnables",
      "description": "Dans ce laboratoire, nous allons apprendre à utiliser les vecteurs, qui sont des tableaux redimensionnables en Rust qui peuvent croître ou rétrécir à tout moment. Un vecteur est représenté par trois paramètres : un pointeur vers les données, une longueur et une capacité. La capacité indique combien de mémoire est réservée pour le vecteur, et lorsque la longueur dépasse la capacité, le vecteur est réalloué avec une capacité plus grande. Nous pouvons collecter des itérateurs dans des vecteurs en utilisant la méthode collect, initialiser des vecteurs en utilisant le macro vec!, insérer de nouveaux éléments à la fin en utilisant la méthode push et obtenir le nombre d'éléments en utilisant la méthode len. Nous pouvons également accéder à des éléments en utilisant l'indexation, supprimer le dernier élément en utilisant la méthode pop et itérer sur le vecteur en utilisant les méthodes iter ou iter_mut. De plus, il existe plus de méthodes disponibles pour les vecteurs dans le module std::vec.",
      "meta": {
        "title": "Vecteurs Rust : Tableaux redimensionnables | Tutoriels de programmation",
        "description": "Découvrez les vecteurs Rust, qui sont des tableaux redimensionnables qui peuvent croître ou rétrécir à tout moment. Explorez les opérations sur les vecteurs telles que la collecte d'itérateurs, l'initialisation, l'insertion et l'itération sur les vecteurs.",
        "keywords": "Rust, Vecteurs, Tableaux, Programmation, Tutoriels"
      },
      "details": {
        "steps": [
          {
            "title": "Vecteurs",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Rust Vektoren: Grundlagen vergrößerbarer Arrays",
      "description": "In diesem Lab lernen wir über Vektoren, die in Rust als vergrößerbare Arrays implementiert sind und sich jederzeit erweitern oder verkleinern können. Ein Vektor wird durch drei Parameter dargestellt: einen Zeiger auf die Daten, die Länge und die Kapazität. Die Kapazität gibt an, wie viel Speicher für den Vektor reserviert ist, und wenn die Länge die Kapazität überschreitet, wird der Vektor mit einer größeren Kapazität neu zugewiesen. Wir können Iteratoren in Vektoren sammeln, indem wir die collect-Methode verwenden, Vektoren mit der vec!-Makro initialisieren, neue Elemente am Ende hinzufügen, indem wir die push-Methode verwenden, und die Anzahl der Elemente mit der len-Methode abrufen. Wir können auch auf Elemente über den Index zugreifen, das letzte Element entfernen, indem wir die pop-Methode verwenden, und über den Vektor iterieren, indem wir die iter- oder iter_mut-Methoden verwenden. Darüber hinaus stehen in das std::vec-Modul weitere Methoden für Vektoren zur Verfügung.",
      "meta": {
        "title": "Rust Vektoren: Vergrößerbare Arrays | Programmier-Tutorials",
        "description": "Lernen Sie über Rust-Vektoren, die als vergrößerbare Arrays implementiert sind und sich jederzeit erweitern oder verkleinern können. Entdecken Sie Vektoroperationen wie das Sammeln von Iteratoren, die Initialisierung, das Hinzufügen und das Iterieren über Vektoren.",
        "keywords": "Rust, Vektoren, Arrays, Programmierung, Tutorials"
      },
      "details": {
        "steps": [
          {
            "title": "Vektoren",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust のベクトル：リサイズ可能な配列の基礎",
      "description": "この実験では、Rust のリサイズ可能な配列であるベクトルについて学びます。ベクトルはいつでも拡大または縮小できます。ベクトルは、データへのポインタ、長さ、および容量の 3 つのパラメータを使用して表されます。容量は、ベクトルに予約されているメモリ量を示し、長さが容量を超えると、ベクトルはより大きな容量で再割り当てされます。`collect`メソッドを使用して反復子をベクトルに収集し、`vec!`マクロを使用してベクトルを初期化し、`push`メソッドを使用して末尾に新しい要素を挿入し、`len`メソッドを使用して要素数を取得できます。また、インデックスを使用して要素にアクセスし、`pop` メソッドを使用して最後の要素を削除し、`iter` または `iter_mut` メソッドを使用してベクトルを反復処理することもできます。さらに、`std::vec` モジュールにはベクトル用のさまざまなメソッドが用意されています。",
      "meta": {
        "title": "Rust のベクトル：リサイズ可能な配列 | プログラミングチュートリアル",
        "description": "Rust のベクトルについて学びましょう。ベクトルは、いつでも拡大または縮小できるリサイズ可能な配列です。反復子の収集、初期化、挿入、およびベクトルの反復処理などのベクトル操作を探りましょう。",
        "keywords": "Rust, ベクトル，配列，プログラミング，チュートリアル"
      },
      "details": {
        "steps": [
          {
            "title": "ベクトル",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Rust Векторы: Основы изменяемых по размеру массивов",
      "description": "В этой лабе мы узнаем о векторах, которые в Rust представляют собой изменяемые по размеру массивы, которые могут расти или уменьшаться в любое время. Вектор представляется с использованием трех параметров: указатель на данные, длина и емкость. Емкость показывает, сколько памяти зарезервировано для вектора, и когда длина превышает емкость, вектор перераспределяется с большей емкостью. Мы можем собирать итераторы в векторы с использованием метода collect, инициализировать векторы с использованием макроса vec!, вставлять новые элементы в конец с использованием метода push и получать количество элементов с использованием метода len. Мы также можем получать доступ к элементам с использованием индексации, удалять последний элемент с использованием метода pop и итерироваться по вектору с использованием методов iter или iter_mut. Кроме того, в модуле std::vec доступно больше методов для векторов.",
      "meta": {
        "title": "Rust Векторы: Изменяемые по размеру массивы | Руководства по программированию",
        "description": "Изучите Rust векторы, которые представляют собой изменяемые по размеру массивы, которые могут расти или уменьшаться в любое время. Исследуйте операции с векторами, такие как сбор итераторов, инициализация, вставка и итерация по векторам.",
        "keywords": "Rust, Векторы, Массивы, Программирование, Руководства"
      },
      "details": {
        "steps": [
          {
            "title": "Векторы",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "Rust 벡터: 크기 조절 가능 배열 기본",
      "description": "이 랩에서는 언제든지 크기를 늘리거나 줄일 수 있는 Rust 의 크기 조절 가능 배열인 벡터에 대해 배우게 됩니다. 벡터는 데이터에 대한 포인터, 길이 및 용량의 세 가지 매개변수를 사용하여 표현됩니다. 용량은 벡터에 대해 예약된 메모리의 양을 나타내며, 길이가 용량을 초과하면 벡터는 더 큰 용량으로 재할당됩니다. collect 메서드를 사용하여 반복자를 벡터로 수집하고, vec! 매크로를 사용하여 벡터를 초기화하고, push 메서드를 사용하여 끝에 새 요소를 삽입하고, len 메서드를 사용하여 요소 수를 얻을 수 있습니다. 또한 인덱싱을 사용하여 요소에 접근하고, pop 메서드를 사용하여 마지막 요소를 제거하고, iter 또는 iter_mut 메서드를 사용하여 벡터를 반복할 수 있습니다. 또한 std::vec 모듈에는 벡터에 사용할 수 있는 더 많은 메서드가 있습니다.",
      "meta": {
        "title": "Rust 벡터: 크기 조절 가능 배열 | 프로그래밍 튜토리얼",
        "description": "언제든지 크기를 늘리거나 줄일 수 있는 크기 조절 가능 배열인 Rust 벡터에 대해 알아보세요. 반복자 수집, 초기화, 삽입 및 벡터 반복과 같은 벡터 연산을 살펴보세요.",
        "keywords": "Rust, 벡터, 배열, 프로그래밍, 튜토리얼, 러스트 벡터, Rust 배열, 벡터 사용법"
      },
      "details": {
        "steps": [
          {
            "title": "벡터",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Vetores em Rust: Fundamentos de Arrays Redimensionáveis",
      "description": "Neste laboratório, aprenderemos sobre vetores, que são arrays redimensionáveis em Rust que podem crescer ou diminuir a qualquer momento. Um vetor é representado usando três parâmetros: um ponteiro para os dados, comprimento e capacidade. A capacidade indica quanta memória é reservada para o vetor, e quando o comprimento ultrapassa a capacidade, o vetor é realocado com uma capacidade maior. Podemos coletar iteradores em vetores usando o método collect, inicializar vetores usando a macro vec!, inserir novos elementos no final usando o método push e obter o número de elementos usando o método len. Também podemos acessar elementos usando indexação, remover o último elemento usando o método pop e iterar sobre o vetor usando os métodos iter ou iter_mut. Além disso, existem mais métodos disponíveis para vetores no módulo std::vec.",
      "meta": {
        "title": "Vetores em Rust: Arrays Redimensionáveis | Tutoriais de Programação",
        "description": "Aprenda sobre vetores em Rust, que são arrays redimensionáveis que podem crescer ou diminuir a qualquer momento. Explore operações de vetores como coleta de iteradores, inicialização, inserção e iteração sobre vetores.",
        "keywords": "Rust, Vetores, Arrays, Programação, Tutoriais, Array redimensionável"
      },
      "details": {
        "steps": [
          {
            "title": "Vetores",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Esta etapa não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Esta etapa não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
