{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Defining Generic Functions in Rust",
  "description": "In this lab, you will learn how to define generic functions in Rust. To make a function generic, you need to prepend the type T with <T>. Sometimes, you may need to explicitly specify type parameters while calling a generic function, which can be done using the syntax fun::<A, B, ...>(). The code provided demonstrates the usage of generic functions in Rust and includes examples of functions that are both generic and non-generic.",
  "meta": {
    "title": "Mastering Generic Functions in Rust | Programming Tutorials",
    "description": "Learn how to define and use generic functions in Rust, a powerful programming language known for its safety and performance.",
    "keywords": "Rust, Generic Functions, Programming Tutorials, Rust Programming, Software Development"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Functions",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/operator_overloading",
          "rust/type_casting"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "在 Rust 中定义泛型函数",
      "description": "在本实验中，你将学习如何在 Rust 中定义泛型函数。要使函数成为泛型函数，你需要在类型 T 前加上 <T>。有时，在调用泛型函数时，你可能需要显式指定类型参数，这可以使用语法 fun::<A, B,...>() 来完成。提供的代码演示了 Rust 中泛型函数的用法，并包括泛型函数和非泛型函数的示例。",
      "meta": {
        "title": "掌握 Rust 中的泛型函数 | 编程教程",
        "description": "学习如何在 Rust 中定义和使用泛型函数，Rust 是一种以安全性和性能著称的强大编程语言。",
        "keywords": "Rust, 泛型函数, 编程教程, Rust 编程, 软件开发"
      },
      "details": {
        "steps": [
          {
            "title": "函数",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
