{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Variadic Interfaces in Rust Programming",
  "description": "In this lab, we explore variadic interfaces, which are interfaces that can take an arbitrary number of arguments. As an example, we modify the calculate! macro from the previous section to be variadic, allowing it to evaluate multiple expressions at once.",
  "meta": {
    "title": "Rust Programming | Variadic Interfaces | Macro Expansion",
    "description": "Explore variadic interfaces in Rust, a powerful programming concept that allows functions to accept an arbitrary number of arguments. Learn how to extend the 'calculate!' macro to be variadic.",
    "keywords": "Rust, Programming, Variadic Interfaces, Macros, Macro Expansion"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Variadic Interfaces",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 编程中的可变参数接口",
      "description": "在本实验中，我们探索可变参数接口，即可以接受任意数量参数的接口。例如，我们将上一节中的 `calculate!` 宏修改为可变参数形式，使其能够一次性计算多个表达式。",
      "meta": {
        "title": "Rust 编程 | 可变参数接口 | 宏展开",
        "description": "探索 Rust 中的可变参数接口，这是一个强大的编程概念，允许函数接受任意数量的参数。学习如何将 `calculate!` 宏扩展为可变参数形式。",
        "keywords": "Rust, 编程, 可变参数接口, 宏, 宏展开"
      },
      "details": {
        "steps": [
          {
            "title": "可变参数接口",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
