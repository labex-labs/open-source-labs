{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Variadic Interfaces in Rust Programming",
  "description": "In this lab, we explore variadic interfaces, which are interfaces that can take an arbitrary number of arguments. As an example, we modify the calculate! macro from the previous section to be variadic, allowing it to evaluate multiple expressions at once.",
  "meta": {
    "title": "Rust Programming | Variadic Interfaces | Macro Expansion",
    "description": "Explore variadic interfaces in Rust, a powerful programming concept that allows functions to accept an arbitrary number of arguments. Learn how to extend the 'calculate!' macro to be variadic.",
    "keywords": "Rust, Programming, Variadic Interfaces, Macros, Macro Expansion"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Variadic Interfaces",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 编程中的可变参数接口",
      "description": "在本实验中，我们探索可变参数接口，即可以接受任意数量参数的接口。例如，我们将上一节中的 `calculate!` 宏修改为可变参数形式，使其能够一次性计算多个表达式。",
      "meta": {
        "title": "Rust 编程 | 可变参数接口 | 宏展开",
        "description": "探索 Rust 中的可变参数接口，这是一个强大的编程概念，允许函数接受任意数量的参数。学习如何将 `calculate!` 宏扩展为可变参数形式。",
        "keywords": "Rust, 编程, 可变参数接口, 宏, 宏展开"
      },
      "details": {
        "steps": [
          {
            "title": "可变参数接口",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Interfaces Variádicas en el Programa de Rust",
      "description": "En este laboratorio, exploramos interfaces variádicas, que son interfaces que pueden tomar un número arbitrario de argumentos. Como ejemplo, modificamos la macro calculate! de la sección anterior para que sea variádica, lo que permite evaluar múltiples expresiones a la vez.",
      "meta": {
        "title": "Programación de Rust | Interfaces Variádicas | Expansión de Macro",
        "description": "Explore interfaces variádicas en Rust, un concepto de programación poderoso que permite que las funciones acepten un número arbitrario de argumentos. Aprenda cómo extender la macro 'calculate!' para que sea variádica.",
        "keywords": "Rust, Programación, Interfaces Variádicas, Macros, Expansión de Macro"
      },
      "details": {
        "steps": [
          {
            "title": "Interfaces Variádicas",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "En este momento, este paso no tiene verificaciones",
                "file": "verify1-1.sh",
                "hint": "En este momento, este paso no tiene verificaciones"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Interfaces variadiques en programmation Rust",
      "description": "Dans ce laboratoire, nous explorons les interfaces variadiques, qui sont des interfaces qui peuvent prendre un nombre arbitraire d'arguments. Par exemple, nous modifions la macro calculate! de la section précédente pour qu'elle soit variadique, permettant d'évaluer plusieurs expressions d'un coup.",
      "meta": {
        "title": "Programmation Rust | Interfaces variadiques | Expansion de macro",
        "description": "Explorez les interfaces variadiques en Rust, un concept de programmation puissant qui permet aux fonctions d'accepter un nombre arbitraire d'arguments. Découvrez comment étendre la macro 'calculate!' pour qu'elle soit variadique.",
        "keywords": "Rust, Programmation, Interfaces variadiques, Macros, Expansion de macro"
      },
      "details": {
        "steps": [
          {
            "title": "Interfaces variadiques",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Variadische Schnittstellen in der Rust-Programmierung",
      "description": "In diesem Lab untersuchen wir variadische Schnittstellen, das sind Schnittstellen, die beliebig viele Argumente akzeptieren können. Als Beispiel ändern wir die calculate!-Makro aus dem vorherigen Abschnitt, um es variadisch zu machen, sodass es mehrere Ausdrücke gleichzeitig auswerten kann.",
      "meta": {
        "title": "Rust-Programmierung | Variadische Schnittstellen | Makroexpansion",
        "description": "Entdecken Sie variadische Schnittstellen in Rust, ein leistungsstarkes Programmierkonzept, das Funktionen ermöglicht, beliebig viele Argumente zu akzeptieren. Lernen Sie, wie Sie das 'calculate!' Makro erweitern, um es variadisch zu machen.",
        "keywords": "Rust, Programmierung, Variadische Schnittstellen, Makros, Makroexpansion"
      },
      "details": {
        "steps": [
          {
            "title": "Variadische Schnittstellen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust プログラミングにおける可変個インターフェイス",
      "description": "この実験では、任意の数の引数を取ることができる可変個インターフェイスを調べます。例として、前節の calculate! マクロを可変個に変更して、一度に複数の式を評価できるようにします。",
      "meta": {
        "title": "Rust プログラミング | 可変個インターフェイス | マクロ展開",
        "description": "Rust における可変個インターフェイスを探りましょう。これは、関数が任意の数の引数を受け付けることができる強力なプログラミング概念です。'calculate!' マクロを可変個に拡張する方法を学びましょう。",
        "keywords": "Rust, プログラミング, 可変個インターフェイス, マクロ, マクロ展開"
      },
      "details": {
        "steps": [
          {
            "title": "可変個インターフェイス",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップは現在検証がありません",
                "file": "verify1-1.sh",
                "hint": "このステップは現在検証がありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Переменные интерфейсы в программировании на Rust",
      "description": "В этом лабораторном задании мы исследуем переменные интерфейсы, то есть интерфейсы, которые могут принимать произвольное количество аргументов. В качестве примера мы модифицируем макрос calculate! из предыдущего раздела, чтобы он был переменным, позволяя одновременно вычислять несколько выражений.",
      "meta": {
        "title": "Программирование на Rust | Переменные интерфейсы | Расширение макроса",
        "description": "Изучите переменные интерфейсы в Rust, мощный концепцию программирования, которая позволяет функциям принимать произвольное количество аргументов. Узнайте, как расширить макрос 'calculate!' для его использования в переменном виде.",
        "keywords": "Rust, Программирование, Переменные интерфейсы, Макросы, Расширение макроса"
      },
      "details": {
        "steps": [
          {
            "title": "Переменные интерфейсы",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
