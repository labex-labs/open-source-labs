{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Rust Macros Designators Introduction",
  "description": "In this lab, we are introduced to the concept of designators in Rust macros. Designators are used to prefix the arguments of a macro and are type annotated. Some examples of designators include ident for variable/function names, expr for expressions, block for blocks of code, and pat for patterns. These designators are used within macro rules to generate code based on the provided arguments.",
  "meta": {
    "title": "Rust Macros | Designators | Programming Tutorials",
    "description": "Explore the concept of designators in Rust macros, including ident, expr, block, and more. Learn how to use these type-annotated arguments to generate dynamic code.",
    "keywords": "Rust, Macros, Designators, Programming, Tutorials"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Designators",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/operator_overloading",
          "rust/type_casting",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 宏指示符介绍",
      "description": "在本实验中，我们将介绍 Rust 宏中的指示符概念。指示符用于在宏的参数前加上前缀，并进行类型注释。指示符的一些示例包括用于变量/函数名的 ident、用于表达式的 expr、用于代码块的 block 以及用于模式的 pat。这些指示符在宏规则中用于根据提供的参数生成代码。",
      "meta": {
        "title": "Rust 宏 | 指示符 | 编程教程",
        "description": "探索 Rust 宏中的指示符概念，包括 ident、expr、block 等等。学习如何使用这些带类型注释的参数来生成动态代码。",
        "keywords": "Rust, 宏，指示符，编程，教程"
      },
      "details": {
        "steps": [
          {
            "title": "指示符",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Introducción a los Designadores de los Macros de Rust",
      "description": "En este laboratorio, se nos introduce el concepto de designadores en los macros de Rust. Los designadores se utilizan para prefijar los argumentos de un macro y están anotados por tipo. Algunos ejemplos de designadores incluyen ident para nombres de variables/funciones, expr para expresiones, block para bloques de código y pat para patrones. Estos designadores se utilizan dentro de las reglas de macro para generar código basado en los argumentos proporcionados.",
      "meta": {
        "title": "Macros de Rust | Designadores | Tutoriales de Programación",
        "description": "Explora el concepto de designadores en los macros de Rust, incluyendo ident, expr, block y más. Aprende cómo utilizar estos argumentos con anotación de tipo para generar código dinámico.",
        "keywords": "Rust, Macros, Designadores, Programación, Tutoriales"
      },
      "details": {
        "steps": [
          {
            "title": "Designadores",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "En este momento, este paso no tiene verificación",
                "file": "verify1-1.sh",
                "hint": "En este momento, este paso no tiene verificación"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Présentation des désignateurs dans les macros Rust",
      "description": "Dans ce laboratoire, nous sommes introduits au concept de désignateurs dans les macros Rust. Les désignateurs sont utilisés pour préfixer les arguments d'une macro et sont annotés avec un type. Certains exemples de désignateurs incluent ident pour les noms de variables / fonctions, expr pour les expressions, block pour les blocs de code et pat pour les motifs. Ces désignateurs sont utilisés dans les règles de macro pour générer du code en fonction des arguments fournis.",
      "meta": {
        "title": "Macros Rust | Désignateurs | Didacticiels de programmation",
        "description": "Explorez le concept de désignateurs dans les macros Rust, y compris ident, expr, block et plus encore. Apprenez à utiliser ces arguments annotés avec un type pour générer du code dynamique.",
        "keywords": "Rust, Macros, Désignateurs, Programmation, Didacticiels"
      },
      "details": {
        "steps": [
          {
            "title": "Désignateurs",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Einführung in die Bezeichner von Rust-Makros",
      "description": "In diesem Lab werden wir auf das Konzept der Bezeichner in Rust-Makros eingewiesen. Bezeichner werden verwendet, um die Argumente eines Makros voranzustellen und sind typannotiert. Einige Beispiele für Bezeichner sind ident für Variablennamen/Funktionsnamen, expr für Ausdrücke, block für Codeblöcke und pat für Muster. Diese Bezeichner werden innerhalb von Makrosregeln verwendet, um Code basierend auf den bereitgestellten Argumenten zu generieren.",
      "meta": {
        "title": "Rust-Makros | Bezeichner | Programmier-Tutorials",
        "description": "Erkunden Sie das Konzept der Bezeichner in Rust-Makros, einschließlich ident, expr, block und mehr. Lernen Sie, wie Sie diese typannotierten Argumente verwenden, um dynamischen Code zu generieren.",
        "keywords": "Rust, Makros, Bezeichner, Programmierung, Tutorials"
      },
      "details": {
        "steps": [
          {
            "title": "Bezeichner",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust マクロの指定子の紹介",
      "description": "この実験では、Rust マクロにおける指定子の概念について学びます。指定子は、マクロの引数に接頭辞を付けるために使用され、型付きです。指定子の例としては、変数/関数名用の ident、式用の expr、コードブロック用の block、パターン用の pat などがあります。これらの指定子は、マクロ規則の中で、提供された引数に基づいてコードを生成するために使用されます。",
      "meta": {
        "title": "Rust マクロ | 指定子 | プログラミングチュートリアル",
        "description": "Rust マクロにおける指定子の概念を探り、ident、expr、block などを含めて学びましょう。これらの型付きの引数を使って動的なコードを生成する方法を学びましょう。",
        "keywords": "Rust, マクロ，指定子，プログラミング，チュートリアル"
      },
      "details": {
        "steps": [
          {
            "title": "指定子",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在、検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在、検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Введение в указатели в макросах Rust",
      "description": "В этой лабе мы познакомимся с концепцией указателей в макросах Rust. Указатели используются для добавления префикса к аргументам макроса и имеют тип, к которому они относятся. Некоторые примеры указателей включают ident для имен переменных/функций, expr для выражений, block для блоков кода и pat для шаблонов. Эти указатели используются в правилах макросов для генерации кода на основе предоставленных аргументов.",
      "meta": {
        "title": "Макросы Rust | Указатели | Руководства по программированию",
        "description": "Изучите концепцию указателей в макросах Rust, включая ident, expr, block и другие. Изучите, как использовать эти аргументы с типом для генерации динамического кода.",
        "keywords": "Rust, Макросы, Указатели, Программирование, Руководства"
      },
      "details": {
        "steps": [
          {
            "title": "Указатели",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "Rust 매크로 디자인자 소개",
      "description": "이 랩에서는 Rust 매크로의 디자인자 개념을 소개합니다. 디자인자는 매크로의 인수에 접두사로 사용되며 타입 어노테이션됩니다. 디자인자의 예시로는 변수/함수 이름에 사용되는 ident, 표현식에 사용되는 expr, 코드 블록에 사용되는 block, 패턴에 사용되는 pat 등이 있습니다. 이러한 디자인자는 제공된 인수를 기반으로 코드를 생성하기 위해 매크로 규칙 내에서 사용됩니다.",
      "meta": {
        "title": "Rust 매크로 | 디자인자 | 프로그래밍 튜토리얼",
        "description": "ident, expr, block 등을 포함한 Rust 매크로의 디자인자 개념을 살펴보세요. 이러한 타입 어노테이션된 인수를 사용하여 동적 코드를 생성하는 방법을 알아보세요.",
        "keywords": "Rust, 매크로, 디자인자, 프로그래밍, 튜토리얼, 러스트"
      },
      "details": {
        "steps": [
          {
            "title": "디자인자",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Introdução aos Designadores de Macros Rust",
      "description": "Neste laboratório, somos introduzidos ao conceito de designadores em macros Rust. Designadores são usados para prefixar os argumentos de uma macro e são anotados com tipo. Alguns exemplos de designadores incluem `ident` para nomes de variáveis/funções, `expr` para expressões, `block` para blocos de código e `pat` para padrões. Esses designadores são usados dentro das regras da macro para gerar código com base nos argumentos fornecidos.",
      "meta": {
        "title": "Macros Rust | Designadores | Tutoriais de Programação",
        "description": "Explore o conceito de designadores em macros Rust, incluindo `ident`, `expr`, `block` e muito mais. Aprenda como usar esses argumentos com anotação de tipo para gerar código dinâmico.",
        "keywords": "Rust, Macros, Designadores, Programação, Tutoriais"
      },
      "details": {
        "steps": [
          {
            "title": "Designadores",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
