{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Rust Lifetime and Trait Bounds",
  "description": "In this lab, we learn about bounds in Rust, which are used to restrict the lifetimes or traits of generic types. The : character is used to indicate that all references in a type must outlive a certain lifetime, while + is used to indicate that a type must implement a trait and all references in it must outlive a certain lifetime. An example code snippet demonstrates the syntax and usage of bounds in Rust.",
  "meta": {
    "title": "Rust Bounds | Programming Tutorials | Lifetime Constraints",
    "description": "Learn about bounds in Rust, which are used to restrict the lifetimes or traits of generic types. Explore the syntax and usage of bounds in Rust programming.",
    "keywords": "Rust, Bounds, Lifetime Constraints, Programming Tutorials, Generic Types"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Bounds",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/operator_overloading",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 生命周期与特性边界",
      "description": "在本实验中，我们学习 Rust 中的边界，其用于限制泛型类型的生命周期或特性。冒号（:）字符用于表明类型中的所有引用必须比某个生命周期更长，而加号（+）用于表明类型必须实现某个特性且其中的所有引用必须比某个生命周期更长。一个示例代码片段展示了 Rust 中边界的语法和用法。",
      "meta": {
        "title": "Rust 边界 | 编程教程 | 生命周期约束",
        "description": "了解 Rust 中的边界，其用于限制泛型类型的生命周期或特性。探索 Rust 编程中边界的语法和用法。",
        "keywords": "Rust, 边界，生命周期约束，编程教程，泛型类型"
      },
      "details": {
        "steps": [
          {
            "title": "边界",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Límites de período de vida y rasgos en Rust",
      "description": "En este laboratorio, aprendemos sobre los límites en Rust, que se utilizan para restringir los períodos de vida o los rasgos de los tipos genéricos. El carácter : se utiliza para indicar que todas las referencias en un tipo deben tener un período de vida mayor que un cierto período de vida, mientras que + se utiliza para indicar que un tipo debe implementar un rasgo y todas las referencias en él deben tener un período de vida mayor que un cierto período de vida. Un fragmento de código de ejemplo demuestra la sintaxis y el uso de los límites en Rust.",
      "meta": {
        "title": "Límites de Rust | Tutoriales de programación | Restricciones de período de vida",
        "description": "Aprende sobre los límites en Rust, que se utilizan para restringir los períodos de vida o los rasgos de los tipos genéricos. Explora la sintaxis y el uso de los límites en la programación de Rust.",
        "keywords": "Rust, Límites, Restricciones de período de vida, Tutoriales de programación, Tipos genéricos"
      },
      "details": {
        "steps": [
          {
            "title": "Límites",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "En este momento, este paso no tiene verificaciones",
                "file": "verify1-1.sh",
                "hint": "En este momento, este paso no tiene verificaciones"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Bornes de durée de vie et de trait en Rust",
      "description": "Dans ce laboratoire, nous apprenons les bornes en Rust, qui sont utilisées pour restreindre les durées de vie ou les traits des types génériques. Le caractère : est utilisé pour indiquer que toutes les références dans un type doivent avoir une durée de vie supérieure à une certaine durée de vie, tandis que + est utilisé pour indiquer qu'un type doit implémenter un trait et que toutes les références dans ce type doivent avoir une durée de vie supérieure à une certaine durée de vie. Un extrait de code exemple montre la syntaxe et l'utilisation des bornes en Rust.",
      "meta": {
        "title": "Bornes en Rust | Didacticiels de programmation | Contraintes de durée de vie",
        "description": "Apprenez les bornes en Rust, qui sont utilisées pour restreindre les durées de vie ou les traits des types génériques. Explorez la syntaxe et l'utilisation des bornes dans la programmation Rust.",
        "keywords": "Rust, Bornes, Contraintes de durée de vie, Didacticiels de programmation, Types génériques"
      },
      "details": {
        "steps": [
          {
            "title": "Bornes",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Rust Lebensdauer und Trait-Begrenzungen",
      "description": "In diesem Lab lernen wir über die Begrenzungen in Rust, die verwendet werden, um die Lebensdauern oder Traits von generischen Typen einzuschränken. Das Zeichen : wird verwendet, um anzuzeigen, dass alle Referenzen in einem Typ eine bestimmte Lebensdauer überdauern müssen, während + verwendet wird, um anzuzeigen, dass ein Typ ein bestimmtes Trait implementieren muss und alle darin enthaltenen Referenzen eine bestimmte Lebensdauer überdauern müssen. Ein Beispielcodeausschnitt zeigt die Syntax und Verwendung von Begrenzungen in Rust.",
      "meta": {
        "title": "Rust-Begrenzungen | Programmier-Tutorials | Lebensdauer-Beschränkungen",
        "description": "Lernen Sie über die Begrenzungen in Rust, die verwendet werden, um die Lebensdauern oder Traits von generischen Typen einzuschränken. Entdecken Sie die Syntax und Verwendung von Begrenzungen in der Rust-Programmierung.",
        "keywords": "Rust, Begrenzungen, Lebensdauer-Beschränkungen, Programmier-Tutorials, Generische Typen"
      },
      "details": {
        "steps": [
          {
            "title": "Begrenzungen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust の寿命とトレイト境界",
      "description": "この実験では、Rust における境界について学びます。境界は、ジェネリック型の寿命やトレイトを制限するために使用されます。`:` 文字は、型内のすべての参照が特定の寿命よりも長くなければならないことを示すために使用されます。一方、`+` は、型がトレイトを実装し、その型内のすべての参照が特定の寿命よりも長くなければならないことを示すために使用されます。コードのサンプルを用いて、Rust における境界の構文と使い方を示します。",
      "meta": {
        "title": "Rust の境界 | プログラミングチュートリアル | 寿命制約",
        "description": "Rust における境界について学びましょう。境界は、ジェネリック型の寿命やトレイトを制限するために使用されます。Rust プログラミングにおける境界の構文と使い方を探りましょう。",
        "keywords": "Rust, 境界，寿命制約，プログラミングチュートリアル，ジェネリック型"
      },
      "details": {
        "steps": [
          {
            "title": "境界",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Границы жизни и трейтов в Rust",
      "description": "В этой лабораторной работе мы изучаем границы в Rust, которые используются для ограничения жизненных периодов или трейтов обобщенных типов. Символ : используется для указания того, что все ссылки в типе должны иметь более длительный срок жизни, в то время как + используется для указания того, что тип должен реализовать трейт и все ссылки в нем должны иметь более длительный срок жизни. Примерный фрагмент кода демонстрирует синтаксис и использование границ в Rust.",
      "meta": {
        "title": "Границы в Rust | Руководства по программированию | Ограничения жизненного периода",
        "description": "Изучите границы в Rust, которые используются для ограничения жизненных периодов или трейтов обобщенных типов. Исследуйте синтаксис и использование границ в программировании на Rust.",
        "keywords": "Rust, Границы, Ограничения жизненного периода, Руководства по программированию, Обобщенные типы"
      },
      "details": {
        "steps": [
          {
            "title": "Границы",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "Rust 라이프타임 및 트레이트 바운드",
      "description": "이 랩에서는 Rust 의 바운드에 대해 배우며, 이는 제네릭 타입의 라이프타임 또는 트레이트를 제한하는 데 사용됩니다. `:` 문자는 타입 내의 모든 참조가 특정 라이프타임보다 오래 지속되어야 함을 나타내는 데 사용되며, `+` 는 타입이 트레이트를 구현해야 하고 그 안의 모든 참조가 특정 라이프타임보다 오래 지속되어야 함을 나타내는 데 사용됩니다. 예제 코드 스니펫은 Rust 에서 바운드의 구문과 사용법을 보여줍니다.",
      "meta": {
        "title": "Rust 바운드 | 프로그래밍 튜토리얼 | 라이프타임 제약",
        "description": "제네릭 타입의 라이프타임 또는 트레이트를 제한하는 데 사용되는 Rust 의 바운드에 대해 알아보세요. Rust 프로그래밍에서 바운드의 구문과 사용법을 탐구하세요.",
        "keywords": "Rust, 바운드, 라이프타임 제약, 프로그래밍 튜토리얼, 제네릭 타입, 러스트, 제약 조건, 생명주기"
      },
      "details": {
        "steps": [
          {
            "title": "바운드",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Rust *Lifetime* e *Trait Bounds*",
      "description": "Neste laboratório, aprendemos sobre *bounds* (limites) em Rust, que são usados para restringir os *lifetimes* (tempo de vida) ou *traits* (características) de tipos genéricos. O caractere `:` é usado para indicar que todas as referências em um tipo devem sobreviver a um determinado *lifetime*, enquanto `+` é usado para indicar que um tipo deve implementar uma *trait* e todas as referências nele devem sobreviver a um determinado *lifetime*. Um trecho de código de exemplo demonstra a sintaxe e o uso de *bounds* em Rust.",
      "meta": {
        "title": "*Bounds* em Rust | Tutoriais de Programação | Restrições de *Lifetime* (Tempo de Vida)",
        "description": "Aprenda sobre *bounds* (limites) em Rust, que são usados para restringir os *lifetimes* (tempo de vida) ou *traits* (características) de tipos genéricos. Explore a sintaxe e o uso de *bounds* na programação Rust. Descubra como usar *bounds* para otimizar seu código Rust e garantir a segurança de tipos.",
        "keywords": "Rust, *Bounds*, Restrições de *Lifetime*, Tutoriais de Programação, Tipos Genéricos, Programação Rust, *Lifetime* em Rust, *Traits* em Rust, Limites em Rust"
      },
      "details": {
        "steps": [
          {
            "title": "*Bounds* (Limites)",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Esta etapa não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Esta etapa não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
