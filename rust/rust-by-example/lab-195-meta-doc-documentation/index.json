{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Cargo Documentation Generation and Testing",
  "description": "In this lab, you can use cargo doc to build documentation in target/doc. You can also use cargo test to run all tests, including documentation tests, and cargo test --doc to only run documentation tests. Doc comments, denoted by ///, are compiled into documentation by rustdoc and support Markdown. These comments are useful for documenting code in big projects. Doc attributes, such as inline, no_inline, and hidden, are frequently used with rustdoc. Rustdoc is widely used by the community for generating documentation, including the standard library docs.",
  "meta": {
    "title": "Rust Documentation | Cargo | Rustdoc | Code Documentation",
    "description": "Learn how to use Cargo and Rustdoc to build, test, and document your Rust code. Discover the power of doc comments, doc attributes, and the Rust community's approach to documentation.",
    "keywords": "Rust, Documentation, Cargo, Rustdoc, Code Documentation, Markdown, Testing"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Documentation",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/operator_overloading",
          "rust/traits"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用 Cargo 生成和测试文档",
      "description": "在本实验中，你可以使用 cargo doc 在 target/doc 中生成文档。你还可以使用 cargo test 运行所有测试，包括文档测试，以及使用 cargo test --doc 仅运行文档测试。由 /// 表示的文档注释会被 rustdoc 编译为文档，并支持 Markdown。这些注释对于在大型项目中记录代码很有用。文档属性，如 inline、no_inline 和 hidden，经常与 rustdoc 一起使用。Rustdoc 在社区中被广泛用于生成文档，包括标准库文档。",
      "meta": {
        "title": "Rust 文档 | Cargo | Rustdoc | 代码文档",
        "description": "了解如何使用 Cargo 和 Rustdoc 来构建、测试和记录你的 Rust 代码。探索文档注释、文档属性的强大功能以及 Rust 社区的文档编写方法。",
        "keywords": "Rust, 文档，Cargo, Rustdoc, 代码文档，Markdown, 测试"
      },
      "details": {
        "steps": [
          {
            "title": "文档",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Generación y prueba de documentación de Cargo",
      "description": "En este laboratorio, puedes usar cargo doc para generar documentación en target/doc. También puedes usar cargo test para ejecutar todas las pruebas, incluyendo las pruebas de documentación, y cargo test --doc para ejecutar solo las pruebas de documentación. Los comentarios de documentación, denotados por ///, se compilan en documentación por rustdoc y admiten Markdown. Estos comentarios son útiles para documentar el código en grandes proyectos. Los atributos de documentación, como inline, no_inline y hidden, se usan con frecuencia con rustdoc. Rustdoc es ampliamente utilizado por la comunidad para generar documentación, incluyendo la documentación de la biblioteca estándar.",
      "meta": {
        "title": "Documentación de Rust | Cargo | Rustdoc | Documentación de Código",
        "description": "Aprende cómo usar Cargo y Rustdoc para construir, probar y documentar tu código Rust. Descubre el poder de los comentarios de documentación, los atributos de documentación y el enfoque de la comunidad Rust para la documentación.",
        "keywords": "Rust, Documentación, Cargo, Rustdoc, Documentación de Código, Markdown, Pruebas"
      },
      "details": {
        "steps": [
          {
            "title": "Documentación",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Génération et test de la documentation avec Cargo",
      "description": "Dans ce laboratoire, vous pouvez utiliser cargo doc pour générer la documentation dans target/doc. Vous pouvez également utiliser cargo test pour exécuter tous les tests, y compris les tests de documentation, et cargo test --doc pour n'exécuter que les tests de documentation. Les commentaires de documentation, dénotés par ///, sont compilés en documentation par rustdoc et prennent en charge Markdown. Ces commentaires sont utiles pour documenter le code dans de grands projets. Les attributs de documentation, tels que inline, no_inline et hidden, sont fréquemment utilisés avec rustdoc. Rustdoc est largement utilisé par la communauté pour générer de la documentation, y compris les docs de la bibliothèque standard.",
      "meta": {
        "title": "Documentation Rust | Cargo | Rustdoc | Documentation de code",
        "description": "Découvrez comment utiliser Cargo et Rustdoc pour construire, tester et documenter votre code Rust. Découvrez le pouvoir des commentaires de documentation, des attributs de documentation et de l'approche de la communauté Rust en matière de documentation.",
        "keywords": "Rust, Documentation, Cargo, Rustdoc, Documentation de code, Markdown, Tests"
      },
      "details": {
        "steps": [
          {
            "title": "Documentation",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Cargo-Dokumentation generieren und testen",
      "description": "In diesem Lab können Sie `cargo doc` verwenden, um die Dokumentation in `target/doc` zu erstellen. Sie können auch `cargo test` verwenden, um alle Tests, einschließlich der Dokumentationstests, auszuführen, und `cargo test --doc`, um nur die Dokumentationstests auszuführen. Doc-Kommentare, gekennzeichnet durch `///`, werden von `rustdoc` in die Dokumentation kompiliert und unterstützen Markdown. Diese Kommentare sind nützlich, um den Code in großen Projekten zu dokumentieren. Doc-Attribute wie `inline`, `no_inline` und `hidden` werden häufig mit `rustdoc` verwendet. `Rustdoc` wird von der Community weit verbreitet zur Generierung von Dokumentation verwendet, einschließlich der Standardbibliothek-Dokumentationen.",
      "meta": {
        "title": "Rust-Dokumentation | Cargo | Rustdoc | Code-Dokumentation",
        "description": "Lernen Sie, wie Sie Cargo und Rustdoc verwenden, um Ihren Rust-Code zu erstellen, zu testen und zu dokumentieren. Entdecken Sie die Macht von Doc-Kommentaren, Doc-Attributen und dem Ansatz der Rust-Community zur Dokumentation.",
        "keywords": "Rust, Dokumentation, Cargo, Rustdoc, Code-Dokumentation, Markdown, Testing"
      },
      "details": {
        "steps": [
          {
            "title": "Dokumentation",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Cargo によるドキュメント生成とテスト",
      "description": "この実験では、cargo doc を使って target/doc にドキュメントを生成できます。また、cargo test を使ってすべてのテスト、ドキュメントテストも含めて実行したり、cargo test --doc を使ってドキュメントテストのみを実行したりできます。///で表されるドキュメントコメントは、rustdoc によってドキュメントにコンパイルされ、Markdown をサポートしています。これらのコメントは、大規模なプロジェクトのコードをドキュメント化するのに役立ちます。inline、no_inline、hidden などのドキュメント属性は、頻繁に rustdoc とともに使用されます。Rustdoc は、コミュニティによって広く使用されており、標準ライブラリのドキュメントを含むドキュメント生成に使用されています。",
      "meta": {
        "title": "Rust のドキュメント | Cargo | Rustdoc | コードドキュメント",
        "description": "Cargo と Rustdoc を使って Rust コードを構築、テスト、ドキュメント化する方法を学びましょう。ドキュメントコメント、ドキュメント属性、そして Rust コミュニティのドキュメント化手法の力を発見しましょう。",
        "keywords": "Rust, ドキュメント，Cargo, Rustdoc, コードドキュメント，Markdown, テスト"
      },
      "details": {
        "steps": [
          {
            "title": "ドキュメント",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在検証項目がありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在検証項目がありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Генерация и тестирование документации Cargo",
      "description": "В этом лабораторном задании вы можете использовать cargo doc для создания документации в target/doc. Также вы можете использовать cargo test для запуска всех тестов, включая тесты документации, и cargo test --doc для запуска только тестов документации. Doc-комментарии, обозначенные ///, компилируются в документацию с помощью rustdoc и поддерживают Markdown. Эти комментарии полезны для документирования кода в крупных проектах. Doc-атрибуты, такие как inline, no_inline и hidden, часто используются вместе с rustdoc. Rustdoc широко используется сообществом для генерации документации, в том числе и для документации стандартной библиотеки.",
      "meta": {
        "title": "Документация Rust | Cargo | Rustdoc | Документация кода",
        "description": "Изучите, как использовать Cargo и Rustdoc для построения, тестирования и документирования кода на Rust. Откройте силу doc-комментариев, doc-атрибутов и подхода сообщества Rust к документации.",
        "keywords": "Rust, Документация, Cargo, Rustdoc, Документация кода, Markdown, Тестирование"
      },
      "details": {
        "steps": [
          {
            "title": "Документация",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "Cargo 문서 생성 및 테스트",
      "description": "이 실습에서는 cargo doc 를 사용하여 target/doc에 문서를 생성할 수 있습니다. cargo test 를 사용하여 모든 테스트 (문서 테스트 포함) 를 실행하거나, cargo test --doc 를 사용하여 문서 테스트만 실행할 수 있습니다. ///로 표시되는 문서 주석은 rustdoc 에 의해 문서로 컴파일되며 Markdown 을 지원합니다. 이러한 주석은 대규모 프로젝트에서 코드를 문서화하는 데 유용합니다. inline, no_inline, hidden 과 같은 문서 속성은 rustdoc 와 자주 사용됩니다. Rustdoc 은 표준 라이브러리 문서를 포함하여 문서를 생성하는 데 커뮤니티에서 널리 사용됩니다.",
      "meta": {
        "title": "Rust 문서화 | Cargo | Rustdoc | 코드 문서화",
        "description": "Cargo 와 Rustdoc 를 사용하여 Rust 코드를 빌드, 테스트 및 문서화하는 방법을 배우십시오. 문서 주석, 문서 속성 및 Rust 커뮤니티의 문서화 접근 방식의 힘을 발견하십시오.",
        "keywords": "Rust, 문서화, Cargo, Rustdoc, 코드 문서화, Markdown, 테스트, Rust 개발, 문서 생성, 코드 설명, 프로젝트 문서화"
      },
      "details": {
        "steps": [
          {
            "title": "문서화",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Geração e Teste de Documentação Cargo",
      "description": "Neste laboratório, pode utilizar o cargo doc para construir documentação em target/doc. Também pode usar o cargo test para executar todos os testes, incluindo testes de documentação, e cargo test --doc para executar apenas testes de documentação. Comentários de documentação, denotados por ///, são compilados em documentação pelo rustdoc e suportam Markdown. Estes comentários são úteis para documentar código em grandes projetos. Atributos de documentação, como inline, no_inline e hidden, são frequentemente utilizados com o rustdoc. O rustdoc é amplamente utilizado pela comunidade para gerar documentação, incluindo a documentação da biblioteca padrão.",
      "meta": {
        "title": "Documentação Rust | Cargo | Rustdoc | Documentação de Código",
        "description": "Aprenda a utilizar o Cargo e o Rustdoc para construir, testar e documentar o seu código Rust. Descubra o poder dos comentários de documentação, atributos de documentação e a abordagem da comunidade Rust para a documentação.",
        "keywords": "Rust, Documentação, Cargo, Rustdoc, Documentação de Código, Markdown, Testes, Documentação Rust, Gerar Documentação, Cargo Documentação, Testes de Documentação"
      },
      "details": {
        "steps": [
          {
            "title": "Documentação",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
