{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Rust Enum Concepts and Type Aliases",
  "description": "In this lab, we learn about enums in Rust, which allow the creation of a type that can have multiple variants, including unit-like, tuple structs, and c-like structures. We also see how to define enum variants and use pattern matching to handle different variants. Additionally, we explore type aliases, which provide a way to refer to each enum variant via an alias, making the code more concise and readable.",
  "meta": {
    "title": "Rust Enums and Type Aliases | Programming Fundamentals",
    "description": "Learn about enums, a powerful feature in Rust that allows creating custom data types with multiple variants, and how to use type aliases to make your code more concise and readable.",
    "keywords": "Rust, Enums, Type Aliases, Programming Fundamentals, Data Structures"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Enums",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/method_syntax",
          "rust/operator_overloading",
          "rust/string_type",
          "rust/traits",
          "rust/type_casting",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 枚举概念与类型别名",
      "description": "在本实验中，我们学习 Rust 中的枚举，它允许创建一种可以具有多个变体的类型，包括类似单元类型、元组结构体和类 C 结构体。我们还将了解如何定义枚举变体，并使用模式匹配来处理不同的变体。此外，我们将探索类型别名，它提供了一种通过别名引用每个枚举变体的方法，使代码更简洁易读。",
      "meta": {
        "title": "Rust 枚举与类型别名 | 编程基础",
        "description": "了解 Rust 中的枚举，这是一项强大的功能，可用于创建具有多个变体的自定义数据类型，以及如何使用类型别名使代码更简洁易读。",
        "keywords": "Rust, 枚举，类型别名，编程基础，数据结构"
      },
      "details": {
        "steps": [
          {
            "title": "枚举",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Conceptos de Enumerados (`enums`) y Alias de Tipo en Rust",
      "description": "En este laboratorio, aprendemos sobre los enumerados (`enums`) en Rust, que permiten crear un tipo que puede tener múltiples variantes, incluyendo variantes sin campos, structs tupla y estructuras similares a las de C. También vemos cómo definir variantes de enumerado y usar coincidencia de patrones para manejar diferentes variantes. Además, exploramos los alias de tipo, que proporcionan una forma de referirse a cada variante de enumerado a través de un alias, lo que hace que el código sea más conciso y legible.",
      "meta": {
        "title": "Enumerados (`enums`) y Alias de Tipo en Rust | Fundamentos de Programación",
        "description": "Aprende sobre los enumerados (`enums`), una característica poderosa en Rust que permite crear tipos de datos personalizados con múltiples variantes, y cómo usar alias de tipo para hacer que tu código sea más conciso y legible.",
        "keywords": "Rust, Enumerados (`enums`), Alias de Tipo, Fundamentos de Programación, Estructuras de Datos"
      },
      "details": {
        "steps": [
          {
            "title": "Enumerados (`enums`)",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificaciones en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificaciones en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Concepts des énumérations et des alias de type en Rust",
      "description": "Dans ce laboratoire, nous apprenons les énumérations en Rust, qui permettent de créer un type pouvant avoir plusieurs variantes, y compris des variantes de type unitaire, des structs tuple et des structures du type C. Nous verrons également comment définir les variantes d'une énumération et utiliser la correspondance de motifs pour gérer les différentes variantes. En outre, nous explorerons les alias de type, qui fournissent un moyen de faire référence à chaque variante d'énumération via un alias, rendant le code plus concise et lisible.",
      "meta": {
        "title": "Énumérations et alias de type en Rust | Fondamentaux de la programmation",
        "description": "Découvrez les énumérations, une fonctionnalité puissante en Rust qui permet de créer des types de données personnalisés avec plusieurs variantes, et apprenez à utiliser les alias de type pour rendre votre code plus concise et lisible.",
        "keywords": "Rust, Énumérations, Alias de type, Fondamentaux de la programmation, Structures de données"
      },
      "details": {
        "steps": [
          {
            "title": "Énumérations",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Rust Enum Konzepte und Typaliase",
      "description": "In diesem Lab lernen wir über Enums in Rust, die es ermöglichen, einen Typ zu erstellen, der mehrere Varianten haben kann, einschließlich unit-ähnlicher, Tupelstrukturen und c-ähnlicher Strukturen. Wir sehen auch, wie man Enum-Varianten definiert und Musterzuweisung verwendet, um verschiedene Varianten zu behandeln. Darüber hinaus untersuchen wir Typaliase, die eine Möglichkeit bieten, auf jede Enum-Variante über einen Alias zu verweisen, was den Code kürzer und lesbarer macht.",
      "meta": {
        "title": "Rust Enums und Typaliase | Programmiergrundlagen",
        "description": "Lernen Sie über Enums, eine leistungsstarke Funktion in Rust, die es ermöglicht, benutzerdefinierte Datentypen mit mehreren Varianten zu erstellen, und wie Sie Typaliase verwenden, um Ihren Code kürzer und lesbarer zu machen.",
        "keywords": "Rust, Enums, Typaliase, Programmiergrundlagen, Datenstrukturen"
      },
      "details": {
        "steps": [
          {
            "title": "Enums",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust の列挙型の概念と型エイリアス",
      "description": "この実験では、Rust の列挙型について学びます。列挙型を使うと、ユニット型のような、タプル構造体、C 言語のような構造体を含む、複数のバリアントを持つ型を作成できます。また、列挙型のバリアントを定義し、パターンマッチングを使って異なるバリアントを処理する方法も学びます。さらに、型エイリアスについても見てみます。型エイリアスを使うと、列挙型の各バリアントをエイリアスで参照できるようになり、コードをより簡潔で読みやすくすることができます。",
      "meta": {
        "title": "Rust の列挙型と型エイリアス | プログラミングの基礎",
        "description": "Rust の強力な機能である列挙型について学び、複数のバリアントを持つカスタムデータ型を作成する方法と、型エイリアスを使ってコードをより簡潔で読みやすくする方法を学びましょう。",
        "keywords": "Rust, 列挙型，型エイリアス，プログラミングの基礎，データ構造"
      },
      "details": {
        "steps": [
          {
            "title": "列挙型",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Концепции перечислений (`enum`) и псевдонимы типов в Rust",
      "description": "В этом практическом занятии мы изучаем перечисления (`enum`) в Rust, которые позволяют создавать тип, который может иметь несколько вариантов, в том числе варианты, похожие на единицы (`unit`), кортежные структуры (`tuple structs`) и структуры, похожие на C (`c-like structures`). Мы также узнаем, как определить варианты перечисления и использовать сопоставление с образцом (`pattern matching`) для обработки различных вариантов. Кроме того, мы исследуем псевдонимы типов (`type aliases`), которые предоставляют способ ссылаться на каждый вариант перечисления через псевдоним, делая код более компактным и читаемым.",
      "meta": {
        "title": "Перечисления (`enum`) и псевдонимы типов в Rust | Основы программирования",
        "description": "Изучите перечисления (`enum`), мощный инструмент в Rust, который позволяет создавать пользовательские типы данных с несколькими вариантами, и узнайте, как использовать псевдонимы типов, чтобы сделать ваш код более компактным и читаемым.",
        "keywords": "Rust, Перечисления (`enum`), Псевдонимы типов, Основы программирования, Структуры данных"
      },
      "details": {
        "steps": [
          {
            "title": "Перечисления (`enum`)",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
