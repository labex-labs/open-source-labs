{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Rust Literals and Type Specification",
  "description": "In this lab, we learn about literals in Rust and how to specify their types by adding a suffix. Suffixed literals have their types known at initialization, while unsuffixed literals' types depend on how they are used. The size_of_val function is used to determine the size of a variable in bytes, and it is called with its full path, std::mem::size_of_val. The size_of_val function is defined in the mem module, which is in turn defined in the std crate.",
  "meta": {
    "title": "Rust Literals | Programming Fundamentals",
    "description": "Learn about literals in Rust and how to specify their types using suffixes. Explore unsuffixed literals and the size_of_val function.",
    "keywords": "Rust, Literals, Type Annotation, size_of_val, Programming Fundamentals"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Literals",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/method_syntax",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 字面量与类型指定",
      "description": "在本实验中，我们学习 Rust 中的字面量，以及如何通过添加后缀来指定它们的类型。带后缀的字面量在初始化时就已知其类型，而无后缀的字面量的类型则取决于它们的使用方式。`size_of_val` 函数用于确定变量以字节为单位的大小，它通过其完整路径 `std::mem::size_of_val` 来调用。`size_of_val` 函数在 `mem` 模块中定义，而 `mem` 模块又在 `std` 包中定义。",
      "meta": {
        "title": "Rust 字面量 | 编程基础",
        "description": "了解 Rust 中的字面量以及如何使用后缀指定其类型。探索无后缀字面量和 `size_of_val` 函数。",
        "keywords": "Rust, 字面量, 类型注释, size_of_val, 编程基础"
      },
      "details": {
        "steps": [
          {
            "title": "字面量",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Literales y especificación de tipos en Rust",
      "description": "En este laboratorio, aprendemos sobre los literales en Rust y cómo especificar sus tipos agregando un sufijo. Los literales con sufijo tienen sus tipos conocidos en la inicialización, mientras que los tipos de los literales sin sufijo dependen de cómo se usan. La función size_of_val se utiliza para determinar el tamaño de una variable en bytes, y se llama con su ruta completa, std::mem::size_of_val. La función size_of_val está definida en el módulo mem, que a su vez está definido en el crat std.",
      "meta": {
        "title": "Literales de Rust | Fundamentos de programación",
        "description": "Aprende sobre los literales en Rust y cómo especificar sus tipos usando sufijos. Explora los literales sin sufijo y la función size_of_val.",
        "keywords": "Rust, Literales, Anotación de tipo, size_of_val, Fundamentos de programación"
      },
      "details": {
        "steps": [
          {
            "title": "Literales",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "En este momento, este paso no tiene verificaciones",
                "file": "verify1-1.sh",
                "hint": "En este momento, este paso no tiene verificaciones"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Constantes littérales et spécification de type en Rust",
      "description": "Dans ce laboratoire, nous apprenons les constantes littérales en Rust et comment spécifier leur type en ajoutant un suffixe. Les constantes littérales suffixées ont leur type connu lors de l'initialisation, tandis que les types des constantes littérales non suffixées dépendent de la manière dont elles sont utilisées. La fonction size_of_val est utilisée pour déterminer la taille d'une variable en octets, et elle est appelée avec son chemin complet, std::mem::size_of_val. La fonction size_of_val est définie dans le module mem, qui est lui-même défini dans la boîte à outils std.",
      "meta": {
        "title": "Constantes littérales en Rust | Fondements de la programmation",
        "description": "Découvrez les constantes littérales en Rust et comment spécifier leur type en utilisant des suffixes. Explorez les constantes littérales non suffixées et la fonction size_of_val.",
        "keywords": "Rust, Constantes littérales, Annotation de type, size_of_val, Fondements de la programmation"
      },
      "details": {
        "steps": [
          {
            "title": "Constantes littérales",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Rust Literale und Typspezifikation",
      "description": "In diesem Lab lernen wir über Literale in Rust und wie wir ihren Typ durch Hinzufügen eines Suffixes angeben können. Suffixed Literale haben ihren Typ bei der Initialisierung bekannt, während der Typ von unsuffixed Literalen von der Verwendung abhängt. Die size_of_val-Funktion wird verwendet, um die Größe einer Variable in Bytes zu bestimmen, und sie wird mit ihrem vollständigen Pfad std::mem::size_of_val aufgerufen. Die size_of_val-Funktion ist in das mem-Modul definiert, das wiederum im std-Kasten definiert ist.",
      "meta": {
        "title": "Rust Literale | Programmierungselemente",
        "description": "Lernen Sie über Literale in Rust und wie Sie ihren Typ mit Suffixen angeben können. Entdecken Sie unsuffixed Literale und die size_of_val-Funktion.",
        "keywords": "Rust, Literale, Typannotation, size_of_val, Programmierungselemente"
      },
      "details": {
        "steps": [
          {
            "title": "Literale",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rustのリテラルと型指定",
      "description": "この実験では、Rustのリテラルと、サフィックスを追加することでその型を指定する方法について学びます。サフィックス付きのリテラルは初期化時に型が既知であり、サフィックスなしのリテラルの型はその使用方法に依存します。`size_of_val`関数は、バイト数で変数のサイズを決定するために使用され、完全修飾名`std::mem::size_of_val`で呼び出されます。`size_of_val`関数は`mem`モジュールに定義されており、それはさらに`std`クレートに定義されています。",
      "meta": {
        "title": "Rustのリテラル | プログラミングの基礎",
        "description": "Rustのリテラルと、サフィックスを使ってその型を指定する方法について学びましょう。サフィックスなしのリテラルと`size_of_val`関数を探りましょう。",
        "keywords": "Rust, リテラル, 型付け, size_of_val, プログラミングの基礎"
      },
      "details": {
        "steps": [
          {
            "title": "リテラル",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップは現在検証がありません",
                "file": "verify1-1.sh",
                "hint": "このステップは現在検証がありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Rust Литералы и Указание Типа",
      "description": "В этом практическом занятии мы узнаем о литералах в Rust и о том, как указывать их типы, добавляя суффикс. Литералы с суффиксом имеют известный тип при инициализации, в то время как типы несуффиксных литералов зависят от того, как они используются. Функция size_of_val используется для определения размера переменной в байтах, и она вызывается с полным путём, std::mem::size_of_val. Функция size_of_val определена в модуле mem, который, в свою очередь, определён в коробке std.",
      "meta": {
        "title": "Rust Литералы | Основы Программирования",
        "description": "Изучите литералы в Rust и способы указания их типов с использованием суффиксов. Исследуйте несуффиксные литералы и функцию size_of_val.",
        "keywords": "Rust, Литералы, Аннотация Типа, size_of_val, Основы Программирования"
      },
      "details": {
        "steps": [
          {
            "title": "Литералы",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
