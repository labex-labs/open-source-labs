{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Foreign Function Interface",
  "description": "In this lab, we learn about Rust's Foreign Function Interface (FFI) that allows interaction with C libraries by declaring foreign functions within an extern block and annotating them with a #[link] attribute containing the name of the foreign library. The code example demonstrates the usage of FFI to call external functions from the libm library, such as computing the square root of a single precision complex number and calculating the cosine of a complex number. Safe wrappers are commonly used around these unsafe foreign function calls. The lab also includes a minimal implementation of single precision complex numbers and demonstrates how to call safe APIs wrapped around unsafe operations.",
  "meta": {
    "title": "Mastering Rust's Foreign Function Interface",
    "description": "Explore Rust's FFI for interacting with C libraries and learn how to call external functions safely.",
    "keywords": "rust playground, c libraries, ffi, rust tutor, complex numbers, rust online compiler, rust commands, rust practice, rust online, foreign function interface"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Foreign Function Interface",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "外部函数接口",
      "description": "在本实验中，我们将学习 Rust 的外部函数接口（FFI），它允许通过在 extern 块中声明外部函数，并使用包含外部库名称的#[link] 属性对其进行注释，从而与 C 库进行交互。代码示例展示了如何使用 FFI 调用 libm 库中的外部函数，比如计算单精度复数的平方根以及计算复数的余弦值。在这些不安全的外部函数调用周围通常会使用安全包装器。本实验还包括单精度复数的最小实现，并演示了如何调用围绕不安全操作包装的安全 API。",
      "meta": {
        "title": "掌握 Rust 的外部函数接口",
        "description": "探索 Rust 的 FFI 以与 C 库进行交互，并学习如何安全地调用外部函数。",
        "keywords": "Rust 游乐场，C 库，FFI, Rust 教程，复数，Rust 在线编译器，Rust 命令，Rust 练习，Rust 在线，外部函数接口"
      },
      "details": {
        "steps": [
          {
            "title": "外部函数接口",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Interfaz de Funciones Extranjeras",
      "description": "En este laboratorio, aprendemos sobre la Interfaz de Funciones Extranjeras (FFI, por sus siglas en inglés) de Rust, que permite interactuar con bibliotecas C al declarar funciones externas dentro de un bloque extern y anotarlas con un atributo #[link] que contiene el nombre de la biblioteca externa. El ejemplo de código demuestra el uso de la FFI para llamar a funciones externas de la biblioteca libm, como calcular la raíz cuadrada de un número complejo de precisión simple y calcular el coseno de un número complejo. A menudo, se utilizan envoltorios seguros alrededor de estas llamadas a funciones externas no seguras. El laboratorio también incluye una implementación mínima de números complejos de precisión simple y demuestra cómo llamar a APIs seguras envueltas en operaciones no seguras.",
      "meta": {
        "title": "Dominando la Interfaz de Funciones Extranjeras de Rust",
        "description": "Explora la FFI de Rust para interactuar con bibliotecas C y aprende a llamar a funciones externas de manera segura.",
        "keywords": "rust playground, bibliotecas c, ffi, tutor de rust, números complejos, compilador en línea de rust, comandos de rust, práctica de rust, rust en línea, interfaz de funciones extranjeras"
      },
      "details": {
        "steps": [
          {
            "title": "Interfaz de Funciones Extranjeras",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "En este momento, este paso no tiene verificaciones",
                "file": "verify1-1.sh",
                "hint": "En este momento, este paso no tiene verificaciones"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Interface de Fonctions Étrangères",
      "description": "Dans ce laboratoire, nous étudions l'Interface de Fonctions Étrangères (FFI) de Rust qui permet d'interagir avec des bibliothèques C en déclarant des fonctions étrangères dans un bloc extern et en les annotant avec un attribut #[link] contenant le nom de la bibliothèque étrangère. L'exemple de code montre comment utiliser l'FFI pour appeler des fonctions externes de la bibliothèque libm, telles que le calcul de la racine carrée d'un nombre complexe à précision simple et le calcul du cosinus d'un nombre complexe. Des enveloppes sécurisées sont généralement utilisées autour de ces appels de fonctions étrangères non sécurisées. Le laboratoire inclut également une implémentation minimale de nombres complexes à précision simple et montre comment appeler des API sécurisées encapsulant des opérations non sécurisées.",
      "meta": {
        "title": "Maîtriser l'Interface de Fonctions Étrangères de Rust",
        "description": "Explorez l'FFI de Rust pour interagir avec des bibliothèques C et apprenez à appeler des fonctions externes en toute sécurité.",
        "keywords": "plateforme de pratique Rust, bibliothèques C, FFI, tutoriel Rust, nombres complexes, compilateur en ligne Rust, commandes Rust, pratique Rust, Rust en ligne, interface de fonctions étrangères"
      },
      "details": {
        "steps": [
          {
            "title": "Interface de Fonctions Étrangères",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Foreign Function Interface",
      "description": "In diesem Lab lernen wir über Rusts Foreign Function Interface (FFI), das es ermöglicht, mit C-Bibliotheken zu interagieren, indem wir fremde Funktionen innerhalb eines extern-Blocks deklarieren und sie mit einem #[link]-Attribut versehen, das den Namen der fremden Bibliothek enthält. Das Codebeispiel zeigt die Verwendung von FFI, um externe Funktionen aus der libm-Bibliothek aufzurufen, wie das Berechnen der Quadratwurzel einer einfachen Gleitkommazahl und die Berechnung des Kosinus einer komplexen Zahl. Safe Wrapper werden üblicherweise um diese unsicheren fremden Funktionsaufrufe verwendet. Das Lab enthält auch eine minimale Implementierung von einfachen Gleitkommazahlen und zeigt, wie man sichere APIs aufruft, die um unsichere Operationen gewrappt sind.",
      "meta": {
        "title": "Meisterung von Rusts Foreign Function Interface",
        "description": "Erkunden Sie Rusts FFI für die Interaktion mit C-Bibliotheken und lernen Sie, wie Sie externe Funktionen sicher aufrufen.",
        "keywords": "rust playground, c libraries, ffi, rust tutor, complex numbers, rust online compiler, rust commands, rust practice, rust online, foreign function interface"
      },
      "details": {
        "steps": [
          {
            "title": "Foreign Function Interface",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "外部関数インターフェイス",
      "description": "この実験では、Rust の外部関数インターフェイス（FFI）について学びます。FFI を使うことで、`extern` ブロック内で外部関数を宣言し、それに対して外部ライブラリ名を含む `#[link]` 属性を付与することで、C ライブラリとの相互作用が可能になります。コード例では、`libm` ライブラリからの外部関数を呼び出す FFI の使い方を示しており、たとえば単精度複素数の平方根を計算したり、複素数の余弦を計算したりします。これらの非セーフな外部関数呼び出しの周りには、セーフなラッパーが一般的に使われます。この実験ではまた、単精度複素数の最小限の実装も含まれており、非セーフな操作をラップしたセーフな API をどのように呼び出すかを示しています。",
      "meta": {
        "title": "Rust の外部関数インターフェイスをマスターする",
        "description": "C ライブラリとの相互作用のための Rust の FFI を探り、安全に外部関数を呼び出す方法を学びましょう。",
        "keywords": "rust playground, C ライブラリ，FFI, rust tutor, 複素数，rust オンラインコンパイラ，rust コマンド，rust 練習，rust オンライン，外部関数インターフェイス"
      },
      "details": {
        "steps": [
          {
            "title": "外部関数インターフェイス",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップは現在検証がありません",
                "file": "verify1-1.sh",
                "hint": "このステップは現在検証がありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Foreign Function Interface",
      "description": "В этом лабе мы узнаем о Foreign Function Interface (FFI) Rust, который позволяет взаимодействовать с библиотеками на C, объявляя внешние функции в блоке extern и аннотируя их атрибутом #[link], содержащим имя внешней библиотеки. Пример кода демонстрирует использование FFI для вызова внешних функций из библиотеки libm, таких как вычисление квадратного корня из комплексного числа с одинарной точностью и вычисление косинуса комплексного числа. Обычно вокруг этих небезопасных вызовов внешних функций используются безопасные обертки. В лабе также представлена минимальная реализация комплексных чисел с одинарной точностью и показано, как вызывать безопасные API, обернутые вокруг небезопасных операций.",
      "meta": {
        "title": "Осваиваем Foreign Function Interface Rust",
        "description": "Изучайте FFI Rust для взаимодействия с библиотеками на C и узнайте, как безопасно вызывать внешние функции.",
        "keywords": "rust playground, c библиотеки, ffi, rust tutor, комплексные числа, rust онлайн-компилятор, rust команды, практика rust, rust онлайн, foreign function interface"
      },
      "details": {
        "steps": [
          {
            "title": "Foreign Function Interface",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "외래 함수 인터페이스",
      "description": "이 실습에서는 Rust 의 외래 함수 인터페이스 (FFI) 를 학습합니다. FFI 를 통해 extern 블록 내에 외래 함수를 선언하고, #[link] 속성으로 외래 라이브러리 이름을 지정하여 C 라이브러리와 상호 작용할 수 있습니다. 코드 예제는 libm 라이브러리의 외부 함수를 호출하는 방법을 보여줍니다. 예를 들어, 단정밀도 복소수의 제곱근을 계산하고 복소수의 코사인을 계산하는 방법을 포함합니다. 이러한 위험한 외래 함수 호출에는 일반적으로 안전한 래퍼가 사용됩니다. 또한, 단정밀도 복소수의 최소 구현과 안전하지 않은 연산을 감싸는 안전한 API 를 호출하는 방법을 보여줍니다.",
      "meta": {
        "title": "Rust 외래 함수 인터페이스 마스터하기",
        "description": "C 라이브러리와 상호 작용하기 위한 Rust 의 FFI 를 탐색하고 안전하게 외부 함수를 호출하는 방법을 배워보세요.",
        "keywords": "러스트 연습장, C 라이브러리, FFI, 러스트 튜터, 복소수, 러스트 온라인 컴파일러, 러스트 명령어, 러스트 연습, 러스트 온라인, 외래 함수 인터페이스, 러스트 FFI 실습, 러스트 외래 함수 호출, libm 라이브러리, 단정밀도 복소수"
      },
      "details": {
        "steps": [
          {
            "title": "외래 함수 인터페이스",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Interface de Função Estrangeira",
      "description": "Neste laboratório, aprendemos sobre a Interface de Função Estrangeira (FFI) do Rust, que permite a interação com bibliotecas C declarando funções estrangeiras dentro de um bloco extern e anotando-as com um atributo #[link] contendo o nome da biblioteca estrangeira. O exemplo de código demonstra o uso da FFI para chamar funções externas da biblioteca libm, como calcular a raiz quadrada de um número complexo de precisão única e calcular o cosseno de um número complexo. Wrappers seguros são comumente usados em torno dessas chamadas de funções estrangeiras inseguras. O laboratório também inclui uma implementação mínima de números complexos de precisão única e demonstra como chamar APIs seguras envolvendo operações inseguras.",
      "meta": {
        "title": "Dominando a Interface de Função Estrangeira do Rust",
        "description": "Explore a FFI do Rust para interagir com bibliotecas C e aprenda como chamar funções externas de forma segura.",
        "keywords": "playground rust, bibliotecas C, ffi, tutorial rust, números complexos, compilador online rust, comandos rust, prática rust, rust online, interface de função estrangeira, rust ffi exemplos,  tutoriais rust ffi,  ffi rust libm,  chamadas de funções externas rust"
      },
      "details": {
        "steps": [
          {
            "title": "Interface de Função Estrangeira",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
