{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Rust Formatting and Display Trait",
  "description": "In this lab, we learned about formatting in Rust and how to use the format! macro to format variables. We saw that formatting is specified using a format string, and different argument types can be used to format the same variable in different ways. The most common formatting trait is Display, which handles cases where the argument type is left unspecified. We saw an example of implementing the Display trait for a City struct, where we formatted the latitude and longitude values. We also saw an example of a Color struct and were tasked with implementing the Display trait for it to display the RGB values and their hexadecimal representation.",
  "meta": {
    "title": "Rust Formatting Fundamentals | Programming Tutorial",
    "description": "Learn the basics of formatting in Rust, including using the format! macro and implementing the Display trait. Explore examples and activities to enhance your Rust coding skills.",
    "keywords": "Rust, formatting, Display trait, programming tutorial, coding, format macro"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Formatting",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/floating_types",
          "rust/for_loop",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/method_syntax",
          "rust/string_type",
          "rust/traits",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 格式化与 Display 特性",
      "description": "在本实验中，我们学习了 Rust 中的格式化以及如何使用 format! 宏来格式化变量。我们了解到格式化是通过格式字符串指定的，并且可以使用不同的参数类型以不同的方式格式化同一个变量。最常见的格式化特性是 Display，它处理参数类型未指定的情况。我们看到了一个为 City 结构体实现 Display 特性的示例，在该示例中我们格式化了纬度和经度值。我们还看到了一个 Color 结构体的示例，并被要求为其实现 Display 特性以显示 RGB 值及其十六进制表示形式。",
      "meta": {
        "title": "Rust 格式化基础 | 编程教程",
        "description": "学习 Rust 中格式化的基础知识，包括使用 format! 宏和实现 Display 特性。探索示例和活动以提升你的 Rust 编码技能。",
        "keywords": "Rust, 格式化, Display 特性, 编程教程, 编码, 格式宏"
      },
      "details": {
        "steps": [
          {
            "title": "格式化",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
