{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Rust Loops and Ranges",
  "description": "In this lab, we learn about using for loops and ranges in Rust. We can use the for loop along with the range notation a..b to iterate through a range of values. For example, we can write the FizzBuzz program using a for loop instead of a while loop. Additionally, we can use the ..= notation for a range that is inclusive on both ends. The for loop can also interact with iterators in different ways, such as using iter to borrow each element of a collection, into_iter to consume the collection, or iter_mut to mutably borrow each element of the collection. Each of these methods provides a different view of the data within the collection, allowing for different actions to be performed.",
  "meta": {
    "title": "Rust Programming | for Loops and Ranges",
    "description": "Learn how to use for loops and ranges in Rust programming language. Explore different iterator methods to interact with collections.",
    "keywords": "Rust, for loops, ranges, iterators, FizzBuzz, programming tutorials"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "for loops",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/for_loop",
          "rust/function_syntax",
          "rust/method_syntax",
          "rust/mutable_variables",
          "rust/string_type",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 循环与范围",
      "description": "在本实验中，我们学习如何在 Rust 中使用 `for` 循环和范围。我们可以将 `for` 循环与范围表示法 `a..b` 一起使用，以遍历一系列值。例如，我们可以使用 `for` 循环而不是 `while` 循环来编写 FizzBuzz 程序。此外，对于两端都包含的范围，我们可以使用 `..=` 表示法。`for` 循环还可以以不同的方式与迭代器进行交互，例如使用 `iter` 来借用集合的每个元素，使用 `into_iter` 来消耗集合，或者使用 `iter_mut` 来可变地借用集合的每个元素。这些方法中的每一种都提供了对集合中数据的不同视图，从而允许执行不同的操作。",
      "meta": {
        "title": "Rust 编程 | `for` 循环与范围",
        "description": "了解如何在 Rust 编程语言中使用 `for` 循环和范围。探索与集合进行交互的不同迭代器方法。",
        "keywords": "Rust, `for` 循环, 范围, 迭代器, FizzBuzz, 编程教程"
      },
      "details": {
        "steps": [
          {
            "title": "`for` 循环",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
