{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Rust Loops and Ranges",
  "description": "In this lab, we learn about using for loops and ranges in Rust. We can use the for loop along with the range notation a..b to iterate through a range of values. For example, we can write the FizzBuzz program using a for loop instead of a while loop. Additionally, we can use the ..= notation for a range that is inclusive on both ends. The for loop can also interact with iterators in different ways, such as using iter to borrow each element of a collection, into_iter to consume the collection, or iter_mut to mutably borrow each element of the collection. Each of these methods provides a different view of the data within the collection, allowing for different actions to be performed.",
  "meta": {
    "title": "Rust Programming | for Loops and Ranges",
    "description": "Learn how to use for loops and ranges in Rust programming language. Explore different iterator methods to interact with collections.",
    "keywords": "Rust, for loops, ranges, iterators, FizzBuzz, programming tutorials"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "for loops",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/for_loop",
          "rust/function_syntax",
          "rust/method_syntax",
          "rust/mutable_variables",
          "rust/string_type",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 循环与范围",
      "description": "在本实验中，我们学习如何在 Rust 中使用 `for` 循环和范围。我们可以将 `for` 循环与范围表示法 `a..b` 一起使用，以遍历一系列值。例如，我们可以使用 `for` 循环而不是 `while` 循环来编写 FizzBuzz 程序。此外，对于两端都包含的范围，我们可以使用 `..=` 表示法。`for` 循环还可以以不同的方式与迭代器进行交互，例如使用 `iter` 来借用集合的每个元素，使用 `into_iter` 来消耗集合，或者使用 `iter_mut` 来可变地借用集合的每个元素。这些方法中的每一种都提供了对集合中数据的不同视图，从而允许执行不同的操作。",
      "meta": {
        "title": "Rust 编程 | `for` 循环与范围",
        "description": "了解如何在 Rust 编程语言中使用 `for` 循环和范围。探索与集合进行交互的不同迭代器方法。",
        "keywords": "Rust, `for` 循环, 范围, 迭代器, FizzBuzz, 编程教程"
      },
      "details": {
        "steps": [
          {
            "title": "`for` 循环",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Bucles y rangos en Rust",
      "description": "En este laboratorio, aprendemos a usar los bucles `for` y los rangos en Rust. Podemos usar el bucle `for` junto con la notación de rango `a..b` para iterar a través de un rango de valores. Por ejemplo, podemos escribir el programa FizzBuzz usando un bucle `for` en lugar de un bucle `while`. Además, podemos usar la notación `..=` para un rango que es inclusivo en ambos extremos. El bucle `for` también puede interactuar con los iteradores de diferentes maneras, como usando `iter` para prestar prestado cada elemento de una colección, `into_iter` para consumir la colección o `iter_mut` para prestar prestado mutuamente cada elemento de la colección. Cada uno de estos métodos proporciona una vista diferente de los datos dentro de la colección, lo que permite realizar diferentes acciones.",
      "meta": {
        "title": "Programación en Rust | Bucles `for` y rangos",
        "description": "Aprende cómo usar los bucles `for` y los rangos en el lenguaje de programación Rust. Explora diferentes métodos de iterador para interactuar con las colecciones.",
        "keywords": "Rust, bucles `for`, rangos, iteradores, FizzBuzz, tutoriales de programación"
      },
      "details": {
        "steps": [
          {
            "title": "Bucles `for`",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "En este momento, este paso no tiene verificaciones",
                "file": "verify1-1.sh",
                "hint": "En este momento, este paso no tiene verificaciones"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Boucles et plages en Rust",
      "description": "Dans ce laboratoire, nous apprenons à utiliser les boucles `for` et les plages en Rust. Nous pouvons utiliser la boucle `for` avec la notation de plage `a..b` pour itérer sur une plage de valeurs. Par exemple, nous pouvons écrire le programme FizzBuzz en utilisant une boucle `for` au lieu d'une boucle `while`. De plus, nous pouvons utiliser la notation `..=` pour une plage qui est inclusive des deux côtés. La boucle `for` peut également interagir avec les itérateurs de différentes manières, par exemple en utilisant `iter` pour emprunter chaque élément d'une collection, `into_iter` pour consommer la collection ou `iter_mut` pour emprunter mutuellement chaque élément de la collection. Chacune de ces méthodes offre une vue différente des données à l'intérieur de la collection, permettant d'effectuer différentes actions.",
      "meta": {
        "title": "Programmation Rust | Boucles `for` et plages",
        "description": "Découvrez comment utiliser les boucles `for` et les plages dans le langage de programmation Rust. Explorez différentes méthodes d'itérateurs pour interagir avec les collections.",
        "keywords": "Rust, boucles `for`, plages, itérateurs, FizzBuzz, tutoriels de programmation"
      },
      "details": {
        "steps": [
          {
            "title": "Boucles `for`",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Rust Schleifen und Bereiche",
      "description": "In diesem Lab lernen wir, wie man in Rust `for`-Schleifen und Bereiche verwendet. Wir können die `for`-Schleife zusammen mit der Bereichsnotation `a..b` verwenden, um über einen Bereich von Werten zu iterieren. Beispielsweise können wir das FizzBuzz-Programm mit einer `for`-Schleife statt einer `while`-Schleife schreiben. Darüber hinaus können wir die Notation `..=` für einen Bereich verwenden, der an beiden Enden eingeschlossen ist. Die `for`-Schleife kann auch auf verschiedene Weise mit Iteratoren interagieren, z. B. indem man `iter` verwendet, um jedes Element einer Sammlung zu entleihen, `into_iter` verwendet, um die Sammlung zu konsumieren oder `iter_mut` verwendet, um jedes Element der Sammlung mutierbar zu entleihen. Jede dieser Methoden bietet eine andere Sicht auf die Daten innerhalb der Sammlung und ermöglicht somit verschiedene Aktionen.",
      "meta": {
        "title": "Rust-Programmierung | for-Schleifen und Bereiche",
        "description": "Lernen Sie, wie man in der Rust-Programmiersprache `for`-Schleifen und Bereiche verwendet. Entdecken Sie verschiedene Iterator-Methoden, um mit Sammlungen zu interagieren.",
        "keywords": "Rust, for-Schleifen, Bereiche, Iteratoren, FizzBuzz, Programmier-Tutorials"
      },
      "details": {
        "steps": [
          {
            "title": "for-Schleifen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rustのループと範囲",
      "description": "この実験では、Rustで`for`ループと範囲を使用する方法を学びます。`for`ループを範囲表記`a..b`とともに使用することで、値の範囲を反復処理できます。たとえば、`while`ループの代わりに`for`ループを使ってFizzBuzzプログラムを書くことができます。また、両端を含む範囲には`..=`表記を使用できます。`for`ループは、コレクションの各要素を借用する`iter`、コレクションを消費する`into_iter`、またはコレクションの各要素を可変的に借用する`iter_mut`など、さまざまな方法で反復子と相互作用することもできます。これらの各メソッドは、コレクション内のデータの異なるビューを提供し、さまざまなアクションを実行できるようにします。",
      "meta": {
        "title": "Rustプログラミング | forループと範囲",
        "description": "Rustプログラミング言語で`for`ループと範囲をどのように使用するか学びましょう。コレクションと相互作用するさまざまな反復子メソッドを探りましょう。",
        "keywords": "Rust, forループ, 範囲, 反復子, FizzBuzz, プログラミングチュートリアル"
      },
      "details": {
        "steps": [
          {
            "title": "forループ",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップは現在検証がありません",
                "file": "verify1-1.sh",
                "hint": "このステップは現在検証がありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Циклы и диапазоны в Rust",
      "description": "В этом практическом занятии мы узнаем, как использовать циклы for и диапазоны в Rust. Мы можем использовать цикл for вместе с записью диапазона a..b для перебора диапазона значений. Например, мы можем написать программу FizzBuzz с использованием цикла for вместо цикла while. Кроме того, мы можем использовать запись..= для диапазона, включающего оба конца. Цикл for также может взаимодействовать с итераторами по-разному, например, с использованием iter для взятия в долг каждого элемента коллекции, into_iter для потребления коллекции или iter_mut для изменяемого взятия в долг каждого элемента коллекции. Каждый из этих методов предоставляет другой вид данных внутри коллекции, что позволяет выполнять разные действия.",
      "meta": {
        "title": "Программирование на Rust | Циклы for и диапазоны",
        "description": "Изучите, как использовать циклы for и диапазоны в языке программирования Rust. Исследуйте разные методы итераторов для взаимодействия с коллекциями.",
        "keywords": "Rust, циклы for, диапазоны, итераторы, FizzBuzz, учебники по программированию"
      },
      "details": {
        "steps": [
          {
            "title": "Циклы for",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "В настоящий момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "В настоящий момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
