{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Accessing Command Line Arguments in Rust",
  "description": "In this lab, you can access command line arguments in Rust using the std::env::args function, which returns an iterator that yields a String for each argument. The first argument in the returned vector is the path used to call the program, while the rest of the arguments are the command line parameters. Alternatively, you can use crates like clap for more advanced command line argument handling.",
  "meta": {
    "title": "Rust Command Line Arguments | Programming Tutorials",
    "description": "Learn how to access command line arguments in Rust using the standard library or popular crates like Clap. Enhance your Rust programming skills with these tutorials.",
    "keywords": "Rust, Command Line Arguments, Programming Tutorials, Clap, Standard Library"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Program arguments",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "在 Rust 中访问命令行参数",
      "description": "在本实验中，你可以使用 `std::env::args` 函数在 Rust 中访问命令行参数，该函数返回一个迭代器，为每个参数生成一个 `String`。返回向量中的第一个参数是用于调用程序的路径，而其余参数是命令行参数。或者，你可以使用 `clap` 等 crate 进行更高级的命令行参数处理。",
      "meta": {
        "title": "Rust 命令行参数 | 编程教程",
        "description": "学习如何使用标准库或像 Clap 这样的流行 crate 在 Rust 中访问命令行参数。通过这些教程提升你的 Rust 编程技能。",
        "keywords": "Rust, 命令行参数，编程教程，Clap, 标准库"
      },
      "details": {
        "steps": [
          {
            "title": "程序参数",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Accediendo a los argumentos de línea de comandos en Rust",
      "description": "En este laboratorio, puedes acceder a los argumentos de línea de comandos en Rust utilizando la función std::env::args, que devuelve un iterador que produce una String para cada argumento. El primer argumento en el vector devuelto es la ruta utilizada para llamar al programa, mientras que el resto de los argumentos son los parámetros de línea de comandos. Alternativamente, puedes utilizar cajas como clap para un manejo más avanzado de los argumentos de línea de comandos.",
      "meta": {
        "title": "Argumentos de línea de comandos de Rust | Tutoriales de programación",
        "description": "Aprende cómo acceder a los argumentos de línea de comandos en Rust utilizando la biblioteca estándar o cajas populares como Clap. Mejora tus habilidades de programación en Rust con estos tutoriales.",
        "keywords": "Rust, Argumentos de línea de comandos, Tutoriales de programación, Clap, Biblioteca estándar"
      },
      "details": {
        "steps": [
          {
            "title": "Argumentos del programa",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificaciones en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificaciones en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Accéder aux arguments de ligne de commande en Rust",
      "description": "Dans ce laboratoire, vous pouvez accéder aux arguments de ligne de commande en Rust en utilisant la fonction std::env::args, qui renvoie un itérateur qui produit une chaîne de caractères (String) pour chaque argument. Le premier argument dans le vecteur renvoyé est le chemin utilisé pour appeler le programme, tandis que le reste des arguments sont les paramètres de ligne de commande. Alternativement, vous pouvez utiliser des crânes comme clap pour une gestion plus avancée des arguments de ligne de commande.",
      "meta": {
        "title": "Arguments de ligne de commande Rust | Tutoriels de programmation",
        "description": "Découvrez comment accéder aux arguments de ligne de commande en Rust en utilisant la bibliothèque standard ou des crânes populaires comme Clap. Améliorez vos compétences en programmation Rust avec ces tutoriels.",
        "keywords": "Rust, Arguments de ligne de commande, Tutoriels de programmation, Clap, Bibliothèque standard"
      },
      "details": {
        "steps": [
          {
            "title": "Arguments du programme",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Zugreifen auf Befehlszeilenargumente in Rust",
      "description": "In diesem Lab können Sie auf Befehlszeilenargumente in Rust zugreifen, indem Sie die Funktion std::env::args verwenden, die einen Iterator zurückgibt, der für jedes Argument eine String zurückgibt. Das erste Argument im zurückgegebenen Vektor ist der Pfad, der verwendet wird, um das Programm aufzurufen, während die restlichen Argumente die Befehlszeilenparameter sind. Alternativ können Sie Crates wie clap verwenden, um eine fortgeschrittene Behandlung von Befehlszeilenargumenten durchzuführen.",
      "meta": {
        "title": "Rust Befehlszeilenargumente | Programmier-Tutorials",
        "description": "Lernen Sie, wie Sie auf Befehlszeilenargumente in Rust mit der Standardbibliothek oder beliebigen Crates wie Clap zugreifen. Verbessern Sie Ihre Rust-Programmierkenntnisse mit diesen Tutorials.",
        "keywords": "Rust, Befehlszeilenargumente, Programmier-Tutorials, Clap, Standardbibliothek"
      },
      "details": {
        "steps": [
          {
            "title": "Programmargumente",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust でのコマンドライン引数のアクセス",
      "description": "この実験では、Rust でコマンドライン引数にアクセスするには `std::env::args` 関数を使用します。この関数は、各引数に対して `String` を生成する反復子を返します。返されるベクトルの最初の引数は、プログラムを呼び出すために使用されるパスであり、残りの引数はコマンドラインパラメータです。または、より高度なコマンドライン引数の処理には `clap` のようなクレートを使用できます。",
      "meta": {
        "title": "Rust のコマンドライン引数 | プログラミングチュートリアル",
        "description": "標準ライブラリや Clap のような人気のあるクレートを使って、Rust でコマンドライン引数にアクセスする方法を学びましょう。これらのチュートリアルで Rust のプログラミング技術を向上させましょう。",
        "keywords": "Rust, コマンドライン引数，プログラミングチュートリアル，Clap, 標準ライブラリ"
      },
      "details": {
        "steps": [
          {
            "title": "プログラム引数",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Доступ к аргументам командной строки в Rust",
      "description": "В этом лабораторном задании вы можете получать доступ к аргументам командной строки в Rust с использованием функции std::env::args, которая возвращает итератор, выдающий String для каждого аргумента. Первым аргументом в возвращаемом векторе является путь, используемый для вызова программы, а остальные аргументы - это параметры командной строки. Альтернативно, вы можете использовать такие пакеты, как clap, для более продвинутой обработки аргументов командной строки.",
      "meta": {
        "title": "Аргументы командной строки в Rust | Руководства по программированию",
        "description": "Изучите, как получать доступ к аргументам командной строки в Rust с использованием стандартной библиотеки или популярных пакетов, таких как Clap. Повысьте свои навыки в программировании на Rust с помощью этих руководств.",
        "keywords": "Rust, Аргументы командной строки, Руководства по программированию, Clap, Стандартная библиотека"
      },
      "details": {
        "steps": [
          {
            "title": "Аргументы программы",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "Rust 에서 명령줄 인수 접근하기",
      "description": "이 실습에서는 Rust 에서 `std::env::args` 함수를 사용하여 명령줄 인수에 접근하는 방법을 배웁니다. 이 함수는 각 인수에 대한 문자열을 반환하는 반복자를 제공합니다. 반환된 벡터의 첫 번째 인수는 프로그램 호출에 사용된 경로이고, 나머지 인수는 명령줄 매개변수입니다. 또는 더 고급 명령줄 인수 처리를 위해 clap 과 같은 크레이트를 사용할 수 있습니다.",
      "meta": {
        "title": "Rust 명령줄 인수 | 프로그래밍 튜토리얼",
        "description": "Rust 표준 라이브러리 또는 Clap 과 같은 인기 크레이트를 사용하여 Rust 에서 명령줄 인수에 접근하는 방법을 배우세요. 이 튜토리얼로 Rust 프로그래밍 기술을 향상시키세요.",
        "keywords": "Rust, 명령줄 인수, 프로그래밍 튜토리얼, Clap, 표준 라이브러리, Rust 명령줄 인수 처리, 명령줄 인수 받기, Rust 프로그래밍 가이드"
      },
      "details": {
        "steps": [
          {
            "title": "프로그램 인수",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Acessando Argumentos da Linha de Comando em Rust",
      "description": "Neste laboratório, você pode acessar argumentos da linha de comando em Rust usando a função std::env::args, que retorna um iterador que gera uma String para cada argumento. O primeiro argumento no vetor retornado é o caminho usado para chamar o programa, enquanto os demais argumentos são os parâmetros da linha de comando. Alternativamente, você pode usar pacotes (crates) como o clap para manipulação mais avançada de argumentos da linha de comando.",
      "meta": {
        "title": "Argumentos da Linha de Comando em Rust | Tutoriais de Programação",
        "description": "Aprenda como acessar argumentos da linha de comando em Rust usando a biblioteca padrão ou pacotes populares como o Clap. Aprimore suas habilidades de programação em Rust com esses tutoriais.",
        "keywords": "Rust, Argumentos da Linha de Comando, Tutoriais de Programação, Clap, Biblioteca Padrão"
      },
      "details": {
        "steps": [
          {
            "title": "Argumentos do Programa",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
