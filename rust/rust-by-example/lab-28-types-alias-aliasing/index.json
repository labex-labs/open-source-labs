{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Rust Aliasing: Enhancing Code Readability",
  "description": "In this lab, we learn about aliasing in Rust, which allows us to give a new name to an existing type using the type statement. Aliases must follow certain naming conventions, and can be used to create new names for primitive types or user-defined types. The main purpose of aliases is to reduce code duplication and improve readability.",
  "meta": {
    "title": "Rust Aliasing Fundamentals | Programming Tutorials",
    "description": "Explore the power of aliasing in Rust, a versatile programming language. Learn how to create new names for existing types and improve code readability.",
    "keywords": "Rust, Aliasing, Programming Tutorials, Code Readability, Type Aliases"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Aliasing",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/type_casting",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 别名：提升代码可读性",
      "description": "在本实验中，我们学习 Rust 中的别名，它允许我们使用 `type` 语句为现有类型赋予新名称。别名必须遵循特定的命名约定，可用于为原始类型或用户定义类型创建新名称。别名的主要目的是减少代码重复并提高可读性。",
      "meta": {
        "title": "Rust 别名基础 | 编程教程",
        "description": "探索 Rust 这一多功能编程语言中别名的强大功能。学习如何为现有类型创建新名称并提高代码可读性。",
        "keywords": "Rust, 别名, 编程教程, 代码可读性, 类型别名"
      },
      "details": {
        "steps": [
          {
            "title": "别名",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
