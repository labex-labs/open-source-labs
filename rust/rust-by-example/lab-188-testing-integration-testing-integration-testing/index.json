{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Rust Integration Testing Fundamentals",
  "description": "In this lab, integration testing is discussed, which involves testing multiple parts of a library together using its public interface. Integration tests can be placed in the tests directory next to the src directory in a Rust crate, and are executed using the cargo test command. Additionally, common code can be shared between integration tests by creating a module with public functions and importing it within the tests.",
  "meta": {
    "title": "Rust Integration Testing | Programming Tutorials",
    "description": "Learn about integration testing in Rust, which involves testing multiple parts of a library together using its public interface. Discover how to set up and run integration tests in your Rust projects.",
    "keywords": "Rust, Integration Testing, Programming Tutorials, Software Development, Testing Strategies"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Integration testing",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/method_syntax",
          "rust/module_system",
          "rust/operator_overloading"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust集成测试基础",
      "description": "在本实验中，我们将讨论集成测试，它涉及使用库的公共接口对库的多个部分进行一起测试。集成测试可以放在Rust包中src目录旁边的tests目录中，并使用cargo test命令执行。此外，可以通过创建具有公共函数的模块并在测试中导入它，在集成测试之间共享通用代码。",
      "meta": {
        "title": "Rust集成测试 | 编程教程",
        "description": "了解Rust中的集成测试，它涉及使用库的公共接口对库的多个部分进行一起测试。探索如何在你的Rust项目中设置和运行集成测试。",
        "keywords": "Rust, 集成测试, 编程教程, 软件开发, 测试策略"
      },
      "details": {
        "steps": [
          {
            "title": "集成测试",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Fundamentos del Testing de Integración en Rust",
      "description": "En este laboratorio, se discute el testing de integración, que implica probar múltiples partes de una biblioteca juntas utilizando su interfaz pública. Las pruebas de integración se pueden colocar en el directorio tests junto al directorio src en un crate de Rust, y se ejecutan utilizando el comando cargo test. Además, el código común se puede compartir entre las pruebas de integración creando un módulo con funciones públicas e importándolo dentro de las pruebas.",
      "meta": {
        "title": "Testing de Integración en Rust | Tutoriales de Programación",
        "description": "Aprende sobre el testing de integración en Rust, que implica probar múltiples partes de una biblioteca juntas utilizando su interfaz pública. Descubre cómo configurar y ejecutar pruebas de integración en tus proyectos de Rust.",
        "keywords": "Rust, Testing de Integración, Tutoriales de Programación, Desarrollo de Software, Estrategias de Testing"
      },
      "details": {
        "steps": [
          {
            "title": "Testing de integración",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Fondamentaux des tests d'intégration en Rust",
      "description": "Dans ce laboratoire, les tests d'intégration sont abordés, qui consistent à tester plusieurs parties d'une bibliothèque ensemble en utilisant son interface publique. Les tests d'intégration peuvent être placés dans le répertoire tests à côté du répertoire src dans une boîte à outils Rust, et sont exécutés en utilisant la commande cargo test. De plus, le code commun peut être partagé entre les tests d'intégration en créant un module avec des fonctions publiques et en l'import ant dans les tests.",
      "meta": {
        "title": "Tests d'intégration en Rust | Didacticiels de programmation",
        "description": "Découvrez les tests d'intégration en Rust, qui consistent à tester plusieurs parties d'une bibliothèque ensemble en utilisant son interface publique. Apprenez à configurer et à exécuter des tests d'intégration dans vos projets Rust.",
        "keywords": "Rust, Tests d'intégration, Didacticiels de programmation, Développement logiciel, Stratégies de test"
      },
      "details": {
        "steps": [
          {
            "title": "Tests d'intégration",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Grundlagen der Rust-Integrationstestung",
      "description": "In diesem Lab wird die Integrationstestung diskutiert, bei der mehrere Teile einer Bibliothek zusammen mithilfe ihrer öffentlichen Schnittstelle getestet werden. Integrationstests können im Verzeichnis tests neben dem Verzeichnis src in einem Rust-Crate platziert werden und mit dem Befehl cargo test ausgeführt werden. Darüber hinaus kann gemeinsamer Code zwischen Integrationstests geteilt werden, indem ein Modul mit öffentlichen Funktionen erstellt und innerhalb der Tests importiert wird.",
      "meta": {
        "title": "Rust-Integrationstestung | Programmier-Tutorials",
        "description": "Lernen Sie die Integrationstestung in Rust kennen, die das Zusammenprüfen mehrerer Teile einer Bibliothek über ihre öffentliche Schnittstelle umfasst. Entdecken Sie, wie Sie Integrationstests in Ihren Rust-Projekten einrichten und ausführen.",
        "keywords": "Rust, Integrationstestung, Programmier-Tutorials, Softwareentwicklung, Teststrategien"
      },
      "details": {
        "steps": [
          {
            "title": "Integrationstestung",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust統合テストの基本",
      "description": "この実験では、ライブラリの複数の部分をそのパブリックインターフェイスを使って一緒にテストする統合テストについて説明します。統合テストは、Rustクレートのsrcディレクトリの隣のtestsディレクトリに配置することができ、cargo testコマンドを使って実行されます。また、パブリック関数を持つモジュールを作成し、テスト内でインポートすることで、統合テスト間で共通のコードを共有することができます。",
      "meta": {
        "title": "Rust統合テスト | プログラミングチュートリアル",
        "description": "Rustにおける統合テストについて学びましょう。これは、ライブラリの複数の部分をそのパブリックインターフェイスを使って一緒にテストするものです。Rustプロジェクトで統合テストを設定して実行する方法を見つけましょう。",
        "keywords": "Rust, 統合テスト, プログラミングチュートリアル, ソフトウェア開発, テスト戦略"
      },
      "details": {
        "steps": [
          {
            "title": "統合テスト",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在、検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在、検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Основы интеграционного тестирования в Rust",
      "description": "В этом практическом занятии рассматривается интеграционное тестирование, которое включает в себя тестирование нескольких частей библиотеки вместе с использованием ее публичного интерфейса. Интеграционные тесты можно поместить в каталог tests рядом с каталогом src в коробке Rust, и выполнять их с помощью команды cargo test. Кроме того, общий код можно разделить между интеграционными тестами, создав модуль с публичными функциями и импортируя его в тестах.",
      "meta": {
        "title": "Интеграционное тестирование в Rust | Руководства по программированию",
        "description": "Изучите интеграционное тестирование в Rust, которое включает в себя тестирование нескольких частей библиотеки вместе с использованием ее публичного интерфейса. Узнать, как настраивать и запускать интеграционные тесты в своих проектах на Rust.",
        "keywords": "Rust, Интеграционное тестирование, Руководства по программированию, Разработка программного обеспечения, Стратегии тестирования"
      },
      "details": {
        "steps": [
          {
            "title": "Интеграционное тестирование",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
