{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Rust Integration Testing Fundamentals",
  "description": "In this lab, integration testing is discussed, which involves testing multiple parts of a library together using its public interface. Integration tests can be placed in the tests directory next to the src directory in a Rust crate, and are executed using the cargo test command. Additionally, common code can be shared between integration tests by creating a module with public functions and importing it within the tests.",
  "meta": {
    "title": "Rust Integration Testing | Programming Tutorials",
    "description": "Learn about integration testing in Rust, which involves testing multiple parts of a library together using its public interface. Discover how to set up and run integration tests in your Rust projects.",
    "keywords": "Rust, Integration Testing, Programming Tutorials, Software Development, Testing Strategies"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Integration testing",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/method_syntax",
          "rust/module_system",
          "rust/operator_overloading"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 集成测试基础",
      "description": "在本实验中，我们将讨论集成测试，它涉及使用库的公共接口对库的多个部分进行一起测试。集成测试可以放在 Rust 包中 src 目录旁边的 tests 目录中，并使用 cargo test 命令执行。此外，可以通过创建具有公共函数的模块并在测试中导入它，在集成测试之间共享通用代码。",
      "meta": {
        "title": "Rust 集成测试 | 编程教程",
        "description": "了解 Rust 中的集成测试，它涉及使用库的公共接口对库的多个部分进行一起测试。探索如何在你的 Rust 项目中设置和运行集成测试。",
        "keywords": "Rust, 集成测试，编程教程，软件开发，测试策略"
      },
      "details": {
        "steps": [
          {
            "title": "集成测试",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Fundamentos del Testing de Integración en Rust",
      "description": "En este laboratorio, se discute el testing de integración, que implica probar múltiples partes de una biblioteca juntas utilizando su interfaz pública. Las pruebas de integración se pueden colocar en el directorio tests junto al directorio src en un crate de Rust, y se ejecutan utilizando el comando cargo test. Además, el código común se puede compartir entre las pruebas de integración creando un módulo con funciones públicas e importándolo dentro de las pruebas.",
      "meta": {
        "title": "Testing de Integración en Rust | Tutoriales de Programación",
        "description": "Aprende sobre el testing de integración en Rust, que implica probar múltiples partes de una biblioteca juntas utilizando su interfaz pública. Descubre cómo configurar y ejecutar pruebas de integración en tus proyectos de Rust.",
        "keywords": "Rust, Testing de Integración, Tutoriales de Programación, Desarrollo de Software, Estrategias de Testing"
      },
      "details": {
        "steps": [
          {
            "title": "Testing de integración",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Fondamentaux des tests d'intégration en Rust",
      "description": "Dans ce laboratoire, les tests d'intégration sont abordés, qui consistent à tester plusieurs parties d'une bibliothèque ensemble en utilisant son interface publique. Les tests d'intégration peuvent être placés dans le répertoire tests à côté du répertoire src dans une boîte à outils Rust, et sont exécutés en utilisant la commande cargo test. De plus, le code commun peut être partagé entre les tests d'intégration en créant un module avec des fonctions publiques et en l'import ant dans les tests.",
      "meta": {
        "title": "Tests d'intégration en Rust | Didacticiels de programmation",
        "description": "Découvrez les tests d'intégration en Rust, qui consistent à tester plusieurs parties d'une bibliothèque ensemble en utilisant son interface publique. Apprenez à configurer et à exécuter des tests d'intégration dans vos projets Rust.",
        "keywords": "Rust, Tests d'intégration, Didacticiels de programmation, Développement logiciel, Stratégies de test"
      },
      "details": {
        "steps": [
          {
            "title": "Tests d'intégration",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Grundlagen der Rust-Integrationstestung",
      "description": "In diesem Lab wird die Integrationstestung diskutiert, bei der mehrere Teile einer Bibliothek zusammen mithilfe ihrer öffentlichen Schnittstelle getestet werden. Integrationstests können im Verzeichnis tests neben dem Verzeichnis src in einem Rust-Crate platziert werden und mit dem Befehl cargo test ausgeführt werden. Darüber hinaus kann gemeinsamer Code zwischen Integrationstests geteilt werden, indem ein Modul mit öffentlichen Funktionen erstellt und innerhalb der Tests importiert wird.",
      "meta": {
        "title": "Rust-Integrationstestung | Programmier-Tutorials",
        "description": "Lernen Sie die Integrationstestung in Rust kennen, die das Zusammenprüfen mehrerer Teile einer Bibliothek über ihre öffentliche Schnittstelle umfasst. Entdecken Sie, wie Sie Integrationstests in Ihren Rust-Projekten einrichten und ausführen.",
        "keywords": "Rust, Integrationstestung, Programmier-Tutorials, Softwareentwicklung, Teststrategien"
      },
      "details": {
        "steps": [
          {
            "title": "Integrationstestung",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust 統合テストの基本",
      "description": "この実験では、ライブラリの複数の部分をそのパブリックインターフェイスを使って一緒にテストする統合テストについて説明します。統合テストは、Rust クレートの src ディレクトリの隣の tests ディレクトリに配置することができ、cargo test コマンドを使って実行されます。また、パブリック関数を持つモジュールを作成し、テスト内でインポートすることで、統合テスト間で共通のコードを共有することができます。",
      "meta": {
        "title": "Rust 統合テスト | プログラミングチュートリアル",
        "description": "Rust における統合テストについて学びましょう。これは、ライブラリの複数の部分をそのパブリックインターフェイスを使って一緒にテストするものです。Rust プロジェクトで統合テストを設定して実行する方法を見つけましょう。",
        "keywords": "Rust, 統合テスト，プログラミングチュートリアル，ソフトウェア開発，テスト戦略"
      },
      "details": {
        "steps": [
          {
            "title": "統合テスト",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在、検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在、検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Основы интеграционного тестирования в Rust",
      "description": "В этом практическом занятии рассматривается интеграционное тестирование, которое включает в себя тестирование нескольких частей библиотеки вместе с использованием ее публичного интерфейса. Интеграционные тесты можно поместить в каталог tests рядом с каталогом src в коробке Rust, и выполнять их с помощью команды cargo test. Кроме того, общий код можно разделить между интеграционными тестами, создав модуль с публичными функциями и импортируя его в тестах.",
      "meta": {
        "title": "Интеграционное тестирование в Rust | Руководства по программированию",
        "description": "Изучите интеграционное тестирование в Rust, которое включает в себя тестирование нескольких частей библиотеки вместе с использованием ее публичного интерфейса. Узнать, как настраивать и запускать интеграционные тесты в своих проектах на Rust.",
        "keywords": "Rust, Интеграционное тестирование, Руководства по программированию, Разработка программного обеспечения, Стратегии тестирования"
      },
      "details": {
        "steps": [
          {
            "title": "Интеграционное тестирование",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "Rust 통합 테스트 기초",
      "description": "이 실습에서는 라이브러리의 공개 인터페이스를 사용하여 라이브러리의 여러 부분을 함께 테스트하는 통합 테스트에 대해 설명합니다. Rust 크레이트에서 통합 테스트는 src 디렉토리 옆의 tests 디렉토리에 배치할 수 있으며, cargo test 명령을 사용하여 실행합니다. 또한, 공개 함수가 있는 모듈을 만들고 테스트 내에서 가져와 사용하여 통합 테스트 간에 공통 코드를 공유할 수 있습니다.",
      "meta": {
        "title": "Rust 통합 테스트 | 프로그래밍 튜토리얼",
        "description": "Rust 에서 라이브러리의 여러 부분을 공개 인터페이스를 사용하여 함께 테스트하는 통합 테스트에 대해 알아보세요. Rust 프로젝트에서 통합 테스트를 설정하고 실행하는 방법을 배워보세요.",
        "keywords": "Rust, 통합 테스트, 프로그래밍 튜토리얼, 소프트웨어 개발, 테스트 전략, Rust 통합 테스트 가이드, Rust 테스트, Rust 코드 테스트"
      },
      "details": {
        "steps": [
          {
            "title": "통합 테스트",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증 항목이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증 항목이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Fundamentos de Teste de Integração em Rust",
      "description": "Neste laboratório, discutiremos testes de integração, que envolvem testar várias partes de uma biblioteca juntas usando sua interface pública. Os testes de integração podem ser colocados no diretório tests ao lado do diretório src em um projeto Rust e são executados usando o comando cargo test. Além disso, código comum pode ser compartilhado entre testes de integração criando um módulo com funções públicas e importando-o nos testes.",
      "meta": {
        "title": "Teste de Integração em Rust | Tutoriais de Programação",
        "description": "Aprenda sobre testes de integração em Rust, que envolvem testar várias partes de uma biblioteca juntas usando sua interface pública. Descubra como configurar e executar testes de integração em seus projetos Rust.",
        "keywords": "Rust, Teste de Integração, Tutoriais de Programação, Desenvolvimento de Software, Estratégias de Teste, testes rust, testes unitários rust,  integração rust"
      },
      "details": {
        "steps": [
          {
            "title": "Teste de Integração",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
