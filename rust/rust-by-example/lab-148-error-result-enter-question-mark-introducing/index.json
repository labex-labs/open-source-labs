{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Rust Error Handling with Question Mark",
  "description": "In this lab, we will learn about the ? operator in Rust, which allows us to simplify error handling by returning Err instead of panicking, and we will also explore the try! macro, which achieved similar functionality before ? was introduced.",
  "meta": {
    "title": "Rust Programming | Error Handling | Try Operator",
    "description": "Learn about the Rust programming language's try operator (?) and the try! macro for simplified error handling without panicking.",
    "keywords": "Rust, programming, error handling, try operator, try macro"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Introducing ?",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/error_propagation",
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/operator_overloading",
          "rust/string_type",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用问号进行Rust错误处理",
      "description": "在本实验中，我们将学习Rust中的?运算符，它允许我们通过返回Err而不是使程序恐慌（panic）来简化错误处理。我们还将探索try!宏，它在?运算符引入之前实现了类似的功能。",
      "meta": {
        "title": "Rust编程 | 错误处理 | 尝试运算符",
        "description": "了解Rust编程语言的尝试运算符(?)和try!宏，用于在不使程序恐慌的情况下简化错误处理。",
        "keywords": "Rust,编程,错误处理,尝试运算符,try宏"
      },
      "details": {
        "steps": [
          {
            "title": "介绍?",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Manejo de errores en Rust con el signo de interrogación",
      "description": "En este laboratorio, aprenderemos sobre el operador? en Rust, que nos permite simplificar el manejo de errores devolviendo Err en lugar de causar un panic, y también exploraremos la macro try!, que lograba una funcionalidad similar antes de que se introdujera?.",
      "meta": {
        "title": "Programación en Rust | Manejo de errores | Operador Try",
        "description": "Aprende sobre el operador try (?) del lenguaje de programación Rust y la macro try! para un manejo de errores simplificado sin causar un panic.",
        "keywords": "Rust, programación, manejo de errores, operador try, macro try"
      },
      "details": {
        "steps": [
          {
            "title": "Presentando?",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Gestion des erreurs en Rust avec le point d'interrogation",
      "description": "Dans ce laboratoire, nous allons apprendre à utiliser l'opérateur? en Rust, qui nous permet de simplifier la gestion des erreurs en renvoyant Err au lieu de générer une panique. Nous explorerons également le macro try!, qui avait une fonctionnalité similaire avant l'introduction de?.",
      "meta": {
        "title": "Programmation Rust | Gestion des erreurs | Opérateur Try",
        "description": "Découvrez l'opérateur try (?) du langage de programmation Rust et le macro try! pour une gestion simplifiée des erreurs sans panique.",
        "keywords": "Rust, programmation, gestion des erreurs, opérateur try, macro try"
      },
      "details": {
        "steps": [
          {
            "title": "Présentation de?",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Rust-Fehlerbehandlung mit Fragezeichen",
      "description": "In diesem Lab werden wir uns mit dem?-Operator in Rust beschäftigen, der uns ermöglicht, die Fehlerbehandlung zu vereinfachen, indem wir Err zurückgeben anstatt zu panic zu greifen. Wir werden auch das try!-Makro untersuchen, das ähnliche Funktionalität hatte, bevor? eingeführt wurde.",
      "meta": {
        "title": "Rust-Programmierung | Fehlerbehandlung | Try-Operator",
        "description": "Lernen Sie über den Try-Operator (?) der Rust-Programmiersprache und das try!-Makro für eine vereinfachte Fehlerbehandlung ohne Panik.",
        "keywords": "Rust, Programmierung, Fehlerbehandlung, Try-Operator, Try-Makro"
      },
      "details": {
        "steps": [
          {
            "title": "Einführung in?",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rustにおける質問マークを用たエラーハンドリング",
      "description": "この実験では、Rustの?演算子について学びます。この演算子を使うことで、パニックする代わりにErrを返すことでエラー処理を簡略化できます。また、?が導入される前に同様の機能を実現していたtry!マクロについても検討します。",
      "meta": {
        "title": "Rustプログラミング | エラーハンドリング | Try演算子",
        "description": "Rustプログラミング言語のtry演算子(?)と、パニックすることなくエラー処理を簡略化するためのtry!マクロについて学びましょう。",
        "keywords": "Rust, プログラミング, エラーハンドリング, try演算子, tryマクロ"
      },
      "details": {
        "steps": [
          {
            "title": "?の紹介",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップでは現在検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップでは現在検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Обработка ошибок в Rust с помощью вопросительного знака",
      "description": "В этом практическом занятии мы узнаем о операторе? в Rust, который позволяет упростить обработку ошибок, возвращая Err вместо аварийного завершения программы, и мы также изучим макрос try!, который обеспечивал аналогичную функциональность до появления оператора?.",
      "meta": {
        "title": "Программирование на Rust | Обработка ошибок | Оператор try",
        "description": "Изучите оператор try (?) языка программирования Rust и макрос try! для упрощенной обработки ошибок без аварийного завершения программы.",
        "keywords": "Rust, программирование, обработка ошибок, оператор try, макрос try"
      },
      "details": {
        "steps": [
          {
            "title": "Введение в?",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
