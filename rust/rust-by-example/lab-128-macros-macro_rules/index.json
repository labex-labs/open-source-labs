{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Rust Metaprogramming with Macros",
  "description": "In this lab, we will explore the powerful macro system provided by Rust, which allows for metaprogramming by expanding macros into abstract syntax trees. The macro_rules! macro is used to create macros, and they are distinguished from functions by their ending bang !. Macros are useful for avoiding code repetition, creating domain-specific languages, and defining variadic interfaces for functions that can take a variable number of arguments.",
  "meta": {
    "title": "Mastering Rust Metaprogramming with Macros",
    "description": "Explore the powerful macro system in Rust and learn how to use metaprogramming techniques to enhance your code.",
    "keywords": "rust playground, metaprogramming, domain specific languages, rust tutor, rust online compiler, rust commands, macros, rust practice, variadic interfaces, rust online"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "macro_rules!",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用宏进行 Rust 元编程",
      "description": "在本实验中，我们将探索 Rust 提供的强大宏系统，该系统允许通过将宏扩展为抽象语法树来进行元编程。`macro_rules!` 宏用于创建宏，它们通过结尾的惊叹号 `!` 与函数区分开来。宏对于避免代码重复、创建特定领域语言以及为可以接受可变数量参数的函数定义可变参数接口非常有用。",
      "meta": {
        "title": "掌握使用宏的 Rust 元编程",
        "description": "探索 Rust 中强大的宏系统，并学习如何使用元编程技术来优化你的代码。",
        "keywords": "rust 在线编译器，元编程，特定领域语言，rust 教程，rust 在线练习，rust 命令，宏，rust 实践，可变参数接口，rust 游乐场"
      },
      "details": {
        "steps": [
          {
            "title": "macro_rules!",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Programación metaprogramada en Rust con macros",
      "description": "En este laboratorio, exploraremos el poderoso sistema de macros que ofrece Rust, que permite la programación metaprogramada mediante la expansión de macros en árboles de sintaxis abstracta. La macro macro_rules! se utiliza para crear macros, y se distinguen de las funciones por su terminación con un signo de exclamación!. Las macros son útiles para evitar la repetición de código, crear lenguajes de dominio específicos y definir interfaces variádicas para funciones que pueden tomar un número variable de argumentos.",
      "meta": {
        "title": "Dominando la programación metaprogramada en Rust con macros",
        "description": "Explore el poderoso sistema de macros en Rust y aprenda cómo utilizar técnicas de programación metaprogramada para mejorar su código.",
        "keywords": "playground de rust, programación metaprogramada, lenguajes de dominio específicos, tutor de rust, compilador en línea de rust, comandos de rust, macros, práctica de rust, interfaces variádicas, rust en línea"
      },
      "details": {
        "steps": [
          {
            "title": "macro_rules!",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "En este momento, este paso no tiene verificación",
                "file": "verify1-1.sh",
                "hint": "En este momento, este paso no tiene verificación"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "La métaprogrammation Rust avec des macros",
      "description": "Dans ce laboratoire, nous allons explorer le puissant système de macros fourni par Rust, qui permet la métaprogrammation en étendant les macros en arbres syntaxiques abstraits. Le macro macro_rules! est utilisé pour créer des macros, et elles sont distinguées des fonctions par leur terminaison bang!. Les macros sont utiles pour éviter la répétition de code, créer des langages spécifiques au domaine et définir des interfaces variadiques pour les fonctions qui peuvent prendre un nombre variable d'arguments.",
      "meta": {
        "title": "Maîtriser la métaprogrammation Rust avec des macros",
        "description": "Explorez le puissant système de macros en Rust et apprenez à utiliser des techniques de métaprogrammation pour améliorer votre code.",
        "keywords": "plateforme de test Rust, métaprogrammation, langages spécifiques au domaine, tuteur Rust, compilateur en ligne Rust, commandes Rust, macros, pratique Rust, interfaces variadiques, en ligne Rust"
      },
      "details": {
        "steps": [
          {
            "title": "macro_rules!",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Rust Metaprogrammierung mit Makros",
      "description": "In diesem Lab werden wir das leistungsstarke Makrosystem von Rust erkunden, das es ermöglicht, durch die Expansion von Makros in abstrakte Syntaxbäume Metaprogrammierung durchzuführen. Die macro_rules! Makro wird verwendet, um Makros zu erstellen, und sie unterscheiden sich von Funktionen durch ihr abschließendes Ausrufezeichen!. Makros sind nützlich, um Codewiederholungen zu vermeiden, domänenspezifische Sprachen zu erstellen und variadische Schnittstellen für Funktionen zu definieren, die eine variable Anzahl von Argumenten akzeptieren können.",
      "meta": {
        "title": "Meisterhaftes Rust Metaprogrammieren mit Makros",
        "description": "Erkunden Sie das leistungsstarke Makrosystem in Rust und lernen Sie, wie Sie Metaprogrammiertechniken verwenden, um Ihren Code zu verbessern.",
        "keywords": "rust playground, Metaprogrammierung, domänenspezifische Sprachen, rust tutor, rust online compiler, rust Befehle, Makros, rust Übung, variadische Schnittstellen, rust online"
      },
      "details": {
        "steps": [
          {
            "title": "macro_rules!",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "マクロを使った Rust のメタプログラミング",
      "description": "この実験では、Rust によって提供される強力なマクロシステムを探り、マクロを抽象構文木に展開することでメタプログラミングを可能にします。macro_rules! マクロはマクロを作成するために使用され、それらは終端のバング！によって関数と区別されます。マクロは、コードの繰り返しを避けるため、ドメイン固有の言語を作成するため、および可変数の引数を取ることができる関数の可変長インターフェイスを定義するために役立ちます。",
      "meta": {
        "title": "マクロを使った Rust のメタプログラミングのマスター",
        "description": "Rust の強力なマクロシステムを探り、メタプログラミング技術を使ってコードを強化する方法を学びましょう。",
        "keywords": "rust playground, メタプログラミング，ドメイン固有の言語，rust tutor, rust オンラインコンパイラ，rust コマンド，マクロ，rust 練習，可変長インターフェイス，rust オンライン"
      },
      "details": {
        "steps": [
          {
            "title": "macro_rules!",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在、検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在、検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Метапрограммирование на Rust с использованием макросов",
      "description": "В этой лабораторной работе мы исследуем мощную макросную систему, предоставляемую Rust, которая позволяет выполнять метапрограммирование путём расширения макросов в абстрактные синтаксические деревья. Макрос macro_rules! используется для создания макросов, и они отличаются от функций наличием восклицательного знака! в конце. Макросы полезны для избежания дублирования кода, создания доменных языков и определения вариативных интерфейсов для функций, которые могут принимать переменное количество аргументов.",
      "meta": {
        "title": "Мастерство в метапрограммировании на Rust с использованием макросов",
        "description": "Исследуйте мощную макросную систему в Rust и узнайте, как использовать метапрограммирующие методы для улучшения своего кода.",
        "keywords": "rust playground, метапрограммирование, доменные языки, rust tutor, rust online compiler, rust команды, макросы, практика rust, вариативные интерфейсы, rust online"
      },
      "details": {
        "steps": [
          {
            "title": "macro_rules!",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "Rust 매크로를 이용한 메타 프로그래밍",
      "description": "이 랩에서는 Rust 가 제공하는 강력한 매크로 시스템을 탐구합니다. 매크로는 추상 구문 트리 (AST) 로 확장되어 메타 프로그래밍을 가능하게 합니다. `macro_rules!` 매크로를 사용하여 매크로를 생성하며, 함수와는 달리 느낌표 `!` 로 끝납니다. 매크로는 코드 중복을 피하고, 도메인 특화 언어 (DSL) 를 만들고, 가변 인수를 받는 함수를 위한 가변 인터페이스를 정의하는 데 유용합니다.",
      "meta": {
        "title": "Rust 매크로 마스터하기: 메타 프로그래밍 기법",
        "description": "Rust 의 강력한 매크로 시스템을 탐구하고 메타 프로그래밍 기술을 사용하여 코드를 향상시키는 방법을 알아보세요.",
        "keywords": "러스트 플레이그라운드, 메타 프로그래밍, 도메인 특화 언어, 러스트 튜터, 러스트 온라인 컴파일러, 러스트 명령어, 매크로, 러스트 연습, 가변 인터페이스, 러스트 온라인"
      },
      "details": {
        "steps": [
          {
            "title": "macro_rules!",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Metaprogramação Rust com Macros",
      "description": "Neste laboratório, exploraremos o poderoso sistema de macros fornecido pelo Rust, que permite a metaprogramação através da expansão de macros em árvores de sintaxe abstrata. A macro `macro_rules!` é usada para criar macros, e elas se distinguem das funções pelo ponto de exclamação final !. As macros são úteis para evitar a repetição de código, criar linguagens específicas de domínio e definir interfaces variádicas para funções que podem receber um número variável de argumentos.",
      "meta": {
        "title": "Dominando a Metaprogramação Rust com Macros - Guia Completo",
        "description": "Explore o poderoso sistema de macros em Rust e aprenda como usar técnicas de metaprogramação para aprimorar seu código. Descubra como criar macros eficientes e otimizar seu desenvolvimento em Rust.",
        "keywords": "rust playground, metaprogramação, linguagens específicas de domínio, tutorial rust, compilador rust online, comandos rust, macros rust, prática rust, interfaces variádicas, rust online, aprender rust, programação rust, desenvolvimento rust"
      },
      "details": {
        "steps": [
          {
            "title": "macro_rules!",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
