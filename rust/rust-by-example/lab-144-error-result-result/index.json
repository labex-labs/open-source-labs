{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Exploring Rust's Result Type",
  "description": "In this lab, we will explore the Result type in Rust, which provides a way to handle potential errors instead of possible absence of a value like the Option type. The Result type can have two outcomes - Ok(T) for a successful result with element T, and Err(E) for an error with element E. We will see how to use Result in code examples and how it can be used as the return type of the main function to handle errors and provide a more specific error message.",
  "meta": {
    "title": "Rust Programming | Error Handling with Result Type",
    "description": "Explore the Rust Result type for handling potential errors instead of possible absence of values. Learn how to use Result in code examples and as the return type of the main function.",
    "keywords": "Rust, programming, error handling, Result type, Option type, parse, unwrap, main function"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Result",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/error_propagation",
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/string_type",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "探索 Rust 的 Result 类型",
      "description": "在本实验中，我们将探索 Rust 中的 Result 类型，它提供了一种处理潜在错误的方式，而不像 Option 类型那样处理可能不存在的值。Result 类型有两种结果：Ok(T) 表示成功结果，包含元素 T；Err(E) 表示错误结果，包含元素 E。我们将在代码示例中看到如何使用 Result，以及它如何用作 main 函数的返回类型来处理错误并提供更具体的错误消息。",
      "meta": {
        "title": "Rust 编程 | 使用 Result 类型进行错误处理",
        "description": "探索 Rust 的 Result 类型，用于处理潜在错误而非可能的值缺失。了解如何在代码示例中使用 Result 以及将其用作 main 函数的返回类型。",
        "keywords": "Rust, 编程, 错误处理, Result 类型, Option 类型, 解析, 解包, main 函数"
      },
      "details": {
        "steps": [
          {
            "title": "Result",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
