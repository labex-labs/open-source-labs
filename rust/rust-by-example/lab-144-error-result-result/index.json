{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Exploring Rust's Result Type",
  "description": "In this lab, we will explore the Result type in Rust, which provides a way to handle potential errors instead of possible absence of a value like the Option type. The Result type can have two outcomes - Ok(T) for a successful result with element T, and Err(E) for an error with element E. We will see how to use Result in code examples and how it can be used as the return type of the main function to handle errors and provide a more specific error message.",
  "meta": {
    "title": "Rust Programming | Error Handling with Result Type",
    "description": "Explore the Rust Result type for handling potential errors instead of possible absence of values. Learn how to use Result in code examples and as the return type of the main function.",
    "keywords": "Rust, programming, error handling, Result type, Option type, parse, unwrap, main function"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Result",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/error_propagation",
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/string_type",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "探索 Rust 的 Result 类型",
      "description": "在本实验中，我们将探索 Rust 中的 Result 类型，它提供了一种处理潜在错误的方式，而不像 Option 类型那样处理可能不存在的值。Result 类型有两种结果：Ok(T) 表示成功结果，包含元素 T；Err(E) 表示错误结果，包含元素 E。我们将在代码示例中看到如何使用 Result，以及它如何用作 main 函数的返回类型来处理错误并提供更具体的错误消息。",
      "meta": {
        "title": "Rust 编程 | 使用 Result 类型进行错误处理",
        "description": "探索 Rust 的 Result 类型，用于处理潜在错误而非可能的值缺失。了解如何在代码示例中使用 Result 以及将其用作 main 函数的返回类型。",
        "keywords": "Rust, 编程, 错误处理, Result 类型, Option 类型, 解析, 解包, main 函数"
      },
      "details": {
        "steps": [
          {
            "title": "Result",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Explorando el Tipo Result de Rust",
      "description": "En este laboratorio, exploraremos el tipo Result en Rust, que proporciona una forma de manejar errores potenciales en lugar de la posible ausencia de un valor como el tipo Option. El tipo Result puede tener dos resultados: Ok(T) para un resultado exitoso con el elemento T, y Err(E) para un error con el elemento E. Veremos cómo usar Result en ejemplos de código y cómo se puede usar como tipo de retorno de la función principal para manejar errores y proporcionar un mensaje de error más específico.",
      "meta": {
        "title": "Programación en Rust | Manejo de Errores con el Tipo Result",
        "description": "Explore el tipo Result de Rust para manejar errores potenciales en lugar de la posible ausencia de valores. Aprenda cómo usar Result en ejemplos de código y como tipo de retorno de la función principal.",
        "keywords": "Rust, programación, manejo de errores, tipo Result, tipo Option, análisis, extracción, función principal"
      },
      "details": {
        "steps": [
          {
            "title": "Result",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Explorer le type Result de Rust",
      "description": "Dans ce laboratoire, nous allons explorer le type Result en Rust, qui fournit un moyen de gérer les erreurs potentielles au lieu de la possible absence d'une valeur comme le type Option. Le type Result peut avoir deux issues - Ok(T) pour un résultat réussi avec l'élément T, et Err(E) pour une erreur avec l'élément E. Nous verrons comment utiliser Result dans des exemples de code et comment il peut être utilisé comme type de retour de la fonction principale pour gérer les erreurs et fournir un message d'erreur plus spécifique.",
      "meta": {
        "title": "Programmation Rust | Gestion des erreurs avec le type Result",
        "description": "Explorez le type Result de Rust pour gérer les erreurs potentielles au lieu de la possible absence de valeurs. Apprenez à utiliser Result dans des exemples de code et comme type de retour de la fonction principale.",
        "keywords": "Rust, programmation, gestion des erreurs, type Result, type Option, analyse, extraire, fonction principale"
      },
      "details": {
        "steps": [
          {
            "title": "Résultat",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Das Result-Typ in Rust erkunden",
      "description": "In diesem Lab werden wir den Result-Typ in Rust erkunden, der eine Möglichkeit bietet, potenzielle Fehler zu behandeln, im Gegensatz zum Option-Typ, der auf das mögliche Fehlen eines Werts abzielt. Der Result-Typ kann zwei Ergebnisse haben: Ok(T) für einen erfolgreichen Abschluss mit Element T und Err(E) für einen Fehler mit Element E. Wir werden sehen, wie Result in Codebeispielen verwendet wird und wie es als Rückgabetyp der main-Funktion genutzt werden kann, um Fehler zu behandeln und eine detailliertere Fehlermeldung bereitzustellen.",
      "meta": {
        "title": "Rust-Programmierung | Fehlerbehandlung mit dem Result-Typ",
        "description": "Erkunden Sie den Rust Result-Typ zur Behandlung potenzieller Fehler statt möglicherweise fehlender Werte. Lernen Sie, wie Result in Codebeispielen und als Rückgabetyp der main-Funktion verwendet wird.",
        "keywords": "Rust, Programmierung, Fehlerbehandlung, Result-Typ, Option-Typ, parse, unwrap, main-Funktion"
      },
      "details": {
        "steps": [
          {
            "title": "Result",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "RustのResult型を探る",
      "description": "この実験では、RustのResult型を調べます。この型は、Option型のように値が存在しない可能性の代わりに、潜在的なエラーを処理する方法を提供します。Result型は2つの結果を持つことができます。要素Tの成功した結果に対してはOk(T)、要素Eのエラーに対してはErr(E)です。コード例でResultをどのように使用するか、およびエラーを処理してより具体的なエラーメッセージを提供するためにmain関数の戻り値としてどのように使用できるかを見ていきます。",
      "meta": {
        "title": "Rustプログラミング | Result型を使ったエラーハンドリング",
        "description": "値が存在しない可能性ではなく、潜在的なエラーを処理するためのRustのResult型を調べましょう。コード例でResultをどのように使用するか、およびmain関数の戻り値としてどのように使用できるかを学びましょう。",
        "keywords": "Rust, プログラミング, エラーハンドリング, Result型, Option型, 解析, unwrap, main関数"
      },
      "details": {
        "steps": [
          {
            "title": "Result",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップでは現在検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップでは現在検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Изучение типа Result в Rust",
      "description": "В этой лабораторной работе мы изучим тип Result в Rust, который предоставляет способ обработки потенциальных ошибок вместо возможного отсутствия значения, как это делает тип Option. Тип Result может иметь два результата - Ok(T) для успешного результата с элементом T и Err(E) для ошибки с элементом E. Мы увидим, как использовать Result в примерах кода и как его можно использовать в качестве возвращаемого типа функции main для обработки ошибок и предоставления более конкретного сообщения об ошибке.",
      "meta": {
        "title": "Программирование на Rust | Обработка ошибок с использованием типа Result",
        "description": "Изучите тип Result в Rust для обработки потенциальных ошибок вместо возможного отсутствия значений. Узнайте, как использовать Result в примерах кода и в качестве возвращаемого типа функции main.",
        "keywords": "Rust, программирование, обработка ошибок, тип Result, тип Option, разбор, раскрытие, функция main"
      },
      "details": {
        "steps": [
          {
            "title": "Result",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
