{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Formatted Print in Rust",
  "description": "In this lab, the formatted print functionality in Rust is explained. The std::fmt module provides macros such as format!, print!, println!, eprint!, and eprintln! for handling printing tasks. These macros allow for formatting text with placeholders that are replaced with corresponding arguments. Positional and named arguments can be used, and different formatting can be applied using format characters. The macros also support justifying text, padding numbers, and setting the precision for decimal numbers. The fmt::Display trait is used to format text in a user-friendly way, while the fmt::Debug trait is used for debugging purposes. Rust also checks for formatting correctness at compile time. Additionally, it is mentioned that implementing the fmt::Display trait automatically implements the ToString trait, and custom types need to implement the fmt::Display trait to be printable. The lab also includes activities to practice using the formatted print macros and traits.",
  "meta": {
    "title": "Formatted Print in Rust: Mastering Text Formatting",
    "description": "Explore the powerful formatted print functionality in Rust, including advanced techniques for customizing text output.",
    "keywords": "rust playground, rust online ide, coding, rust online compiler, rust tutor, text formatting, rust commands, rust practice, rust online playground, rust online"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Formatted print",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/floating_types",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/operator_overloading",
          "rust/string_type",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 中的格式化打印",
      "description": "在本实验中，将讲解 Rust 中的格式化打印功能。`std::fmt` 模块提供了诸如 `format!`、`print!`、`println!`、`eprint!` 和 `eprintln!` 等宏，用于处理打印任务。这些宏允许使用占位符格式化文本，占位符会被相应的参数替换。可以使用位置参数和命名参数，并使用格式字符应用不同的格式。这些宏还支持文本对齐、数字填充以及设置十进制数的精度。`fmt::Display` 特性用于以用户友好的方式格式化文本，而 `fmt::Debug` 特性用于调试目的。Rust 还在编译时检查格式化的正确性。此外，文中提到实现 `fmt::Display` 特性会自动实现 `ToString` 特性，自定义类型需要实现 `fmt::Display` 特性才能进行打印。本实验还包括练习使用格式化打印宏和特性的活动。",
      "meta": {
        "title": "掌握 Rust 中的文本格式化：格式化打印",
        "description": "探索 Rust 强大的格式化打印功能，包括自定义文本输出的高级技巧。",
        "keywords": "Rust 在线游乐场, Rust 在线 IDE, 编码, Rust 在线编译器, Rust 教程, 文本格式化, Rust 命令, Rust 练习, Rust 在线游乐场, Rust 在线"
      },
      "details": {
        "steps": [
          {
            "title": "格式化打印",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Impresión Formateada en Rust",
      "description": "En este laboratorio, se explica la funcionalidad de impresión formateada en Rust. El módulo std::fmt proporciona macros como format!, print!, println!, eprint! y eprintln! para manejar tareas de impresión. Estas macros permiten formatear texto con marcadores de posición que se reemplazan con los argumentos correspondientes. Se pueden utilizar argumentos posicionales y con nombre, y se pueden aplicar diferentes formatos utilizando caracteres de formato. Las macros también admiten la justificación del texto, el relleno de números y la fijación de la precisión para números decimales. El trato fmt::Display se utiliza para formatear texto de manera amigable para el usuario, mientras que el trato fmt::Debug se utiliza con fines de depuración. Rust también comprueba la corrección del formato en tiempo de compilación. Además, se menciona que implementar el trato fmt::Display implementa automáticamente el trato ToString, y los tipos personalizados deben implementar el trato fmt::Display para ser imprimibles. El laboratorio también incluye actividades para practicar el uso de las macros y los tratados de impresión formateada.",
      "meta": {
        "title": "Impresión Formateada en Rust: Dominando el Formateo de Texto",
        "description": "Explora la potente funcionalidad de impresión formateada en Rust, incluyendo técnicas avanzadas para personalizar la salida de texto.",
        "keywords": "rust playground, rust online ide, codificación, rust online compiler, rust tutor, formateo de texto, comandos de rust, práctica de rust, rust online playground, rust online"
      },
      "details": {
        "steps": [
          {
            "title": "Impresión formateada",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "En este momento, este paso no tiene verificaciones",
                "file": "verify1-1.sh",
                "hint": "En este momento, este paso no tiene verificaciones"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Impression formatée en Rust",
      "description": "Dans ce laboratoire, la fonctionnalité d'impression formatée en Rust est expliquée. Le module std::fmt fournit des macros telles que format!, print!, println!, eprint! et eprintln! pour gérer les tâches d'impression. Ces macros permettent de formater du texte avec des placeholders qui sont remplacés par les arguments correspondants. Des arguments positionnels et nommés peuvent être utilisés, et différentes formats peuvent être appliqués en utilisant des caractères de formatage. Les macros prennent également en charge la justification du texte, le rembourrage des nombres et la définition de la précision pour les nombres décimaux. Le trait fmt::Display est utilisé pour formater le texte d'une manière conviviale pour l'utilisateur, tandis que le trait fmt::Debug est utilisé à des fins de débogage. Rust vérifie également la correction du formatage à la compilation. De plus, il est mentionné que l'implémentation du trait fmt::Display implémente automatiquement le trait ToString, et que les types personnalisés doivent implémenter le trait fmt::Display pour être imprimables. Le laboratoire inclut également des activités pour pratiquer l'utilisation des macros et des traits d'impression formatée.",
      "meta": {
        "title": "Impression formatée en Rust : Maîtriser la mise en forme du texte",
        "description": "Explorez la puissante fonctionnalité d'impression formatée en Rust, y compris des techniques avancées pour personnaliser la sortie de texte.",
        "keywords": "plateforme de test Rust, IDE en ligne Rust, codage, compilateur en ligne Rust, tuteur Rust, mise en forme de texte, commandes Rust, pratique Rust, plateforme de test en ligne Rust, Rust en ligne"
      },
      "details": {
        "steps": [
          {
            "title": "Impression formatée",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Formatierter Druck in Rust",
      "description": "In diesem Lab wird die formatierte Druckfunktionalität in Rust erklärt. Das std::fmt-Modul bietet Makros wie format!, print!, println!, eprint! und eprintln! zum Handhaben von Druckaufgaben. Diese Makros ermöglichen es, Text mit Platzhaltern zu formatieren, die durch entsprechende Argumente ersetzt werden. Es können positionale und benannte Argumente verwendet werden, und verschiedene Formatierungen können mit Formatzeichen angewendet werden. Die Makros unterstützen auch die Ausrichtung von Text, das Ausfüllen von Zahlen und die Einstellung der Genauigkeit für Dezimalzahlen. Das fmt::Display-Attribut wird verwendet, um Text auf benutzerfreundliche Weise zu formatieren, während das fmt::Debug-Attribut für Debugging-Zwecke verwendet wird. Rust prüft auch die Formatierkorrektheit zur Compile-Zeit. Darüber hinaus wird erwähnt, dass das Implementieren des fmt::Display-Attributs automatisch das ToString-Attribut implementiert, und benutzerdefinierte Typen müssen das fmt::Display-Attribut implementieren, um druckbar zu sein. Das Lab enthält auch Aktivitäten, um die Verwendung der formatierten Druckmakros und Attribute zu üben.",
      "meta": {
        "title": "Formatierter Druck in Rust: Beherrschen der Textformatierung",
        "description": "Entdecken Sie die leistungsstarke formatierte Druckfunktionalität in Rust, einschließlich fortgeschrittener Techniken zur Anpassung der Textausgabe.",
        "keywords": "rust playground, rust online ide, coding, rust online compiler, rust tutor, text formatting, rust commands, rust practice, rust online playground, rust online"
      },
      "details": {
        "steps": [
          {
            "title": "Formatierter Druck",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rustにおけるフォーマット済みの印刷",
      "description": "この実験では、Rustにおけるフォーマット済みの印刷機能について説明します。std::fmtモジュールは、印刷タスクを処理するためのformat!、print!、println!、eprint!、およびeprintln!などのマクロを提供します。これらのマクロは、置換文字列に対応する引数で置き換えられるプレースホルダを使ってテキストをフォーマットすることができます。位置引数と名前付き引数を使用でき、フォーマット文字を使って異なるフォーマットを適用することができます。マクロはまた、テキストの整列、数字の埋め込み、および少数の精度設定をサポートしています。fmt::Displayトレイトは、ユーザーにとって使いやすい方法でテキストをフォーマットするために使用され、fmt::Debugトレイトはデバッグ目的に使用されます。Rustはまた、コンパイル時にフォーマットの正しさをチェックします。また、fmt::Displayトレイトを実装すると自動的にToStringトレイトが実装され、カスタム型は印刷可能にするためにfmt::Displayトレイトを実装する必要があることが述べられています。この実験には、フォーマット済みの印刷マクロとトレイトを使用する練習のためのアクティビティも含まれています。",
      "meta": {
        "title": "Rustにおけるフォーマット済みの印刷：テキストフォーマットのマスター",
        "description": "Rustにおける強力なフォーマット済みの印刷機能を探り、テキスト出力のカスタマイズに関する高度な技術も含めてみましょう。",
        "keywords": "rust playground, rust online ide, coding, rust online compiler, rust tutor, テキストフォーマット, rust commands, rust practice, rust online playground, rust online"
      },
      "details": {
        "steps": [
          {
            "title": "フォーマット済みの印刷",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在、検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在、検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Форматированный вывод в Rust",
      "description": "В этом практическом занятии объясняется функциональность форматированного вывода в Rust. Модуль std::fmt предоставляет макросы, такие как format!, print!, println!, eprint! и eprintln! для обработки задач вывода. Эти макросы позволяют форматировать текст с использованием占位符, которые заменяются соответствующими аргументами. Можно использовать позиционные и именованные аргументы, и различный формат можно применить с использованием символов форматирования. Макросы также поддерживают выравнивание текста, дополнение чисел и установку точности для десятичных чисел. Трейт fmt::Display используется для форматирования текста в удобочитаемом виде, в то время как трейт fmt::Debug используется для целей отладки. Rust также проверяет правильность форматирования на этапе компиляции. Кроме того, упоминается, что реализация трейта fmt::Display автоматически реализует трейт ToString, и для пользовательских типов необходимо реализовать трейт fmt::Display, чтобы они были печатаемыми. В практическом занятии также включены задания для практики использования макросов и трейтов форматированного вывода.",
      "meta": {
        "title": "Форматированный вывод в Rust: мастерство в форматировании текста",
        "description": "Изучите мощную функциональность форматированного вывода в Rust, включая продвинутые методы для настройки вывода текста.",
        "keywords": "rust playground, rust online ide, coding, rust online compiler, rust tutor, форматирование текста, rust команды, практика rust, rust online playground, rust online"
      },
      "details": {
        "steps": [
          {
            "title": "Форматированный вывод",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
