{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Unpacking Options with ?",
  "description": "In this lab, we explore the use of the ? operator in Rust, which allows for easy unpacking of Option values without the need for nested match statements. The ? operator can be used to quickly return the underlying value if the Option is Some, or terminate the function and return None if the Option is None. This operator can be chained together to make code more readable and concise.",
  "meta": {
    "title": "Rust Programming | Option Unpacking with the ? Operator",
    "description": "Explore the use of the ? operator in Rust to easily unpack Option values without nested match statements. Learn how to make your code more readable and concise.",
    "keywords": "Rust, Option, ? operator, programming, tutorial"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Unpacking options with ?",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/error_propagation",
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/method_syntax",
          "rust/operator_overloading",
          "rust/traits",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用? 解包 Option",
      "description": "在本实验中，我们探索 Rust 中? 运算符的用法，它允许轻松解包 Option 值，而无需使用嵌套的 match 语句。如果 Option 是 Some，? 运算符可用于快速返回其底层值；如果 Option 是 None，则终止函数并返回 None。这个运算符可以链接在一起，使代码更具可读性和简洁性。",
      "meta": {
        "title": "Rust 编程 | 使用? 运算符解包 Option",
        "description": "探索 Rust 中? 运算符的用法，无需嵌套 match 语句即可轻松解包 Option 值。了解如何使代码更具可读性和简洁性。",
        "keywords": "Rust, Option,? 运算符, 编程, 教程"
      },
      "details": {
        "steps": [
          {
            "title": "使用? 解包 Option",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
