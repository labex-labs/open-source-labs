{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "New Type Idiom",
  "description": "In this lab, we explore the newtype idiom, which provides compile-time guarantees by allowing us to create a new type that is distinct from its underlying type. An example is shown where a struct Years is used to represent age in years, and a struct Days is used to represent age in days. By using the newtype idiom, we can ensure that the right type of value is supplied to a program, such as in the age verification function old_enough, which requires a value of type Years. Additionally, we learn how to obtain the value of a newtype as its underlying type using tuple or destructuring syntax.",
  "meta": {
    "title": "Exploring the New Type Idiom in Rust",
    "description": "Dive into the Rust programming language and learn about the newtype idiom, which provides compile-time guarantees for your code.",
    "keywords": "newtype, rust, rust playground, compile time guarantees, rust tutor, rust online compiler, rust commands, rust practice, rust online playground, rust online"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "New Type Idiom",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "新类型习惯用法",
      "description": "在本实验中，我们探索新类型习惯用法，它通过允许我们创建一个与其底层类型不同的新类型来提供编译时保证。这里给出了一个示例，其中结构体 Years 用于表示以年为单位的年龄，结构体 Days 用于表示以天为单位的年龄。通过使用新类型习惯用法，我们可以确保向程序提供正确类型的值，例如在年龄验证函数 old_enough 中，该函数需要一个 Years 类型的值。此外，我们还将学习如何使用元组或解构语法将新类型的值作为其底层类型获取。",
      "meta": {
        "title": "探索 Rust 中的新类型习惯用法",
        "description": "深入了解 Rust 编程语言，并学习新类型习惯用法，它为你的代码提供编译时保证。",
        "keywords": "新类型，Rust,Rust 游乐场，编译时保证，Rust 教程，Rust 在线编译器，Rust 命令，Rust 练习，Rust 在线游乐场，Rust 在线"
      },
      "details": {
        "steps": [
          {
            "title": "新类型习惯用法",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Idioma de Nuevo Tipo",
      "description": "En este laboratorio, exploramos el idioma de nuevo tipo, que ofrece garantías en tiempo de compilación al permitir crear un nuevo tipo que es distinto de su tipo subyacente. Se muestra un ejemplo donde una estructura Years se utiliza para representar la edad en años y una estructura Days se utiliza para representar la edad en días. Al utilizar el idioma de nuevo tipo, podemos garantizar que se suministra el tipo correcto de valor a un programa, como en la función de verificación de edad old_enough, que requiere un valor del tipo Years. Además, aprendemos cómo obtener el valor de un nuevo tipo como su tipo subyacente utilizando la sintaxis de tuplas o de desestructuración.",
      "meta": {
        "title": "Explorando el Idioma de Nuevo Tipo en Rust",
        "description": "Sumérgete en el lenguaje de programación Rust y aprende sobre el idioma de nuevo tipo, que ofrece garantías en tiempo de compilación para tu código.",
        "keywords": "nuevo tipo, rust, playground de rust, garantías en tiempo de compilación, tutor de rust, compilador en línea de rust, comandos de rust, práctica de rust, playground en línea de rust, rust en línea"
      },
      "details": {
        "steps": [
          {
            "title": "Idioma de Nuevo Tipo",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "New Type Idiom",
      "description": "Dans ce laboratoire, nous explorons l'idiome newtype, qui offre des garanties au moment de la compilation en nous permettant de créer un nouveau type distinct de son type sous-jacent. Un exemple est présenté où une structure Years est utilisée pour représenter l'âge en années, et une structure Days est utilisée pour représenter l'âge en jours. En utilisant l'idiome newtype, nous pouvons nous assurer que le bon type de valeur est fourni à un programme, comme dans la fonction de vérification d'âge old_enough, qui nécessite une valeur de type Years. De plus, nous apprenons à obtenir la valeur d'un newtype comme son type sous-jacent en utilisant la syntaxe de tuple ou de décomposition.",
      "meta": {
        "title": "Explorer l'idiome New Type en Rust",
        "description": "Plongez dans le langage de programmation Rust et découvrez l'idiome newtype, qui offre des garanties au moment de la compilation pour votre code.",
        "keywords": "newtype, rust, rust playground, garanties au moment de la compilation, tuteur rust, compilateur en ligne rust, commandes rust, pratique rust, terrain de jeu en ligne rust, rust en ligne"
      },
      "details": {
        "steps": [
          {
            "title": "New Type Idiom",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Newtype-Idiom",
      "description": "In diesem Lab untersuchen wir das Newtype-Idiom, das Kompilierzeitgarantien bietet, indem es uns ermöglicht, einen neuen Typ zu erstellen, der von seinem zugrunde liegenden Typ unterschieden ist. Ein Beispiel wird gezeigt, bei dem eine Struktur Years verwendet wird, um das Alter in Jahren darzustellen, und eine Struktur Days verwendet wird, um das Alter in Tagen darzustellen. Mit dem Newtype-Idiom können wir sicherstellen, dass der richtige Werttyp an ein Programm übergeben wird, wie beispielsweise in der Altersüberprüfungsfunktion old_enough, die einen Wert vom Typ Years erfordert. Darüber hinaus lernen wir, wie wir den Wert eines Newtypes als seinen zugrunde liegenden Typ mithilfe von Tuple- oder Destrukturierungsyntax erhalten.",
      "meta": {
        "title": "Das Newtype-Idiom in Rust erkunden",
        "description": "Taucht in die Rust-Programmiersprache ein und lernen Sie das Newtype-Idiom kennen, das Kompilierzeitgarantien für Ihren Code bietet.",
        "keywords": "Newtype, Rust, Rust-Spielfeld, Kompilierzeitgarantien, Rust-Tutor, Rust-Online-Compiler, Rust-Befehle, Rust-Praxis, Rust-Online-Spielfeld, Rust-Online"
      },
      "details": {
        "steps": [
          {
            "title": "Newtype-Idiom",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "新しい型のイディオム",
      "description": "この実験では、新しい型のイディオムを調べます。これは、基礎となる型とは異なる新しい型を作成することでコンパイル時の保証を提供します。例として、年齢を表す Years という構造体と、日数で表す Days という構造体があります。新しい型のイディオムを使用することで、適切な型の値がプログラムに供給されることを保証できます。たとえば、年齢検証関数 old_enough では Years 型の値が必要です。また、タプルや分解構文を使って新しい型の値をその基礎となる型として取得する方法を学びます。",
      "meta": {
        "title": "Rust における新しい型のイディオムの探索",
        "description": "Rust プログラミング言語に入り、コードにコンパイル時の保証を提供する新しい型のイディオムについて学びましょう。",
        "keywords": "新しい型，Rust, Rust プレイグラウンド，コンパイル時の保証，Rust チューター, Rust オンラインコンパイラ，Rust コマンド，Rust 練習，Rust オンラインプレイグラウンド，Rust オンライン"
      },
      "details": {
        "steps": [
          {
            "title": "新しい型のイディオム",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップでは現在検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップでは現在検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Идиома нового типа",
      "description": "В этой лабораторной работе мы исследуем идиому нового типа, которая обеспечивает гарантии на этапе компиляции, позволяя нам создавать новый тип, отличный от его базового типа. Приводится пример, где структура Years используется для представления возраста в годах, а структура Days используется для представления возраста в днях. Используя идиому нового типа, мы можем гарантировать, что в программу подается правильный тип значения, например, в функции проверки возраста old_enough, которая требует значения типа Years. Кроме того, мы узнаем, как получить значение нового типа в виде его базового типа с использованием синтаксиса кортежей или деструктуризации.",
      "meta": {
        "title": "Исследование идиомы нового типа в Rust",
        "description": "Погрузитесь в язык программирования Rust и узнайте о идиоме нового типа, которая обеспечивает гарантии на этапе компиляции для вашего кода.",
        "keywords": "новый тип, rust, игровой полигон rust, гарантии на этапе компиляции, преподаватель rust, онлайн-компилятор rust, команды rust, практика rust, онлайн-игровой полигон rust, rust онлайн"
      },
      "details": {
        "steps": [
          {
            "title": "Идиома нового типа",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "새로운 타입 관용구",
      "description": "이 실습에서는 새로운 타입을 기존 타입과 구별하여 컴파일 시점 보장을 제공하는 새로운 타입 관용구를 탐색합니다. 예를 들어, 연 단위 나이를 나타내는 Years 구조체와 일 단위 나이를 나타내는 Days 구조체를 사용하는 예시가 있습니다. 새로운 타입 관용구를 사용하면 나이 확인 함수 old_enough 와 같이 특정 타입의 값이 필요한 프로그램에 올바른 타입의 값이 제공되도록 보장할 수 있습니다. 또한, 튜플 또는 구조 분해 구문을 사용하여 새로운 타입의 값을 기본 타입으로 얻는 방법을 배웁니다.",
      "meta": {
        "title": "Rust 에서 새로운 타입 관용구 탐색",
        "description": "Rust 프로그래밍 언어를 깊이 있게 파고들어 코드에 대한 컴파일 시점 보장을 제공하는 새로운 타입 관용구에 대해 알아보세요.",
        "keywords": "새로운 타입, rust, rust 플레이그라운드, 컴파일 시점 보장, rust 튜터, rust 온라인 컴파일러, rust 명령어, rust 연습, rust 온라인 플레이그라운드, rust 온라인, rust 실습, 나이 확인, 타입 시스템, 구조체, 튜플, 구조 분해"
      },
      "details": {
        "steps": [
          {
            "title": "새로운 타입 관용구",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Idioma de Novo Tipo",
      "description": "Neste laboratório, exploramos o idiom de novo tipo, que fornece garantias em tempo de compilação, permitindo criar um novo tipo distinto do seu tipo subjacente. É apresentado um exemplo onde uma estrutura Years é usada para representar a idade em anos e uma estrutura Days para representar a idade em dias. Ao usar o idiom de novo tipo, podemos garantir que o tipo de valor correto é fornecido a um programa, como na função de verificação de idade old_enough, que requer um valor do tipo Years. Adicionalmente, aprendemos como obter o valor de um novo tipo como seu tipo subjacente usando sintaxe de tupla ou desestruturação.",
      "meta": {
        "title": "Explorando o Idioma de Novo Tipo em Rust",
        "description": "Mergulhe na linguagem de programação Rust e aprenda sobre o idiom de novo tipo, que fornece garantias em tempo de compilação para o seu código.",
        "keywords": "novo tipo, rust, playground rust, garantias em tempo de compilação, tutor rust, compilador online rust, comandos rust, prática rust, playground online rust, rust online"
      },
      "details": {
        "steps": [
          {
            "title": "Idioma de Novo Tipo",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
