{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Simplifying Rust Option Handling with Map",
  "description": "In this lab, we explore the usage of the map() combinator in Rust to simplify the control flow and handle Option types in a concise and modular way.",
  "meta": {
    "title": "Rust Programming | Option Handling with Map Combinator",
    "description": "Explore the usage of the map() combinator in Rust to simplify control flow and handle Option types in a concise and modular way.",
    "keywords": "Rust, Programming, Option, Map Combinator, Control Flow, Modular Programming"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Combinators: map",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/error_propagation",
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/lifetime_specifiers",
          "rust/method_syntax",
          "rust/operator_overloading",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用 Map 简化 Rust 中的 Option 处理",
      "description": "在本实验中，我们探索 Rust 中 map() 组合器的用法，以简化控制流并以简洁且模块化的方式处理 Option 类型。",
      "meta": {
        "title": "Rust 编程 | 使用 Map 组合器处理 Option",
        "description": "探索 Rust 中 map() 组合器的用法，以简化控制流并以简洁且模块化的方式处理 Option 类型。",
        "keywords": "Rust, 编程，Option, Map 组合器，控制流，模块化编程"
      },
      "details": {
        "steps": [
          {
            "title": "组合器：map",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Simplificando el manejo de Option en Rust con Map",
      "description": "En este laboratorio, exploramos el uso del combinador map() en Rust para simplificar el flujo de control y manejar tipos Option de manera concisa y modular.",
      "meta": {
        "title": "Programación Rust | Manejo de Option con el Combinador Map",
        "description": "Explora el uso del combinador map() en Rust para simplificar el flujo de control y manejar tipos Option de manera concisa y modular.",
        "keywords": "Rust, Programación, Option, Combinador Map, Flujo de Control, Programación Modular"
      },
      "details": {
        "steps": [
          {
            "title": "Combinadores: map",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Simplifier la gestion des types Option en Rust avec Map",
      "description": "Dans ce laboratoire, nous explorons l'utilisation du combinateur map() en Rust pour simplifier le flux de contrôle et gérer les types Option de manière concise et modulaire.",
      "meta": {
        "title": "Programmation Rust | Gestion des types Option avec le combinateur Map",
        "description": "Explorez l'utilisation du combinateur map() en Rust pour simplifier le flux de contrôle et gérer les types Option de manière concise et modulaire.",
        "keywords": "Rust, Programmation, Option, Combinateur Map, Flux de contrôle, Programmation modulaire"
      },
      "details": {
        "steps": [
          {
            "title": "Combinateurs : map",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Vereinfachen der Option-Behandlung in Rust mit Map",
      "description": "In diesem Lab untersuchen wir die Verwendung des map()-Kombinatoren in Rust, um die Kontrollstruktur zu vereinfachen und Option-Typen auf eine präzise und modulare Weise zu verarbeiten.",
      "meta": {
        "title": "Rust-Programmierung | Option-Behandlung mit Map-Kombinator",
        "description": "Untersuchen Sie die Verwendung des map()-Kombinatoren in Rust, um die Kontrollstruktur zu vereinfachen und Option-Typen auf eine präzise und modulare Weise zu verarbeiten.",
        "keywords": "Rust, Programmierung, Option, Map-Kombinator, Kontrollstruktur, Modulare Programmierung"
      },
      "details": {
        "steps": [
          {
            "title": "Kombinatoren: map",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rust の map を使ったオプション処理の簡略化",
      "description": "この実験では、Rust の map() コンビネータの使い方を調べ、制御フローを簡略化し、簡潔でモジュール性の高い方法でオプション型を扱います。",
      "meta": {
        "title": "Rust プログラミング | map コンビネータを使ったオプション処理",
        "description": "Rust の map() コンビネータの使い方を調べ、制御フローを簡略化し、簡潔でモジュール性の高い方法でオプション型を扱います。",
        "keywords": "Rust, プログラミング，オプション，map コンビネータ，制御フロー, モジュールプログラミング"
      },
      "details": {
        "steps": [
          {
            "title": "コンビネータ：map",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Упрощение обработки Option в Rust с использованием map",
      "description": "В этом лабе мы исследуем использование комбинатора map() в Rust для упрощения управления потоком и обработки типов Option кратко и модульно.",
      "meta": {
        "title": "Программирование на Rust | Обработка Option с использованием комбинатора Map",
        "description": "Исследуйте использование комбинатора map() в Rust для упрощения управления потоком и обработки типов Option кратко и модульно.",
        "keywords": "Rust, Программирование, Option, Комбинатор Map, Управление потоком, Модульное программирование"
      },
      "details": {
        "steps": [
          {
            "title": "Комбинаторы: map",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "Rust Option 처리 간소화: Map 활용",
      "description": "이 랩에서는 Rust 의 `map()` 컴비네이터를 사용하여 제어 흐름을 간소화하고, `Option` 타입을 간결하고 모듈 방식으로 처리하는 방법을 살펴봅니다.",
      "meta": {
        "title": "Rust 프로그래밍 | Map 컴비네이터를 이용한 Option 처리",
        "description": "Rust 에서 `map()` 컴비네이터를 사용하여 제어 흐름을 간소화하고 `Option` 타입을 간결하고 모듈 방식으로 처리하는 방법을 알아보세요.",
        "keywords": "Rust, 프로그래밍, Option, Map 컴비네이터, 제어 흐름, 모듈 프로그래밍, Rust Option 처리"
      },
      "details": {
        "steps": [
          {
            "title": "컴비네이터: map",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Simplificando o Tratamento de `Option` em Rust com `Map`",
      "description": "Neste laboratório, exploramos o uso do combinador `map()` em Rust para simplificar o fluxo de controle e lidar com tipos `Option` de forma concisa e modular.",
      "meta": {
        "title": "Programação Rust | Tratamento de `Option` com o Combinador `Map`",
        "description": "Explore o uso do combinador `map()` em Rust para simplificar o fluxo de controle e lidar com tipos `Option` de forma concisa e modular. Aprenda a otimizar seu código Rust com o `map()`!",
        "keywords": "Rust, Programação, Option, Combinador Map, Fluxo de Controle, Programação Modular, Rust map, tratamento de option rust"
      },
      "details": {
        "steps": [
          {
            "title": "Combinadores: map",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Este passo não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Este passo não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
