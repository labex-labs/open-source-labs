{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Simplifying Rust Option Handling with Map",
  "description": "In this lab, we explore the usage of the map() combinator in Rust to simplify the control flow and handle Option types in a concise and modular way.",
  "meta": {
    "title": "Rust Programming | Option Handling with Map Combinator",
    "description": "Explore the usage of the map() combinator in Rust to simplify control flow and handle Option types in a concise and modular way.",
    "keywords": "Rust, Programming, Option, Map Combinator, Control Flow, Modular Programming"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Combinators: map",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/error_propagation",
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/lifetime_specifiers",
          "rust/method_syntax",
          "rust/operator_overloading",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用 Map 简化 Rust 中的 Option 处理",
      "description": "在本实验中，我们探索 Rust 中 map() 组合器的用法，以简化控制流并以简洁且模块化的方式处理 Option 类型。",
      "meta": {
        "title": "Rust 编程 | 使用 Map 组合器处理 Option",
        "description": "探索 Rust 中 map() 组合器的用法，以简化控制流并以简洁且模块化的方式处理 Option 类型。",
        "keywords": "Rust, 编程, Option, Map 组合器, 控制流, 模块化编程"
      },
      "details": {
        "steps": [
          {
            "title": "组合器：map",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
