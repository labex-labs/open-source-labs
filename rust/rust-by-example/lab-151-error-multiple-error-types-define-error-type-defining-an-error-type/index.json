{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Defining an Error Type",
  "description": "In this lab, we are looking at how to define a custom error type in Rust and the key characteristics that make a good error type, such as representing different errors with the same type, providing clear error messages, easy comparison with other types, and the ability to hold information about the error. We also examine an example code that demonstrates the implementation of a custom error type and its usage in error handling scenarios.",
  "meta": {
    "title": "Defining a Custom Error Type in Rust",
    "description": "Learn how to define a custom error type in Rust, including key characteristics and an example implementation.",
    "keywords": "rust playground, error handling, rust tutor, custom error type, rust online compiler, rust commands, error comparison, error messages, rust practice, rust online"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Defining an error type",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/method_syntax",
          "rust/operator_overloading",
          "rust/string_type",
          "rust/traits",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "定义错误类型",
      "description": "在本实验中，我们将探讨如何在Rust中定义自定义错误类型，以及构成良好错误类型的关键特性，例如用同一类型表示不同错误、提供清晰的错误消息、便于与其他类型进行比较，以及能够保存有关错误的信息。我们还将研究一个示例代码，该代码演示了自定义错误类型的实现及其在错误处理场景中的用法。",
      "meta": {
        "title": "在Rust中定义自定义错误类型",
        "description": "学习如何在Rust中定义自定义错误类型，包括关键特性和示例实现。",
        "keywords": "Rust游乐场, 错误处理, Rust教程, 自定义错误类型, Rust在线编译器, Rust命令, 错误比较, 错误消息, Rust练习, Rust在线"
      },
      "details": {
        "steps": [
          {
            "title": "定义错误类型",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
