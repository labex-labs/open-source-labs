{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Defining an Error Type",
  "description": "In this lab, we are looking at how to define a custom error type in Rust and the key characteristics that make a good error type, such as representing different errors with the same type, providing clear error messages, easy comparison with other types, and the ability to hold information about the error. We also examine an example code that demonstrates the implementation of a custom error type and its usage in error handling scenarios.",
  "meta": {
    "title": "Defining a Custom Error Type in Rust",
    "description": "Learn how to define a custom error type in Rust, including key characteristics and an example implementation.",
    "keywords": "rust playground, error handling, rust tutor, custom error type, rust online compiler, rust commands, error comparison, error messages, rust practice, rust online"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Defining an error type",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/method_syntax",
          "rust/operator_overloading",
          "rust/string_type",
          "rust/traits",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "定义错误类型",
      "description": "在本实验中，我们将探讨如何在 Rust 中定义自定义错误类型，以及构成良好错误类型的关键特性，例如用同一类型表示不同错误、提供清晰的错误消息、便于与其他类型进行比较，以及能够保存有关错误的信息。我们还将研究一个示例代码，该代码演示了自定义错误类型的实现及其在错误处理场景中的用法。",
      "meta": {
        "title": "在 Rust 中定义自定义错误类型",
        "description": "学习如何在 Rust 中定义自定义错误类型，包括关键特性和示例实现。",
        "keywords": "Rust 游乐场，错误处理，Rust 教程，自定义错误类型，Rust 在线编译器，Rust 命令，错误比较，错误消息，Rust 练习，Rust 在线"
      },
      "details": {
        "steps": [
          {
            "title": "定义错误类型",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Definiendo un Tipo de Error",
      "description": "En este laboratorio, estamos viendo cómo definir un tipo de error personalizado en Rust y las características clave que hacen de un buen tipo de error, como representar diferentes errores con el mismo tipo, proporcionar mensajes de error claros, facilitar la comparación con otros tipos y la capacidad de contener información sobre el error. También examinamos un código de ejemplo que demuestra la implementación de un tipo de error personalizado y su uso en escenarios de manejo de errores.",
      "meta": {
        "title": "Definiendo un Tipo de Error Personalizado en Rust",
        "description": "Aprende cómo definir un tipo de error personalizado en Rust, incluyendo las características clave y una implementación de ejemplo.",
        "keywords": "playground de rust, manejo de errores, tutor de rust, tipo de error personalizado, compilador en línea de rust, comandos de rust, comparación de errores, mensajes de error, práctica de rust, rust en línea"
      },
      "details": {
        "steps": [
          {
            "title": "Definiendo un tipo de error",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificaciones en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificaciones en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Définition d'un type d'erreur personnalisé",
      "description": "Dans ce laboratoire, nous allons voir comment définir un type d'erreur personnalisé en Rust et les principales caractéristiques qui font d'un bon type d'erreur, telles que la représentation de différentes erreurs avec le même type, la fourniture de messages d'erreur clairs, la comparaison facile avec d'autres types et la capacité de conserver des informations sur l'erreur. Nous allons également examiner un exemple de code qui démontre l'implémentation d'un type d'erreur personnalisé et son utilisation dans des scénarios de gestion d'erreurs.",
      "meta": {
        "title": "Définir un type d'erreur personnalisé en Rust",
        "description": "Découvrez comment définir un type d'erreur personnalisé en Rust, y compris les principales caractéristiques et une implémentation d'exemple.",
        "keywords": "plateforme de pratique Rust, gestion d'erreurs, tutoriel Rust, type d'erreur personnalisé, compilateur en ligne Rust, commandes Rust, comparaison d'erreurs, messages d'erreur, pratique Rust, en ligne Rust"
      },
      "details": {
        "steps": [
          {
            "title": "Définition d'un type d'erreur",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Definieren eines Fehlertyps",
      "description": "In diesem Lab betrachten wir, wie man in Rust einen benutzerdefinierten Fehlertyp definiert und welche Schlüsselmerkmale einen guten Fehlertyp ausmachen, wie z. B. die Darstellung unterschiedlicher Fehler mit demselben Typ, die Bereitstellung von klaren Fehlermeldungen, das einfache Vergleichen mit anderen Typen und die Möglichkeit, Informationen über den Fehler zu speichern. Wir betrachten auch ein Beispielcode, der die Implementierung eines benutzerdefinierten Fehlertyps und seine Verwendung in Fehlerbehandlungsszenarien demonstriert.",
      "meta": {
        "title": "Definieren eines benutzerdefinierten Fehlertyps in Rust",
        "description": "Lernen Sie, wie man in Rust einen benutzerdefinierten Fehlertyp definiert, einschließlich der Schlüsselmerkmale und einer Beispielimplementierung.",
        "keywords": "rust spielplatz, fehlerbehandlung, rust tutor, benutzerdefinierter fehlertyp, rust online compiler, rust befehle, fehlervergleich, fehlermeldungen, rust übung, rust online"
      },
      "details": {
        "steps": [
          {
            "title": "Definieren eines Fehlertyps",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "エラー型の定義",
      "description": "この実験では、Rust でカスタム エラー型を定義する方法と、良いエラー型を作るための重要な特性について見ていきます。これらの特性とは、同じ型で異なるエラーを表現すること、明確なエラー メッセージを提供すること、他の型との比較が容易であること、およびエラーに関する情報を保持できることです。また、カスタム エラー型の実装とエラー ハンドリング シナリオでの使用方法を示すサンプル コードも検討します。",
      "meta": {
        "title": "Rust でカスタム エラー型を定義する",
        "description": "Rust でカスタム エラー型を定義する方法、重要な特性、およびサンプル 実装について学びましょう。",
        "keywords": "rust プレイグラウンド，エラー ハンドリング，rust チューター, カスタム エラー型，rust オンライン コンパイラ，rust コマンド，エラー比較，エラー メッセージ，rust 練習，rust オンライン"
      },
      "details": {
        "steps": [
          {
            "title": "エラー型の定義",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップでは現在検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップでは現在検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Определение типа ошибок",
      "description": "В этом лабе мы изучаем, как определить пользовательский тип ошибок в Rust и ключевые характеристики, которые делают хороший тип ошибок, такие как представление различных ошибок одним типом, предоставление ясных сообщений об ошибках, простое сравнение с другими типами и возможность хранения информации об ошибке. Мы также изучаем пример кода, демонстрирующий реализацию пользовательского типа ошибок и его использование в сценариях обработки ошибок.",
      "meta": {
        "title": "Определение пользовательского типа ошибок в Rust",
        "description": "Изучите, как определить пользовательский тип ошибок в Rust, включая ключевые характеристики и пример реализации.",
        "keywords": "rust playground, обработка ошибок, rust tutor, пользовательский тип ошибок, rust online compiler, rust команды, сравнение ошибок, сообщения об ошибках, практика rust, rust online"
      },
      "details": {
        "steps": [
          {
            "title": "Определение типа ошибок",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "에러 타입 정의하기",
      "description": "이 랩에서는 Rust 에서 사용자 정의 에러 타입을 정의하는 방법과, 동일한 타입으로 다양한 에러를 표현하고, 명확한 에러 메시지를 제공하며, 다른 타입과의 쉬운 비교, 에러에 대한 정보를 담을 수 있는 등 좋은 에러 타입의 주요 특징을 살펴봅니다. 또한 사용자 정의 에러 타입의 구현과 에러 처리 시나리오에서의 사용법을 보여주는 예제 코드를 살펴봅니다.",
      "meta": {
        "title": "Rust 에서 사용자 정의 에러 타입 정의 방법",
        "description": "Rust 에서 사용자 정의 에러 타입을 정의하는 방법을 배우세요. 주요 특징과 예제 구현을 포함합니다.",
        "keywords": "러스트 플레이그라운드, 에러 처리, 러스트 튜터, 사용자 정의 에러 타입, 러스트 온라인 컴파일러, 러스트 명령어, 에러 비교, 에러 메시지, 러스트 연습, 러스트 온라인"
      },
      "details": {
        "steps": [
          {
            "title": "에러 타입 정의",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Definindo um Tipo de Erro",
      "description": "Neste laboratório, estamos analisando como definir um tipo de erro personalizado em Rust e as principais características que tornam um bom tipo de erro, como representar diferentes erros com o mesmo tipo, fornecer mensagens de erro claras, fácil comparação com outros tipos e a capacidade de conter informações sobre o erro. Também examinamos um código de exemplo que demonstra a implementação de um tipo de erro personalizado e seu uso em cenários de tratamento de erros.",
      "meta": {
        "title": "Definindo um Tipo de Erro Personalizado em Rust - Tutorial e Exemplo",
        "description": "Aprenda a definir um tipo de erro personalizado em Rust, incluindo características chave e um exemplo de implementação. Melhore o tratamento de erros em seus projetos Rust.",
        "keywords": "rust playground, tratamento de erros, tutorial rust, tipo de erro personalizado, compilador online rust, comandos rust, comparação de erros, mensagens de erro, prática rust, rust online, erros em rust, como tratar erros rust"
      },
      "details": {
        "steps": [
          {
            "title": "Definindo um tipo de erro",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Esta etapa não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Esta etapa não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
