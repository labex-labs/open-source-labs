{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Printable Types in Rust's Standard Library",
  "description": "In this lab, it is explained that in order to use the std::fmt formatting traits, types must have an implementation to be printable, which can be automatically provided for types in the std library. For other types, the fmt::Debug trait can be derived to enable printing. The fmt::Debug trait makes it straightforward to implement printable types, while fmt::Display needs to be manually implemented. The fmt::Debug trait allows all types to derive the implementation for printing, and the same applies to {:?} for std library types. The lab also mentions the use of {:?} for printing and provides an example of how to use it to print different types. Additionally, the concept of 'pretty printing' with {:#?} is introduced, which provides a more elegant representation of data structures. Finally, it is mentioned that fmt::Display can be manually implemented to have control over the display of types.",
  "meta": {
    "title": "Rust Programming | Formatting Traits | Printable Types",
    "description": "Learn how to use Rust's formatting traits, such as fmt::Debug and fmt::Display, to make your custom types printable. Explore the concepts of automatic and manual implementation for printable types.",
    "keywords": "Rust, programming, formatting, traits, fmt::Debug, fmt::Display, printable types"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Debug",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/string_type",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 标准库中的可打印类型",
      "description": "在本实验中，将解释为了使用 std::fmt 格式化特性，类型必须有一个可打印的实现，对于 std 库中的类型，该实现可以自动提供。对于其他类型，可以派生 fmt::Debug 特性以启用打印。fmt::Debug 特性使实现可打印类型变得很直接，而 fmt::Display 则需要手动实现。fmt::Debug 特性允许所有类型派生打印实现，对于 std 库类型，{:?} 也是如此。本实验还提到了使用 {:?} 进行打印，并提供了一个如何使用它来打印不同类型的示例。此外，还引入了使用 {:#?} 进行“漂亮打印”的概念，它提供了一种更优雅的数据结构表示形式。最后提到，可以手动实现 fmt::Display 以控制类型的显示。",
      "meta": {
        "title": "Rust 编程 | 格式化特性 | 可打印类型",
        "description": "学习如何使用 Rust 的格式化特性，如 fmt::Debug 和 fmt::Display，使自定义类型可打印。探索可打印类型的自动和手动实现概念。",
        "keywords": "Rust, 编程, 格式化, 特性, fmt::Debug, fmt::Display, 可打印类型"
      },
      "details": {
        "steps": [
          {
            "title": "调试",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Tipos Imprimibles en la Biblioteca Estándar de Rust",
      "description": "En este laboratorio, se explica que para utilizar las características de formato std::fmt, los tipos deben tener una implementación para ser imprimibles, lo cual puede ser proporcionado automáticamente para los tipos en la biblioteca std. Para otros tipos, se puede derivar la característica fmt::Debug para habilitar la impresión. La característica fmt::Debug hace que sea sencillo implementar tipos imprimibles, mientras que fmt::Display debe ser implementado manualmente. La característica fmt::Debug permite que todos los tipos deriven la implementación para la impresión, y lo mismo aplica a {:?} para los tipos de la biblioteca std. El laboratorio también menciona el uso de {:?} para la impresión y proporciona un ejemplo de cómo usarlo para imprimir diferentes tipos. Además, se introduce el concepto de 'impresión bonita' con {:#?}, que proporciona una representación más elegante de las estructuras de datos. Finalmente, se menciona que fmt::Display se puede implementar manualmente para tener control sobre la representación de los tipos.",
      "meta": {
        "title": "Programación en Rust | Características de Formato | Tipos Imprimibles",
        "description": "Aprende cómo utilizar las características de formato de Rust, como fmt::Debug y fmt::Display, para hacer que tus tipos personalizados sean imprimibles. Explora los conceptos de implementación automática y manual para tipos imprimibles.",
        "keywords": "Rust, programación, formato, características, fmt::Debug, fmt::Display, tipos imprimibles"
      },
      "details": {
        "steps": [
          {
            "title": "Depuración",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Types imprimables dans la bibliothèque standard de Rust",
      "description": "Dans ce laboratoire, il est expliqué que pour utiliser les traits de formatage std::fmt, les types doivent avoir une implémentation pour être imprimables, ce qui peut être automatiquement fourni pour les types de la bibliothèque std. Pour les autres types, le trait fmt::Debug peut être dérivé pour activer l'impression. Le trait fmt::Debug facilite la mise en œuvre des types imprimables, tandis que fmt::Display doit être implémenté manuellement. Le trait fmt::Debug permet à tous les types de dériver l'implémentation pour l'impression, et il en est de même pour {:?} pour les types de la bibliothèque std. Le laboratoire mentionne également l'utilisation de {:?} pour l'impression et fournit un exemple de manière à utiliser pour imprimer différents types. De plus, le concept d'impression jolie avec {:#?} est introduit, qui fournit une représentation plus élégante des structures de données. Enfin, il est mentionné que fmt::Display peut être implémenté manuellement pour avoir un contrôle sur l'affichage des types.",
      "meta": {
        "title": "Programmation Rust | Traits de formatage | Types imprimables",
        "description": "Découvrez comment utiliser les traits de formatage de Rust, tels que fmt::Debug et fmt::Display, pour rendre vos types personnalisés imprimables. Explorez les concepts d'implémentation automatique et manuelle pour les types imprimables.",
        "keywords": "Rust, programmation, formatage, traits, fmt::Debug, fmt::Display, types imprimables"
      },
      "details": {
        "steps": [
          {
            "title": "Débogage",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Ausdruckbare Typen in der Standardbibliothek von Rust",
      "description": "In diesem Lab wird erklärt, dass um die Formatierungseigenschaften von std::fmt zu verwenden, Typen eine Implementierung für die Ausdruckbarkeit haben müssen, was automatisch für Typen in der std-Bibliothek bereitgestellt werden kann. Für andere Typen kann das fmt::Debug-Attribut abgeleitet werden, um die Ausgabe zu ermöglichen. Das fmt::Debug-Attribut vereinfacht die Implementierung von ausdruckbaren Typen, während fmt::Display manuell implementiert werden muss. Das fmt::Debug-Attribut ermöglicht es allen Typen, die Implementierung für die Ausgabe abzuleiten, und das gleiche gilt für {:?} für Typen der std-Bibliothek. Im Lab wird auch die Verwendung von {:?} für die Ausgabe erwähnt und ein Beispiel dafür gegeben, wie es verwendet werden kann, um verschiedene Typen auszugeben. Darüber hinaus wird das Konzept des 'schönen Ausgebens' mit {:#?} eingeführt, das eine elegantere Darstellung von Datenstrukturen bietet. Schließlich wird erwähnt, dass fmt::Display manuell implementiert werden kann, um die Darstellung von Typen zu steuern.",
      "meta": {
        "title": "Rust-Programmierung | Formatierungseigenschaften | Ausdruckbare Typen",
        "description": "Lernen Sie, wie Sie die Formatierungseigenschaften von Rust, wie fmt::Debug und fmt::Display, verwenden, um Ihre benutzerdefinierten Typen ausdruckbar zu machen. Erkunden Sie die Konzepte der automatischen und manuellen Implementierung für ausdruckbare Typen.",
        "keywords": "Rust, Programmierung, Formatierung, Attribute, fmt::Debug, fmt::Display, ausdruckbare Typen"
      },
      "details": {
        "steps": [
          {
            "title": "Debug",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rustの標準ライブラリにおける表示可能な型",
      "description": "この実験では、`std::fmt` のフォーマット特性を使用するには、型が表示可能な実装を持っている必要があることが説明されています。これは、`std` ライブラリ内の型には自動的に提供されます。他の型の場合、`fmt::Debug` 特性を派生させることで表示を可能にすることができます。`fmt::Debug` 特性は、表示可能な型の実装を簡単にする一方、`fmt::Display` は手動で実装する必要があります。`fmt::Debug` 特性はすべての型に表示用の実装を派生させることができ、`std` ライブラリの型に対する `{:?}` も同様です。この実験ではまた、`{:?}` を使用した表示の方法も触れられており、さまざまな型を表示するための使用例が示されています。さらに、`{:#?}` による「見やすい表示」の概念が導入され、これはデータ構造のよりエレガントな表現を提供します。最後に、`fmt::Display` を手動で実装することで型の表示を制御できることが述べられています。",
      "meta": {
        "title": "Rustプログラミング | フォーマット特性 | 表示可能な型",
        "description": "Rustのフォーマット特性、たとえば `fmt::Debug` と `fmt::Display` を使って、独自の型を表示可能にする方法を学びましょう。表示可能な型の自動および手動実装の概念を探求しましょう。",
        "keywords": "Rust, プログラミング, フォーマット, 特性, fmt::Debug, fmt::Display, 表示可能な型"
      },
      "details": {
        "steps": [
          {
            "title": "Debug",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップは現在検証がありません",
                "file": "verify1-1.sh",
                "hint": "このステップは現在検証がありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Печатные типы в стандартной библиотеке Rust",
      "description": "В этом практическом занятии объясняется, что для использования функциональности форматирования std::fmt типы должны иметь реализацию для печати, которая может быть автоматически предоставлена для типов в библиотеке std. Для других типов можно использовать трейт fmt::Debug, чтобы обеспечить возможность печати. Трейт fmt::Debug упрощает реализацию типов, которые можно печатать, в то время как для fmt::Display требуется вручную реализовать методы. Трейт fmt::Debug позволяет любым типам получить реализацию для печати, и то же самое относится к {:?} для типов библиотеки std. В практическом занятии также рассматривается использование {:?} для печати и приводится пример его использования для печати различных типов. Кроме того, вводится концепция \"красивой печати\" с использованием {:#?}, которая позволяет более элегантно представлять структуры данных. Наконец, упоминается, что можно вручную реализовать fmt::Display, чтобы иметь контроль над отображением типов.",
      "meta": {
        "title": "Программирование на Rust | Функциональность форматирования | Печатные типы",
        "description": "Изучите, как использовать функциональность форматирования Rust, такие как fmt::Debug и fmt::Display, чтобы сделать свои собственные типы печатаемыми. Исследуйте концепции автоматической и ручной реализации для печатаемых типов.",
        "keywords": "Rust, программирование, форматирование, трейты, fmt::Debug, fmt::Display, печатаемые типы"
      },
      "details": {
        "steps": [
          {
            "title": "Debug",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
