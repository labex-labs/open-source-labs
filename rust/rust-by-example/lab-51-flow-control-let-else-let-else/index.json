{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Concise Rust Pattern Matching with Let-Else",
  "description": "In this lab, the use of let-else in Rust is demonstrated, where a refutable pattern can match and bind variables in the surrounding scope, or else diverge when the pattern doesn't match by using statements like break, return, or panic!. This construct allows for concise and readable code when dealing with pattern matching and error handling scenarios, eliminating the need for repeating code blocks or using outer let statements.",
  "meta": {
    "title": "Rust Programming | Pattern Matching | Error Handling",
    "description": "Explore the use of let-else in Rust, where refutable patterns can match and bind variables or diverge when the pattern doesn't match, enabling concise and readable code for pattern matching and error handling scenarios.",
    "keywords": "Rust, Programming, Pattern Matching, Error Handling, let-else"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "let-else",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/method_syntax",
          "rust/mutable_variables",
          "rust/panic_usage",
          "rust/shadowing",
          "rust/string_type",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用 Rust 的 let-else 实现简洁的模式匹配",
      "description": "在本实验中，将演示 Rust 中 let-else 的用法。其中，可反驳模式能够匹配并绑定周围作用域中的变量，若模式不匹配，则可通过使用 break、return 或 panic! 等语句来使程序发散。在处理模式匹配和错误处理场景时，这种结构能让代码简洁且易读，无需重复代码块或使用外部 let 语句。",
      "meta": {
        "title": "Rust 编程 | 模式匹配 | 错误处理",
        "description": "探索 Rust 中 let-else 的用法，其中可反驳模式能够匹配并绑定变量，或者在模式不匹配时使程序发散，从而为模式匹配和错误处理场景提供简洁易读的代码。",
        "keywords": "Rust, 编程, 模式匹配, 错误处理, let-else"
      },
      "details": {
        "steps": [
          {
            "title": "let-else",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Coincidencia de patrones concisa en Rust con Let-Else",
      "description": "En este laboratorio, se demuestra el uso de let-else en Rust, donde un patrón refutable puede coincidir y enlazar variables en el ámbito circundante, o en su defecto diverger cuando el patrón no coincide mediante el uso de declaraciones como break, return o panic!. Esta construcción permite un código conciso y legible cuando se trata de casos de coincidencia de patrones y manejo de errores, eliminando la necesidad de repetir bloques de código o usar declaraciones let externas.",
      "meta": {
        "title": "Programación en Rust | Coincidencia de patrones | Manejo de errores",
        "description": "Explora el uso de let-else en Rust, donde los patrones refutables pueden coincidir y enlazar variables o diverger cuando el patrón no coincide, lo que permite un código conciso y legible para casos de coincidencia de patrones y manejo de errores.",
        "keywords": "Rust, Programación, Coincidencia de patrones, Manejo de errores, let-else"
      },
      "details": {
        "steps": [
          {
            "title": "let-else",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "En este momento, este paso no tiene verificación",
                "file": "verify1-1.sh",
                "hint": "En este momento, este paso no tiene verificación"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Correspondance de motifs Rust concise avec Let-Else",
      "description": "Dans ce laboratoire, on démontre l'utilisation de let-else en Rust, où un motif réfutable peut correspondre et lier des variables dans la portée environnante, ou sinon diverger lorsque le motif ne correspond pas en utilisant des instructions telles que break, return, ou panic!. Cette construction permet d'avoir un code concis et lisible lorsqu'il s'agit de traiter des scénarios de correspondance de motifs et de gestion d'erreurs, éliminant la nécessité de répéter des blocs de code ou d'utiliser des instructions let externes.",
      "meta": {
        "title": "Programmation Rust | Correspondance de motifs | Gestion d'erreurs",
        "description": "Explorez l'utilisation de let-else en Rust, où les motifs réfutables peuvent correspondre et lier des variables ou diverger lorsque le motif ne correspond pas, permettant d'avoir un code concis et lisible pour les scénarios de correspondance de motifs et de gestion d'erreurs.",
        "keywords": "Rust, Programmation, Correspondance de motifs, Gestion d'erreurs, let-else"
      },
      "details": {
        "steps": [
          {
            "title": "let-else",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Kurzweilige Rust-Musterabgleich mit Let-Else",
      "description": "In diesem Lab wird die Verwendung von let-else in Rust demonstriert, wobei ein widerlegbares Muster Variablen im umgebenden Gültigkeitsbereich abgleichen und binden kann, oder andernfalls divergieren kann, wenn das Muster nicht übereinstimmt, indem Anweisungen wie break, return oder panic! verwendet werden. Dieser Aufbau ermöglicht es, bei der Behandlung von Musterabgleich und Fehlerbehandlungsszenarien kompakte und lesbare Code zu schreiben, wodurch die Wiederholung von Codeblöcken oder die Verwendung von äußeren let-Anweisungen entfällt.",
      "meta": {
        "title": "Rust-Programmierung | Musterabgleich | Fehlerbehandlung",
        "description": "Erkunden Sie die Verwendung von let-else in Rust, bei der widerlegbare Muster Variablen abgleichen und binden können oder divergieren, wenn das Muster nicht übereinstimmt, was für kompakte und lesbare Code bei Musterabgleich und Fehlerbehandlungsszenarien ermöglicht.",
        "keywords": "Rust, Programmierung, Musterabgleich, Fehlerbehandlung, let-else"
      },
      "details": {
        "steps": [
          {
            "title": "let-else",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Let-Elseを使った簡潔なRustのパターンマッチング",
      "description": "この実験では、Rustにおけるlet-elseの使用方法を示します。ここでは、検証可能なパターンが周囲のスコープ内の変数をマッチングして束縛することができ、そうでなければ、break、return、またはpanic!のような文を使用してパターンが一致しない場合には制御を抜けます。この構文は、パターンマッチングとエラーハンドリングのシナリオを扱う際に、コードブロックを繰り返す必要や外部のlet文を使用する必要をなくし、簡潔で読みやすいコードを可能にします。",
      "meta": {
        "title": "Rustプログラミング | パターンマッチング | エラーハンドリング",
        "description": "Rustにおけるlet-elseの使用方法を探りましょう。ここでは、検証可能なパターンがマッチングして変数を束縛するか、パターンが一致しない場合には制御を抜けることができ、パターンマッチングとエラーハンドリングのシナリオに対して簡潔で読みやすいコードを可能にします。",
        "keywords": "Rust, プログラミング, パターンマッチング, エラーハンドリング, let-else"
      },
      "details": {
        "steps": [
          {
            "title": "let-else",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップは現在検証がありません",
                "file": "verify1-1.sh",
                "hint": "このステップは現在検証がありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Краткое сопоставление шаблонов в Rust с использованием let-else",
      "description": "В этой лабораторной работе демонстрируется использование let-else в Rust, где разрешающий шаблон может сопоставить и связать переменные в окружающей области видимости, или же расходиться, если шаблон не соответствует, с использованием инструкций, таких как break, return или panic!. Эта конструкция позволяет писать краткий и читаемый код при работе с сценариями сопоставления шаблонов и обработки ошибок, устраняя необходимость повторения блоков кода или использования внешних инструкций let.",
      "meta": {
        "title": "Программирование на Rust | Сопоставление шаблонов | Обработка ошибок",
        "description": "Изучите использование let-else в Rust, где разрешающие шаблоны могут сопоставить и связать переменные или расходиться, если шаблон не соответствует, что позволяет писать краткий и читаемый код для сценариев сопоставления шаблонов и обработки ошибок.",
        "keywords": "Rust, Программирование, Сопоставление шаблонов, Обработка ошибок, let-else"
      },
      "details": {
        "steps": [
          {
            "title": "let-else",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
