{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Exploring Rust's Functional Capabilities",
  "description": "In this lab, we explore higher-order functions (HOFs) in Rust, which are functions that take one or more functions and/or produce a more useful function, and how they can be used in combination with lazy iterators to give Rust a functional flavor.",
  "meta": {
    "title": "Rust Higher-Order Functions | Functional Programming",
    "description": "Explore Rust's higher-order functions and lazy iterators to implement functional programming techniques in your Rust projects.",
    "keywords": "Rust, Higher-Order Functions, Functional Programming, Lazy Iterators, Imperative vs Functional Approach"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Higher Order Functions",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/for_loop",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/lifetime_specifiers",
          "rust/mutable_variables",
          "rust/string_type",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "探索 Rust 的函数式能力",
      "description": "在本实验中，我们探索 Rust 中的高阶函数（HOF），即接受一个或多个函数和/或生成更有用函数的函数，以及如何将它们与惰性迭代器结合使用，赋予 Rust 一种函数式风格。",
      "meta": {
        "title": "Rust 高阶函数 | 函数式编程",
        "description": "探索 Rust 的高阶函数和惰性迭代器，以便在 Rust 项目中实现函数式编程技术。",
        "keywords": "Rust, 高阶函数, 函数式编程, 惰性迭代器, 命令式与函数式方法"
      },
      "details": {
        "steps": [
          {
            "title": "高阶函数",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Explorando las capacidades funcionales de Rust",
      "description": "En este laboratorio, exploramos las funciones de orden superior (HOF, por sus siglas en inglés) en Rust, que son funciones que toman una o más funciones y/o producen una función más útil, y cómo se pueden utilizar en combinación con iteradores perezosos para darle a Rust un sabor funcional.",
      "meta": {
        "title": "Funciones de Orden Superior en Rust | Programación Funcional",
        "description": "Explore las funciones de orden superior de Rust y los iteradores perezosos para implementar técnicas de programación funcional en sus proyectos de Rust.",
        "keywords": "Rust, Funciones de Orden Superior, Programación Funcional, Iteradores Perezosos, Enfoque Imperativo vs Funcional"
      },
      "details": {
        "steps": [
          {
            "title": "Funciones de Orden Superior",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Explorer les capacités fonctionnelles de Rust",
      "description": "Dans ce laboratoire, nous explorons les fonctions de premier ordre (HOF) en Rust, qui sont des fonctions qui prennent une ou plusieurs fonctions et/ou produisent une fonction plus utile, et comment elles peuvent être utilisées en combinaison avec des itérateurs paresseux pour donner à Rust un goût fonctionnel.",
      "meta": {
        "title": "Fonctions de premier ordre Rust | Programmation fonctionnelle",
        "description": "Explorez les fonctions de premier ordre de Rust et les itérateurs paresseux pour implémenter des techniques de programmation fonctionnelle dans vos projets Rust.",
        "keywords": "Rust, Fonctions de premier ordre, Programmation fonctionnelle, Itérateurs paresseux, Approche impérative vs fonctionnelle"
      },
      "details": {
        "steps": [
          {
            "title": "Fonctions de premier ordre",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Das funktionale Potenzial von Rust erkunden",
      "description": "In diesem Lab untersuchen wir Higher-Order-Funktionen (HOFs) in Rust, das sind Funktionen, die eine oder mehrere Funktionen akzeptieren und/oder eine nützlichere Funktion erzeugen, und wie sie in Kombination mit lazy Iterators verwendet werden können, um Rust einen funktionalen Geschmack zu verleihen.",
      "meta": {
        "title": "Rust Higher-Order-Funktionen | Funktionales Programmieren",
        "description": "Entdecken Sie Rusts Higher-Order-Funktionen und lazy Iterators, um funktionale Programmiertechniken in Ihren Rust-Projekten umzusetzen.",
        "keywords": "Rust, Higher-Order-Funktionen, Funktionales Programmieren, Lazy Iterators, Imperatives vs funktionaler Ansatz"
      },
      "details": {
        "steps": [
          {
            "title": "Higher Order Functions",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Rustの関数型機能を探る",
      "description": "この実験では、Rustにおける高階関数（HOF：Higher-Order Function）について調べます。高階関数とは、1つ以上の関数を引数として受け取り、またはより有用な関数を生成する関数であり、それが遅延イテレータと組み合わせて使用されることで、Rustに関数型言語の雰囲気を与える方法についても見ていきます。",
      "meta": {
        "title": "Rustの高階関数 | 関数型プログラミング",
        "description": "Rustの高階関数と遅延イテレータを探索して、Rustプロジェクトで関数型プログラミング技術を実装しましょう。",
        "keywords": "Rust, 高階関数, 関数型プログラミング, 遅延イテレータ, 命令型対関数型アプローチ"
      },
      "details": {
        "steps": [
          {
            "title": "高階関数",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在、検証項目はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在、検証項目はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Исследование функциональных возможностей Rust",
      "description": "В этом лабораторном задании мы исследуем высших порядковых функций (HOF) в Rust, которые принимают одну или несколько функций и/или возвращают более полезную функцию, и рассмотрим, как их можно комбинировать с ленивыми итераторами, чтобы придать Rust функциональный стиль.",
      "meta": {
        "title": "Высшие порядковые функции Rust | Функциональное программирование",
        "description": "Изучите высшие порядковые функции и ленивые итераторы Rust, чтобы реализовать методы функционального программирования в своих проектах на Rust.",
        "keywords": "Rust, Высшие порядковые функции, Функциональное программирование, Ленивые итераторы, Императивный vs Функциональный подход"
      },
      "details": {
        "steps": [
          {
            "title": "Высшие порядковые функции",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
