{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Chainable Option Handling with and_then()",
  "description": "In this lab, the and_then() combinator is introduced as a chainable alternative to map() when working with Option<T>, as it avoids nesting Option<Option<T>> and simplifies code readability.",
  "meta": {
    "title": "Rust Programming | Option Combinators | and_then",
    "description": "Learn how to use the `and_then()` combinator to simplify code when working with `Option<T>` in Rust programming. Avoid nested `Option<Option<T>>` and improve readability.",
    "keywords": "Rust, Programming, Option, Combinators, and_then, Nested Options, Code Readability"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Combinators: and_then",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/lifetime_specifiers",
          "rust/operator_overloading",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用 and_then() 进行可链式的 Option 处理",
      "description": "在本实验中，当处理 Option<T>时，and_then() 组合器作为 map() 的可链式替代方法被引入，因为它避免了嵌套 Option<Option<T>>并简化了代码的可读性。",
      "meta": {
        "title": "Rust 编程 | Option 组合器 | and_then",
        "description": "学习如何在 Rust 编程中使用 `and_then()`组合器来简化处理`Option<T>`时的代码。避免嵌套`Option<Option<T>>` 并提高可读性。",
        "keywords": "Rust，编程，Option，组合器，and_then，嵌套 Option，代码可读性"
      },
      "details": {
        "steps": [
          {
            "title": "组合器：and_then",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Manejo encadenable de Option con and_then()",
      "description": "En este laboratorio, se introduce el combinador and_then() como una alternativa encadenable a map() cuando se trabaja con Option<T>, ya que evita anidar Option<Option<T>> y simplifica la legibilidad del código.",
      "meta": {
        "title": "Programación Rust | Combinadores de Option | and_then",
        "description": "Aprende cómo usar el combinador `and_then()` para simplificar el código cuando se trabaja con `Option<T>` en la programación Rust. Evita Option<Option<T>> anidados y mejora la legibilidad.",
        "keywords": "Rust, Programación, Option, Combinadores, and_then, Opciones anidadas, Legibilidad del código"
      },
      "details": {
        "steps": [
          {
            "title": "Combinadores: and_then",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "En este momento, este paso no tiene verificación",
                "file": "verify1-1.sh",
                "hint": "En este momento, este paso no tiene verificación"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Gestion chaînée d'Option avec and_then()",
      "description": "Dans ce laboratoire, le combinateur and_then() est présenté comme une alternative chaînable à map() lorsqu'on travaille avec Option<T>, car il évite d'imbriquer Option<Option<T>> et simplifie la lisibilité du code.",
      "meta": {
        "title": "Programmation Rust | Combinateurs d'Option | and_then",
        "description": "Découvrez comment utiliser le combinateur `and_then()` pour simplifier le code lorsqu'on travaille avec `Option<T>` en programmation Rust. Évitez les Option<Option<T>> imbriquées et améliorez la lisibilité.",
        "keywords": "Rust, Programmation, Option, Combinateurs, and_then, Options imbriquées, Lisibilité du code"
      },
      "details": {
        "steps": [
          {
            "title": "Combinateurs : and_then",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Kettenfähiges Option-Handling mit and_then()",
      "description": "In diesem Lab wird der and_then()-Kombinator als eine kettenfähige Alternative zu map() bei der Arbeit mit Option<T> eingeführt, da er die Verschachtelung von Option<Option<T>> vermeidet und die Code-Lesbarkeit vereinfacht.",
      "meta": {
        "title": "Rust-Programmierung | Option-Kombinatoren | and_then",
        "description": "Lernen Sie, wie Sie den `and_then()`-Kombinator verwenden, um den Code zu vereinfachen, wenn Sie mit `Option<T>` in der Rust-Programmierung arbeiten. Vermeiden Sie verschachtelte `Option<Option<T>>` und verbessern Sie die Lesbarkeit.",
        "keywords": "Rust, Programmierung, Option, Kombinatoren, and_then, Verschachtelte Optionen, Code-Lesbarkeit"
      },
      "details": {
        "steps": [
          {
            "title": "Kombinatoren: and_then",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "and_then() による連鎖可能なオプションの処理",
      "description": "この実験では、`Option<T>` を扱う際に、`map()` に代わる連鎖可能なオプションとして `and_then()` コンビネータが導入されます。これは、`Option<Option<T>>` のネストを避け、コードの読みやすさを向上させます。",
      "meta": {
        "title": "Rust プログラミング | オプション コンビネータ | and_then",
        "description": "Rust プログラミングにおいて `Option<T>` を扱う際に、`and_then()` コンビネータを使ってコードを簡略化する方法を学びましょう。ネストされた `Option<Option<T>>` を避け、読みやすさを向上させましょう。",
        "keywords": "Rust, プログラミング，オプション，コンビネータ，and_then, ネストされたオプション，コードの読みやすさ"
      },
      "details": {
        "steps": [
          {
            "title": "コンビネータ：and_then",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Цепляемая обработка Option с помощью and_then()",
      "description": "В этом лабораторном задании комбинатор and_then() представляется в качестве цепляемой альтернативы map() при работе с Option<T>, так как он избавляет от необходимости вложения Option<Option<T>> и упрощает читаемость кода.",
      "meta": {
        "title": "Программирование на Rust | Комбинаторы Option | and_then",
        "description": "Изучите, как использовать комбинатор and_then() для упрощения кода при работе с Option<T> в программировании на Rust. Избегайте вложенных Option<Option<T>> и улучшайте читаемость.",
        "keywords": "Rust, Программирование, Option, Комбинаторы, and_then, Вложенные Option, Читаемость кода"
      },
      "details": {
        "steps": [
          {
            "title": "Комбинаторы: and_then",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
