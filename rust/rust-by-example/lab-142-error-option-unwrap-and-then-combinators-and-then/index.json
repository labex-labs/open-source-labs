{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Chainable Option Handling with and_then()",
  "description": "In this lab, the and_then() combinator is introduced as a chainable alternative to map() when working with Option<T>, as it avoids nesting Option<Option<T>> and simplifies code readability.",
  "meta": {
    "title": "Rust Programming | Option Combinators | and_then",
    "description": "Learn how to use the `and_then()` combinator to simplify code when working with `Option<T>` in Rust programming. Avoid nested `Option<Option<T>>` and improve readability.",
    "keywords": "Rust, Programming, Option, Combinators, and_then, Nested Options, Code Readability"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Combinators: and_then",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/lifetime_specifiers",
          "rust/operator_overloading",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用and_then()进行可链式的Option处理",
      "description": "在本实验中，当处理Option<T>时，and_then()组合器作为map()的可链式替代方法被引入，因为它避免了嵌套Option<Option<T>>并简化了代码的可读性。",
      "meta": {
        "title": "Rust编程 | Option组合器 | and_then",
        "description": "学习如何在Rust编程中使用`and_then()`组合器来简化处理`Option<T>`时的代码。避免嵌套`Option<Option<T>>`并提高可读性。",
        "keywords": "Rust,编程,Option,组合器,and_then,嵌套Option,代码可读性"
      },
      "details": {
        "steps": [
          {
            "title": "组合器：and_then",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
