{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Wrapping Errors with Custom Type",
  "description": "In this lab, the alternative approach of wrapping errors in a custom error type is demonstrated. The code example showcases how to define a Result type alias that uses the DoubleError enum as the error variant, which wraps the standard library's ParseIntError. By implementing the fmt::Display, error::Error, and From traits, the custom error type can provide additional information and handle underlying errors.",
  "meta": {
    "title": "Wrapping Errors in a Custom Error Type | Rust Programming",
    "description": "Learn how to wrap errors in a custom error type in Rust, providing additional information and handling underlying errors.",
    "keywords": "Rust, error handling, custom error types, error wrapping, programming tutorials"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Wrapping errors",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/method_syntax",
          "rust/operator_overloading",
          "rust/string_type",
          "rust/traits",
          "rust/type_casting",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用自定义类型包装错误",
      "description": "在本实验中，展示了将错误包装在自定义错误类型中的另一种方法。代码示例展示了如何定义一个Result类型别名，该别名使用DoubleError枚举作为错误变体，它包装了标准库的ParseIntError。通过实现fmt::Display、error::Error和From特性，自定义错误类型可以提供额外信息并处理底层错误。",
      "meta": {
        "title": "在自定义错误类型中包装错误 | Rust编程",
        "description": "了解如何在Rust中使用自定义错误类型包装错误，提供额外信息并处理底层错误。",
        "keywords": "Rust, 错误处理, 自定义错误类型, 错误包装, 编程教程"
      },
      "details": {
        "steps": [
          {
            "title": "包装错误",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
