{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Wrapping Errors with Custom Type",
  "description": "In this lab, the alternative approach of wrapping errors in a custom error type is demonstrated. The code example showcases how to define a Result type alias that uses the DoubleError enum as the error variant, which wraps the standard library's ParseIntError. By implementing the fmt::Display, error::Error, and From traits, the custom error type can provide additional information and handle underlying errors.",
  "meta": {
    "title": "Wrapping Errors in a Custom Error Type | Rust Programming",
    "description": "Learn how to wrap errors in a custom error type in Rust, providing additional information and handling underlying errors.",
    "keywords": "Rust, error handling, custom error types, error wrapping, programming tutorials"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Wrapping errors",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/integer_types",
          "rust/method_syntax",
          "rust/operator_overloading",
          "rust/string_type",
          "rust/traits",
          "rust/type_casting",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用自定义类型包装错误",
      "description": "在本实验中，展示了将错误包装在自定义错误类型中的另一种方法。代码示例展示了如何定义一个Result类型别名，该别名使用DoubleError枚举作为错误变体，它包装了标准库的ParseIntError。通过实现fmt::Display、error::Error和From特性，自定义错误类型可以提供额外信息并处理底层错误。",
      "meta": {
        "title": "在自定义错误类型中包装错误 | Rust编程",
        "description": "了解如何在Rust中使用自定义错误类型包装错误，提供额外信息并处理底层错误。",
        "keywords": "Rust, 错误处理, 自定义错误类型, 错误包装, 编程教程"
      },
      "details": {
        "steps": [
          {
            "title": "包装错误",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Envolver errores con un tipo personalizado",
      "description": "En este laboratorio, se demuestra el enfoque alternativo de envolver errores en un tipo de error personalizado. El ejemplo de código muestra cómo definir un alias de tipo Result que utiliza la enumeración DoubleError como la variante de error, que envuelve el ParseIntError de la biblioteca estándar. Al implementar los rasgos fmt::Display, error::Error y From, el tipo de error personalizado puede proporcionar información adicional y manejar errores subyacentes.",
      "meta": {
        "title": "Envolver errores en un tipo de error personalizado | Programación Rust",
        "description": "Aprende cómo envolver errores en un tipo de error personalizado en Rust, proporcionando información adicional y manejando errores subyacentes.",
        "keywords": "Rust, manejo de errores, tipos de errores personalizados, envolver errores, tutoriales de programación"
      },
      "details": {
        "steps": [
          {
            "title": "Envolver errores",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Encapsulation d'erreurs avec un type personnalisé",
      "description": "Dans ce laboratoire, l'approche alternative consistant à encapsuler les erreurs dans un type d'erreur personnalisé est démontrée. L'exemple de code montre comment définir un alias de type Result qui utilise l'énumération DoubleError comme variant d'erreur, qui encapsule l'ParseIntError de la bibliothèque standard. En implémentant les traits fmt::Display, error::Error et From, le type d'erreur personnalisé peut fournir des informations supplémentaires et gérer les erreurs sous-jacentes.",
      "meta": {
        "title": "Encapsulation d'erreurs dans un type d'erreur personnalisé | Programmation Rust",
        "description": "Découvrez comment encapsuler les erreurs dans un type d'erreur personnalisé en Rust, en fournissant des informations supplémentaires et en gérant les erreurs sous-jacentes.",
        "keywords": "Rust, gestion d'erreurs, types d'erreurs personnalisés, encapsulation d'erreurs, tutoriels de programmation"
      },
      "details": {
        "steps": [
          {
            "title": "Encapsulation des erreurs",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Fehler mit benutzerdefiniertem Typ umschließen",
      "description": "In diesem Lab wird der alternative Ansatz demonstriert, Fehler in einem benutzerdefinierten Fehlertyp zu verpacken. Das Codebeispiel zeigt, wie man einen Result-Typalias definiert, der die DoubleError-Enumeration als Fehlervariante verwendet, die die ParseIntError der Standardbibliothek umschließt. Indem man die fmt::Display, error::Error und From-Traits implementiert, kann der benutzerdefinierte Fehlertyp zusätzliche Informationen bereitstellen und zugrunde liegende Fehler behandeln.",
      "meta": {
        "title": "Fehler in einem benutzerdefinierten Fehlertyp umschließen | Rust-Programmierung",
        "description": "Lernen Sie, wie Sie in Rust Fehler in einem benutzerdefinierten Fehlertyp umschließen, zusätzliche Informationen bereitstellen und zugrunde liegende Fehler behandeln.",
        "keywords": "Rust, Fehlerbehandlung, benutzerdefinierte Fehlertypen, Fehlerumschluss, Programmier-Tutorials"
      },
      "details": {
        "steps": [
          {
            "title": "Fehler umschließen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "独自の型でエラーをラップする",
      "description": "この実験では、独自のエラー型にエラーをラップする代替アプローチを示します。コード例では、`DoubleError` 列挙型をエラーバリアントとして使用する `Result` 型エイリアスを定義する方法を示しており、これは標準ライブラリの `ParseIntError` をラップしています。`fmt::Display`、`error::Error`、および `From` トレイトを実装することで、独自のエラー型は追加情報を提供し、基礎となるエラーを処理することができます。",
      "meta": {
        "title": "独自のエラー型でエラーをラップする | Rust プログラミング",
        "description": "Rust で独自のエラー型にエラーをラップする方法を学び、追加情報を提供して基礎となるエラーを処理しましょう。",
        "keywords": "Rust, エラーハンドリング, 独自のエラー型, エラーのラップ, プログラミング チュートリアル"
      },
      "details": {
        "steps": [
          {
            "title": "エラーのラップ",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在、検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在、検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Оборачивание ошибок в пользовательском типе",
      "description": "В этом лабораторном задании демонстрируется альтернативный подход к оборачиванию ошибок в пользовательский тип ошибок. Пример кода показывает, как определить псевдоним типа Result, который использует перечисление DoubleError в качестве варианта ошибки, оборачивающего стандартную ошибку ParseIntError из стандартной библиотеки. Реализация трейтов fmt::Display, error::Error и From позволяет пользовательскому типу ошибок предоставлять дополнительную информацию и обрабатывать ошибки нижележащих уровней.",
      "meta": {
        "title": "Оборачивание ошибок в пользовательском типе ошибок | Программирование на Rust",
        "description": "Изучите, как оборачивать ошибки в пользовательском типе ошибок в Rust, предоставляя дополнительную информацию и обрабатывая ошибки нижележащих уровней.",
        "keywords": "Rust, обработка ошибок, пользовательские типы ошибок, оборачивание ошибок, учебники по программированию"
      },
      "details": {
        "steps": [
          {
            "title": "Оборачивание ошибок",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
