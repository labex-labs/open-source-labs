{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Filesystem Operations in Rust",
  "description": "In this lab, the std::fs module in Rust is introduced, which provides functions for filesystem operations. The lab provides examples of various filesystem operations including creating directories, creating files, reading file contents, creating symbolic links, listing directory contents, removing files, and removing directories. The code snippets demonstrate how to perform these operations using the std::fs module functions, and the expected output for each operation is provided. Additionally, an alternative implementation of the cat function using the ? notation for error handling is mentioned.",
  "meta": {
    "title": "Mastering Filesystem Operations in Rust",
    "description": "Explore the powerful capabilities of the Rust standard library's filesystem module with hands-on examples and practical applications.",
    "keywords": "rust playground, directory management, filesystem, file operations, rust tutor, rust online compiler, rust commands, rust practice, rust online, rust online playground"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Filesystem Operations",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/boolean_type",
          "rust/expressions_statements",
          "rust/for_loop",
          "rust/function_syntax",
          "rust/method_syntax",
          "rust/mutable_variables",
          "rust/operator_overloading",
          "rust/string_type",
          "rust/variable_declarations"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Rust 中的文件系统操作",
      "description": "在本实验中，将介绍 Rust 中的 `std::fs` 模块，该模块提供了用于文件系统操作的函数。本实验提供了各种文件系统操作的示例，包括创建目录、创建文件、读取文件内容、创建符号链接、列出目录内容、删除文件和删除目录。代码片段展示了如何使用 `std::fs` 模块函数执行这些操作，并提供了每个操作的预期输出。此外，还提到了使用 `?` 表示法进行错误处理的 `cat` 函数的替代实现。",
      "meta": {
        "title": "掌握 Rust 中的文件系统操作",
        "description": "通过实际示例和实际应用探索 Rust 标准库文件系统模块的强大功能。",
        "keywords": "Rust 游乐场, 目录管理, 文件系统, 文件操作, Rust 教程, Rust 在线编译器, Rust 命令, Rust 实践, Rust 在线, Rust 在线游乐场"
      },
      "details": {
        "steps": [
          {
            "title": "文件系统操作",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
