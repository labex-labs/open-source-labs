{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "To and From Strings",
  "description": "In this lab, we will learn about converting to and from strings in Rust. To convert any type to a string, we can implement the ToString trait for the type. Alternatively, we can implement the fmt::Display trait, which automatically provides the ToString trait and allows us to print the type using println!. On the other hand, to parse a string into a specific type, such as a number, we can use the parse function along with type inference or by specifying the type using the 'turbofish' syntax. This relies on the FromStr trait, which is implemented for many types in the standard library. If we want to parse a string into a user-defined type, we can implement the FromStr trait for that type.",
  "meta": {
    "title": "Converting to and from Strings in Rust",
    "description": "Learn how to convert any type to a string and parse a string into a specific type in Rust.",
    "keywords": "rust playground, tostring, fromstr, string conversion, rust tutor, rust online compiler, string parsing, rust commands, rust practice, rust online"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "To and from Strings",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "与字符串的转换",
      "description": "在本实验中，我们将学习如何在 Rust 中进行字符串的转换。要将任何类型转换为字符串，我们可以为该类型实现 ToString 特性。或者，我们也可以实现 fmt::Display 特性，它会自动提供 ToString 特性，并允许我们使用 println! 打印该类型。另一方面，要将字符串解析为特定类型，比如数字，我们可以使用 parse 函数，并结合类型推断，或者使用“turbofish”语法指定类型。这依赖于 FromStr 特性，标准库中的许多类型都实现了该特性。如果我们想将字符串解析为用户定义的类型，可以为该类型实现 FromStr 特性。",
      "meta": {
        "title": "Rust 中的字符串转换",
        "description": "学习如何在 Rust 中将任何类型转换为字符串以及将字符串解析为特定类型。",
        "keywords": "rust 游乐场，tostring, fromstr, 字符串转换，rust 教程，rust 在线编译器，字符串解析，rust 命令，rust 练习，rust 在线"
      },
      "details": {
        "steps": [
          {
            "title": "与字符串的转换",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Conversiones a y desde cadenas",
      "description": "En este laboratorio, aprenderemos sobre cómo convertir a cadenas y de cadenas en Rust. Para convertir cualquier tipo a una cadena, podemos implementar el trato ToString para el tipo. Alternativamente, podemos implementar el trato fmt::Display, que automáticamente proporciona el trato ToString y nos permite imprimir el tipo usando println!. Por otro lado, para analizar una cadena en un tipo específico, como un número, podemos usar la función parse junto con la inferencia de tipos o especificando el tipo usando la sintaxis 'turbofish'. Esto se basa en el trato FromStr, que está implementado para muchos tipos en la biblioteca estándar. Si queremos analizar una cadena en un tipo definido por el usuario, podemos implementar el trato FromStr para ese tipo.",
      "meta": {
        "title": "Conversiones a cadenas y de cadenas en Rust",
        "description": "Aprende cómo convertir cualquier tipo a una cadena y analizar una cadena en un tipo específico en Rust.",
        "keywords": "rust playground, tostring, fromstr, conversión de cadenas, tutor de rust, compilador en línea de rust, análisis de cadenas, comandos de rust, práctica de rust, rust en línea"
      },
      "details": {
        "steps": [
          {
            "title": "Conversiones a y desde cadenas",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Conversions entre chaînes de caractères",
      "description": "Dans ce laboratoire, nous allons apprendre à convertir des types en chaînes de caractères et vice versa en Rust. Pour convertir n'importe quel type en chaîne de caractères, nous pouvons implémenter le trait ToString pour ce type. Alternativement, nous pouvons implémenter le trait fmt::Display, qui fournit automatiquement le trait ToString et nous permet d'afficher le type en utilisant println!. D'un autre côté, pour analyser une chaîne de caractères en un type spécifique, tel qu'un nombre, nous pouvons utiliser la fonction parse avec l'inférence de type ou en spécifiant le type en utilisant la syntaxe 'turbofish'. Cela repose sur le trait FromStr, qui est implémenté pour de nombreux types dans la bibliothèque standard. Si nous voulons analyser une chaîne de caractères en un type défini par l'utilisateur, nous pouvons implémenter le trait FromStr pour ce type.",
      "meta": {
        "title": "Conversion de types en chaînes de caractères et vice versa en Rust",
        "description": "Découvrez comment convertir n'importe quel type en chaîne de caractères et analyser une chaîne de caractères en un type spécifique en Rust.",
        "keywords": "plateforme de pratique Rust, ToString, FromStr, conversion de chaînes de caractères, tutoriel Rust, compilateur en ligne Rust, analyse de chaînes de caractères, commandes Rust, pratique Rust, en ligne Rust"
      },
      "details": {
        "steps": [
          {
            "title": "Conversions entre chaînes de caractères",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Strings hin und her",
      "description": "In diesem Lab lernen wir, wie wir in Rust zwischen anderen Typen und Strings umwandeln. Um einen beliebigen Typ in einen String umzuwandeln, können wir das ToString-Attribut für diesen Typ implementieren. Alternativ können wir das fmt::Display-Attribut implementieren, das automatisch das ToString-Attribut bereitstellt und uns erlaubt, den Typ mit println! auszugeben. Um einen String in einen bestimmten Typ, wie eine Zahl, zu analysieren, können wir die parse-Funktion zusammen mit Typinferenz verwenden oder den Typ mithilfe der 'Turbofish'-Syntax angeben. Dies beruht auf dem FromStr-Attribut, das für viele Typen in der Standardbibliothek implementiert ist. Wenn wir einen String in einen benutzerdefinierten Typ analysieren möchten, können wir das FromStr-Attribut für diesen Typ implementieren.",
      "meta": {
        "title": "Stringsumwandlung in Rust",
        "description": "Lernen Sie, wie Sie in Rust einen beliebigen Typ in einen String umwandeln und einen String in einen bestimmten Typ analysieren.",
        "keywords": "Rust-Spielplatz, ToString, FromStr, Stringumwandlung, Rust-Tutor, Rust-Online-Compiler, Stringanalyse, Rust-Befehle, Rust-Praxis, Rust-Online"
      },
      "details": {
        "steps": [
          {
            "title": "Strings hin und her",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "文字列への変換と文字列からの変換",
      "description": "この実験では、Rust で文字列への変換と文字列からの変換について学びます。任意の型を文字列に変換するには、その型に対して `ToString` トレイトを実装します。あるいは、`fmt::Display` トレイトを実装することもできます。このトレイトは自動的に `ToString` トレイトを提供し、`println!` を使って型を表示することができます。一方、文字列を特定の型（たとえば数値）に解析するには、型推論を伴って `parse` 関数を使うか、'turbofish' 構文を使って型を指定することができます。これは、標準ライブラリの多くの型に対して実装されている `FromStr` トレイトに依存しています。ユーザー定義型に文字列を解析したい場合は、その型に対して `FromStr` トレイトを実装することができます。",
      "meta": {
        "title": "Rust における文字列への変換と文字列からの変換",
        "description": "Rust で任意の型を文字列に変換し、文字列を特定の型に解析する方法を学びましょう。",
        "keywords": "rust プレイグラウンド，tostring, fromstr, 文字列変換，rust チューター, rust オンラインコンパイラ，文字列解析，rust コマンド，rust 練習，rust オンライン"
      },
      "details": {
        "steps": [
          {
            "title": "文字列への変換と文字列からの変換",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Преобразование в строку и обратно",
      "description": "В этой лабораторной работе мы узнаем, как преобразовывать типы в строки и обратно в Rust. Чтобы преобразовать любой тип в строку, мы можем реализовать трейт ToString для этого типа. Альтернативно, мы можем реализовать трейт fmt::Display, который автоматически предоставляет трейт ToString и позволяет нам выводить тип с использованием println!. С другой стороны, чтобы преобразовать строку в определенный тип, например, число, мы можем использовать функцию parse с использованием типа-инференса или, указав тип с использованием синтаксиса 'turbofish'. Это основано на трейте FromStr, который реализован для многих типов в стандартной библиотеке. Если мы хотим преобразовать строку в пользовательский тип, мы можем реализовать трейт FromStr для этого типа.",
      "meta": {
        "title": "Преобразование типов в строки и обратно в Rust",
        "description": "Изучите, как преобразовать любой тип в строку и преобразовать строку в определенный тип в Rust.",
        "keywords": "rust playground, tostring, fromstr, преобразование строк, rust tutor, rust online compiler, парсинг строк, rust команды, практика rust, rust online"
      },
      "details": {
        "steps": [
          {
            "title": "Преобразование в строку и обратно",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "문자열 변환",
      "description": "이 실습에서는 Rust 에서 문자열로 변환 및 문자열에서 변환하는 방법을 배웁니다. 어떤 타입이든 문자열로 변환하려면 해당 타입에 ToString 트레이트를 구현할 수 있습니다. 또는 fmt::Display 트레이트를 구현할 수도 있는데, 이는 자동으로 ToString 트레이트를 제공하고 println! 을 사용하여 타입을 출력할 수 있도록 합니다. 반대로, 문자열을 숫자와 같은 특정 타입으로 구문 분석하려면 parse 함수와 함께 타입 추론을 사용하거나 'turbofish' 구문을 사용하여 타입을 명시적으로 지정할 수 있습니다. 이는 표준 라이브러리에서 많은 타입에 대해 구현된 FromStr 트레이트에 의존합니다. 사용자 정의 타입으로 문자열을 구문 분석하려면 해당 타입에 FromStr 트레이트를 구현할 수 있습니다.",
      "meta": {
        "title": "Rust 에서 문자열 변환",
        "description": "Rust 에서 어떤 타입이든 문자열로 변환하고 문자열을 특정 타입으로 구문 분석하는 방법을 배우세요.",
        "keywords": "rust, 문자열 변환, rust 문자열, rust tostring, rust fromstr, 문자열 구문 분석, rust 실습, rust 온라인 컴파일러, rust 튜터, rust 코딩 연습, rust playground, rust 명령어, 문자열 처리"
      },
      "details": {
        "steps": [
          {
            "title": "문자열 변환",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Conversão para e de Strings",
      "description": "Neste laboratório, aprenderemos sobre a conversão para e de strings em Rust. Para converter qualquer tipo para uma string, podemos implementar o traço ToString para o tipo. Alternativamente, podemos implementar o traço fmt::Display, que automaticamente fornece o traço ToString e nos permite imprimir o tipo usando println!. Por outro lado, para analisar uma string em um tipo específico, como um número, podemos usar a função parse juntamente com a inferência de tipo ou especificando o tipo usando a sintaxe 'turbofish'. Isso depende do traço FromStr, que é implementado para muitos tipos na biblioteca padrão. Se quisermos analisar uma string em um tipo definido pelo usuário, podemos implementar o traço FromStr para esse tipo.",
      "meta": {
        "title": "Conversão de Tipos para e de Strings em Rust",
        "description": "Aprenda como converter qualquer tipo para uma string e analisar uma string em um tipo específico em Rust.",
        "keywords": "playground rust, tostring, fromstr, conversão de string, tutor rust, compilador online rust, análise de string, comandos rust, prática rust, rust online, rust conversão string, rust análise string"
      },
      "details": {
        "steps": [
          {
            "title": "Conversão para e de Strings",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Esta etapa não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Esta etapa não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
