{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Alternate/Custom Key Types",
  "description": "In this lab, we explore the use of alternate/custom key types in Rust's HashMap, which can include types that implement the Eq and Hash traits such as bool, int, uint, String, and &str. Additionally, we can implement these traits for custom types by using the #[derive(PartialEq, Eq, Hash)] attribute, allowing them to be used as keys in a HashMap.",
  "meta": {
    "title": "Exploring Alternate and Custom Key Types in Rust's HashMap",
    "description": "Learn how to use different data types, including custom structs, as keys in Rust's HashMap for building flexible and efficient data structures.",
    "keywords": "data structures, rust playground, rust online playground, rust tutor, rust online compiler, custom keys, rust commands, rust practice, hashmap, rust online"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Alternate/custom key types",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "替代/自定义键类型",
      "description": "在本实验中，我们探索在 Rust 的 HashMap 中使用替代/自定义键类型，这些类型可以包括实现 Eq 和 Hash 特性的类型，如 bool、int、uint、String 和 &str。此外，我们可以通过使用 #[derive(PartialEq, Eq, Hash)] 属性为自定义类型实现这些特性，从而允许它们在 HashMap 中用作键。",
      "meta": {
        "title": "探索 Rust 的 HashMap 中的替代和自定义键类型",
        "description": "了解如何在 Rust 的 HashMap 中使用不同的数据类型（包括自定义结构体）作为键，以构建灵活高效的数据结构。",
        "keywords": "数据结构，Rust 游乐场，Rust 在线游乐场，Rust 教程，Rust 在线编译器，自定义键，Rust 命令，Rust 练习，哈希映射，Rust 在线"
      },
      "details": {
        "steps": [
          {
            "title": "替代/自定义键类型",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Tipos de claves alternativas/personalizadas",
      "description": "En este laboratorio, exploramos el uso de tipos de claves alternativas/personalizadas en el HashMap de Rust, que pueden incluir tipos que implementen los tratos Eq y Hash, como bool, int, uint, String y &str. Además, podemos implementar estos tratos para tipos personalizados mediante el atributo #[derive(PartialEq, Eq, Hash)], lo que les permite ser utilizados como claves en un HashMap.",
      "meta": {
        "title": "Explorando tipos de claves alternativas y personalizadas en el HashMap de Rust",
        "description": "Aprende a usar diferentes tipos de datos, incluyendo struct personalizados, como claves en el HashMap de Rust para construir estructuras de datos flexibles y eficientes.",
        "keywords": "estructuras de datos, playground de Rust, playground en línea de Rust, tutor de Rust, compilador en línea de Rust, claves personalizadas, comandos de Rust, práctica de Rust, hashmap, Rust en línea"
      },
      "details": {
        "steps": [
          {
            "title": "Tipos de claves alternativas/personalizadas",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificaciones en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificaciones en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Types de clés alternatifs/ personnalisés",
      "description": "Dans ce laboratoire, nous explorons l'utilisation de types de clés alternatifs/ personnalisés dans le HashMap de Rust, qui peut inclure des types qui implémentent les traits Eq et Hash tels que bool, int, uint, String et &str. De plus, nous pouvons implémenter ces traits pour des types personnalisés en utilisant l'attribut #[derive(PartialEq, Eq, Hash)], leur permettant d'être utilisés comme clés dans un HashMap.",
      "meta": {
        "title": "Explorer les types de clés alternatifs et personnalisés dans le HashMap de Rust",
        "description": "Découvrez comment utiliser différents types de données, y compris des structs personnalisés, comme clés dans le HashMap de Rust pour construire des structures de données flexibles et efficaces.",
        "keywords": "structures de données, terrain de jeu Rust, terrain de jeu Rust en ligne, tuteur Rust, compilateur en ligne Rust, clés personnalisées, commandes Rust, pratique Rust, hashmap, Rust en ligne"
      },
      "details": {
        "steps": [
          {
            "title": "Types de clés alternatifs/ personnalisés",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Alternativ/Benutzerdefinierte Schlüsseltypen",
      "description": "In diesem Lab untersuchen wir die Verwendung alternativer/benutzerdefinierter Schlüsseltypen in Rusts HashMap, die Typen umfassen können, die die Eq- und Hash-Traits implementieren, wie bool, int, uint, String und &str. Darüber hinaus können wir diese Traits für benutzerdefinierte Typen mithilfe des #[derive(PartialEq, Eq, Hash)]-Attributs implementieren, was es ihnen ermöglicht, als Schlüssel in einer HashMap zu verwendet werden.",
      "meta": {
        "title": "Das Erkunden alternativer und benutzerdefinierter Schlüsseltypen in Rusts HashMap",
        "description": "Lernen Sie, wie Sie verschiedene Datentypen, einschließlich benutzerdefinierter Structs, als Schlüssel in Rusts HashMap verwenden, um flexible und effiziente Datenstrukturen zu erstellen.",
        "keywords": "Datenstrukturen, Rust-Spielfeld, online Rust-Spielfeld, Rust-Tutor, online Rust-Compiler, benutzerdefinierte Schlüssel, Rust-Befehle, Rust-Praxis, Hashmap, online Rust"
      },
      "details": {
        "steps": [
          {
            "title": "Alternativ/Benutzerdefinierte Schlüsseltypen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "代替/カスタム キー型",
      "description": "この実験では、Rust の HashMap における代替/カスタム キー型の使用方法を検討します。これには、bool、int、uint、String、&str など、Eq と Hash トレイトを実装する型が含まれます。また、#[derive(PartialEq, Eq, Hash)] 属性を使用してカスタム型にこれらのトレイトを実装することができ、HashMap のキーとして使用できるようになります。",
      "meta": {
        "title": "Rust の HashMap における代替およびカスタム キー型の検討",
        "description": "Rust の HashMap でキーとして、カスタム構造体を含むさまざまなデータ型を使用して、柔軟で効率的なデータ構造を構築する方法を学びましょう。",
        "keywords": "データ構造，Rust プレイグラウンド，Rust オンライン プレイグラウンド，Rust チューター, Rust オンライン コンパイラ，カスタム キー, Rust コマンド，Rust 練習，ハッシュマップ，Rust オンライン"
      },
      "details": {
        "steps": [
          {
            "title": "代替/カスタム キー型",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップには現在検証はありません",
                "file": "verify1-1.sh",
                "hint": "このステップには現在検証はありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Альтернативные/Настраиваемые Типы Ключей",
      "description": "В этой лабораторной работе мы исследуем использование альтернативных/настраиваемых типов ключей в HashMap языка Rust, которые могут включать типы, реализующие трейты Eq и Hash, такие как bool, int, uint, String и &str. Кроме того, мы можем реализовать эти трейты для пользовательских типов, используя атрибут #[derive(PartialEq, Eq, Hash)], что позволяет использовать их в качестве ключей в HashMap.",
      "meta": {
        "title": "Исследование Альтернативных и Настраиваемых Типов Ключей в HashMap Rust",
        "description": "Изучите, как использовать различные типы данных, включая пользовательские структуры, в качестве ключей в HashMap Rust для создания гибких и эффективных структур данных.",
        "keywords": "структуры данных, игровая площадка Rust, онлайн-игровая площадка Rust, преподаватель Rust, онлайн-компилятор Rust, настраиваемые ключи, команды Rust, практика Rust, hashmap, Rust онлайн"
      },
      "details": {
        "steps": [
          {
            "title": "Альтернативные/Настраиваемые Типы Ключей",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "대체/사용자 지정 키 유형",
      "description": "이 실습에서는 Rust 의 HashMap 에서 대체/사용자 지정 키 유형의 사용법을 탐색합니다. 이는 bool, int, uint, String, &str 과 같이 Eq 및 Hash 트레이트를 구현하는 유형을 포함할 수 있습니다. 또한, #[derive(PartialEq, Eq, Hash)] 어트리뷰트를 사용하여 사용자 지정 유형에 이러한 트레이트를 구현하여 HashMap 의 키로 사용할 수 있습니다.",
      "meta": {
        "title": "Rust HashMap 에서 대체 및 사용자 지정 키 유형 탐색",
        "description": "유연하고 효율적인 데이터 구조를 구축하기 위해 Rust 의 HashMap 에서 사용자 지정 구조체를 포함한 다양한 데이터 유형을 키로 사용하는 방법을 배우세요.",
        "keywords": "데이터 구조, rust 플레이그라운드, rust 온라인 플레이그라운드, rust 튜터, rust 온라인 컴파일러, 사용자 지정 키, rust 명령어, rust 연습, hashmap, rust 온라인, rust 학습, rust 예제, HashMap 활용"
      },
      "details": {
        "steps": [
          {
            "title": "대체/사용자 지정 키 유형",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "현재 이 단계에는 검증이 없습니다.",
                "file": "verify1-1.sh",
                "hint": "현재 이 단계에는 검증이 없습니다."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Tipos de Chave Alternativos/Personalizados",
      "description": "Neste laboratório, exploramos o uso de tipos de chave alternativos/personalizados no HashMap do Rust, que podem incluir tipos que implementam os traits Eq e Hash, como bool, int, uint, String e &str. Além disso, podemos implementar esses traits para tipos personalizados usando o atributo #[derive(PartialEq, Eq, Hash)], permitindo que sejam usados como chaves em um HashMap.",
      "meta": {
        "title": "Explorando Tipos de Chave Alternativos e Personalizados no HashMap do Rust",
        "description": "Aprenda como usar diferentes tipos de dados, incluindo structs personalizados, como chaves no HashMap do Rust para construir estruturas de dados flexíveis e eficientes.",
        "keywords": "estruturas de dados, playground rust, playground online rust, tutor rust, compilador online rust, chaves personalizadas, comandos rust, prática rust, hashmap, rust online"
      },
      "details": {
        "steps": [
          {
            "title": "Tipos de chave alternativos/personalizados",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Esta etapa não possui verificação no momento",
                "file": "verify1-1.sh",
                "hint": "Esta etapa não possui verificação no momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
