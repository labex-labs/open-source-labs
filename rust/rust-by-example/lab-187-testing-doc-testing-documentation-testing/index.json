{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Documenting Rust Projects with Markdown",
  "description": "In this lab, the primary way of documenting a Rust project is through annotating the source code with documentation comments, which are written in CommonMark Markdown specification and support code blocks in them. Rust takes care of correctness and these code blocks are compiled and used as documentation tests. These tests are automatically run when using the cargo test command. The motivation behind documentation tests is to serve as examples that exercise the functionality and allow using examples from the documentation as complete code snippets.",
  "meta": {
    "title": "Rust Documentation | Rust Programming | Documentation Testing",
    "description": "Learn how to document Rust projects using annotation, Markdown, and documentation testing. Improve your Rust programming skills with comprehensive examples.",
    "keywords": "Rust, Documentation, Rust Programming, Documentation Testing, Markdown, Code Examples"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Documentation testing",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "This step has no verification at the moment",
            "file": "verify1-1.sh",
            "hint": "This step has no verification at the moment",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "rust/expressions_statements",
          "rust/function_syntax",
          "rust/lifetime_specifiers",
          "rust/method_syntax"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "MIT",
    "url": "https://github.com/rust-lang/rust-by-example/blob/master/LICENSE-MIT",
    "repo": "https://github.com/rust-lang/rust-by-example"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用 Markdown 记录 Rust 项目",
      "description": "在本实验中，记录 Rust 项目的主要方式是通过用文档注释来注释源代码，这些注释是用 CommonMark Markdown 规范编写的，并且支持其中的代码块。Rust 会确保正确性，并且这些代码块会被编译并用作文档测试。当使用 cargo test 命令时，这些测试会自动运行。文档测试背后的动机是作为示例来展示功能，并允许将文档中的示例用作完整的代码片段。",
      "meta": {
        "title": "Rust 文档 | Rust 编程 | 文档测试",
        "description": "学习如何使用注释、Markdown 和文档测试来记录 Rust 项目。通过全面的示例提升你的 Rust 编程技能。",
        "keywords": "Rust, 文档, Rust 编程, 文档测试, Markdown, 代码示例"
      },
      "details": {
        "steps": [
          {
            "title": "文档测试",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "此步骤目前没有验证",
                "file": "verify1-1.sh",
                "hint": "此步骤目前没有验证"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Documentando proyectos de Rust con Markdown",
      "description": "En este laboratorio, la principal forma de documentar un proyecto de Rust es a través de la adición de comentarios de documentación al código fuente, los cuales se escriben en la especificación CommonMark Markdown y admiten bloques de código dentro de ellos. Rust se encarga de la corrección y estos bloques de código se compilan y se usan como pruebas de documentación. Estas pruebas se ejecutan automáticamente al usar el comando cargo test. La motivación detrás de las pruebas de documentación es servir como ejemplos que demuestren la funcionalidad y permitir el uso de los ejemplos de la documentación como fragmentos de código completos.",
      "meta": {
        "title": "Documentación de Rust | Programación Rust | Pruebas de documentación",
        "description": "Aprende cómo documentar proyectos de Rust usando anotación, Markdown y pruebas de documentación. Mejora tus habilidades de programación en Rust con ejemplos completos.",
        "keywords": "Rust, Documentación, Programación Rust, Pruebas de documentación, Markdown, Ejemplos de código"
      },
      "details": {
        "steps": [
          {
            "title": "Pruebas de documentación",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Este paso no tiene verificación en este momento",
                "file": "verify1-1.sh",
                "hint": "Este paso no tiene verificación en este momento"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Documenter les projets Rust avec Markdown",
      "description": "Dans ce laboratoire, la principale manière de documenter un projet Rust est d'annoter le code source avec des commentaires de documentation, qui sont écrits selon la spécification CommonMark Markdown et prennent en charge les blocs de code à l'intérieur. Rust s'occupe de la correction et ces blocs de code sont compilés et utilisés comme tests de documentation. Ces tests sont exécutés automatiquement lors de l'utilisation de la commande cargo test. La motivation derrière les tests de documentation est de servir d'exemples qui mettent en œuvre la fonctionnalité et permettent d'utiliser les exemples de la documentation comme extraits de code complets.",
      "meta": {
        "title": "Documentation Rust | Programmation Rust | Tests de documentation",
        "description": "Découvrez comment documenter les projets Rust en utilisant l'annotation, Markdown et les tests de documentation. Améliorez vos compétences en programmation Rust avec des exemples complets.",
        "keywords": "Rust, Documentation, Programmation Rust, Tests de documentation, Markdown, Exemples de code"
      },
      "details": {
        "steps": [
          {
            "title": "Tests de documentation",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Cette étape n'a pas de vérification pour le moment",
                "file": "verify1-1.sh",
                "hint": "Cette étape n'a pas de vérification pour le moment"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Das Dokumentieren von Rust-Projekten mit Markdown",
      "description": "In diesem Lab ist die primäre Methode der Dokumentation eines Rust-Projekts die Annotation des Quellcodes mit Dokumentationskommentaren, die in der CommonMark Markdown-Spezifikation geschrieben sind und Codeblöcke darin unterstützen. Rust kümmert sich um die Korrektheit und diese Codeblöcke werden kompiliert und als Dokumentationstests verwendet. Diese Tests werden automatisch ausgeführt, wenn der cargo test-Befehl verwendet wird. Der Grund hinter den Dokumentationstests ist, als Beispiele zu dienen, die die Funktionalität testen und es ermöglichen, Beispiele aus der Dokumentation als vollständige Codeausschnitte zu verwenden.",
      "meta": {
        "title": "Rust-Dokumentation | Rust-Programmierung | Dokumentationstests",
        "description": "Lernen Sie, wie Sie Rust-Projekte mithilfe von Annotation, Markdown und Dokumentationstests dokumentieren. Verbessern Sie Ihre Rust-Programmierkenntnisse mit umfassenden Beispielen.",
        "keywords": "Rust, Dokumentation, Rust-Programmierung, Dokumentationstests, Markdown, Codebeispiele"
      },
      "details": {
        "steps": [
          {
            "title": "Dokumentationstests",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Dieser Schritt hat momentan keine Verifizierung",
                "file": "verify1-1.sh",
                "hint": "Dieser Schritt hat momentan keine Verifizierung"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Markdownを使ったRustプロジェクトの文書化",
      "description": "この実験では、Rustプロジェクトを文書化する主な方法は、ソースコードにドキュメントコメントを付けることです。これらのコメントはCommonMark Markdown仕様で書かれ、コードブロックをサポートしています。Rustは正確性を保証し、これらのコードブロックはコンパイルされ、ドキュメントテストとして使用されます。これらのテストは、cargo testコマンドを使用すると自動的に実行されます。ドキュメントテストの目的は、機能をテストするための例として機能し、ドキュメントからの例を完全なコードスニペットとして使用できるようにすることです。",
      "meta": {
        "title": "Rustのドキュメント | Rustプログラミング | ドキュメントテスト",
        "description": "注釈、Markdown、ドキュメントテストを使ってRustプロジェクトをどのように文書化するか学びましょう。包括的な例でRustのプログラミングスキルを向上させましょう。",
        "keywords": "Rust, ドキュメント, Rustプログラミング, ドキュメントテスト, Markdown, コード例"
      },
      "details": {
        "steps": [
          {
            "title": "ドキュメントテスト",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "このステップは現在検証がありません",
                "file": "verify1-1.sh",
                "hint": "このステップは現在検証がありません"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Документирование проектов на Rust с использованием Markdown",
      "description": "В этой лабораторной работе основной способ документирования проекта на Rust - это комментирование исходного кода с использованием комментариев документации, которые пишутся в соответствии с спецификацией CommonMark Markdown и поддерживают в себе блоки кода. Rust заботится о правильности, и эти блоки кода компилируются и используются в качестве тестов документации. Эти тесты автоматически запускаются при использовании команды cargo test. Основная идея тестов документации - это служить примерами, которые демонстрируют функциональность и позволяют использовать примеры из документации в качестве полноценных фрагментов кода.",
      "meta": {
        "title": "Документация Rust | Программирование на Rust | Тестирование документации",
        "description": "Изучите, как документировать проекты на Rust с использованием аннотаций, Markdown и тестирования документации. Улучшите свои навыки программирования на Rust с помощью полноценных примеров.",
        "keywords": "Rust, Документация, Программирование на Rust, Тестирование документации, Markdown, Примеры кода"
      },
      "details": {
        "steps": [
          {
            "title": "Тестирование документации",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "На данный момент эта стадия не имеет проверки",
                "file": "verify1-1.sh",
                "hint": "На данный момент эта стадия не имеет проверки"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
