{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Utilize Generators For Stocksim Pipelines",
  "description": "In this lab, you will set up processing pipelines using generators and utilize the follow() function to interact with the stocksim.py program.",
  "meta": {
    "title": "Python Programming Pipelines | Generators | Data Processing",
    "description": "Explore the power of generators in Python to set up processing pipelines and efficiently handle data streams. Learn how to use generators to create modular and scalable data processing solutions.",
    "keywords": "Python, Generators, Data Processing, Pipelines, Data Streams"
  },
  "difficulty": "Beginner",
  "time": 15,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Setting up a processing pipeline",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Python History Commands",
            "file": "verify1-1.sh",
            "hint": "Please follow the instructions to complete the steps.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "python/build_in_functions",
          "python/for_loops",
          "python/importing_modules",
          "python/lists",
          "python/python_shell",
          "python/standard_libraries",
          "python/using_packages"
        ]
      },
      {
        "title": "Making more pipeline components",
        "text": "en/step2.md",
        "verify": [
          {
            "name": "Verify CSV File Structure and Printing",
            "file": "verify2-1.sh",
            "hint": "Please follow the instructions to complete the steps.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "python/build_in_functions",
          "python/classes_objects",
          "python/comments",
          "python/conditional_statements",
          "python/file_opening_closing",
          "python/for_loops",
          "python/importing_modules",
          "python/standard_libraries",
          "python/using_packages"
        ],
        "solutions": ["step2_solution.py"]
      },
      {
        "title": "Keep going",
        "text": "en/step3.md",
        "verify": [
          {
            "name": "Verify Ticker Python Script Formatting",
            "file": "verify3-1.sh",
            "hint": "Please follow the instructions to complete the steps.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "python/classes_objects",
          "python/comments",
          "python/conditional_statements",
          "python/file_opening_closing",
          "python/for_loops",
          "python/importing_modules",
          "python/lists",
          "python/standard_libraries",
          "python/tuples",
          "python/using_packages"
        ],
        "solutions": ["step3_solution.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "follow.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "structure.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "tableformat.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "ticker.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "validate.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "stocksim.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "stocklog.csv",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "CC-BY-SA-4.0",
    "url": "https://github.com/dabeaz-course/python-mastery/blob/main/LICENSE.md",
    "repo": "https://github.com/dabeaz-course/python-mastery"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "在Stocksim管道中使用生成器",
      "description": "在本实验中，你将使用生成器设置处理管道，并利用follow()函数与stocksim.py程序进行交互。",
      "meta": {
        "title": "Python编程管道 | 生成器 | 数据处理",
        "description": "探索Python中生成器的强大功能，以设置处理管道并高效处理数据流。学习如何使用生成器创建模块化和可扩展的数据处理解决方案。",
        "keywords": "Python, 生成器, 数据处理, 管道, 数据流"
      },
      "details": {
        "steps": [
          {
            "title": "设置处理管道",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证Python历史命令",
                "file": "verify1-1.sh",
                "hint": "请按照说明完成步骤。"
              }
            ]
          },
          {
            "title": "创建更多管道组件",
            "text": "zh/step2.md",
            "verify": [
              {
                "name": "验证CSV文件结构和打印",
                "file": "verify2-1.sh",
                "hint": "请按照说明完成步骤。"
              }
            ],
            "solutions": ["step2_solution.py"]
          },
          {
            "title": "继续",
            "text": "zh/step3.md",
            "verify": [
              {
                "name": "验证股票代码Python脚本格式",
                "file": "verify3-1.sh",
                "hint": "请按照说明完成步骤。"
              }
            ],
            "solutions": ["step3_solution.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Utilice Generadores para las Tubos de Stocksim",
      "description": "En este laboratorio, configurará tubos de procesamiento utilizando generadores y utilizará la función follow() para interactuar con el programa stocksim.py.",
      "meta": {
        "title": "Tubos de Programación en Python | Generadores | Procesamiento de Datos",
        "description": "Explore el poder de los generadores en Python para configurar tubos de procesamiento y manejar eficientemente flujos de datos. Aprenda cómo utilizar generadores para crear soluciones de procesamiento de datos modular y escalable.",
        "keywords": "Python, Generadores, Procesamiento de Datos, Tubos, Flujos de Datos"
      },
      "details": {
        "steps": [
          {
            "title": "Configurar una tubería de procesamiento",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar los comandos de historial de Python",
                "file": "verify1-1.sh",
                "hint": "Siga las instrucciones para completar los pasos."
              }
            ]
          },
          {
            "title": "Creando más componentes de tubería",
            "text": "es/step2.md",
            "verify": [
              {
                "name": "Verificar la estructura y la impresión del archivo CSV",
                "file": "verify2-1.sh",
                "hint": "Siga las instrucciones para completar los pasos."
              }
            ]
          },
          {
            "title": "Sigue adelante",
            "text": "es/step3.md",
            "verify": [
              {
                "name": "Verificar el formato del script de Python de cotización",
                "file": "verify3-1.sh",
                "hint": "Siga las instrucciones para completar los pasos."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Utiliser les générateurs pour les pipelines de Stocksim",
      "description": "Dans ce laboratoire, vous configurerez des pipelines de traitement à l'aide de générateurs et utiliserez la fonction follow() pour interagir avec le programme stocksim.py.",
      "meta": {
        "title": "Pipelines de programmation Python | Générateurs | Traitement de données",
        "description": "Explorez le pouvoir des générateurs en Python pour configurer des pipelines de traitement et gérer efficacement les flux de données. Découvrez comment utiliser les générateurs pour créer des solutions de traitement de données modulaires et évolutives.",
        "keywords": "Python, Générateurs, Traitement de données, Pipelines, Flux de données"
      },
      "details": {
        "steps": [
          {
            "title": "Configuration d'un pipeline de traitement",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier les commandes historiques de Python",
                "file": "verify1-1.sh",
                "hint": "Veuillez suivre les instructions pour compléter les étapes."
              }
            ]
          },
          {
            "title": "Création de plus de composants de pipeline",
            "text": "fr/step2.md",
            "verify": [
              {
                "name": "Vérifier la structure et l'impression du fichier CSV",
                "file": "verify2-1.sh",
                "hint": "Veuillez suivre les instructions pour compléter les étapes."
              }
            ]
          },
          {
            "title": "Continuez",
            "text": "fr/step3.md",
            "verify": [
              {
                "name": "Vérifiez le formattage du script Python des titres boursiers",
                "file": "verify3-1.sh",
                "hint": "Veuillez suivre les instructions pour compléter les étapes."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Verwenden Sie Generatoren für Stocksim-Leitungen",
      "description": "In diesem Lab werden Sie Verarbeitungsleitungen mit Hilfe von Generatoren einrichten und die follow()-Funktion verwenden, um mit dem stocksim.py-Programm zu interagieren.",
      "meta": {
        "title": "Python-Programmierleitungen | Generatoren | Datenverarbeitung",
        "description": "Entdecken Sie die Macht von Generatoren in Python, um Verarbeitungsleitungen aufzubauen und Datenströme effizient zu verarbeiten. Lernen Sie, wie Sie Generatoren verwenden, um modulare und skalierbare Datenverarbeitungslösungen zu erstellen.",
        "keywords": "Python, Generatoren, Datenverarbeitung, Leitungen, Datenströme"
      },
      "details": {
        "steps": [
          {
            "title": "Ein Verarbeitungsleitungsaufbau",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Python-Historiebefehle überprüfen",
                "file": "verify1-1.sh",
                "hint": "Bitte folgen Sie den Anweisungen, um die Schritte abzuschließen."
              }
            ]
          },
          {
            "title": "Weitere Pipelinekomponenten erstellen",
            "text": "de/step2.md",
            "verify": [
              {
                "name": "CSV-Dateistruktur und -Druck überprüfen",
                "file": "verify2-1.sh",
                "hint": "Bitte folgen Sie den Anweisungen, um die Schritte abzuschließen."
              }
            ]
          },
          {
            "title": "Weiter so",
            "text": "de/step3.md",
            "verify": [
              {
                "name": "Formatierung des Python-Skripts für die Aktiensymbole überprüfen",
                "file": "verify3-1.sh",
                "hint": "Bitte folgen Sie den Anweisungen, um die Schritte abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "株価シミュレーションパイプラインにおけるジェネレータの活用",
      "description": "この実験では、ジェネレータを使って処理パイプラインを設定し、stocksim.pyプログラムとやり取りするためにfollow()関数を活用します。",
      "meta": {
        "title": "Pythonプログラミングパイプライン | ジェネレータ | データ処理",
        "description": "Pythonにおけるジェネレータの力を探求し、処理パイプラインを設定し、データストリームを効率的に処理する方法を学びましょう。ジェネレータを使ってモジュラーで拡張可能なデータ処理ソリューションを作成する方法を学びます。",
        "keywords": "Python, ジェネレータ, データ処理, パイプライン, データストリーム"
      },
      "details": {
        "steps": [
          {
            "title": "処理パイプラインの設定",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Python履歴コマンドを確認する",
                "file": "verify1-1.sh",
                "hint": "指示に従って手順を完了してください。"
              }
            ]
          },
          {
            "title": "さらに多くのパイプラインコンポーネントを作成する",
            "text": "ja/step2.md",
            "verify": [
              {
                "name": "CSVファイルの構造と印刷を確認する",
                "file": "verify2-1.sh",
                "hint": "指示に従って手順を完了してください。"
              }
            ]
          },
          {
            "title": "続けましょう",
            "text": "ja/step3.md",
            "verify": [
              {
                "name": "銘柄コードのPythonスクリプトのフォーマットを確認する",
                "file": "verify3-1.sh",
                "hint": "指示に従って手順を完了してください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Использовать генераторы для конвейеров Stocksim",
      "description": "В этой лабораторной работе вы настройте конвейеры обработки с использованием генераторов и будете использовать функцию follow() для взаимодействия с программой stocksim.py.",
      "meta": {
        "title": "Конвейеры программирования на Python | Генераторы | Обработка данных",
        "description": "Изучите мощь генераторов в Python для настройки конвейеров обработки и эффективной обработки потоков данных. Изучите, как использовать генераторы для создания модульных и масштабируемых решений обработки данных.",
        "keywords": "Python, Генераторы, Обработка данных, Конвейеры, Потоки данных"
      },
      "details": {
        "steps": [
          {
            "title": "Настройка конвейера обработки",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить команды истории Python",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, следуйте инструкциям для завершения шагов."
              }
            ]
          },
          {
            "title": "Создание дополнительных компонентов конвейера",
            "text": "ru/step2.md",
            "verify": [
              {
                "name": "Проверить структуру и печать CSV-файла",
                "file": "verify2-1.sh",
                "hint": "Пожалуйста, следуйте инструкциям для завершения шагов."
              }
            ]
          },
          {
            "title": "Продолжайте",
            "text": "ru/step3.md",
            "verify": [
              {
                "name": "Проверить форматирование Python-скрипта тикера",
                "file": "verify3-1.sh",
                "hint": "Пожалуйста, следуйте инструкциям для завершения шагов."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
