{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Customize Iteration Using Generators",
  "description": "Understand Python generators, add iteration to custom classes, enhance classes with iteration capabilities, and create a generator for streaming data to customize iteration in Python.",
  "meta": {
    "title": "Customize Iteration Using Generators",
    "description": "Understand Python generators, add iteration to custom classes, enhance classes with iteration capabilities, and create a generator for streaming data to customize iteration in Python.",
    "keywords": "Python, customize iteration, generators, custom classes, streaming data"
  },
  "difficulty": "Beginner",
  "time": 20,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "verified": true,
  "details": {
    "steps": [
      {
        "title": "Understanding Python Generators",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Python Generator Understanding",
            "file": "verify1-1.sh",
            "hint": "Make sure you've run the frange generator examples in the Python terminal.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": ["python/generators", "python/iterators"]
      },
      {
        "title": "Adding Iteration to Custom Classes",
        "text": "en/step2.md",
        "verify": [
          {
            "name": "Verify Structure Class Iteration",
            "file": "verify2-1.sh",
            "hint": "Make sure you've added the __iter__ method to the Structure class.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": ["python/classes_objects", "python/iterators"],
        "solutions": ["step2_solution.py"]
      },
      {
        "title": "Enhancing Classes with Iteration Capabilities",
        "text": "en/step3.md",
        "verify": [
          {
            "name": "Verify Structure Class Equality Method",
            "file": "verify3-1.sh",
            "hint": "Make sure you've added the __eq__ method to the Structure class.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "python/classes_objects",
          "python/conditional_statements",
          "python/iterators"
        ],
        "solutions": ["step3_solution.py"]
      },
      {
        "title": "Creating a Generator for Streaming Data",
        "text": "en/step4.md",
        "verify": [
          {
            "name": "Verify Follow Generator Function",
            "file": "verify4-1.sh",
            "hint": "Make sure you've created the follow.py file with a follow generator function.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "python/file_operations",
          "python/file_reading_writing",
          "python/generators"
        ],
        "solutions": ["follow.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "stock.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "structure.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "validate.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "stocksim.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "dowstocks.csv",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "CC-BY-SA-4.0",
    "url": "https://github.com/dabeaz-course/python-mastery/blob/main/LICENSE.md",
    "repo": "https://github.com/dabeaz-course/python-mastery"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用生成器自定义迭代",
      "description": "了解 Python 生成器，为自定义类添加迭代功能，增强类的迭代能力，并创建用于流式数据的生成器，从而在 Python 中自定义迭代。",
      "meta": {
        "title": "使用生成器自定义迭代",
        "description": "了解 Python 生成器，为自定义类添加迭代功能，增强类的迭代能力，并创建用于流式数据的生成器，从而在 Python 中自定义迭代。",
        "keywords": "Python, 自定义迭代，生成器，自定义类，流式数据"
      },
      "details": {
        "steps": [
          {
            "title": "理解 Python 生成器",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证对 Python 生成器的理解",
                "file": "verify1-1.sh",
                "hint": "确保你已经在 Python 终端中运行了 frange 生成器示例。"
              }
            ]
          },
          {
            "title": "为自定义类添加迭代功能",
            "text": "zh/step2.md",
            "verify": [
              {
                "name": "验证 Structure 类的迭代功能",
                "file": "verify2-1.sh",
                "hint": "确保你已经为 Structure 类添加了 __iter__ 方法。"
              }
            ]
          },
          {
            "title": "为类增强迭代能力",
            "text": "zh/step3.md",
            "verify": [
              {
                "name": "验证 Structure 类的相等性方法",
                "file": "verify3-1.sh",
                "hint": "确保你已经为 Structure 类添加了 __eq__ 方法。"
              }
            ]
          },
          {
            "title": "创建用于流式数据的生成器",
            "text": "zh/step4.md",
            "verify": [
              {
                "name": "验证 follow 生成器函数",
                "file": "verify4-1.sh",
                "hint": "确保你已经创建了包含 follow 生成器函数的 follow.py 文件。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Personalizar la iteración utilizando generadores",
      "description": "Comprende los generadores de Python, agrega iteración a clases personalizadas, mejora las clases con capacidades de iteración y crea un generador para datos en streaming para personalizar la iteración en Python.",
      "meta": {
        "title": "Personalizar la iteración utilizando generadores",
        "description": "Comprende los generadores de Python, agrega iteración a clases personalizadas, mejora las clases con capacidades de iteración y crea un generador para datos en streaming para personalizar la iteración en Python.",
        "keywords": "Python, personalizar iteración, generadores, clases personalizadas, datos en streaming"
      },
      "details": {
        "steps": [
          {
            "title": "Comprendiendo los generadores de Python",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar la comprensión de los generadores de Python",
                "file": "verify1-1.sh",
                "hint": "Asegúrate de haber ejecutado los ejemplos del generador frange en la terminal de Python."
              }
            ]
          },
          {
            "title": "Agregar iteración a clases personalizadas",
            "text": "es/step2.md",
            "verify": [
              {
                "name": "Verificar la iteración de la clase Structure",
                "file": "verify2-1.sh",
                "hint": "Asegúrate de haber agregado el método __iter__ a la clase Structure."
              }
            ]
          },
          {
            "title": "Mejorar clases con capacidades de iteración",
            "text": "es/step3.md",
            "verify": [
              {
                "name": "Verificar el método de igualdad de la clase Structure",
                "file": "verify3-1.sh",
                "hint": "Asegúrate de haber agregado el método __eq__ a la clase Structure."
              }
            ]
          },
          {
            "title": "Crear un generador para el flujo de datos",
            "text": "es/step4.md",
            "verify": [
              {
                "name": "Verificar la función generadora follow",
                "file": "verify4-1.sh",
                "hint": "Asegúrate de haber creado el archivo follow.py con una función generadora follow."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Personnaliser l'itération avec des générateurs",
      "description": "Comprendre les générateurs Python, ajouter l'itération à des classes personnalisées, améliorer les classes avec des capacités d'itération et créer un générateur pour les données en flux pour personnaliser l'itération en Python.",
      "meta": {
        "title": "Personnaliser l'itération avec des générateurs",
        "description": "Comprendre les générateurs Python, ajouter l'itération à des classes personnalisées, améliorer les classes avec des capacités d'itération et créer un générateur pour les données en flux pour personnaliser l'itération en Python.",
        "keywords": "Python, personnaliser l'itération, générateurs, classes personnalisées, données en flux"
      },
      "details": {
        "steps": [
          {
            "title": "Comprendre les générateurs Python",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier la compréhension des générateurs Python",
                "file": "verify1-1.sh",
                "hint": "Assurez-vous d'avoir exécuté les exemples de générateur frange dans le terminal Python."
              }
            ]
          },
          {
            "title": "Ajout d'itération aux classes personnalisées",
            "text": "fr/step2.md",
            "verify": [
              {
                "name": "Vérifier l'itération de la classe Structure",
                "file": "verify2-1.sh",
                "hint": "Assurez-vous d'avoir ajouté la méthode __iter__ à la classe Structure."
              }
            ]
          },
          {
            "title": "Amélioration des classes avec des capacités d'itération",
            "text": "fr/step3.md",
            "verify": [
              {
                "name": "Vérifier la méthode d'égalité de la classe Structure",
                "file": "verify3-1.sh",
                "hint": "Assurez-vous d'avoir ajouté la méthode __eq__ à la classe Structure."
              }
            ]
          },
          {
            "title": "Création d'un générateur pour le flux de données",
            "text": "fr/step4.md",
            "verify": [
              {
                "name": "Vérifier la fonction générateur follow",
                "file": "verify4-1.sh",
                "hint": "Assurez-vous d'avoir créé le fichier follow.py avec une fonction générateur follow."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Iteration mit Generatoren anpassen",
      "description": "Verstehen Sie Python-Generatoren, fügen Sie Iteration zu benutzerdefinierten Klassen hinzu, erweitern Sie Klassen mit Iterationsfähigkeiten und erstellen Sie einen Generator für Streaming-Daten, um die Iteration in Python anzupassen.",
      "meta": {
        "title": "Iteration mit Generatoren anpassen",
        "description": "Verstehen Sie Python-Generatoren, fügen Sie Iteration zu benutzerdefinierten Klassen hinzu, erweitern Sie Klassen mit Iterationsfähigkeiten und erstellen Sie einen Generator für Streaming-Daten, um die Iteration in Python anzupassen.",
        "keywords": "Python, Iteration anpassen, Generatoren, benutzerdefinierte Klassen, Streaming-Daten"
      },
      "details": {
        "steps": [
          {
            "title": "Python-Generatoren verstehen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren Sie das Verständnis von Python-Generatoren",
                "file": "verify1-1.sh",
                "hint": "Stellen Sie sicher, dass Sie die frange-Generator-Beispiele im Python-Terminal ausgeführt haben."
              }
            ]
          },
          {
            "title": "Iteration zu benutzerdefinierten Klassen hinzufügen",
            "text": "de/step2.md",
            "verify": [
              {
                "name": "Verifizieren Sie die Iteration der Structure-Klasse",
                "file": "verify2-1.sh",
                "hint": "Stellen Sie sicher, dass Sie die __iter__-Methode zur Structure-Klasse hinzugefügt haben."
              }
            ]
          },
          {
            "title": "Klassen mit Iterationsfähigkeiten erweitern",
            "text": "de/step3.md",
            "verify": [
              {
                "name": "Verifizieren Sie die Gleichheitsmethode der Structure-Klasse",
                "file": "verify3-1.sh",
                "hint": "Stellen Sie sicher, dass Sie die __eq__-Methode zur Structure-Klasse hinzugefügt haben."
              }
            ]
          },
          {
            "title": "Erstellen eines Generators für das Streamen von Daten",
            "text": "de/step4.md",
            "verify": [
              {
                "name": "Verifizieren Sie die Follow-Generator-Funktion",
                "file": "verify4-1.sh",
                "hint": "Stellen Sie sicher, dass Sie die Datei follow.py mit einer Follow-Generator-Funktion erstellt haben."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "ジェネレータを使った反復処理のカスタマイズ",
      "description": "Python のジェネレータを理解し、カスタムクラスに反復処理を追加し、反復機能でクラスを強化し、ストリーミングデータ用のジェネレータを作成して、Python で反復処理をカスタマイズします。",
      "meta": {
        "title": "ジェネレータを使った反復処理のカスタマイズ",
        "description": "Python のジェネレータを理解し、カスタムクラスに反復処理を追加し、反復機能でクラスを強化し、ストリーミングデータ用のジェネレータを作成して、Python で反復処理をカスタマイズします。",
        "keywords": "Python, 反復処理のカスタマイズ，ジェネレータ，カスタムクラス，ストリーミングデータ"
      },
      "details": {
        "steps": [
          {
            "title": "Python ジェネレータの理解",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Python ジェネレータの理解を確認する",
                "file": "verify1-1.sh",
                "hint": "Python ターミナルで frange ジェネレータの例を実行したことを確認してください。"
              }
            ]
          },
          {
            "title": "カスタムクラスへの反復処理の追加",
            "text": "ja/step2.md",
            "verify": [
              {
                "name": "Structure クラスの反復処理を確認する",
                "file": "verify2-1.sh",
                "hint": "Structure クラスに __iter__ メソッドを追加したことを確認してください。"
              }
            ]
          },
          {
            "title": "クラスに反復処理機能を追加する",
            "text": "ja/step3.md",
            "verify": [
              {
                "name": "Structure クラスの等価メソッドを確認する",
                "file": "verify3-1.sh",
                "hint": "Structure クラスに __eq__ メソッドを追加したことを確認してください。"
              }
            ]
          },
          {
            "title": "ストリーミングデータ用のジェネレーターを作成する",
            "text": "ja/step4.md",
            "verify": [
              {
                "name": "follow ジェネレーター関数を確認する",
                "file": "verify4-1.sh",
                "hint": "follow.py ファイルに follow ジェネレーター関数を作成したことを確認してください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Настройка итерации с использованием генераторов",
      "description": "Познакомьтесь с генераторами Python, добавьте итерацию в пользовательские классы, расширьте классы возможностями итерации и создайте генератор для потоковых данных, чтобы настроить итерацию в Python.",
      "meta": {
        "title": "Настройка итерации с использованием генераторов",
        "description": "Познакомьтесь с генераторами Python, добавьте итерацию в пользовательские классы, расширьте классы возможностями итерации и создайте генератор для потоковых данных, чтобы настроить итерацию в Python.",
        "keywords": "Python, настройка итерации, генераторы, пользовательские классы, потоковые данные"
      },
      "details": {
        "steps": [
          {
            "title": "Понимание генераторов Python",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверка понимания генераторов Python",
                "file": "verify1-1.sh",
                "hint": "Убедитесь, что вы запустили примеры генератора frange в терминале Python."
              }
            ]
          },
          {
            "title": "Добавление итерации в пользовательские классы",
            "text": "ru/step2.md",
            "verify": [
              {
                "name": "Проверка итерации класса Structure",
                "file": "verify2-1.sh",
                "hint": "Убедитесь, что вы добавили метод __iter__ в класс Structure."
              }
            ]
          },
          {
            "title": "Улучшение классов с возможностями итерации",
            "text": "ru/step3.md",
            "verify": [
              {
                "name": "Проверка метода равенства класса Structure",
                "file": "verify3-1.sh",
                "hint": "Убедитесь, что вы добавили метод __eq__ в класс Structure."
              }
            ]
          },
          {
            "title": "Создание генератора для потоковой передачи данных",
            "text": "ru/step4.md",
            "verify": [
              {
                "name": "Проверка функции-генератора follow",
                "file": "verify4-1.sh",
                "hint": "Убедитесь, что вы создали файл follow.py с функцией-генератором follow."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "제너레이터를 사용하여 반복 사용자 정의하기",
      "description": "Python 제너레이터 이해, 사용자 정의 클래스에 반복 추가, 반복 기능을 사용하여 클래스 향상, 스트리밍 데이터를 위한 제너레이터를 생성하여 Python 에서 반복을 사용자 정의합니다.",
      "meta": {
        "title": "Python 제너레이터 활용: 반복 사용자 정의 방법",
        "description": "Python 제너레이터의 이해, 사용자 정의 클래스에 반복 추가, 반복 기능 강화, 스트리밍 데이터 제너레이터 생성으로 Python 반복 사용자 정의 방법 안내. (파이썬, 제너레이터, 반복, 사용자 정의 클래스)",
        "keywords": "Python, 파이썬, 반복 사용자 정의, 제너레이터, 사용자 정의 클래스, 스트리밍 데이터, 데이터 스트리밍"
      },
      "details": {
        "steps": [
          {
            "title": "Python 제너레이터 이해하기",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "Python 제너레이터 이해 확인",
                "file": "verify1-1.sh",
                "hint": "Python 터미널에서 frange 제너레이터 예제를 실행했는지 확인하세요."
              }
            ]
          },
          {
            "title": "사용자 정의 클래스에 반복 추가하기",
            "text": "ko/step2.md",
            "verify": [
              {
                "name": "Structure 클래스 반복 확인",
                "file": "verify2-1.sh",
                "hint": "Structure 클래스에 __iter__ 메서드를 추가했는지 확인하세요."
              }
            ]
          },
          {
            "title": "반복 기능을 갖춘 클래스 향상",
            "text": "ko/step3.md",
            "verify": [
              {
                "name": "Structure 클래스 동등성 메서드 확인",
                "file": "verify3-1.sh",
                "hint": "Structure 클래스에 __eq__ 메서드를 추가했는지 확인하세요."
              }
            ]
          },
          {
            "title": "스트리밍 데이터를 위한 제너레이터 생성",
            "text": "ko/step4.md",
            "verify": [
              {
                "name": "follow 제너레이터 함수 확인",
                "file": "verify4-1.sh",
                "hint": "follow 제너레이터 함수를 포함하는 follow.py 파일을 생성했는지 확인하세요."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Personalize a Iteração Usando Geradores",
      "description": "Compreenda os geradores Python, adicione iteração a classes personalizadas, aprimore classes com capacidades de iteração e crie um gerador para dados de streaming para personalizar a iteração em Python.",
      "meta": {
        "title": "Personalize a Iteração em Python com Geradores",
        "description": "Aprenda sobre geradores Python, como adicionar iteração a classes personalizadas, e crie um gerador para dados de streaming. Otimize a iteração em Python para melhor desempenho e flexibilidade.",
        "keywords": "Python, personalizar iteração, geradores, classes personalizadas, dados de streaming, iteração Python, geradores Python"
      },
      "details": {
        "steps": [
          {
            "title": "Compreendendo os Geradores Python",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar Compreensão dos Geradores Python",
                "file": "verify1-1.sh",
                "hint": "Certifique-se de ter executado os exemplos do gerador frange no terminal Python."
              }
            ]
          },
          {
            "title": "Adicionando Iteração a Classes Personalizadas",
            "text": "pt/step2.md",
            "verify": [
              {
                "name": "Verificar Iteração da Classe Structure",
                "file": "verify2-1.sh",
                "hint": "Certifique-se de ter adicionado o método __iter__ à classe Structure."
              }
            ]
          },
          {
            "title": "Aprimorando Classes com Capacidades de Iteração",
            "text": "pt/step3.md",
            "verify": [
              {
                "name": "Verificar Método de Igualdade da Classe Structure",
                "file": "verify3-1.sh",
                "hint": "Certifique-se de ter adicionado o método __eq__ à classe Structure."
              }
            ]
          },
          {
            "title": "Criando um Gerador para Streaming de Dados",
            "text": "pt/step4.md",
            "verify": [
              {
                "name": "Verificar Função Geradora Follow",
                "file": "verify4-1.sh",
                "hint": "Certifique-se de ter criado o arquivo follow.py com uma função geradora follow."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
