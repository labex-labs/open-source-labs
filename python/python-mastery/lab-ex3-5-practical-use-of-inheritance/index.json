{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Practical Use of Inheritance",
  "description": "Understand the problem, create a base class and modify print function, implement a concrete formatter, create additional formatters, and build a factory function to learn practical inheritance in Python.",
  "meta": {
    "title": "Practical Use of Inheritance",
    "description": "Understand the problem, create a base class and modify print function, implement a concrete formatter, create additional formatters, and build a factory function to learn practical inheritance in Python.",
    "keywords": "Python, inheritance, base class, formatter, factory function"
  },
  "difficulty": "Beginner",
  "time": 25,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "verified": true,
  "details": {
    "steps": [
      {
        "title": "Understanding the Problem",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Python Commands Were Run",
            "file": "verify1-1.sh",
            "hint": "Please run the Python commands to understand how the current print_table() function works.\n",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      },
      {
        "title": "Creating a Base Class and Modifying the Print Function",
        "text": "en/step2.md",
        "verify": [
          {
            "name": "Verify TableFormatter class and print_table function",
            "file": "verify2-1.sh",
            "hint": "Please make sure you've added the TableFormatter class and updated the print_table() function in the tableformat.py file.\n",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [],
        "solutions": ["step2_solution.py"]
      },
      {
        "title": "Implementing a Concrete Formatter",
        "text": "en/step3.md",
        "verify": [
          {
            "name": "Verify TextTableFormatter Implementation",
            "file": "verify3-1.sh",
            "hint": "Please make sure you've added the TextTableFormatter class to the tableformat.py file with the required methods.\n",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [],
        "solutions": ["step3_solution.py"]
      },
      {
        "title": "Creating Additional Formatters",
        "text": "en/step4.md",
        "verify": [
          {
            "name": "Verify Additional Formatters",
            "file": "verify4-1.sh",
            "hint": "Please make sure you've added both CSVTableFormatter and HTMLTableFormatter classes to the tableformat.py file.\n",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [],
        "solutions": ["step4_solution.py"]
      },
      {
        "title": "Creating a Factory Function",
        "text": "en/step5.md",
        "verify": [
          {
            "name": "Verify Factory Function",
            "file": "verify5-1.sh",
            "hint": "Please make sure you've added the create_formatter() function to the tableformat.py file.\n",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [],
        "solutions": ["step5_solution.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "reader.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "stock.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "tableformat.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "portfolio.csv",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "CC-BY-SA-4.0",
    "url": "https://github.com/dabeaz-course/python-mastery/blob/main/LICENSE.md",
    "repo": "https://github.com/dabeaz-course/python-mastery"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "继承的实际应用",
      "description": "理解问题，创建基类并修改打印函数，实现具体的格式化器，创建额外的格式化器，构建工厂函数，从而学习 Python 中继承的实际应用。",
      "meta": {
        "title": "继承的实际应用",
        "description": "理解问题，创建基类并修改打印函数，实现具体的格式化器，创建额外的格式化器，构建工厂函数，从而学习 Python 中继承的实际应用。",
        "keywords": "Python, 继承，基类，格式化器，工厂函数"
      },
      "details": {
        "steps": [
          {
            "title": "理解问题",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Python 命令是否已运行",
                "file": "verify1-1.sh",
                "hint": "请运行 Python 命令，以了解当前的 print_table() 函数是如何工作的。\n"
              }
            ]
          },
          {
            "title": "创建基类并修改打印函数",
            "text": "zh/step2.md",
            "verify": [
              {
                "name": "验证 TableFormatter 类和 print_table 函数",
                "file": "verify2-1.sh",
                "hint": "请确保你已在 tableformat.py 文件中添加了 TableFormatter 类并更新了 print_table() 函数。\n"
              }
            ]
          },
          {
            "title": "实现具体的格式化器",
            "text": "zh/step3.md",
            "verify": [
              {
                "name": "验证 TextTableFormatter 实现",
                "file": "verify3-1.sh",
                "hint": "请确保你已将 TextTableFormatter 类及其所需方法添加到 tableformat.py 文件中。\n"
              }
            ]
          },
          {
            "title": "创建额外的格式化器",
            "text": "zh/step4.md",
            "verify": [
              {
                "name": "验证额外的格式化器",
                "file": "verify4-1.sh",
                "hint": "请确保你已将 CSVTableFormatter 和 HTMLTableFormatter 类添加到 tableformat.py 文件中。\n"
              }
            ]
          },
          {
            "title": "创建工厂函数",
            "text": "zh/step5.md",
            "verify": [
              {
                "name": "验证工厂函数",
                "file": "verify5-1.sh",
                "hint": "请确保你已将 create_formatter() 函数添加到 tableformat.py 文件中。\n"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Uso práctico de la herencia",
      "description": "Entiende el problema, crea una clase base y modifica la función de impresión, implementa un formateador concreto, crea formateadores adicionales y construye una función fábrica para aprender la herencia práctica en Python.",
      "meta": {
        "title": "Uso práctico de la herencia",
        "description": "Entiende el problema, crea una clase base y modifica la función de impresión, implementa un formateador concreto, crea formateadores adicionales y construye una función fábrica para aprender la herencia práctica en Python.",
        "keywords": "Python, herencia, clase base, formateador, función fábrica"
      },
      "details": {
        "steps": [
          {
            "title": "Comprender el problema",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar que se hayan ejecutado los comandos de Python",
                "file": "verify1-1.sh",
                "hint": "Por favor, ejecute los comandos de Python para entender cómo funciona la función print_table() actual.\n"
              }
            ]
          },
          {
            "title": "Crear una clase base y modificar la función de impresión",
            "text": "es/step2.md",
            "verify": [
              {
                "name": "Verificar la clase TableFormatter y la función print_table",
                "file": "verify2-1.sh",
                "hint": "Asegúrese de haber agregado la clase TableFormatter y actualizado la función print_table() en el archivo tableformat.py.\n"
              }
            ]
          },
          {
            "title": "Implementar un formateador concreto",
            "text": "es/step3.md",
            "verify": [
              {
                "name": "Verificar la implementación de TextTableFormatter",
                "file": "verify3-1.sh",
                "hint": "Asegúrese de haber agregado la clase TextTableFormatter al archivo tableformat.py con los métodos requeridos.\n"
              }
            ]
          },
          {
            "title": "Crear formateadores adicionales",
            "text": "es/step4.md",
            "verify": [
              {
                "name": "Verificar formateadores adicionales",
                "file": "verify4-1.sh",
                "hint": "Asegúrese de haber agregado las clases CSVTableFormatter y HTMLTableFormatter al archivo tableformat.py.\n"
              }
            ]
          },
          {
            "title": "Crear una función fábrica",
            "text": "es/step5.md",
            "verify": [
              {
                "name": "Verificar la función fábrica",
                "file": "verify5-1.sh",
                "hint": "Asegúrese de haber agregado la función create_formatter() al archivo tableformat.py.\n"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Utilisation pratique de l'héritage",
      "description": "Comprendre le problème, créer une classe de base et modifier la fonction d'impression, implémenter un formateur concret, créer des formateurs supplémentaires et construire une fonction usine pour apprendre l'héritage pratique en Python.",
      "meta": {
        "title": "Utilisation pratique de l'héritage",
        "description": "Comprendre le problème, créer une classe de base et modifier la fonction d'impression, implémenter un formateur concret, créer des formateurs supplémentaires et construire une fonction usine pour apprendre l'héritage pratique en Python.",
        "keywords": "Python, héritage, classe de base, formateur, fonction usine"
      },
      "details": {
        "steps": [
          {
            "title": "Comprendre le problème",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier que les commandes Python ont été exécutées",
                "file": "verify1-1.sh",
                "hint": "Veuillez exécuter les commandes Python pour comprendre le fonctionnement actuel de la fonction print_table().\n"
              }
            ]
          },
          {
            "title": "Création d'une classe de base et modification de la fonction d'impression",
            "text": "fr/step2.md",
            "verify": [
              {
                "name": "Vérifier la classe TableFormatter et la fonction print_table",
                "file": "verify2-1.sh",
                "hint": "Veuillez vous assurer que vous avez ajouté la classe TableFormatter et mis à jour la fonction print_table() dans le fichier tableformat.py.\n"
              }
            ]
          },
          {
            "title": "Implémentation d'un formateur concret",
            "text": "fr/step3.md",
            "verify": [
              {
                "name": "Vérifier l'implémentation de la classe TextTableFormatter",
                "file": "verify3-1.sh",
                "hint": "Veuillez vous assurer que vous avez ajouté la classe TextTableFormatter au fichier tableformat.py avec les méthodes requises.\n"
              }
            ]
          },
          {
            "title": "Création de formateurs supplémentaires",
            "text": "fr/step4.md",
            "verify": [
              {
                "name": "Vérifier les formateurs supplémentaires",
                "file": "verify4-1.sh",
                "hint": "Veuillez vous assurer que vous avez ajouté les classes CSVTableFormatter et HTMLTableFormatter au fichier tableformat.py.\n"
              }
            ]
          },
          {
            "title": "Création d'une fonction usine",
            "text": "fr/step5.md",
            "verify": [
              {
                "name": "Vérifier la fonction usine",
                "file": "verify5-1.sh",
                "hint": "Veuillez vous assurer que vous avez ajouté la fonction create_formatter() au fichier tableformat.py.\n"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Praktische Anwendung der Vererbung",
      "description": "Verstehen Sie das Problem, erstellen Sie eine Basisklasse und ändern Sie die Druckfunktion, implementieren Sie einen konkreten Formatierer, erstellen Sie zusätzliche Formatierer und bauen Sie eine Fabrikfunktion, um praktische Vererbung in Python zu lernen.",
      "meta": {
        "title": "Praktische Anwendung der Vererbung",
        "description": "Verstehen Sie das Problem, erstellen Sie eine Basisklasse und ändern Sie die Druckfunktion, implementieren Sie einen konkreten Formatierer, erstellen Sie zusätzliche Formatierer und bauen Sie eine Fabrikfunktion, um praktische Vererbung in Python zu lernen.",
        "keywords": "Python, Vererbung, Basisklasse, Formatierer, Fabrikfunktion"
      },
      "details": {
        "steps": [
          {
            "title": "Das Problem verstehen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen, ob die Python-Befehle ausgeführt wurden",
                "file": "verify1-1.sh",
                "hint": "Bitte führen Sie die Python-Befehle aus, um zu verstehen, wie die aktuelle print_table()-Funktion funktioniert.\n"
              }
            ]
          },
          {
            "title": "Erstellen einer Basisklasse und Modifizieren der Druckfunktion",
            "text": "de/step2.md",
            "verify": [
              {
                "name": "Überprüfen der TableFormatter-Klasse und der print_table-Funktion",
                "file": "verify2-1.sh",
                "hint": "Bitte stellen Sie sicher, dass Sie die TableFormatter-Klasse hinzugefügt und die print_table()-Funktion in der Datei tableformat.py aktualisiert haben.\n"
              }
            ]
          },
          {
            "title": "Implementierung eines konkreten Formatierers",
            "text": "de/step3.md",
            "verify": [
              {
                "name": "Überprüfen der Implementierung von TextTableFormatter",
                "file": "verify3-1.sh",
                "hint": "Bitte stellen Sie sicher, dass Sie die TextTableFormatter-Klasse mit den erforderlichen Methoden zur Datei tableformat.py hinzugefügt haben.\n"
              }
            ]
          },
          {
            "title": "Erstellen zusätzlicher Formatierer",
            "text": "de/step4.md",
            "verify": [
              {
                "name": "Überprüfen der zusätzlichen Formatierer",
                "file": "verify4-1.sh",
                "hint": "Bitte stellen Sie sicher, dass Sie sowohl die CSVTableFormatter- als auch die HTMLTableFormatter-Klasse zur Datei tableformat.py hinzugefügt haben.\n"
              }
            ]
          },
          {
            "title": "Erstellen einer Factory-Funktion",
            "text": "de/step5.md",
            "verify": [
              {
                "name": "Überprüfen der Factory-Funktion",
                "file": "verify5-1.sh",
                "hint": "Bitte stellen Sie sicher, dass Sie die Funktion create_formatter() zur Datei tableformat.py hinzugefügt haben.\n"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "継承の実践的な使い方",
      "description": "問題を理解し、基底クラスを作成して出力関数を修正し、具体的なフォーマッタを実装し、追加のフォーマッタを作成し、ファクトリ関数を構築することで、Python での実践的な継承を学びます。",
      "meta": {
        "title": "継承の実践的な使い方",
        "description": "問題を理解し、基底クラスを作成して出力関数を修正し、具体的なフォーマッタを実装し、追加のフォーマッタを作成し、ファクトリ関数を構築することで、Python での実践的な継承を学びます。",
        "keywords": "Python, 継承，基底クラス，フォーマッタ，ファクトリ関数"
      },
      "details": {
        "steps": [
          {
            "title": "問題の理解",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Python コマンドが実行されたことを確認する",
                "file": "verify1-1.sh",
                "hint": "現在の print_table() 関数がどのように動作するかを理解するために、Python コマンドを実行してください。\n"
              }
            ]
          },
          {
            "title": "基底クラスの作成と出力関数の修正",
            "text": "ja/step2.md",
            "verify": [
              {
                "name": "TableFormatter クラスと print_table 関数を確認する",
                "file": "verify2-1.sh",
                "hint": "tableformat.py ファイルに TableFormatter クラスを追加し、print_table() 関数を更新したことを確認してください。\n"
              }
            ]
          },
          {
            "title": "具体的なフォーマッタの実装",
            "text": "ja/step3.md",
            "verify": [
              {
                "name": "TextTableFormatter の実装を確認する",
                "file": "verify3-1.sh",
                "hint": "tableformat.py ファイルに必要なメソッドを持つ TextTableFormatter クラスを追加したことを確認してください。\n"
              }
            ]
          },
          {
            "title": "追加のフォーマッタの作成",
            "text": "ja/step4.md",
            "verify": [
              {
                "name": "追加のフォーマッタを確認する",
                "file": "verify4-1.sh",
                "hint": "tableformat.py ファイルに CSVTableFormatter クラスと HTMLTableFormatter クラスの両方を追加したことを確認してください。\n"
              }
            ]
          },
          {
            "title": "ファクトリ関数の作成",
            "text": "ja/step5.md",
            "verify": [
              {
                "name": "ファクトリ関数を確認する",
                "file": "verify5-1.sh",
                "hint": "tableformat.py ファイルに create_formatter() 関数を追加したことを確認してください。\n"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Практическое применение наследования",
      "description": "Понять проблему, создать базовый класс и изменить функцию вывода, реализовать конкретный форматер, создать дополнительные форматеры и построить фабричную функцию, чтобы изучить практическое применение наследования в Python.",
      "meta": {
        "title": "Практическое применение наследования",
        "description": "Понять проблему, создать базовый класс и изменить функцию вывода, реализовать конкретный форматер, создать дополнительные форматеры и построить фабричную функцию, чтобы изучить практическое применение наследования в Python.",
        "keywords": "Python, наследование, базовый класс, форматер, фабричная функция"
      },
      "details": {
        "steps": [
          {
            "title": "Понимание проблемы",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить выполнение команд Python",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, запустите команды Python, чтобы понять, как работает текущая функция print_table().\n"
              }
            ]
          },
          {
            "title": "Создание базового класса и изменение функции вывода",
            "text": "ru/step2.md",
            "verify": [
              {
                "name": "Проверить класс TableFormatter и функцию print_table",
                "file": "verify2-1.sh",
                "hint": "Пожалуйста, убедитесь, что вы добавили класс TableFormatter и обновили функцию print_table() в файле tableformat.py.\n"
              }
            ]
          },
          {
            "title": "Реализация конкретного форматтера",
            "text": "ru/step3.md",
            "verify": [
              {
                "name": "Проверить реализацию класса TextTableFormatter",
                "file": "verify3-1.sh",
                "hint": "Пожалуйста, убедитесь, что вы добавили класс TextTableFormatter с необходимыми методами в файл tableformat.py.\n"
              }
            ]
          },
          {
            "title": "Создание дополнительных форматтеров",
            "text": "ru/step4.md",
            "verify": [
              {
                "name": "Проверить дополнительные форматтеры",
                "file": "verify4-1.sh",
                "hint": "Пожалуйста, убедитесь, что вы добавили классы CSVTableFormatter и HTMLTableFormatter в файл tableformat.py.\n"
              }
            ]
          },
          {
            "title": "Создание фабричной функции",
            "text": "ru/step5.md",
            "verify": [
              {
                "name": "Проверить фабричную функцию",
                "file": "verify5-1.sh",
                "hint": "Пожалуйста, убедитесь, что вы добавили функцию create_formatter() в файл tableformat.py.\n"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "상속의 실용적 활용",
      "description": "문제 이해, 기본 클래스 생성 및 print 함수 수정, 구체적인 형식 지정자 구현, 추가 형식 지정자 생성, 팩토리 함수 구축을 통해 Python 에서 실용적인 상속을 학습합니다.",
      "meta": {
        "title": "Python 상속 실습: 기본 클래스, 형식 지정자, 팩토리 함수",
        "description": "Python 상속 실습: 기본 클래스, 형식 지정자, 팩토리 함수를 활용하여 코드 재사용성과 유연성을 높이는 방법. 문제 분석, 기본 클래스 생성, print 함수 수정, 구체적인 형식 지정자 구현, 추가 형식 지정자 생성, 팩토리 함수 구축까지.",
        "keywords": "Python, 상속, 기본 클래스, 형식 지정자, 팩토리 함수, 객체 지향 프로그래밍, OOP, 코드 재사용, 코드 유연성, 파이썬 튜토리얼"
      },
      "details": {
        "steps": [
          {
            "title": "문제 이해",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "Python 명령어 실행 확인",
                "file": "verify1-1.sh",
                "hint": "현재 print_table() 함수가 어떻게 작동하는지 이해하기 위해 Python 명령어를 실행해주세요.\n"
              }
            ]
          },
          {
            "title": "기본 클래스 생성 및 Print 함수 수정",
            "text": "ko/step2.md",
            "verify": [
              {
                "name": "TableFormatter 클래스 및 print_table 함수 확인",
                "file": "verify2-1.sh",
                "hint": "tableformat.py 파일에 TableFormatter 클래스를 추가하고 print_table() 함수를 업데이트했는지 확인해주세요.\n"
              }
            ]
          },
          {
            "title": "구체적인 Formatter 구현",
            "text": "ko/step3.md",
            "verify": [
              {
                "name": "TextTableFormatter 구현 확인",
                "file": "verify3-1.sh",
                "hint": "tableformat.py 파일에 TextTableFormatter 클래스를 필수 메서드와 함께 추가했는지 확인해주세요.\n"
              }
            ]
          },
          {
            "title": "추가 Formatter 생성",
            "text": "ko/step4.md",
            "verify": [
              {
                "name": "추가 Formatter 확인",
                "file": "verify4-1.sh",
                "hint": "tableformat.py 파일에 CSVTableFormatter 및 HTMLTableFormatter 클래스를 모두 추가했는지 확인해주세요.\n"
              }
            ]
          },
          {
            "title": "Factory Function 생성",
            "text": "ko/step5.md",
            "verify": [
              {
                "name": "Factory Function 확인",
                "file": "verify5-1.sh",
                "hint": "tableformat.py 파일에 create_formatter() 함수를 추가했는지 확인해주세요.\n"
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Uso Prático de Herança",
      "description": "Compreenda o problema, crie uma classe base e modifique a função de impressão, implemente um formatador concreto, crie formatadores adicionais e construa uma função fábrica para aprender herança prática em Python.",
      "meta": {
        "title": "Herança em Python: Guia Prático e Exemplos",
        "description": "Aprenda herança em Python com exemplos práticos. Crie classes base, formatadores e funções fábrica para um código mais eficiente e reutilizável. Tutorial completo para iniciantes e avançados.",
        "keywords": "Python, herança, classe base, formatador, função fábrica, tutorial Python, programação orientada a objetos, POO, exemplos Python"
      },
      "details": {
        "steps": [
          {
            "title": "Compreendendo o Problema",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verifique se os Comandos Python Foram Executados",
                "file": "verify1-1.sh",
                "hint": "Por favor, execute os comandos Python para entender como a função `print_table()` atual funciona."
              }
            ]
          },
          {
            "title": "Criando uma Classe Base e Modificando a Função de Impressão",
            "text": "pt/step2.md",
            "verify": [
              {
                "name": "Verifique a classe TableFormatter e a função print_table",
                "file": "verify2-1.sh",
                "hint": "Certifique-se de ter adicionado a classe `TableFormatter` e atualizado a função `print_table()` no arquivo tableformat.py."
              }
            ]
          },
          {
            "title": "Implementando um Formatter Concreto",
            "text": "pt/step3.md",
            "verify": [
              {
                "name": "Verifique a Implementação do TextTableFormatter",
                "file": "verify3-1.sh",
                "hint": "Certifique-se de ter adicionado a classe `TextTableFormatter` ao arquivo tableformat.py com os métodos necessários."
              }
            ]
          },
          {
            "title": "Criando Formatadores Adicionais",
            "text": "pt/step4.md",
            "verify": [
              {
                "name": "Verifique os Formatadores Adicionais",
                "file": "verify4-1.sh",
                "hint": "Certifique-se de ter adicionado as classes CSVTableFormatter e HTMLTableFormatter ao arquivo tableformat.py."
              }
            ]
          },
          {
            "title": "Criando uma Função Factory",
            "text": "pt/step5.md",
            "verify": [
              {
                "name": "Verifique a Função Factory",
                "file": "verify5-1.sh",
                "hint": "Certifique-se de ter adicionado a função `create_formatter()` ao arquivo tableformat.py."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
