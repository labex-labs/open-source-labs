{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Coroutine-Powered Data Processing",
  "description": "In this lab, you will use coroutines to set up processing pipelines for data flow between different processing elements.",
  "meta": {
    "title": "Coroutines | Processing Pipelines | Dataflow Programming",
    "description": "Explore the power of coroutines in setting up efficient data processing pipelines, similar to the generator-based approach in Exercise 8.2. Learn how to leverage coroutines for seamless data flow and processing.",
    "keywords": "coroutines, processing pipelines, dataflow programming, generator functions, data flow, programming exercises"
  },
  "difficulty": "Beginner",
  "time": 10,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "A coroutine example",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Python Module Imports and Function Decorators",
            "file": "verify1-1.sh",
            "hint": "Please follow the instructions to complete the steps.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "python/booleans",
          "python/build_in_functions",
          "python/comments",
          "python/conditional_statements",
          "python/file_opening_closing",
          "python/for_loops",
          "python/function_definition",
          "python/generators",
          "python/importing_modules",
          "python/keyword_arguments",
          "python/os_system",
          "python/standard_libraries",
          "python/tuples",
          "python/using_packages",
          "python/while_loops",
          "python/with_statement"
        ],
        "solutions": ["cofollow.py"]
      },
      {
        "title": "Build some pipeline components",
        "text": "en/step2.md",
        "verify": [
          {
            "name": "Verify Python File Structure and Functionality",
            "file": "verify2-1.sh",
            "hint": "Please follow the instructions to complete the steps.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "python/booleans",
          "python/build_in_functions",
          "python/classes_objects",
          "python/comments",
          "python/conditional_statements",
          "python/file_opening_closing",
          "python/for_loops",
          "python/function_definition",
          "python/generators",
          "python/importing_modules",
          "python/iterators",
          "python/list_comprehensions",
          "python/lists",
          "python/standard_libraries",
          "python/tuples",
          "python/using_packages",
          "python/while_loops"
        ],
        "solutions": ["coticker.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "cofollow.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "coticker.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "structure.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "validate.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "tableformat.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "stocksim.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "vnc-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "CC-BY-SA-4.0",
    "url": "https://github.com/dabeaz-course/python-mastery/blob/main/LICENSE.md",
    "repo": "https://github.com/dabeaz-course/python-mastery"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "由协程驱动的数据处理",
      "description": "在本实验中，你将使用协程来设置处理管道，以实现不同处理元素之间的数据流。",
      "meta": {
        "title": "协程 | 处理管道 | 数据流编程",
        "description": "探索协程在设置高效数据处理管道方面的强大功能，类似于练习8.2中基于生成器的方法。学习如何利用协程实现无缝数据流和处理。",
        "keywords": "协程, 处理管道, 数据流编程, 生成器函数, 数据流, 编程练习"
      },
      "details": {
        "steps": [
          {
            "title": "一个协程示例",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证Python模块导入和函数装饰器",
                "file": "verify1-1.sh",
                "hint": "请按照说明完成步骤。"
              }
            ],
            "solutions": ["cofollow.py"]
          },
          {
            "title": "构建一些管道组件",
            "text": "zh/step2.md",
            "verify": [
              {
                "name": "验证Python文件结构和功能",
                "file": "verify2-1.sh",
                "hint": "请按照说明完成步骤。"
              }
            ],
            "solutions": ["coticker.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Procesamiento de datos impulsado por corrutinas",
      "description": "En este laboratorio, usarás corrutinas para configurar tuberías de procesamiento para el flujo de datos entre diferentes elementos de procesamiento.",
      "meta": {
        "title": "Corrutinas | Tuberías de Procesamiento | Programación de Flujo de Datos",
        "description": "Explora el poder de las corrutinas en la configuración de tuberías de procesamiento de datos eficientes, similar al enfoque basado en generadores en el Ejercicio 8.2. Aprende cómo aprovechar las corrutinas para un flujo y procesamiento de datos sin problemas.",
        "keywords": "corrutinas, tuberías de procesamiento, programación de flujo de datos, funciones generadoras, flujo de datos, ejercicios de programación"
      },
      "details": {
        "steps": [
          {
            "title": "Un ejemplo de corrutina",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar importaciones de módulos de Python y decoradores de funciones",
                "file": "verify1-1.sh",
                "hint": "Siga las instrucciones para completar los pasos."
              }
            ]
          },
          {
            "title": "Construir algunos componentes de la tubería",
            "text": "es/step2.md",
            "verify": [
              {
                "name": "Verificar la estructura y funcionalidad del archivo de Python",
                "file": "verify2-1.sh",
                "hint": "Siga las instrucciones para completar los pasos."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Traitement de données alimenté par des coroutines",
      "description": "Dans ce laboratoire, vous utiliserez des coroutines pour configurer des pipelines de traitement pour le flux de données entre différents éléments de traitement.",
      "meta": {
        "title": "Coroutines | Pipelines de traitement | Programmation de flux de données",
        "description": "Explorez le pouvoir des coroutines dans la configuration de pipelines de traitement de données efficaces, similaire à l'approche basée sur les générateurs dans l'exercice 8.2. Apprenez à utiliser les coroutines pour un flux et un traitement de données sans friction.",
        "keywords": "coroutines, pipelines de traitement, programmation de flux de données, fonctions génératrices, flux de données, exercices de programmation"
      },
      "details": {
        "steps": [
          {
            "title": "Un exemple de coroutine",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez les importations de module Python et les décorateurs de fonction",
                "file": "verify1-1.sh",
                "hint": "Suivez les instructions pour compléter les étapes."
              }
            ]
          },
          {
            "title": "Créer quelques composants de pipeline",
            "text": "fr/step2.md",
            "verify": [
              {
                "name": "Vérifier la structure et la fonctionnalité du fichier Python",
                "file": "verify2-1.sh",
                "hint": "Veuillez suivre les instructions pour compléter les étapes."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Durch Coroutinen angetriebene Datenverarbeitung",
      "description": "In diesem Lab verwenden Sie Coroutinen, um Verarbeitungsleitungen für den Datenfluss zwischen verschiedenen Verarbeitungselementen aufzubauen.",
      "meta": {
        "title": "Coroutinen | Verarbeitungsleitungen | Datenfluss-Programmierung",
        "description": "Entdecken Sie die Macht von Coroutinen bei der Einrichtung effizienter Datenverarbeitungsleitungen, ähnlich wie im Generator-basierten Ansatz im Übungsblatt 8.2. Lernen Sie, wie Sie Coroutinen für einen nahtlosen Datenfluss und die Verarbeitung nutzen.",
        "keywords": "Coroutinen, Verarbeitungsleitungen, Datenfluss-Programmierung, Generatorfunktionen, Datenfluss, Programmierübungen"
      },
      "details": {
        "steps": [
          {
            "title": "Ein Coroutine-Beispiel",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren Sie die Python-Module-Imports und die Funktionsdekoriere",
                "file": "verify1-1.sh",
                "hint": "Bitte folgen Sie den Anweisungen, um die Schritte abzuschließen."
              }
            ]
          },
          {
            "title": "Baue einige Pipeline-Komponenten",
            "text": "de/step2.md",
            "verify": [
              {
                "name": "Verifizieren Sie die Python-Dateistruktur und -Funktionalität",
                "file": "verify2-1.sh",
                "hint": "Bitte folgen Sie den Anweisungen, um die Schritte abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "コルーチンによるデータ処理",
      "description": "この実験では、コルーチンを使って、異なる処理要素間のデータフローのための処理パイプラインを設定します。",
      "meta": {
        "title": "コルーチン | 処理パイプライン | データフロープログラミング",
        "description": "演習8.2のジェネレータベースのアプローチと同様に、効率的なデータ処理パイプラインの設定におけるコルーチンの力を探求します。コルーチンを活用して、シームレスなデータフローと処理を行う方法を学びましょう。",
        "keywords": "コルーチン, 処理パイプライン, データフロープログラミング, ジェネレータ関数, データフロー, プログラミング演習"
      },
      "details": {
        "steps": [
          {
            "title": "コルーチンの例",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Pythonモジュールのインポートと関数デコレータの検証",
                "file": "verify1-1.sh",
                "hint": "指示に従って手順を完了してください。"
              }
            ]
          },
          {
            "title": "いくつかのパイプラインコンポーネントを作成する",
            "text": "ja/step2.md",
            "verify": [
              {
                "name": "Pythonファイルの構造と機能を検証する",
                "file": "verify2-1.sh",
                "hint": "指示に従って手順を完了してください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Обработка данных с использованием корутин",
      "description": "В этой лабораторной работе вы будете использовать корутины для настройки конвейеров обработки для потока данных между различными элементами обработки.",
      "meta": {
        "title": "Корутины | Конвейеры обработки | Программирование потока данных",
        "description": "Изучите мощь корутин при настройке эффективных конвейеров обработки данных, аналогичных подходу на основе генераторов в упражнении 8.2. Изучите, как использовать корутины для беспрепятственного потока и обработки данных.",
        "keywords": "корутины, конвейеры обработки, программирование потока данных, функции-генераторы, поток данных, задачи по программированию"
      },
      "details": {
        "steps": [
          {
            "title": "Пример корутины",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить импорт модуля Python и декораторы функций",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, следуйте инструкциям для завершения шагов."
              }
            ]
          },
          {
            "title": "Создайте некоторые компоненты конвейера",
            "text": "ru/step2.md",
            "verify": [
              {
                "name": "Проверить структуру и функциональность Python-файла",
                "file": "verify2-1.sh",
                "hint": "Пожалуйста, следуйте инструкциям для завершения шагов."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
