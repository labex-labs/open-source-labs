{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Private Attributes and Properties",
  "description": "Implement private attributes, convert methods to properties, implement property validation, use __slots__ for memory optimization, and reconcile type validation with class variables in Python.",
  "meta": {
    "title": "Private Attributes and Properties",
    "description": "Implement private attributes, convert methods to properties, implement property validation, use __slots__ for memory optimization, and reconcile type validation with class variables in Python.",
    "keywords": "Python, private attributes, properties, property validation, __slots__"
  },
  "difficulty": "Intermediate",
  "time": 35,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "verified": true,
  "details": {
    "steps": [
      {
        "title": "Implementing Private Attributes",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify private attribute in stock.py",
            "file": "verify1-1.sh",
            "hint": "Make sure you've renamed 'types' to '_types' in the Stock class",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      },
      {
        "title": "Converting Methods to Properties",
        "text": "en/step2.md",
        "verify": [
          {
            "name": "Verify property decorator in stock.py",
            "file": "verify2-1.sh",
            "hint": "Make sure you've added the @property decorator before the cost method",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [],
        "solutions": ["step2_solution.py"]
      },
      {
        "title": "Implementing Property Validation",
        "text": "en/step3.md",
        "verify": [
          {
            "name": "Verify property setter for shares in stock.py",
            "file": "verify3-1.sh",
            "hint": "Make sure you've implemented the shares property with getter and setter methods",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [],
        "solutions": ["step3_solution.py"]
      },
      {
        "title": "Using __slots__ for Memory Optimization",
        "text": "en/step4.md",
        "verify": [
          {
            "name": "Verify __slots__ in stock.py",
            "file": "verify4-1.sh",
            "hint": "Make sure you've added the __slots__ attribute to the Stock class",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [],
        "solutions": ["step4_solution.py"]
      },
      {
        "title": "Reconciling Type Validation with Class Variables",
        "text": "en/step5.md",
        "verify": [
          {
            "name": "Verify type reconciliation in stock.py",
            "file": "verify5-1.sh",
            "hint": "Make sure you're using self._types in the property setters",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "stock.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "CC-BY-SA-4.0",
    "url": "https://github.com/dabeaz-course/python-mastery/blob/main/LICENSE.md",
    "repo": "https://github.com/dabeaz-course/python-mastery"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "私有属性和属性（Properties）",
      "description": "在 Python 中实现私有属性、将方法转换为属性（properties）、实现属性验证、使用 __slots__ 进行内存优化，以及协调类型验证与类变量。",
      "meta": {
        "title": "私有属性和属性（Properties） - Python 封装、验证和优化",
        "description": "学习如何在 Python 中使用私有属性、属性（properties）、属性验证、__slots__ 和类型验证来提高代码的健壮性和效率。掌握 Python 类的封装、验证和优化。",
        "keywords": "Python, 私有属性，属性（properties）, 属性验证，__slots__, 封装，优化，类变量，类型验证"
      },
      "details": {
        "steps": [
          {
            "title": "实现私有属性",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 stock.py 中的私有属性",
                "file": "verify1-1.sh",
                "hint": "请确保你已经在 Stock 类中将 'types' 重命名为 '_types'"
              }
            ]
          },
          {
            "title": "将方法转换为属性（Properties）",
            "text": "zh/step2.md",
            "verify": [
              {
                "name": "验证 stock.py 中的 property 装饰器",
                "file": "verify2-1.sh",
                "hint": "请确保你已经在 cost 方法之前添加了 @property 装饰器"
              }
            ]
          },
          {
            "title": "实现属性验证（Property Validation）",
            "text": "zh/step3.md",
            "verify": [
              {
                "name": "验证 stock.py 中 shares 属性的 setter",
                "file": "verify3-1.sh",
                "hint": "请确保你已经实现了 shares 属性的 getter 和 setter 方法"
              }
            ]
          },
          {
            "title": "使用 __slots__ 进行内存优化",
            "text": "zh/step4.md",
            "verify": [
              {
                "name": "验证 stock.py 中的 __slots__",
                "file": "verify4-1.sh",
                "hint": "请确保你已经将 __slots__ 属性添加到 Stock 类中"
              }
            ]
          },
          {
            "title": "协调类型验证与类变量",
            "text": "zh/step5.md",
            "verify": [
              {
                "name": "验证 stock.py 中的类型协调",
                "file": "verify5-1.sh",
                "hint": "请确保你在 property setter 中使用了 self._types"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Atributos Privados y Propiedades",
      "description": "Implementa atributos privados, convierte métodos en propiedades, implementa la validación de propiedades, usa __slots__ para la optimización de memoria y concilia la validación de tipos con variables de clase en Python.",
      "meta": {
        "title": "Atributos Privados y Propiedades",
        "description": "Implementa atributos privados, convierte métodos en propiedades, implementa la validación de propiedades, usa __slots__ para la optimización de memoria y concilia la validación de tipos con variables de clase en Python.",
        "keywords": "Python, atributos privados, propiedades, validación de propiedades, __slots__"
      },
      "details": {
        "steps": [
          {
            "title": "Implementación de Atributos Privados",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el atributo privado en stock.py",
                "file": "verify1-1.sh",
                "hint": "Asegúrate de haber renombrado 'types' a '_types' en la clase Stock"
              }
            ]
          },
          {
            "title": "Conversión de Métodos a Propiedades",
            "text": "es/step2.md",
            "verify": [
              {
                "name": "Verificar el decorador de propiedad en stock.py",
                "file": "verify2-1.sh",
                "hint": "Asegúrate de haber añadido el decorador @property antes del método cost"
              }
            ]
          },
          {
            "title": "Implementación de la Validación de Propiedades",
            "text": "es/step3.md",
            "verify": [
              {
                "name": "Verificar el 'setter' de la propiedad 'shares' en stock.py",
                "file": "verify3-1.sh",
                "hint": "Asegúrate de haber implementado la propiedad 'shares' con métodos 'getter' y 'setter'"
              }
            ]
          },
          {
            "title": "Usando __slots__ para la Optimización de Memoria",
            "text": "es/step4.md",
            "verify": [
              {
                "name": "Verificar `__slots__` en stock.py",
                "file": "verify4-1.sh",
                "hint": "Asegúrate de haber añadido el atributo `__slots__` a la clase Stock"
              }
            ]
          },
          {
            "title": "Conciliando la Validación de Tipos con Variables de Clase",
            "text": "es/step5.md",
            "verify": [
              {
                "name": "Verificar la conciliación de tipos en stock.py",
                "file": "verify5-1.sh",
                "hint": "Asegúrate de estar usando `self._types` en los 'setters' de las propiedades"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Attributs Privés et Propriétés",
      "description": "Implémentez des attributs privés, convertissez des méthodes en propriétés, implémentez la validation de propriété, utilisez __slots__ pour l'optimisation de la mémoire et conciliez la validation de type avec les variables de classe en Python.",
      "meta": {
        "title": "Attributs Privés et Propriétés Python",
        "description": "Découvrez comment implémenter des attributs privés, convertir des méthodes en propriétés, valider les propriétés, optimiser la mémoire avec __slots__ et gérer la validation de type avec les variables de classe en Python.",
        "keywords": "Python, attributs privés, propriétés, validation de propriété, __slots__, programmation Python"
      },
      "details": {
        "steps": [
          {
            "title": "Implémentation des Attributs Privés",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier l'attribut privé dans stock.py",
                "file": "verify1-1.sh",
                "hint": "Assurez-vous d'avoir renommé 'types' en '_types' dans la classe Stock"
              }
            ]
          },
          {
            "title": "Conversion de Méthodes en Propriétés",
            "text": "fr/step2.md",
            "verify": [
              {
                "name": "Vérifier le décorateur property dans stock.py",
                "file": "verify2-1.sh",
                "hint": "Assurez-vous d'avoir ajouté le décorateur @property avant la méthode cost"
              }
            ]
          },
          {
            "title": "Implémentation de la Validation de Propriété",
            "text": "fr/step3.md",
            "verify": [
              {
                "name": "Vérifier le setter de propriété pour shares dans stock.py",
                "file": "verify3-1.sh",
                "hint": "Assurez-vous d'avoir implémenté la propriété shares avec les méthodes getter et setter"
              }
            ]
          },
          {
            "title": "Utilisation de __slots__ pour l'Optimisation de la Mémoire",
            "text": "fr/step4.md",
            "verify": [
              {
                "name": "Vérifier __slots__ dans stock.py",
                "file": "verify4-1.sh",
                "hint": "Assurez-vous d'avoir ajouté l'attribut __slots__ à la classe Stock"
              }
            ]
          },
          {
            "title": "Concilier la Validation de Type avec les Variables de Classe",
            "text": "fr/step5.md",
            "verify": [
              {
                "name": "Vérifier la conciliation de type dans stock.py",
                "file": "verify5-1.sh",
                "hint": "Assurez-vous d'utiliser self._types dans les setters de propriété"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Private Attribute und Properties (Eigenschaften)",
      "description": "Implementieren Sie private Attribute, wandeln Sie Methoden in Properties (Eigenschaften) um, implementieren Sie Property (Eigenschafts)-Validierung, verwenden Sie __slots__ zur Speicheroptimierung und gleichen Sie die Typvalidierung mit Klassenvariablen in Python ab.",
      "meta": {
        "title": "Private Attribute und Properties (Eigenschaften)",
        "description": "Implementieren Sie private Attribute, wandeln Sie Methoden in Properties (Eigenschaften) um, implementieren Sie Property (Eigenschafts)-Validierung, verwenden Sie __slots__ zur Speicheroptimierung und gleichen Sie die Typvalidierung mit Klassenvariablen in Python ab.",
        "keywords": "Python, private Attribute, Properties (Eigenschaften), Property (Eigenschafts)-Validierung, __slots__"
      },
      "details": {
        "steps": [
          {
            "title": "Implementierung privater Attribute",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen des privaten Attributs in stock.py",
                "file": "verify1-1.sh",
                "hint": "Stellen Sie sicher, dass Sie 'types' in der Stock-Klasse in '_types' umbenannt haben."
              }
            ]
          },
          {
            "title": "Methoden in Properties (Eigenschaften) umwandeln",
            "text": "de/step2.md",
            "verify": [
              {
                "name": "Überprüfen des Property-Dekorators in stock.py",
                "file": "verify2-1.sh",
                "hint": "Stellen Sie sicher, dass Sie den @property-Dekorator vor der cost-Methode hinzugefügt haben."
              }
            ]
          },
          {
            "title": "Implementierung der Property-Validierung",
            "text": "de/step3.md",
            "verify": [
              {
                "name": "Überprüfen des Property-Setters für shares in stock.py",
                "file": "verify3-1.sh",
                "hint": "Stellen Sie sicher, dass Sie die shares-Property mit Getter- und Setter-Methoden implementiert haben."
              }
            ]
          },
          {
            "title": "Verwendung von __slots__ zur Speicheroptimierung",
            "text": "de/step4.md",
            "verify": [
              {
                "name": "Überprüfen von __slots__ in stock.py",
                "file": "verify4-1.sh",
                "hint": "Stellen Sie sicher, dass Sie das __slots__-Attribut zur Stock-Klasse hinzugefügt haben."
              }
            ]
          },
          {
            "title": "Abgleich der Typvalidierung mit Klassenvariablen",
            "text": "de/step5.md",
            "verify": [
              {
                "name": "Überprüfen des Typabgleichs in stock.py",
                "file": "verify5-1.sh",
                "hint": "Stellen Sie sicher, dass Sie self._types in den Property-Settern verwenden."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Private 属性とプロパティ",
      "description": "Python で private 属性を実装し、メソッドをプロパティに変換し、プロパティの検証を実装し、メモリ最適化のために__slots__を使用し、クラス変数との型検証を調整します。",
      "meta": {
        "title": "Private 属性とプロパティ",
        "description": "Python で private 属性を実装し、メソッドをプロパティに変換し、プロパティの検証を実装し、メモリ最適化のために__slots__を使用し、クラス変数との型検証を調整します。",
        "keywords": "Python, private 属性，プロパティ，プロパティ検証，__slots__"
      },
      "details": {
        "steps": [
          {
            "title": "Private 属性の実装",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "stock.py 内の private 属性の検証",
                "file": "verify1-1.sh",
                "hint": "Stock クラスで'types'を'_types'にリネームしたことを確認してください"
              }
            ]
          },
          {
            "title": "メソッドをプロパティに変換",
            "text": "ja/step2.md",
            "verify": [
              {
                "name": "stock.py 内のプロパティデコレータの検証",
                "file": "verify2-1.sh",
                "hint": "cost メソッドの前に@property デコレータを追加したことを確認してください"
              }
            ]
          },
          {
            "title": "プロパティの検証の実装",
            "text": "ja/step3.md",
            "verify": [
              {
                "name": "stock.py 内の shares のプロパティセッターの検証",
                "file": "verify3-1.sh",
                "hint": "getter と setter メソッドを持つ shares プロパティを実装したことを確認してください"
              }
            ]
          },
          {
            "title": "メモリ最適化のための __slots__ の使用",
            "text": "ja/step4.md",
            "verify": [
              {
                "name": "stock.py 内の__slots__の検証",
                "file": "verify4-1.sh",
                "hint": "Stock クラスに__slots__属性を追加したことを確認してください"
              }
            ]
          },
          {
            "title": "型検証とクラス変数の調整",
            "text": "ja/step5.md",
            "verify": [
              {
                "name": "stock.py 内の型調整の検証",
                "file": "verify5-1.sh",
                "hint": "プロパティセッターで self._types を使用していることを確認してください"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Приватные атрибуты и свойства (Private Attributes and Properties)",
      "description": "Реализация приватных атрибутов, преобразование методов в свойства (properties), реализация валидации свойств (property validation), использование __slots__ для оптимизации памяти (memory optimization) и согласование валидации типов (type validation) с переменными класса (class variables) в Python.",
      "meta": {
        "title": "Приватные атрибуты и свойства (Private Attributes and Properties)",
        "description": "Реализация приватных атрибутов, преобразование методов в свойства (properties), реализация валидации свойств (property validation), использование __slots__ для оптимизации памяти (memory optimization) и согласование валидации типов (type validation) с переменными класса (class variables) в Python.",
        "keywords": "Python, приватные атрибуты, свойства, валидация свойств, __slots__"
      },
      "details": {
        "steps": [
          {
            "title": "Реализация приватных атрибутов (Implementing Private Attributes)",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверка приватного атрибута в stock.py",
                "file": "verify1-1.sh",
                "hint": "Убедитесь, что вы переименовали 'types' в '_types' в классе Stock"
              }
            ]
          },
          {
            "title": "Преобразование методов в свойства (Converting Methods to Properties)",
            "text": "ru/step2.md",
            "verify": [
              {
                "name": "Проверка декоратора property в stock.py",
                "file": "verify2-1.sh",
                "hint": "Убедитесь, что вы добавили декоратор @property перед методом cost"
              }
            ]
          },
          {
            "title": "Реализация валидации свойств (Implementing Property Validation)",
            "text": "ru/step3.md",
            "verify": [
              {
                "name": "Проверка сеттера свойства shares в stock.py",
                "file": "verify3-1.sh",
                "hint": "Убедитесь, что вы реализовали свойство shares с методами getter и setter"
              }
            ]
          },
          {
            "title": "Использование __slots__ для оптимизации памяти (Using __slots__ for Memory Optimization)",
            "text": "ru/step4.md",
            "verify": [
              {
                "name": "Проверка __slots__ в stock.py",
                "file": "verify4-1.sh",
                "hint": "Убедитесь, что вы добавили атрибут __slots__ в класс Stock"
              }
            ]
          },
          {
            "title": "Согласование проверки типов с переменными класса (Reconciling Type Validation with Class Variables)",
            "text": "ru/step5.md",
            "verify": [
              {
                "name": "Проверка согласования типов в stock.py",
                "file": "verify5-1.sh",
                "hint": "Убедитесь, что вы используете self._types в сеттерах свойств"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "Private 속성 및 Property",
      "description": "Python 에서 private 속성을 구현하고, 메서드를 property 로 변환하며, property 유효성 검사를 구현하고, 메모리 최적화를 위해 __slots__를 사용하고, 클래스 변수를 사용한 타입 유효성 검사를 일치시키는 방법을 알아보세요.",
      "meta": {
        "title": "Python Private 속성 및 Property 구현 방법 | LabEx",
        "description": "Python 에서 private 속성, property, property 유효성 검사, __slots__를 사용한 메모리 최적화, 클래스 변수를 사용한 타입 유효성 검사 일치시키는 방법 등, 파이썬 클래스 설계 및 구현 관련 기술을 LabEx 에서 학습하세요.",
        "keywords": "Python, private 속성, property, property 유효성 검사, __slots__, 파이썬 클래스, 캡슐화, 데이터 은닉, 파이썬 프로그래밍"
      },
      "details": {
        "steps": [
          {
            "title": "Private 속성 구현하기",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "stock.py 에서 private 속성 확인",
                "file": "verify1-1.sh",
                "hint": "Stock 클래스에서 'types'를 '_types'로 이름을 변경했는지 확인하세요."
              }
            ]
          },
          {
            "title": "메서드를 Property 로 변환하기",
            "text": "ko/step2.md",
            "verify": [
              {
                "name": "stock.py 에서 property 데코레이터 확인",
                "file": "verify2-1.sh",
                "hint": "cost 메서드 앞에 @property 데코레이터를 추가했는지 확인하세요."
              }
            ]
          },
          {
            "title": "Property 유효성 검사 구현하기",
            "text": "ko/step3.md",
            "verify": [
              {
                "name": "stock.py 에서 shares property setter 확인",
                "file": "verify3-1.sh",
                "hint": "getter 및 setter 메서드를 사용하여 shares property 를 구현했는지 확인하세요."
              }
            ]
          },
          {
            "title": "__slots__를 사용한 메모리 최적화",
            "text": "ko/step4.md",
            "verify": [
              {
                "name": "stock.py 에서 __slots__ 확인",
                "file": "verify4-1.sh",
                "hint": "Stock 클래스에 __slots__ 속성을 추가했는지 확인하세요."
              }
            ]
          },
          {
            "title": "클래스 변수를 사용한 타입 유효성 검사 조정",
            "text": "ko/step5.md",
            "verify": [
              {
                "name": "stock.py 에서 타입 조정 확인",
                "file": "verify5-1.sh",
                "hint": "property setter 에서 self._types 를 사용하고 있는지 확인하세요."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Atributos Privados e Propriedades",
      "description": "Implemente atributos privados, converta métodos em propriedades, implemente validação de propriedade, use __slots__ para otimização de memória e reconcilie a validação de tipo com variáveis de classe em Python.",
      "meta": {
        "title": "Atributos Privados e Propriedades Python: Guia Completo",
        "description": "Aprenda a usar atributos privados, propriedades, validação de propriedades, __slots__ e otimização de memória em Python. Melhore a organização e eficiência do seu código.",
        "keywords": "Python, atributos privados, propriedades, validação de propriedade, __slots__, otimização de memória, programação orientada a objetos"
      },
      "details": {
        "steps": [
          {
            "title": "Implementando Atributos Privados",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar atributo privado em stock.py",
                "file": "verify1-1.sh",
                "hint": "Certifique-se de que renomeou 'types' para '_types' na classe Stock"
              }
            ]
          },
          {
            "title": "Convertendo Métodos em Propriedades",
            "text": "pt/step2.md",
            "verify": [
              {
                "name": "Verificar o decorador @property em stock.py",
                "file": "verify2-1.sh",
                "hint": "Certifique-se de ter adicionado o decorador @property antes do método cost"
              }
            ]
          },
          {
            "title": "Implementando Validação de Propriedades",
            "text": "pt/step3.md",
            "verify": [
              {
                "name": "Verificar o setter da propriedade shares em stock.py",
                "file": "verify3-1.sh",
                "hint": "Certifique-se de ter implementado a propriedade shares com métodos getter e setter"
              }
            ]
          },
          {
            "title": "Usando __slots__ para Otimização de Memória",
            "text": "pt/step4.md",
            "verify": [
              {
                "name": "Verificar __slots__ em stock.py",
                "file": "verify4-1.sh",
                "hint": "Certifique-se de ter adicionado o atributo __slots__ à classe Stock"
              }
            ]
          },
          {
            "title": "Conciliação da Validação de Tipos com Variáveis de Classe",
            "text": "pt/step5.md",
            "verify": [
              {
                "name": "Verificar a conciliação de tipos em stock.py",
                "file": "verify5-1.sh",
                "hint": "Certifique-se de estar usando self._types nos setters das propriedades"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
