{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Learn About Delegating Generators",
  "description": "In this lab, you will learn about delegating generators using the yield from statement in Python.",
  "meta": {
    "title": "Python Programming | Delegating Generators | Coroutine Concepts",
    "description": "Learn about delegating generators, a useful technique for cleaning up code that relies on generators. Explore examples of receiving messages and verifying message types.",
    "keywords": "Python, Programming, Delegating Generators, Coroutines, Generators, Message Handling"
  },
  "difficulty": "Beginner",
  "time": 15,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Example: Receiving messages",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Assertions, Instance Checks, History Interactions",
            "file": "verify1-1.sh",
            "hint": "Please follow the instructions to complete the steps.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "python/booleans",
          "python/build_in_functions",
          "python/classes_objects",
          "python/comments",
          "python/conditional_statements",
          "python/custom_exceptions",
          "python/file_opening_closing",
          "python/for_loops",
          "python/function_definition",
          "python/generators",
          "python/importing_modules",
          "python/keyword_arguments",
          "python/numeric_types",
          "python/os_system",
          "python/python_shell",
          "python/standard_libraries",
          "python/tuples",
          "python/using_packages",
          "python/variables_data_types",
          "python/while_loops",
          "python/with_statement"
        ],
        "solutions": ["cofollow.py"]
      },
      {
        "title": "Wrapping a Socket",
        "text": "en/step2.md",
        "verify": [
          {
            "name": "Verify Presence of Yield From Statement",
            "file": "verify2-1.sh",
            "hint": "Please follow the instructions to complete the steps.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "python/booleans",
          "python/break_continue",
          "python/build_in_functions",
          "python/catching_exceptions",
          "python/classes_objects",
          "python/comments",
          "python/conditional_statements",
          "python/constructor",
          "python/encapsulation",
          "python/for_loops",
          "python/function_definition",
          "python/generators",
          "python/importing_modules",
          "python/lists",
          "python/networking_protocols",
          "python/polymorphism",
          "python/raising_exceptions",
          "python/socket_programming",
          "python/standard_libraries",
          "python/tuples",
          "python/using_packages",
          "python/while_loops"
        ],
        "solutions": ["server.py"]
      },
      {
        "title": "Async/Await",
        "text": "en/step3.md",
        "verify": [
          {
            "name": "Verify Presence of Python Async and Await Keywords",
            "file": "verify3-1.sh",
            "hint": "Please follow the instructions to complete the steps.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "python/booleans",
          "python/break_continue",
          "python/build_in_functions",
          "python/catching_exceptions",
          "python/classes_objects",
          "python/comments",
          "python/conditional_statements",
          "python/constructor",
          "python/encapsulation",
          "python/for_loops",
          "python/function_definition",
          "python/generators",
          "python/importing_modules",
          "python/lists",
          "python/networking_protocols",
          "python/polymorphism",
          "python/raising_exceptions",
          "python/socket_programming",
          "python/standard_libraries",
          "python/tuples",
          "python/using_packages",
          "python/while_loops"
        ],
        "solutions": ["asyncserver.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "cofollow.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "coticker.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "server.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "structure.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "tableformat.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "validate.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "CC-BY-SA-4.0",
    "url": "https://github.com/dabeaz-course/python-mastery/blob/main/LICENSE.md",
    "repo": "https://github.com/dabeaz-course/python-mastery"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "了解委托生成器",
      "description": "在本实验中，你将学习如何使用Python中的yield from语句来了解委托生成器。",
      "meta": {
        "title": "Python编程 | 委托生成器 | 协程概念",
        "description": "了解委托生成器，这是一种用于清理依赖生成器的代码的有用技术。探索接收消息和验证消息类型的示例。",
        "keywords": "Python,编程,委托生成器,协程,生成器,消息处理"
      },
      "details": {
        "steps": [
          {
            "title": "示例：接收消息",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证断言、实例检查、历史交互",
                "file": "verify1-1.sh",
                "hint": "请按照说明完成步骤。"
              }
            ],
            "solutions": ["cofollow.py"]
          },
          {
            "title": "包装套接字",
            "text": "zh/step2.md",
            "verify": [
              {
                "name": "验证yield from语句的存在",
                "file": "verify2-1.sh",
                "hint": "请按照说明完成步骤。"
              }
            ],
            "solutions": ["server.py"]
          },
          {
            "title": "异步/等待",
            "text": "zh/step3.md",
            "verify": [
              {
                "name": "验证Python异步和等待关键字的存在",
                "file": "verify3-1.sh",
                "hint": "请按照说明完成步骤。"
              }
            ],
            "solutions": ["asyncserver.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Aprende sobre la delegación de generadores",
      "description": "En este laboratorio, aprenderás sobre la delegación de generadores utilizando la declaración yield from en Python.",
      "meta": {
        "title": "Programación en Python | Delegación de generadores | Conceptos de corrutinas",
        "description": "Aprende sobre la delegación de generadores, una técnica útil para limpiar el código que depende de generadores. Explora ejemplos de recepción de mensajes y verificación de tipos de mensajes.",
        "keywords": "Python, Programación, Delegación de generadores, Corrutinas, Generadores, Manejo de mensajes"
      },
      "details": {
        "steps": [
          {
            "title": "Ejemplo: Recibir mensajes",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar afirmaciones, comprobaciones de instancia, interacciones de historial",
                "file": "verify1-1.sh",
                "hint": "Siga las instrucciones para completar los pasos."
              }
            ]
          },
          {
            "title": "Envolver un Socket",
            "text": "es/step2.md",
            "verify": [
              {
                "name": "Verificar la presencia de la declaración yield from",
                "file": "verify2-1.sh",
                "hint": "Siga las instrucciones para completar los pasos."
              }
            ]
          },
          {
            "title": "Async/Await",
            "text": "es/step3.md",
            "verify": [
              {
                "name": "Verificar la presencia de las palabras clave Async y Await de Python",
                "file": "verify3-1.sh",
                "hint": "Siga las instrucciones para completar los pasos."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Apprendre les générateurs délégués",
      "description": "Dans ce laboratoire, vous allez apprendre les générateurs délégués en utilisant l'instruction yield from en Python.",
      "meta": {
        "title": "Programmation Python | Générateurs délégués | Concepts de coroutines",
        "description": "Découvrez les générateurs délégués, une technique utile pour nettoyer le code qui dépend des générateurs. Explorez des exemples de réception de messages et de vérification des types de messages.",
        "keywords": "Python, Programmation, Générateurs délégués, Coroutines, Générateurs, Gestion des messages"
      },
      "details": {
        "steps": [
          {
            "title": "Exemple : Réception de messages",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier les assertions, les vérifications d'instance, les interactions historiques",
                "file": "verify1-1.sh",
                "hint": "Veuillez suivre les instructions pour compléter les étapes."
              }
            ]
          },
          {
            "title": "Envelopper une socket",
            "text": "fr/step2.md",
            "verify": [
              {
                "name": "Vérifier la présence de l'instruction yield from",
                "file": "verify2-1.sh",
                "hint": "Veuillez suivre les instructions pour compléter les étapes."
              }
            ]
          },
          {
            "title": "Async/Await",
            "text": "fr/step3.md",
            "verify": [
              {
                "name": "Vérifier la présence des mots clés Python Async et Await",
                "file": "verify3-1.sh",
                "hint": "Veuillez suivre les instructions pour compléter les étapes."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Lernen Sie über delegierende Generatoren",
      "description": "In diesem Lab werden Sie lernen, wie Sie delegierende Generatoren mit der yield from-Anweisung in Python verwenden.",
      "meta": {
        "title": "Python-Programmierung | Delegierende Generatoren | Coroutinen-Konzepte",
        "description": "Lernen Sie über delegierende Generatoren, eine nützliche Technik zum Aufräumen von Code, der auf Generatoren basiert. Entdecken Sie Beispiele zum Empfang von Nachrichten und zur Überprüfung des NachrichtenTyps.",
        "keywords": "Python, Programmierung, Delegierende Generatoren, Coroutinen, Generatoren, Nachrichtenverarbeitung"
      },
      "details": {
        "steps": [
          {
            "title": "Beispiel: Nachrichten empfangen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen von Assertionen, Instanzprüfungen, interaktionen mit der Historie",
                "file": "verify1-1.sh",
                "hint": "Bitte folgen Sie den Anweisungen, um die Schritte abzuschließen."
              }
            ]
          },
          {
            "title": "Ein Socket umhüllen",
            "text": "de/step2.md",
            "verify": [
              {
                "name": "Überprüfen Sie das Vorhandensein der yield from-Anweisung",
                "file": "verify2-1.sh",
                "hint": "Bitte folgen Sie den Anweisungen, um die Schritte abzuschließen."
              }
            ]
          },
          {
            "title": "Async/Await",
            "text": "de/step3.md",
            "verify": [
              {
                "name": "Überprüfen Sie das Vorhandensein der Python-Async- und Await-Schlüsselwörter",
                "file": "verify3-1.sh",
                "hint": "Bitte folgen Sie den Anweisungen, um die Schritte abzuschließen."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "ジェネレータの委譲について学ぶ",
      "description": "この実験では、Pythonのyield from文を使ってジェネレータの委譲について学びます。",
      "meta": {
        "title": "Pythonプログラミング | ジェネレータの委譲 | コルーチンの概念",
        "description": "ジェネレータの委譲について学びましょう。ジェネレータに依存するコードを整理するための便利な手法です。メッセージの受信とメッセージ型の検証の例を探りましょう。",
        "keywords": "Python, プログラミング, ジェネレータの委譲, コルーチン, ジェネレータ, メッセージ処理"
      },
      "details": {
        "steps": [
          {
            "title": "例：メッセージの受信",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "アサーションの検証、インスタンスチェック、履歴の相互作用",
                "file": "verify1-1.sh",
                "hint": "指示に従って手順を完了してください。"
              }
            ]
          },
          {
            "title": "ソケットのラップ",
            "text": "ja/step2.md",
            "verify": [
              {
                "name": "yield from文の存在を検証する",
                "file": "verify2-1.sh",
                "hint": "指示に従って手順を完了してください。"
              }
            ]
          },
          {
            "title": "非同期/待機",
            "text": "ja/step3.md",
            "verify": [
              {
                "name": "Pythonの非同期と待機キーワードの存在を検証する",
                "file": "verify3-1.sh",
                "hint": "指示に従って手順を完了してください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Изучение делегирования генераторов",
      "description": "В этой лабораторной работе вы изучите делегирование генераторов с использованием выражения yield from в Python.",
      "meta": {
        "title": "Программирование на Python | Делегирование генераторов | Концепции корутин",
        "description": "Изучите делегирование генераторов - полезный метод для упрощения кода, основанного на генераторах. Изучите примеры приема сообщений и проверки типов сообщений.",
        "keywords": "Python, Программирование, Делегирование генераторов, Корутины, Генераторы, Обработка сообщений"
      },
      "details": {
        "steps": [
          {
            "title": "Пример: Прием сообщений",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить утверждения, проверки экземпляров, взаимодействия истории",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, следуйте инструкциям для завершения шагов."
              }
            ]
          },
          {
            "title": "Оборачивание сокета",
            "text": "ru/step2.md",
            "verify": [
              {
                "name": "Проверить наличие выражения yield from",
                "file": "verify2-1.sh",
                "hint": "Пожалуйста, следуйте инструкциям для завершения шагов."
              }
            ]
          },
          {
            "title": "Async/Await",
            "text": "ru/step3.md",
            "verify": [
              {
                "name": "Проверить наличие ключевых слов async и await в Python",
                "file": "verify3-1.sh",
                "hint": "Пожалуйста, следуйте инструкциям для завершения шагов."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
