{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Learn About Class Decorators",
  "description": "Implement type-checking with descriptors, create a class decorator for validation, apply decorators via inheritance, add row conversion and method argument validation to learn about class decorators in Python.",
  "meta": {
    "title": "Learn About Class Decorators",
    "description": "Implement type-checking with descriptors, create a class decorator for validation, apply decorators via inheritance, add row conversion and method argument validation to learn about class decorators in Python.",
    "keywords": "Python, class decorators, type-checking, validation, inheritance"
  },
  "difficulty": "Beginner",
  "time": 25,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "verified": true,
  "details": {
    "steps": [
      {
        "title": "Implementing Type-Checking with Descriptors",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Stock Class Implementation",
            "file": "verify1-1.sh",
            "hint": "Make sure you've implemented the Stock class with proper descriptors and methods.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": ["python/classes_objects", "python/encapsulation"],
        "solutions": ["stock.py"]
      },
      {
        "title": "Creating a Class Decorator for Validation",
        "text": "en/step2.md",
        "verify": [
          {
            "name": "Verify Class Decorator Implementation",
            "file": "verify2-1.sh",
            "hint": "Make sure you've implemented the validate_attributes decorator and updated the Stock class.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "python/class_static_methods",
          "python/classes_objects",
          "python/decorators"
        ],
        "solutions": ["step2_solution.py"]
      },
      {
        "title": "Applying Decorators via Inheritance",
        "text": "en/step3.md",
        "verify": [
          {
            "name": "Verify Inheritance-Based Decorator",
            "file": "verify3-1.sh",
            "hint": "Make sure you've implemented the __init_subclass__ method and updated the Stock class.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "python/classes_objects",
          "python/decorators",
          "python/inheritance"
        ],
        "solutions": ["step3_solution.py"]
      },
      {
        "title": "Adding Row Conversion Functionality",
        "text": "en/step4.md",
        "verify": [
          {
            "name": "Verify Row Conversion Implementation",
            "file": "verify4-1.sh",
            "hint": "Make sure you've implemented the from_row method and updated the validate_attributes function.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "python/classes_objects",
          "python/function_definition",
          "python/type_conversion"
        ],
        "solutions": ["step4_solution.py"]
      },
      {
        "title": "Adding Method Argument Validation",
        "text": "en/step5.md",
        "verify": [
          {
            "name": "Verify Method Argument Validation",
            "file": "verify5-1.sh",
            "hint": "Make sure you've updated the validate_attributes function and added annotations to the sell method.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "python/conditional_statements",
          "python/decorators",
          "python/type_conversion"
        ],
        "solutions": ["step5_solution.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "stock.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "structure.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "teststock.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "validate.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "portfolio.csv",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "CC-BY-SA-4.0",
    "url": "https://github.com/dabeaz-course/python-mastery/blob/main/LICENSE.md",
    "repo": "https://github.com/dabeaz-course/python-mastery"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "学习类装饰器",
      "description": "通过描述符实现类型检查，创建用于验证的类装饰器，通过继承应用装饰器，添加行转换和方法参数验证，以学习 Python 中的类装饰器。",
      "meta": {
        "title": "Python 类装饰器教程 | 类型检查与验证",
        "description": "学习如何在 Python 中使用类装饰器实现类型检查、数据验证、继承应用及行转换。掌握 Python 类装饰器的高级用法。",
        "keywords": "Python, 类装饰器，类型检查，数据验证，继承，装饰器用法，Python 教程"
      },
      "details": {
        "steps": [
          {
            "title": "使用描述符实现类型检查",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 Stock 类实现",
                "file": "verify1-1.sh",
                "hint": "请确保你已使用合适的描述符和方法实现了 Stock 类。"
              }
            ]
          },
          {
            "title": "创建用于验证的类装饰器",
            "text": "zh/step2.md",
            "verify": [
              {
                "name": "验证类装饰器实现",
                "file": "verify2-1.sh",
                "hint": "请确保你已实现 validate_attributes 装饰器并更新了 Stock 类。"
              }
            ]
          },
          {
            "title": "通过继承应用装饰器",
            "text": "zh/step3.md",
            "verify": [
              {
                "name": "验证基于继承的装饰器",
                "file": "verify3-1.sh",
                "hint": "请确保你已实现 __init_subclass__ 方法并更新了 Stock 类。"
              }
            ]
          },
          {
            "title": "添加行转换功能",
            "text": "zh/step4.md",
            "verify": [
              {
                "name": "验证行转换实现",
                "file": "verify4-1.sh",
                "hint": "请确保你已实现 from_row 方法并更新了 validate_attributes 函数。"
              }
            ]
          },
          {
            "title": "添加方法参数验证",
            "text": "zh/step5.md",
            "verify": [
              {
                "name": "验证方法参数",
                "file": "verify5-1.sh",
                "hint": "请确保你已更新 validate_attributes 函数并为 sell 方法添加了注解。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Aprende sobre Decoradores de Clase",
      "description": "Implementa verificación de tipos con descriptores, crea un decorador de clase para validación, aplica decoradores mediante herencia, añade conversión de filas y validación de argumentos de métodos para aprender sobre decoradores de clase en Python.",
      "meta": {
        "title": "Aprende sobre Decoradores de Clase en Python",
        "description": "Implementa verificación de tipos con descriptores, crea un decorador de clase para validación, aplica decoradores mediante herencia, añade conversión de filas y validación de argumentos de métodos para aprender sobre decoradores de clase en Python.",
        "keywords": "Python, decoradores de clase, verificación de tipos, validación, herencia, programación Python, tutorial decoradores"
      },
      "details": {
        "steps": [
          {
            "title": "Implementando Verificación de Tipos con Descriptores",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar Implementación de la Clase Stock",
                "file": "verify1-1.sh",
                "hint": "Asegúrate de haber implementado la clase Stock con los descriptores y métodos adecuados."
              }
            ]
          },
          {
            "title": "Creando un Decorador de Clase para Validación",
            "text": "es/step2.md",
            "verify": [
              {
                "name": "Verificar Implementación del Decorador de Clase",
                "file": "verify2-1.sh",
                "hint": "Asegúrate de haber implementado el decorador validate_attributes y actualizado la clase Stock."
              }
            ]
          },
          {
            "title": "Aplicando Decoradores Mediante Herencia",
            "text": "es/step3.md",
            "verify": [
              {
                "name": "Verificar Decorador Basado en Herencia",
                "file": "verify3-1.sh",
                "hint": "Asegúrate de haber implementado el método __init_subclass__ y actualizado la clase Stock."
              }
            ]
          },
          {
            "title": "Añadiendo Funcionalidad de Conversión de Filas",
            "text": "es/step4.md",
            "verify": [
              {
                "name": "Verificar Implementación de Conversión de Filas",
                "file": "verify4-1.sh",
                "hint": "Asegúrate de haber implementado el método from_row y actualizado la función validate_attributes."
              }
            ]
          },
          {
            "title": "Añadiendo Validación de Argumentos de Método",
            "text": "es/step5.md",
            "verify": [
              {
                "name": "Verificar Validación de Argumentos de Método",
                "file": "verify5-1.sh",
                "hint": "Asegúrate de haber actualizado la función validate_attributes y añadido anotaciones al método sell."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Apprendre les décorateurs de classe",
      "description": "Implémentez la vérification de type avec des descripteurs, créez un décorateur de classe pour la validation, appliquez des décorateurs via l'héritage, ajoutez la conversion de ligne et la validation des arguments de méthode pour en savoir plus sur les décorateurs de classe en Python.",
      "meta": {
        "title": "Apprendre les décorateurs de classe Python",
        "description": "Découvrez comment utiliser les décorateurs de classe en Python pour la validation de type, la génération de code et l'automatisation. Apprenez les descripteurs, l'héritage et la validation d'arguments.",
        "keywords": "Python, décorateurs de classe, vérification de type, validation, héritage, descripteurs, génération de code, automatisation"
      },
      "details": {
        "steps": [
          {
            "title": "Implémentation de la vérification de type avec des descripteurs",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier l'implémentation de la classe Stock",
                "file": "verify1-1.sh",
                "hint": "Assurez-vous d'avoir implémenté la classe Stock avec les descripteurs et méthodes appropriés."
              }
            ]
          },
          {
            "title": "Création d'un décorateur de classe pour la validation",
            "text": "fr/step2.md",
            "verify": [
              {
                "name": "Vérifier l'implémentation du décorateur de classe",
                "file": "verify2-1.sh",
                "hint": "Assurez-vous d'avoir implémenté le décorateur validate_attributes et mis à jour la classe Stock."
              }
            ]
          },
          {
            "title": "Application des décorateurs par héritage",
            "text": "fr/step3.md",
            "verify": [
              {
                "name": "Vérifier le décorateur basé sur l'héritage",
                "file": "verify3-1.sh",
                "hint": "Assurez-vous d'avoir implémenté la méthode __init_subclass__ et mis à jour la classe Stock."
              }
            ]
          },
          {
            "title": "Ajout de la fonctionnalité de conversion de ligne",
            "text": "fr/step4.md",
            "verify": [
              {
                "name": "Vérifier l'implémentation de la conversion de ligne",
                "file": "verify4-1.sh",
                "hint": "Assurez-vous d'avoir implémenté la méthode from_row et mis à jour la fonction validate_attributes."
              }
            ]
          },
          {
            "title": "Ajout de la validation des arguments de méthode",
            "text": "fr/step5.md",
            "verify": [
              {
                "name": "Vérifier la validation des arguments de méthode",
                "file": "verify5-1.sh",
                "hint": "Assurez-vous d'avoir mis à jour la fonction validate_attributes et ajouté des annotations à la méthode sell."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Klassendekoratoren kennenlernen",
      "description": "Implementieren Sie Typüberprüfung mit Deskriptoren, erstellen Sie einen Klassendekorator für die Validierung, wenden Sie Dekoratoren über Vererbung an, fügen Sie Zeilenkonvertierung und Methodenargumentvalidierung hinzu, um Klassendekoratoren in Python kennenzulernen.",
      "meta": {
        "title": "Klassendekoratoren in Python lernen",
        "description": "Erfahren Sie, wie Sie mit Python-Klassendekoratoren Typüberprüfung, Validierung und Argumentprüfung implementieren. Verbessern Sie Ihren Code durch Vererbung und Zeilenkonvertierung.",
        "keywords": "Python, Klassendekoratoren, Typüberprüfung, Validierung, Vererbung, Python-Code, Programmierung, Softwareentwicklung"
      },
      "details": {
        "steps": [
          {
            "title": "Typüberprüfung mit Deskriptoren implementieren",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfung der Stock-Klassenimplementierung",
                "file": "verify1-1.sh",
                "hint": "Stellen Sie sicher, dass Sie die Stock-Klasse mit den richtigen Deskriptoren und Methoden implementiert haben."
              }
            ]
          },
          {
            "title": "Erstellung eines Klassendekorators für die Validierung",
            "text": "de/step2.md",
            "verify": [
              {
                "name": "Überprüfung der Klassendekorator-Implementierung",
                "file": "verify2-1.sh",
                "hint": "Stellen Sie sicher, dass Sie den validate_attributes-Dekorator implementiert und die Stock-Klasse aktualisiert haben."
              }
            ]
          },
          {
            "title": "Dekoratoren durch Vererbung anwenden",
            "text": "de/step3.md",
            "verify": [
              {
                "name": "Überprüfung des vererbungsbasierten Dekorators",
                "file": "verify3-1.sh",
                "hint": "Stellen Sie sicher, dass Sie die __init_subclass__-Methode implementiert und die Stock-Klasse aktualisiert haben."
              }
            ]
          },
          {
            "title": "Hinzufügen von Zeilenkonvertierungsfunktionalität",
            "text": "de/step4.md",
            "verify": [
              {
                "name": "Überprüfung der Zeilenkonvertierungs-Implementierung",
                "file": "verify4-1.sh",
                "hint": "Stellen Sie sicher, dass Sie die from_row-Methode implementiert und die validate_attributes-Funktion aktualisiert haben."
              }
            ]
          },
          {
            "title": "Validierung von Methodenargumenten hinzufügen",
            "text": "de/step5.md",
            "verify": [
              {
                "name": "Überprüfung der Methodenargument-Validierung",
                "file": "verify5-1.sh",
                "hint": "Stellen Sie sicher, dass Sie die validate_attributes-Funktion aktualisiert und Annotationen zur sell-Methode hinzugefügt haben."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "クラスデコレータについて学ぶ",
      "description": "ディスクリプタによる型チェックの実装、検証のためのクラスデコレータの作成、継承によるデコレータの適用、行変換とメソッド引数検証の追加を通じて、Python のクラスデコレータについて学びます。",
      "meta": {
        "title": "Python クラスデコレータ入門：型チェック、検証、継承",
        "description": "Python のクラスデコレータをマスターしましょう。ディスクリプタを使った型チェック、検証用クラスデコレータの作成、継承によるデコレータ適用、行変換、メソッド引数検証の実装方法を解説します。",
        "keywords": "Python, クラスデコレータ，型チェック，検証，継承，Python 学習，プログラミング"
      },
      "details": {
        "steps": [
          {
            "title": "ディスクリプタによる型チェックの実装",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Stock クラスの実装を確認する",
                "file": "verify1-1.sh",
                "hint": "適切なディスクリプタとメソッドで Stock クラスを実装したことを確認してください。"
              }
            ]
          },
          {
            "title": "検証のためのクラスデコレータを作成する",
            "text": "ja/step2.md",
            "verify": [
              {
                "name": "クラスデコレータの実装を確認する",
                "file": "verify2-1.sh",
                "hint": "validate_attributes デコレータを実装し、Stock クラスを更新したことを確認してください。"
              }
            ]
          },
          {
            "title": "継承によるデコレータの適用",
            "text": "ja/step3.md",
            "verify": [
              {
                "name": "継承ベースのデコレータを確認する",
                "file": "verify3-1.sh",
                "hint": "__init_subclass__ メソッドを実装し、Stock クラスを更新したことを確認してください。"
              }
            ]
          },
          {
            "title": "行変換機能の追加",
            "text": "ja/step4.md",
            "verify": [
              {
                "name": "行変換の実装を確認する",
                "file": "verify4-1.sh",
                "hint": "from_row メソッドを実装し、validate_attributes 関数を更新したことを確認してください。"
              }
            ]
          },
          {
            "title": "メソッド引数検証の追加",
            "text": "ja/step5.md",
            "verify": [
              {
                "name": "メソッド引数検証を確認する",
                "file": "verify5-1.sh",
                "hint": "validate_attributes 関数を更新し、sell メソッドにアノテーションを追加したことを確認してください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Изучение декораторов классов",
      "description": "Реализуйте проверку типов с помощью дескрипторов, создайте декоратор класса для валидации, применяйте декораторы через наследование, добавьте преобразование строк и валидацию аргументов методов, чтобы изучить декораторы классов в Python.",
      "meta": {
        "title": "Изучение декораторов классов в Python",
        "description": "Узнайте, как использовать дескрипторы для проверки типов, создавать декораторы классов для валидации, применять декораторы через наследование, добавлять преобразование строк и валидацию аргументов методов в Python.",
        "keywords": "Python, декораторы классов, проверка типов, валидация, наследование, дескрипторы, генерация кода"
      },
      "details": {
        "steps": [
          {
            "title": "Реализация проверки типов с помощью дескрипторов",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверка реализации класса Stock",
                "file": "verify1-1.sh",
                "hint": "Убедитесь, что вы реализовали класс Stock с правильными дескрипторами и методами."
              }
            ]
          },
          {
            "title": "Создание декоратора класса для валидации",
            "text": "ru/step2.md",
            "verify": [
              {
                "name": "Проверка реализации декоратора класса",
                "file": "verify2-1.sh",
                "hint": "Убедитесь, что вы реализовали декоратор validate_attributes и обновили класс Stock."
              }
            ]
          },
          {
            "title": "Применение декораторов через наследование",
            "text": "ru/step3.md",
            "verify": [
              {
                "name": "Проверка декоратора на основе наследования",
                "file": "verify3-1.sh",
                "hint": "Убедитесь, что вы реализовали метод __init_subclass__ и обновили класс Stock."
              }
            ]
          },
          {
            "title": "Добавление функциональности преобразования строк",
            "text": "ru/step4.md",
            "verify": [
              {
                "name": "Проверка реализации преобразования строк",
                "file": "verify4-1.sh",
                "hint": "Убедитесь, что вы реализовали метод from_row и обновили функцию validate_attributes."
              }
            ]
          },
          {
            "title": "Добавление проверки аргументов метода",
            "text": "ru/step5.md",
            "verify": [
              {
                "name": "Проверка проверки аргументов метода",
                "file": "verify5-1.sh",
                "hint": "Убедитесь, что вы обновили функцию validate_attributes и добавили аннотации к методу sell."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "클래스 데코레이터 알아보기",
      "description": "디스크립터를 사용하여 타입 검사를 구현하고, 유효성 검사를 위한 클래스 데코레이터를 생성하며, 상속을 통해 데코레이터를 적용하고, 행 변환 및 메서드 인수 유효성 검사를 추가하여 Python 의 클래스 데코레이터에 대해 알아봅니다.",
      "meta": {
        "title": "Python 클래스 데코레이터 학습",
        "description": "Python 클래스 데코레이터: 디스크립터로 타입 검사 구현, 유효성 검사 클래스 데코레이터 생성, 상속을 통한 데코레이터 적용, 행 변환 및 메서드 인수 유효성 검사 추가 방법을 배웁니다.",
        "keywords": "Python, 클래스 데코레이터, 타입 검사, 유효성 검사, 상속, Python 데코레이터, 클래스 데코레이터 사용법, Python 코드 자동화"
      },
      "details": {
        "steps": [
          {
            "title": "디스크립터를 사용한 타입 검사 구현",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "Stock 클래스 구현 검증",
                "file": "verify1-1.sh",
                "hint": "Stock 클래스가 적절한 디스크립터와 메서드로 구현되었는지 확인하세요."
              }
            ]
          },
          {
            "title": "유효성 검사를 위한 클래스 데코레이터 생성",
            "text": "ko/step2.md",
            "verify": [
              {
                "name": "클래스 데코레이터 구현 검증",
                "file": "verify2-1.sh",
                "hint": "validate_attributes 데코레이터를 구현하고 Stock 클래스를 업데이트했는지 확인하세요."
              }
            ]
          },
          {
            "title": "상속을 통한 데코레이터 적용",
            "text": "ko/step3.md",
            "verify": [
              {
                "name": "상속 기반 데코레이터 검증",
                "file": "verify3-1.sh",
                "hint": "__init_subclass__ 메서드를 구현하고 Stock 클래스를 업데이트했는지 확인하세요."
              }
            ]
          },
          {
            "title": "행 변환 기능 추가",
            "text": "ko/step4.md",
            "verify": [
              {
                "name": "행 변환 구현 검증",
                "file": "verify4-1.sh",
                "hint": "from_row 메서드를 구현하고 validate_attributes 함수를 업데이트했는지 확인하세요."
              }
            ]
          },
          {
            "title": "메서드 인수 유효성 검사 추가",
            "text": "ko/step5.md",
            "verify": [
              {
                "name": "메서드 인수 유효성 검사 검증",
                "file": "verify5-1.sh",
                "hint": "validate_attributes 함수를 업데이트하고 sell 메서드에 어노테이션을 추가했는지 확인하세요."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Aprenda Sobre Decoradores de Classe",
      "description": "Implemente verificação de tipos com descritores, crie um decorador de classe para validação, aplique decoradores via herança, adicione conversão de linha e validação de argumentos de método para aprender sobre decoradores de classe em Python.",
      "meta": {
        "title": "Aprenda Decoradores de Classe em Python",
        "description": "Descubra como usar decoradores de classe em Python para validação de tipos, herança e automação. Aprenda a implementar verificação de tipos com descritores, criar decoradores de validação e mais.",
        "keywords": "Python, decoradores de classe, verificação de tipos, validação, herança, programação Python, tutoriais Python"
      },
      "details": {
        "steps": [
          {
            "title": "Implementando Verificação de Tipos com Descritores",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar Implementação da Classe Stock",
                "file": "verify1-1.sh",
                "hint": "Certifique-se de ter implementado a classe Stock com descritores e métodos adequados."
              }
            ]
          },
          {
            "title": "Criando um Decorador de Classe para Validação",
            "text": "pt/step2.md",
            "verify": [
              {
                "name": "Verificar Implementação do Decorador de Classe",
                "file": "verify2-1.sh",
                "hint": "Certifique-se de ter implementado o decorador validate_attributes e atualizado a classe Stock."
              }
            ]
          },
          {
            "title": "Aplicando Decoradores por Herança",
            "text": "pt/step3.md",
            "verify": [
              {
                "name": "Verificar Decorador Baseado em Herança",
                "file": "verify3-1.sh",
                "hint": "Certifique-se de ter implementado o método __init_subclass__ e atualizado a classe Stock."
              }
            ]
          },
          {
            "title": "Adicionando Funcionalidade de Conversão de Linha",
            "text": "pt/step4.md",
            "verify": [
              {
                "name": "Verificar Implementação de Conversão de Linha",
                "file": "verify4-1.sh",
                "hint": "Certifique-se de ter implementado o método from_row e atualizado a função validate_attributes."
              }
            ]
          },
          {
            "title": "Adicionando Validação de Argumentos de Método",
            "text": "pt/step5.md",
            "verify": [
              {
                "name": "Verificar Validação de Argumentos de Método",
                "file": "verify5-1.sh",
                "hint": "Certifique-se de ter atualizado a função validate_attributes e adicionado anotações ao método sell."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
