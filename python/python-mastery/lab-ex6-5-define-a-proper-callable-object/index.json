{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Define a Proper Callable Object",
  "description": "Understand validator classes, create a basic callable object, implement type validation with function annotations, and take on the challenge of using a callable object as a method in Python.",
  "meta": {
    "title": "Define a Proper Callable Object",
    "description": "Understand validator classes, create a basic callable object, implement type validation with function annotations, and take on the challenge of using a callable object as a method in Python.",
    "keywords": "Python, callable object, validator classes, type validation, function annotations"
  },
  "difficulty": "Beginner",
  "time": 20,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "verified": true,
  "details": {
    "steps": [
      {
        "title": "Understanding Validator Classes",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Validator Understanding",
            "file": "verify1-1.sh",
            "hint": "Make sure you have opened and examined the validate.py file",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      },
      {
        "title": "Creating a Basic Callable Object",
        "text": "en/step2.md",
        "verify": [
          {
            "name": "Verify ValidatedFunction Class",
            "file": "verify2-1.sh",
            "hint": "Make sure you've implemented the ValidatedFunction class with __call__ method",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [],
        "solutions": ["step2_solution.py"]
      },
      {
        "title": "Implementing Type Validation with Function Annotations",
        "text": "en/step3.md",
        "verify": [
          {
            "name": "Verify Validation Logic",
            "file": "verify3-1.sh",
            "hint": "Make sure you've implemented the validation logic using function annotations",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [],
        "solutions": ["step3_solution.py"]
      },
      {
        "title": "Challenge: Using a Callable Object as a Method",
        "text": "en/step4.md",
        "verify": [
          {
            "name": "Verify Stock Implementation",
            "file": "verify4-1.sh",
            "hint": "Make sure you've attempted the challenge with the Stock class",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "stock.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "validate.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "CC-BY-SA-4.0",
    "url": "https://github.com/dabeaz-course/python-mastery/blob/main/LICENSE.md",
    "repo": "https://github.com/dabeaz-course/python-mastery"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "定义一个合适的可调用对象",
      "description": "了解验证器类，创建基本的可调用对象，使用函数注解实现类型验证，并迎接在 Python 中将可调用对象用作方法的挑战。",
      "meta": {
        "title": "定义一个合适的可调用对象",
        "description": "了解验证器类，创建基本的可调用对象，使用函数注解实现类型验证，并迎接在 Python 中将可调用对象用作方法的挑战。",
        "keywords": "Python, 可调用对象，验证器类，类型验证，函数注解"
      },
      "details": {
        "steps": [
          {
            "title": "理解验证器类",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证对验证器的理解",
                "file": "verify1-1.sh",
                "hint": "确保你已打开并查看了 validate.py 文件"
              }
            ]
          },
          {
            "title": "创建基本的可调用对象",
            "text": "zh/step2.md",
            "verify": [
              {
                "name": "验证 ValidatedFunction 类",
                "file": "verify2-1.sh",
                "hint": "确保你已经实现了带有 __call__ 方法的 ValidatedFunction 类"
              }
            ]
          },
          {
            "title": "使用函数注解实现类型验证",
            "text": "zh/step3.md",
            "verify": [
              {
                "name": "验证验证逻辑",
                "file": "verify3-1.sh",
                "hint": "确保你已经使用函数注解实现了验证逻辑"
              }
            ]
          },
          {
            "title": "挑战：将可调用对象用作方法",
            "text": "zh/step4.md",
            "verify": [
              {
                "name": "验证 Stock 类实现",
                "file": "verify4-1.sh",
                "hint": "确保你已使用 Stock 类尝试完成此挑战"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Definir un objeto invocable adecuado",
      "description": "Comprender las clases de validación, crear un objeto invocable básico, implementar la validación de tipos con anotaciones de funciones y afrontar el desafío de usar un objeto invocable como un método en Python.",
      "meta": {
        "title": "Definir un objeto invocable adecuado",
        "description": "Comprender las clases de validación, crear un objeto invocable básico, implementar la validación de tipos con anotaciones de funciones y afrontar el desafío de usar un objeto invocable como un método en Python.",
        "keywords": "Python, objeto invocable, clases de validación, validación de tipos, anotaciones de funciones"
      },
      "details": {
        "steps": [
          {
            "title": "Comprender las clases de validación",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar la comprensión de la validación",
                "file": "verify1-1.sh",
                "hint": "Asegúrate de haber abierto y examinado el archivo validate.py"
              }
            ]
          },
          {
            "title": "Crear un objeto invocable básico",
            "text": "es/step2.md",
            "verify": [
              {
                "name": "Verificar la clase ValidatedFunction",
                "file": "verify2-1.sh",
                "hint": "Asegúrate de haber implementado la clase ValidatedFunction con el método __call__"
              }
            ]
          },
          {
            "title": "Implementar validación de tipos con anotaciones de funciones",
            "text": "es/step3.md",
            "verify": [
              {
                "name": "Verificar la lógica de validación",
                "file": "verify3-1.sh",
                "hint": "Asegúrate de haber implementado la lógica de validación utilizando anotaciones de funciones"
              }
            ]
          },
          {
            "title": "Desafío: Usar un objeto invocable como método",
            "text": "es/step4.md",
            "verify": [
              {
                "name": "Verificar la implementación de Stock",
                "file": "verify4-1.sh",
                "hint": "Asegúrate de haber intentado el desafío con la clase Stock"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Définir un objet appelable approprié",
      "description": "Comprendre les classes de validateurs, créer un objet appelable de base, implémenter la validation de type avec des annotations de fonction et relever le défi d'utiliser un objet appelable comme méthode en Python.",
      "meta": {
        "title": "Définir un objet appelable approprié",
        "description": "Comprendre les classes de validateurs, créer un objet appelable de base, implémenter la validation de type avec des annotations de fonction et relever le défi d'utiliser un objet appelable comme méthode en Python.",
        "keywords": "Python, objet appelable, classes de validateurs, validation de type, annotations de fonction"
      },
      "details": {
        "steps": [
          {
            "title": "Comprendre les classes de validateurs",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier la compréhension des validateurs",
                "file": "verify1-1.sh",
                "hint": "Assurez - vous d'avoir ouvert et examiné le fichier validate.py"
              }
            ]
          },
          {
            "title": "Création d'un objet appelable de base",
            "text": "fr/step2.md",
            "verify": [
              {
                "name": "Vérifier la classe ValidatedFunction",
                "file": "verify2-1.sh",
                "hint": "Assurez-vous d'avoir implémenté la classe ValidatedFunction avec la méthode __call__"
              }
            ]
          },
          {
            "title": "Implémentation de la validation de type avec les annotations de fonction",
            "text": "fr/step3.md",
            "verify": [
              {
                "name": "Vérifier la logique de validation",
                "file": "verify3-1.sh",
                "hint": "Assurez-vous d'avoir implémenté la logique de validation en utilisant les annotations de fonction"
              }
            ]
          },
          {
            "title": "Défi : Utilisation d'un objet appelable comme méthode",
            "text": "fr/step4.md",
            "verify": [
              {
                "name": "Vérifier l'implémentation de la classe Stock",
                "file": "verify4-1.sh",
                "hint": "Assurez-vous d'avoir tenté le défi avec la classe Stock"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Definieren eines geeigneten aufrufbaren Objekts",
      "description": "Verstehen Sie Validator - Klassen, erstellen Sie ein einfaches aufrufbares Objekt, implementieren Sie Typvalidierung mit Funktionsannotationen und nehmen Sie sich die Herausforderung an, ein aufrufbares Objekt als Methode in Python zu verwenden.",
      "meta": {
        "title": "Definieren eines geeigneten aufrufbaren Objekts",
        "description": "Verstehen Sie Validator - Klassen, erstellen Sie ein einfaches aufrufbares Objekt, implementieren Sie Typvalidierung mit Funktionsannotationen und nehmen Sie sich die Herausforderung an, ein aufrufbares Objekt als Methode in Python zu verwenden.",
        "keywords": "Python, aufrufbares Objekt, Validator - Klassen, Typvalidierung, Funktionsannotationen"
      },
      "details": {
        "steps": [
          {
            "title": "Verständnis von Validator - Klassen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen des Validator - Verständnisses",
                "file": "verify1-1.sh",
                "hint": "Stellen Sie sicher, dass Sie die Datei validate.py geöffnet und untersucht haben"
              }
            ]
          },
          {
            "title": "Erstellen eines einfachen aufrufbaren Objekts",
            "text": "de/step2.md",
            "verify": [
              {
                "name": "Überprüfen der ValidatedFunction - Klasse",
                "file": "verify2-1.sh",
                "hint": "Stellen Sie sicher, dass Sie die Klasse ValidatedFunction mit der __call__ - Methode implementiert haben"
              }
            ]
          },
          {
            "title": "Implementierung der Typüberprüfung mit Funktionsannotationen",
            "text": "de/step3.md",
            "verify": [
              {
                "name": "Überprüfen der Überprüfungslogik",
                "file": "verify3-1.sh",
                "hint": "Stellen Sie sicher, dass Sie die Überprüfungslogik mithilfe von Funktionsannotationen implementiert haben"
              }
            ]
          },
          {
            "title": "Herausforderung: Verwenden eines aufrufbaren Objekts als Methode",
            "text": "de/step4.md",
            "verify": [
              {
                "name": "Überprüfen der Stock - Implementierung",
                "file": "verify4-1.sh",
                "hint": "Stellen Sie sicher, dass Sie die Herausforderung mit der Stock - Klasse versucht haben"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "適切な呼び出し可能オブジェクトを定義する",
      "description": "バリデータクラスを理解し、基本的な呼び出し可能オブジェクトを作成し、関数アノテーションを使用して型検証を実装し、Python で呼び出し可能オブジェクトをメソッドとして使用するチャレンジに取り組みます。",
      "meta": {
        "title": "適切な呼び出し可能オブジェクトを定義する",
        "description": "バリデータクラスを理解し、基本的な呼び出し可能オブジェクトを作成し、関数アノテーションを使用して型検証を実装し、Python で呼び出し可能オブジェクトをメソッドとして使用するチャレンジに取り組みます。",
        "keywords": "Python, 呼び出し可能オブジェクト，バリデータクラス，型検証，関数アノテーション"
      },
      "details": {
        "steps": [
          {
            "title": "バリデータクラスの理解",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "バリデータの理解を確認する",
                "file": "verify1-1.sh",
                "hint": "validate.py ファイルを開いて調べたことを確認してください"
              }
            ]
          },
          {
            "title": "基本的な呼び出し可能オブジェクトの作成",
            "text": "ja/step2.md",
            "verify": [
              {
                "name": "ValidatedFunction クラスの確認",
                "file": "verify2-1.sh",
                "hint": "__call__ メソッドを持つ ValidatedFunction クラスを実装したことを確認してください"
              }
            ]
          },
          {
            "title": "関数アノテーションを使用した型検証の実装",
            "text": "ja/step3.md",
            "verify": [
              {
                "name": "検証ロジックの確認",
                "file": "verify3-1.sh",
                "hint": "関数アノテーションを使用して検証ロジックを実装したことを確認してください"
              }
            ]
          },
          {
            "title": "チャレンジ：呼び出し可能オブジェクトをメソッドとして使用する",
            "text": "ja/step4.md",
            "verify": [
              {
                "name": "Stock クラスの実装確認",
                "file": "verify4-1.sh",
                "hint": "Stock クラスを使ってチャレンジに取り組んだことを確認してください"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Определение правильного вызываемого объекта",
      "description": "Понять, как работают классы валидаторов, создать базовый вызываемый объект, реализовать проверку типов с использованием аннотаций функций и принять вызов по использованию вызываемого объекта в качестве метода в Python.",
      "meta": {
        "title": "Определение правильного вызываемого объекта",
        "description": "Понять, как работают классы валидаторов, создать базовый вызываемый объект, реализовать проверку типов с использованием аннотаций функций и принять вызов по использованию вызываемого объекта в качестве метода в Python.",
        "keywords": "Python, вызываемый объект, классы валидаторов, проверка типов, аннотации функций"
      },
      "details": {
        "steps": [
          {
            "title": "Понимание классов валидаторов",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверка понимания валидаторов",
                "file": "verify1-1.sh",
                "hint": "Убедитесь, что вы открыли и проверили файл validate.py"
              }
            ]
          },
          {
            "title": "Создание базового вызываемого объекта",
            "text": "ru/step2.md",
            "verify": [
              {
                "name": "Проверка класса ValidatedFunction",
                "file": "verify2-1.sh",
                "hint": "Убедитесь, что вы реализовали класс ValidatedFunction с методом __call__"
              }
            ]
          },
          {
            "title": "Реализация валидации типов с использованием аннотаций функций",
            "text": "ru/step3.md",
            "verify": [
              {
                "name": "Проверка логики валидации",
                "file": "verify3-1.sh",
                "hint": "Убедитесь, что вы реализовали логику валидации с использованием аннотаций функций"
              }
            ]
          },
          {
            "title": "Задача: использование вызываемого объекта в качестве метода",
            "text": "ru/step4.md",
            "verify": [
              {
                "name": "Проверка реализации класса Stock",
                "file": "verify4-1.sh",
                "hint": "Убедитесь, что вы попробовали выполнить задачу с использованием класса Stock"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "올바른 호출 가능 객체 정의",
      "description": "Validator 클래스 이해, 기본 호출 가능 객체 생성, 함수 주석을 사용한 타입 유효성 검사 구현, Python 에서 호출 가능 객체를 메서드로 사용하는 문제 해결.",
      "meta": {
        "title": "Python 호출 가능 객체: 유효성 검사 및 메서드 활용",
        "description": "Python 에서 호출 가능 객체를 효과적으로 정의하고 활용하는 방법을 알아보세요. Validator 클래스, 타입 유효성 검사, 함수 주석, 메서드 사용법 등, 실용적인 예제를 통해 Python 프로그래밍 능력을 향상시키세요.",
        "keywords": "Python, 호출 가능 객체 (callable object), validator 클래스, 타입 유효성 검사, 함수 주석, Python 프로그래밍, 메서드"
      },
      "details": {
        "steps": [
          {
            "title": "Validator 클래스 이해",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "Validator 이해 확인",
                "file": "verify1-1.sh",
                "hint": "validate.py 파일을 열고 검토했는지 확인하세요."
              }
            ]
          },
          {
            "title": "기본 호출 가능 객체 생성",
            "text": "ko/step2.md",
            "verify": [
              {
                "name": "ValidatedFunction 클래스 검증",
                "file": "verify2-1.sh",
                "hint": "__call__ 메서드를 사용하여 ValidatedFunction 클래스를 구현했는지 확인하세요."
              }
            ]
          },
          {
            "title": "함수 어노테이션을 사용한 타입 검증 구현",
            "text": "ko/step3.md",
            "verify": [
              {
                "name": "검증 로직 확인",
                "file": "verify3-1.sh",
                "hint": "함수 어노테이션을 사용하여 검증 로직을 구현했는지 확인하세요."
              }
            ]
          },
          {
            "title": "챌린지: 메서드로 호출 가능한 객체 사용",
            "text": "ko/step4.md",
            "verify": [
              {
                "name": "Stock 구현 검증",
                "file": "verify4-1.sh",
                "hint": "Stock 클래스를 사용하여 챌린지를 시도했는지 확인하세요."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Definir um Objeto Chamável Adequado",
      "description": "Compreenda as classes validadoras, crie um objeto chamável básico, implemente a validação de tipos com anotações de função e enfrente o desafio de usar um objeto chamável como um método em Python.",
      "meta": {
        "title": "Definir um Objeto Chamável em Python: Guia Completo",
        "description": "Aprenda a criar objetos chamáveis em Python, utilizando classes validadoras e anotações de função para validação de tipos. Descubra como usar objetos chamáveis como métodos de classe.",
        "keywords": "Python, objeto chamável, classes validadoras, validação de tipos, anotações de função, métodos de classe Python, tutorial Python"
      },
      "details": {
        "steps": [
          {
            "title": "Compreendendo as Classes Validadoras",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar Compreensão da Validação",
                "file": "verify1-1.sh",
                "hint": "Certifique-se de ter aberto e examinado o arquivo validate.py"
              }
            ]
          },
          {
            "title": "Criando um Objeto Chamável Básico",
            "text": "pt/step2.md",
            "verify": [
              {
                "name": "Verificar Classe ValidatedFunction",
                "file": "verify2-1.sh",
                "hint": "Certifique-se de ter implementado a classe ValidatedFunction com o método __call__"
              }
            ]
          },
          {
            "title": "Implementando Validação de Tipos com Anotações de Funções",
            "text": "pt/step3.md",
            "verify": [
              {
                "name": "Verificar Lógica de Validação",
                "file": "verify3-1.sh",
                "hint": "Certifique-se de ter implementado a lógica de validação usando anotações de funções"
              }
            ]
          },
          {
            "title": "Desafio: Usando um Objeto Chamável como um Método",
            "text": "pt/step4.md",
            "verify": [
              {
                "name": "Verificar Implementação do Stock",
                "file": "verify4-1.sh",
                "hint": "Certifique-se de ter tentado o desafio com a classe Stock"
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
