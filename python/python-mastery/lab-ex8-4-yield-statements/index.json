{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Yield Statement Management in Python",
  "description": "Understand generator lifetime and closure, handle exceptions in generators, and explore practical applications of generator management to master yield statement management in Python.",
  "meta": {
    "title": "Yield Statement Management in Python",
    "description": "Understand generator lifetime and closure, handle exceptions in generators, and explore practical applications of generator management to master yield statement management in Python.",
    "keywords": "Python, yield statement, generator management, generator lifetime, exception handling"
  },
  "difficulty": "Beginner",
  "time": 15,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "verified": true,
  "details": {
    "steps": [
      {
        "title": "Understanding Generator Lifetime and Closure",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify follow.py modifications",
            "file": "verify1-1.sh",
            "hint": "Make sure you've properly modified the follow.py file to catch the GeneratorExit exception.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": ["python/catching_exceptions", "python/generators"],
        "solutions": ["step1_solution.py"]
      },
      {
        "title": "Handling Exceptions in Generators",
        "text": "en/step2.md",
        "verify": [
          {
            "name": "Verify cofollow.py modifications",
            "file": "verify2-1.sh",
            "hint": "Make sure you've properly modified the printer() function in cofollow.py to handle exceptions.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": ["python/catching_exceptions", "python/generators"],
        "solutions": ["cofollow.py"]
      },
      {
        "title": "Practical Applications of Generator Management",
        "text": "en/step3.md",
        "verify": [
          {
            "name": "Verify robust_follow.py creation",
            "file": "verify3-1.sh",
            "hint": "Make sure you've created the robust_follow.py file with the required functionality."
          },
          {
            "name": "Verify pipeline.py creation",
            "file": "verify3-2.sh",
            "hint": "Make sure you've created the pipeline.py file with the required functionality."
          }
        ],
        "skills": [
          "python/catching_exceptions",
          "python/finally_block",
          "python/generators"
        ],
        "solutions": ["cofollow.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "cofollow.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "follow.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "stocklog.csv",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "CC-BY-SA-4.0",
    "url": "https://github.com/dabeaz-course/python-mastery/blob/main/LICENSE.md",
    "repo": "https://github.com/dabeaz-course/python-mastery"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Python 中 yield 语句的管理",
      "description": "了解生成器的生命周期和关闭机制，处理生成器中的异常，并探索生成器管理的实际应用，以掌握 Python 中 yield 语句的管理。",
      "meta": {
        "title": "Python 中 yield 语句的管理",
        "description": "了解生成器的生命周期和关闭机制，处理生成器中的异常，并探索生成器管理的实际应用，以掌握 Python 中 yield 语句的管理。",
        "keywords": "Python, yield 语句，生成器管理，生成器生命周期，异常处理"
      },
      "details": {
        "steps": [
          {
            "title": "理解生成器的生命周期和关闭机制",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证 follow.py 文件的修改",
                "file": "verify1-1.sh",
                "hint": "确保你已正确修改 follow.py 文件以捕获 GeneratorExit 异常。"
              }
            ]
          },
          {
            "title": "处理生成器中的异常",
            "text": "zh/step2.md",
            "verify": [
              {
                "name": "验证 cofollow.py 文件的修改",
                "file": "verify2-1.sh",
                "hint": "确保你已正确修改 cofollow.py 中的 printer() 函数以处理异常。"
              }
            ]
          },
          {
            "title": "生成器管理的实际应用",
            "text": "zh/step3.md",
            "verify": [
              {
                "name": "验证 robust_follow.py 文件的创建",
                "file": "verify3-1.sh",
                "hint": "确保你已创建具有所需功能的 robust_follow.py 文件。"
              },
              {
                "name": "验证 pipeline.py 文件的创建",
                "file": "verify3-2.sh",
                "hint": "确保你已创建具有所需功能的 pipeline.py 文件。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Gestión de declaraciones yield en Python",
      "description": "Comprenda el ciclo de vida y el cierre de los generadores, maneje excepciones en generadores y explore aplicaciones prácticas de la gestión de generadores para dominar la gestión de declaraciones yield en Python.",
      "meta": {
        "title": "Gestión de declaraciones yield en Python",
        "description": "Comprenda el ciclo de vida y el cierre de los generadores, maneje excepciones en generadores y explore aplicaciones prácticas de la gestión de generadores para dominar la gestión de declaraciones yield en Python.",
        "keywords": "Python, declaración yield, gestión de generadores, ciclo de vida de generadores, manejo de excepciones"
      },
      "details": {
        "steps": [
          {
            "title": "Comprender el ciclo de vida y el cierre de los generadores",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar las modificaciones en follow.py",
                "file": "verify1-1.sh",
                "hint": "Asegúrate de haber modificado correctamente el archivo follow.py para capturar la excepción GeneratorExit."
              }
            ]
          },
          {
            "title": "Manejo de excepciones en generadores",
            "text": "es/step2.md",
            "verify": [
              {
                "name": "Verificar las modificaciones en cofollow.py",
                "file": "verify2-1.sh",
                "hint": "Asegúrate de haber modificado correctamente la función printer() en cofollow.py para manejar excepciones."
              }
            ]
          },
          {
            "title": "Aplicaciones prácticas de la gestión de generadores",
            "text": "es/step3.md",
            "verify": [
              {
                "name": "Verificar la creación de robust_follow.py",
                "file": "verify3-1.sh",
                "hint": "Asegúrate de haber creado el archivo robust_follow.py con la funcionalidad requerida."
              },
              {
                "name": "Verificar la creación de pipeline.py",
                "file": "verify3-2.sh",
                "hint": "Asegúrate de haber creado el archivo pipeline.py con la funcionalidad requerida."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Gestion des instructions yield en Python",
      "description": "Comprenez le cycle de vie et la fermeture des générateurs, gérez les exceptions dans les générateurs et explorez les applications pratiques de la gestion des générateurs pour maîtriser la gestion des instructions yield en Python.",
      "meta": {
        "title": "Gestion des instructions yield en Python",
        "description": "Comprenez le cycle de vie et la fermeture des générateurs, gérez les exceptions dans les générateurs et explorez les applications pratiques de la gestion des générateurs pour maîtriser la gestion des instructions yield en Python.",
        "keywords": "Python, instruction yield, gestion des générateurs, cycle de vie des générateurs, gestion des exceptions"
      },
      "details": {
        "steps": [
          {
            "title": "Comprendre le cycle de vie et la fermeture des générateurs",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier les modifications de follow.py",
                "file": "verify1-1.sh",
                "hint": "Assurez-vous d'avoir correctement modifié le fichier follow.py pour capturer l'exception GeneratorExit."
              }
            ]
          },
          {
            "title": "Gestion des exceptions dans les générateurs",
            "text": "fr/step2.md",
            "verify": [
              {
                "name": "Vérifier les modifications de cofollow.py",
                "file": "verify2-1.sh",
                "hint": "Assurez-vous d'avoir correctement modifié la fonction printer() dans cofollow.py pour gérer les exceptions."
              }
            ]
          },
          {
            "title": "Applications pratiques de la gestion des générateurs",
            "text": "fr/step3.md",
            "verify": [
              {
                "name": "Vérifier la création de robust_follow.py",
                "file": "verify3-1.sh",
                "hint": "Assurez-vous d'avoir créé le fichier robust_follow.py avec la fonctionnalité requise."
              },
              {
                "name": "Vérifier la création de pipeline.py",
                "file": "verify3-2.sh",
                "hint": "Assurez-vous d'avoir créé le fichier pipeline.py avec la fonctionnalité requise."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Verwaltung von Yield-Anweisungen in Python",
      "description": "Verstehen Sie die Lebensdauer und das Schließen von Generatoren, behandeln Sie Ausnahmen in Generatoren und erkunden Sie praktische Anwendungen der Generatorverwaltung, um die Verwaltung von Yield-Anweisungen in Python zu meistern.",
      "meta": {
        "title": "Verwaltung von Yield-Anweisungen in Python",
        "description": "Verstehen Sie die Lebensdauer und das Schließen von Generatoren, behandeln Sie Ausnahmen in Generatoren und erkunden Sie praktische Anwendungen der Generatorverwaltung, um die Verwaltung von Yield-Anweisungen in Python zu meistern.",
        "keywords": "Python, Yield-Anweisung, Generatorverwaltung, Generatorlebensdauer, Ausnahmebehandlung"
      },
      "details": {
        "steps": [
          {
            "title": "Verständnis der Generator-Lebensdauer und des Generator-Schließens",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen Sie die Änderungen in follow.py",
                "file": "verify1-1.sh",
                "hint": "Stellen Sie sicher, dass Sie die Datei follow.py richtig geändert haben, um die GeneratorExit-Ausnahme abzufangen."
              }
            ]
          },
          {
            "title": "Behandlung von Ausnahmen in Generatoren",
            "text": "de/step2.md",
            "verify": [
              {
                "name": "Überprüfen Sie die Änderungen in cofollow.py",
                "file": "verify2-1.sh",
                "hint": "Stellen Sie sicher, dass Sie die Funktion printer() in cofollow.py richtig geändert haben, um Ausnahmen zu behandeln."
              }
            ]
          },
          {
            "title": "Praktische Anwendungen der Generatorverwaltung",
            "text": "de/step3.md",
            "verify": [
              {
                "name": "Überprüfen Sie die Erstellung von robust_follow.py",
                "file": "verify3-1.sh",
                "hint": "Stellen Sie sicher, dass Sie die Datei robust_follow.py mit der erforderlichen Funktionalität erstellt haben."
              },
              {
                "name": "Überprüfen Sie die Erstellung von pipeline.py",
                "file": "verify3-2.sh",
                "hint": "Stellen Sie sicher, dass Sie die Datei pipeline.py mit der erforderlichen Funktionalität erstellt haben."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Python における yield 文の管理",
      "description": "Python での yield 文の管理をマスターするために、ジェネレータのライフタイムとクローズを理解し、ジェネレータ内の例外を処理し、ジェネレータ管理の実用的なアプリケーションを探索します。",
      "meta": {
        "title": "Python における yield 文の管理",
        "description": "Python での yield 文の管理をマスターするために、ジェネレータのライフタイムとクローズを理解し、ジェネレータ内の例外を処理し、ジェネレータ管理の実用的なアプリケーションを探索します。",
        "keywords": "Python, yield 文，ジェネレータ管理，ジェネレータのライフタイム，例外処理"
      },
      "details": {
        "steps": [
          {
            "title": "ジェネレータのライフタイムとクローズの理解",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "follow.py の変更を確認する",
                "file": "verify1-1.sh",
                "hint": "GeneratorExit 例外をキャッチするように follow.py ファイルを適切に変更したことを確認してください。"
              }
            ]
          },
          {
            "title": "ジェネレータ内での例外処理",
            "text": "ja/step2.md",
            "verify": [
              {
                "name": "cofollow.py の変更を確認する",
                "file": "verify2-1.sh",
                "hint": "例外を処理するように cofollow.py の printer() 関数を適切に変更したことを確認してください。"
              }
            ]
          },
          {
            "title": "ジェネレータ管理の実用的なアプリケーション",
            "text": "ja/step3.md",
            "verify": [
              {
                "name": "robust_follow.py の作成を確認する",
                "file": "verify3-1.sh",
                "hint": "必要な機能を持つ robust_follow.py ファイルを作成したことを確認してください。"
              },
              {
                "name": "pipeline.py の作成を確認する",
                "file": "verify3-2.sh",
                "hint": "必要な機能を持つ pipeline.py ファイルを作成したことを確認してください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Управление оператором yield в Python",
      "description": "Понять жизненный цикл и закрытие генераторов, обработать исключения в генераторах и изучить практические применения управления генераторами, чтобы овладеть управлением оператором yield в Python.",
      "meta": {
        "title": "Управление оператором yield в Python",
        "description": "Понять жизненный цикл и закрытие генераторов, обработать исключения в генераторах и изучить практические применения управления генераторами, чтобы овладеть управлением оператором yield в Python.",
        "keywords": "Python, оператор yield, управление генераторами, жизненный цикл генераторов, обработка исключений"
      },
      "details": {
        "steps": [
          {
            "title": "Понимание жизненного цикла и закрытия генераторов",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить изменения в follow.py",
                "file": "verify1-1.sh",
                "hint": "Убедитесь, что вы правильно изменили файл follow.py для перехвата исключения GeneratorExit."
              }
            ]
          },
          {
            "title": "Обработка исключений в генераторах",
            "text": "ru/step2.md",
            "verify": [
              {
                "name": "Проверить изменения в cofollow.py",
                "file": "verify2-1.sh",
                "hint": "Убедитесь, что вы правильно изменили функцию printer() в файле cofollow.py для обработки исключений."
              }
            ]
          },
          {
            "title": "Практические применения управления генераторами",
            "text": "ru/step3.md",
            "verify": [
              {
                "name": "Проверить создание файла robust_follow.py",
                "file": "verify3-1.sh",
                "hint": "Убедитесь, что вы создали файл robust_follow.py с необходимой функциональностью."
              },
              {
                "name": "Проверить создание файла pipeline.py",
                "file": "verify3-2.sh",
                "hint": "Убедитесь, что вы создали файл pipeline.py с необходимой функциональностью."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
