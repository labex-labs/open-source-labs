{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Type Checking and Interfaces",
  "description": "Add type checking to print_table(), implement an abstract base class, and create algorithm template classes in Python for better code structure and type safety.",
  "meta": {
    "title": "Type Checking and Interfaces",
    "description": "Add type checking to print_table(), implement an abstract base class, and create algorithm template classes in Python for better code structure and type safety.",
    "keywords": "Python, type checking, interfaces, abstract base class, algorithm template classes"
  },
  "difficulty": "Beginner",
  "time": 15,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "verified": true,
  "details": {
    "steps": [
      {
        "title": "Adding Type Checking to print_table()",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify type checking was added to print_table",
            "file": "verify1-1.sh",
            "hint": "Make sure you've modified the print_table() function to check if formatter is an instance of TableFormatter",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "python/catching_exceptions",
          "python/conditional_statements",
          "python/raising_exceptions"
        ],
        "solutions": ["step1_solution.py"]
      },
      {
        "title": "Implementing an Abstract Base Class",
        "text": "en/step2.md",
        "verify": [
          {
            "name": "Verify TableFormatter is an abstract base class",
            "file": "verify2-1.sh",
            "hint": "Make sure you've converted TableFormatter to an abstract base class using the abc module",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": ["python/classes_objects", "python/inheritance"],
        "solutions": ["step2_solution.py"]
      },
      {
        "title": "Creating Algorithm Template Classes",
        "text": "en/step3.md",
        "verify": [
          {
            "name": "Verify CSVParser implementation",
            "file": "verify3-1.sh",
            "hint": "Make sure you've added the CSVParser classes and refactored the read functions",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "python/classes_objects",
          "python/function_definition",
          "python/inheritance"
        ],
        "solutions": ["step3_solution.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "reader.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "stock.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "tableformat.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        },
        {
          "file": "portfolio.csv",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": [],
  "license": {
    "name": "CC-BY-SA-4.0",
    "url": "https://github.com/dabeaz-course/python-mastery/blob/main/LICENSE.md",
    "repo": "https://github.com/dabeaz-course/python-mastery"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "类型检查与接口",
      "description": "在 Python 中为 print_table() 函数添加类型检查，实现抽象基类，并创建算法模板类，以优化代码结构和确保类型安全。",
      "meta": {
        "title": "类型检查与接口",
        "description": "在 Python 中为 print_table() 函数添加类型检查，实现抽象基类，并创建算法模板类，以优化代码结构和确保类型安全。",
        "keywords": "Python、类型检查、接口、抽象基类、算法模板类"
      },
      "details": {
        "steps": [
          {
            "title": "为 print_table() 添加类型检查",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证是否已为 print_table 添加类型检查",
                "file": "verify1-1.sh",
                "hint": "确保你已修改 print_table() 函数，以检查 formatter 是否为 TableFormatter 的实例"
              }
            ]
          },
          {
            "title": "实现抽象基类",
            "text": "zh/step2.md",
            "verify": [
              {
                "name": "验证 TableFormatter 是否为抽象基类",
                "file": "verify2-1.sh",
                "hint": "确保你已使用 abc 模块将 TableFormatter 转换为抽象基类"
              }
            ]
          },
          {
            "title": "创建算法模板类",
            "text": "zh/step3.md",
            "verify": [
              {
                "name": "验证 CSVParser 实现",
                "file": "verify3-1.sh",
                "hint": "确保你已添加 CSVParser 类并重构了读取函数"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Comprobación de tipos e interfaces",
      "description": "Agrega comprobación de tipos a print_table(), implementa una clase base abstracta y crea clases de plantilla de algoritmos en Python para una mejor estructura de código y seguridad de tipos.",
      "meta": {
        "title": "Comprobación de tipos e interfaces",
        "description": "Agrega comprobación de tipos a print_table(), implementa una clase base abstracta y crea clases de plantilla de algoritmos en Python para una mejor estructura de código y seguridad de tipos.",
        "keywords": "Python, comprobación de tipos, interfaces, clase base abstracta, clases de plantilla de algoritmos"
      },
      "details": {
        "steps": [
          {
            "title": "Agregar comprobación de tipos a print_table()",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar que se agregó la comprobación de tipos a print_table",
                "file": "verify1-1.sh",
                "hint": "Asegúrate de haber modificado la función print_table() para verificar si formatter es una instancia de TableFormatter"
              }
            ]
          },
          {
            "title": "Implementar una clase base abstracta",
            "text": "es/step2.md",
            "verify": [
              {
                "name": "Verificar que TableFormatter es una clase base abstracta",
                "file": "verify2-1.sh",
                "hint": "Asegúrate de haber convertido TableFormatter en una clase base abstracta utilizando el módulo abc"
              }
            ]
          },
          {
            "title": "Creación de clases de plantilla de algoritmo",
            "text": "es/step3.md",
            "verify": [
              {
                "name": "Verificar la implementación de CSVParser",
                "file": "verify3-1.sh",
                "hint": "Asegúrate de haber agregado las clases CSVParser y de haber refactorizado las funciones de lectura"
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Vérification de types et interfaces",
      "description": "Ajoutez la vérification de types à print_table(), implémentez une classe de base abstraite et créez des classes de modèle d'algorithme en Python pour une meilleure structure de code et une sécurité des types.",
      "meta": {
        "title": "Vérification de types et interfaces",
        "description": "Ajoutez la vérification de types à print_table(), implémentez une classe de base abstraite et créez des classes de modèle d'algorithme en Python pour une meilleure structure de code et une sécurité des types.",
        "keywords": "Python, vérification de types, interfaces, classe de base abstraite, classes de modèle d'algorithme"
      },
      "details": {
        "steps": [
          {
            "title": "Ajout de la vérification de types à print_table()",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez que la vérification de types a été ajoutée à print_table",
                "file": "verify1-1.sh",
                "hint": "Assurez-vous d'avoir modifié la fonction print_table() pour vérifier si formatter est une instance de TableFormatter"
              }
            ]
          },
          {
            "title": "Implémentation d'une classe de base abstraite",
            "text": "fr/step2.md",
            "verify": [
              {
                "name": "Vérifiez que TableFormatter est une classe de base abstraite",
                "file": "verify2-1.sh",
                "hint": "Assurez-vous d'avoir converti TableFormatter en une classe de base abstraite en utilisant le module abc"
              }
            ]
          },
          {
            "title": "Création de classes de modèle d'algorithme",
            "text": "fr/step3.md",
            "verify": [
              {
                "name": "Vérifiez l'implémentation de CSVParser",
                "file": "verify3-1.sh",
                "hint": "Assurez-vous d'avoir ajouté les classes CSVParser et refactorisé les fonctions de lecture"
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Typüberprüfung und Schnittstellen",
      "description": "Fügen Sie Typüberprüfung zur Funktion print_table() hinzu, implementieren Sie eine abstrakte Basisklasse und erstellen Sie Algorithmus-Template-Klassen in Python für eine bessere Code-Struktur und Typsicherheit.",
      "meta": {
        "title": "Typüberprüfung und Schnittstellen",
        "description": "Fügen Sie Typüberprüfung zur Funktion print_table() hinzu, implementieren Sie eine abstrakte Basisklasse und erstellen Sie Algorithmus-Template-Klassen in Python für eine bessere Code-Struktur und Typsicherheit.",
        "keywords": "Python, Typüberprüfung, Schnittstellen, abstrakte Basisklasse, Algorithmus-Template-Klassen"
      },
      "details": {
        "steps": [
          {
            "title": "Hinzufügen von Typüberprüfung zu print_table()",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen, ob Typüberprüfung zu print_table hinzugefügt wurde",
                "file": "verify1-1.sh",
                "hint": "Stellen Sie sicher, dass Sie die Funktion print_table() so geändert haben, dass sie überprüft, ob formatter eine Instanz von TableFormatter ist"
              }
            ]
          },
          {
            "title": "Implementierung einer abstrakten Basisklasse",
            "text": "de/step2.md",
            "verify": [
              {
                "name": "Überprüfen, dass TableFormatter eine abstrakte Basisklasse ist",
                "file": "verify2-1.sh",
                "hint": "Stellen Sie sicher, dass Sie TableFormatter mit dem abc-Modul in eine abstrakte Basisklasse umgewandelt haben"
              }
            ]
          },
          {
            "title": "Erstellung von Algorithmus-Template-Klassen",
            "text": "de/step3.md",
            "verify": [
              {
                "name": "Überprüfen der CSVParser-Implementierung",
                "file": "verify3-1.sh",
                "hint": "Stellen Sie sicher, dass Sie die CSVParser-Klassen hinzugefügt und die Lesefunktionen refaktorisiert haben"
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "型チェックとインターフェース",
      "description": "print_table() に型チェックを追加し、抽象基底クラスを実装し、Python でアルゴリズムテンプレートクラスを作成して、コード構造と型安全性を向上させます。",
      "meta": {
        "title": "型チェックとインターフェース",
        "description": "print_table() に型チェックを追加し、抽象基底クラスを実装し、Python でアルゴリズムテンプレートクラスを作成して、コード構造と型安全性を向上させます。",
        "keywords": "Python, 型チェック, インターフェース, 抽象基底クラス, アルゴリズムテンプレートクラス"
      },
      "details": {
        "steps": [
          {
            "title": "print_table() に型チェックを追加する",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "print_table に型チェックが追加されたことを確認する",
                "file": "verify1-1.sh",
                "hint": "print_table() 関数を修正して、formatter が TableFormatter のインスタンスであるかをチェックするようにしたことを確認してください"
              }
            ]
          },
          {
            "title": "抽象基底クラスの実装",
            "text": "ja/step2.md",
            "verify": [
              {
                "name": "TableFormatter が抽象基底クラスであることを確認する",
                "file": "verify2-1.sh",
                "hint": "abc モジュールを使用して TableFormatter を抽象基底クラスに変換したことを確認してください"
              }
            ]
          },
          {
            "title": "アルゴリズムテンプレートクラスの作成",
            "text": "ja/step3.md",
            "verify": [
              {
                "name": "CSVParser の実装を確認する",
                "file": "verify3-1.sh",
                "hint": "CSVParser クラスを追加し、読み取り関数をリファクタリングしたことを確認してください"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Проверка типов и интерфейсы",
      "description": "Добавьте проверку типов в функцию print_table(), реализуйте абстрактный базовый класс и создайте классы - шаблоны алгоритмов на Python для улучшения структуры кода и безопасности типов.",
      "meta": {
        "title": "Проверка типов и интерфейсы",
        "description": "Добавьте проверку типов в функцию print_table(), реализуйте абстрактный базовый класс и создайте классы - шаблоны алгоритмов на Python для улучшения структуры кода и безопасности типов.",
        "keywords": "Python, проверка типов, интерфейсы, абстрактный базовый класс, классы - шаблоны алгоритмов"
      },
      "details": {
        "steps": [
          {
            "title": "Добавление проверки типов в функцию print_table()",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить, что проверка типов была добавлена в функцию print_table",
                "file": "verify1-1.sh",
                "hint": "Убедитесь, что вы изменили функцию print_table() так, чтобы она проверяла, является ли formatter экземпляром класса TableFormatter"
              }
            ]
          },
          {
            "title": "Реализация абстрактного базового класса",
            "text": "ru/step2.md",
            "verify": [
              {
                "name": "Проверить, что TableFormatter является абстрактным базовым классом",
                "file": "verify2-1.sh",
                "hint": "Убедитесь, что вы преобразовали TableFormatter в абстрактный базовый класс с использованием модуля abc"
              }
            ]
          },
          {
            "title": "Создание классов-шаблонов алгоритмов",
            "text": "ru/step3.md",
            "verify": [
              {
                "name": "Проверить реализацию CSVParser",
                "file": "verify3-1.sh",
                "hint": "Убедитесь, что вы добавили классы CSVParser и переработали функции чтения"
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
