{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Deep Flatten List",
  "description": "In Python, a list can contain other lists as elements, and those lists can contain even more lists as elements, forming a nested structure. The process of flattening a nested list means to convert it into a one-dimensional list, where all the elements are at the same level. In this challenge, you will be asked to write a function that deep flattens a list, meaning that it will flatten all the nested lists recursively.",
  "meta": {
    "title": "Mastering Deep Flattening",
    "description": "Explore the art of deep flattening nested lists in Python, a powerful technique for data manipulation and transformation.",
    "keywords": "deep flattening, list transformation, python, data manipulation, nested lists"
  },
  "difficulty": "Beginner",
  "time": 15,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Deep Flatten List",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Deep Flatten Python Script",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have completed the required actions.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": []
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "test_deep_flatten.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "deep_flatten.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812", "jiaosenvip"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-python/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-python"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "深度扁平化列表",
      "description": "在 Python 中，列表可以包含其他列表作为元素，而这些列表又可以包含更多列表作为元素，从而形成嵌套结构。将嵌套列表扁平化的过程意味着将其转换为一维列表，其中所有元素都处于同一层级。在这个挑战中，你将被要求编写一个函数，对列表进行深度扁平化，即递归地扁平化所有嵌套列表。",
      "meta": {
        "title": "掌握深度扁平化",
        "description": "探索 Python 中深度扁平化嵌套列表的技巧，这是一种用于数据处理和转换的强大技术。",
        "keywords": "深度扁平化，列表转换，Python, 数据处理，嵌套列表"
      },
      "details": {
        "steps": [
          {
            "title": "深度扁平化列表",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证深度扁平化 Python 脚本",
                "file": "verify1-1.sh",
                "hint": "请确保你已完成所需操作。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Aplanar lista anidada",
      "description": "En Python, una lista puede contener otras listas como elementos, y esas listas pueden contener aún más listas como elementos, formando una estructura anidada. El proceso de aplanar una lista anidada significa convertirla en una lista unidimensional, donde todos los elementos están en el mismo nivel. En este desafío, se te pedirá escribir una función que aplane profundamente una lista, lo que significa que aplanará todas las listas anidadas de manera recursiva.",
      "meta": {
        "title": "Dominando la aplanación profunda",
        "description": "Explora el arte de la aplanación profunda de listas anidadas en Python, una técnica poderosa para la manipulación y transformación de datos.",
        "keywords": "aplanación profunda, transformación de listas, python, manipulación de datos, listas anidadas"
      },
      "details": {
        "steps": [
          {
            "title": "Aplanar lista anidada",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar el script de Python de aplanación profunda",
                "file": "verify1-1.sh",
                "hint": "Asegúrese de haber completado las acciones requeridas."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Aplatir profondément une liste",
      "description": "En Python, une liste peut contenir d'autres listes en tant qu'éléments, et ces listes peuvent à leur tour contenir encore plus de listes en tant qu'éléments, formant une structure imbriquée. Le processus de platir une liste imbriquée consiste à la convertir en une liste à une dimension, où tous les éléments sont au même niveau. Dans ce défi, vous devrez écrire une fonction qui aplatira profondément une liste, ce qui signifie qu'elle aplatira toutes les listes imbriquées de manière récursive.",
      "meta": {
        "title": "Maîtriser l'aplatissement profond",
        "description": "Explorez l'art de l'aplatissement profond des listes imbriquées en Python, une technique puissante pour la manipulation et la transformation de données.",
        "keywords": "aplatissement profond, transformation de liste, python, manipulation de données, listes imbriquées"
      },
      "details": {
        "steps": [
          {
            "title": "Aplatir profondément une liste",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier le script Python d'aplatissement profond",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir effectué les actions requises."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Die Liste vollständig entschachteln",
      "description": "In Python kann eine Liste andere Listen als Elemente enthalten, und diese Listen können wiederum weitere Listen als Elemente enthalten, was eine geschachtelte Struktur bildet. Der Prozess des Entschachtelns einer geschachtelten Liste bedeutet, sie in eine eindimensionale Liste umzuwandeln, wobei alle Elemente auf der gleichen Ebene sind. In dieser Herausforderung werden Sie aufgefordert, eine Funktion zu schreiben, die eine Liste rekursiv vollständig entschachtelt, d. h., alle geschachtelten Listen werden rekursiv ausgeflacht.",
      "meta": {
        "title": "Das Meistern der vollständigen Entschachtelung",
        "description": "Entdecken Sie die Kunst der vollständigen Entschachtelung von geschachtelten Listen in Python, eine leistungsstarke Technik für die Datenmanipulation und -transformation.",
        "keywords": "vollständige Entschachtelung, Listenumwandlung, Python, Datenmanipulation, geschachtelte Listen"
      },
      "details": {
        "steps": [
          {
            "title": "Die Liste vollständig entschachteln",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Python-Skript zur vollständigen Entschachtelung überprüfen",
                "file": "verify1-1.sh",
                "hint": "Bitte stellen Sie sicher, dass Sie die erforderlichen Aktionen ausgeführt haben."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "ネストされたリストを深くフラット化する",
      "description": "Python では、リストには他のリストを要素として含めることができ、それらのリストにはさらに他のリストを要素として含めることができ、ネストされた構造を形成します。ネストされたリストをフラット化するプロセスとは、それを一次元リストに変換することを意味し、すべての要素が同じレベルにあります。このチャレンジでは、再帰的にすべてのネストされたリストをフラット化する、つまり深くフラット化する関数を書くよう求められます。",
      "meta": {
        "title": "深いフラット化のマスター",
        "description": "Python におけるネストされたリストの深いフラット化の技術を探求しましょう。これは、データの操作と変換に強力な手法です。",
        "keywords": "深いフラット化，リスト変換，Python, データ操作，ネストされたリスト"
      },
      "details": {
        "steps": [
          {
            "title": "ネストされたリストを深くフラット化する",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Python の深いフラット化スクリプトを検証する",
                "file": "verify1-1.sh",
                "hint": "必要な操作を完了していることを確認してください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Глубоковременно преобразовать список в плоский",
      "description": "В Python список может содержать другие списки в качестве элементов, а эти списки могут содержать еще больше списков в качестве элементов, образуя вложенную структуру. Процесс преобразования вложенного списка в плоский список означает преобразование его в одномерный список, где все элементы находятся на одном уровне. В этом испытании вам будет предложено написать функцию, которая глубоковременно преобразует список в плоский, то есть она будет преобразовывать все вложенные списки рекурсивно.",
      "meta": {
        "title": "Мастерство в глубоком преобразовании списка в плоский",
        "description": "Изучите искусство глубоковременного преобразования вложенных списков в Python - мощную технику для манипуляции и преобразования данных.",
        "keywords": "глубоковременное преобразование списка в плоский, преобразование списка, python, манипуляция данными, вложенные списки"
      },
      "details": {
        "steps": [
          {
            "title": "Глубоковременно преобразовать список в плоский",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить Python-скрипт глубоковременного преобразования списка в плоский",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что вы выполнили требуемые действия."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "ko",
      "title": "깊이 평탄화 리스트",
      "description": "Python 에서 리스트는 다른 리스트를 요소로 포함할 수 있으며, 이러한 리스트는 더 많은 리스트를 요소로 포함하여 중첩 구조를 형성할 수 있습니다. 중첩된 리스트를 평탄화하는 과정은 모든 요소가 동일한 레벨에 있는 1 차원 리스트로 변환하는 것을 의미합니다. 이 챌린지에서는 리스트를 깊이 평탄화하는 함수를 작성하게 됩니다. 즉, 모든 중첩된 리스트를 재귀적으로 평탄화합니다.",
      "meta": {
        "title": "깊이 평탄화 마스터하기 - Python 리스트 변환",
        "description": "Python 에서 중첩된 리스트를 깊이 평탄화하는 기술을 탐구하세요. 데이터 조작 및 변환을 위한 강력한 기술입니다. Python 리스트 평탄화, 중첩 리스트 처리, 데이터 변환",
        "keywords": "깊이 평탄화, 리스트 변환, 파이썬, 데이터 조작, 중첩 리스트, Python 리스트 평탄화, 리스트 평탄화 방법"
      },
      "details": {
        "steps": [
          {
            "title": "깊이 평탄화 리스트",
            "text": "ko/step1.md",
            "verify": [
              {
                "name": "깊이 평탄화 Python 스크립트 검증",
                "file": "verify1-1.sh",
                "hint": "필수 작업을 완료했는지 확인하십시오."
              }
            ]
          }
        ],
        "intro": {
          "text": "ko/intro.md",
          "title": "소개"
        },
        "finish": {
          "text": "ko/finish.md",
          "title": "요약"
        }
      }
    },
    {
      "lang": "pt",
      "title": "Deep Flatten List (Achatamento Profundo de Lista)",
      "description": "Em Python, uma lista pode conter outras listas como elementos, e essas listas podem conter ainda mais listas como elementos, formando uma estrutura aninhada. O processo de achatamento (flattening) de uma lista aninhada significa convertê-la em uma lista unidimensional, onde todos os elementos estão no mesmo nível. Neste desafio, você será solicitado a escrever uma função que realiza o *deep flatten* (achatamento profundo) de uma lista, o que significa que ela achatará todas as listas aninhadas recursivamente.",
      "meta": {
        "title": "Dominando o Achatamento Profundo de Listas em Python",
        "description": "Aprenda a técnica de *deep flatten* (achatamento profundo) de listas aninhadas em Python, uma ferramenta poderosa para manipulação e transformação de dados. Simplifique suas listas complexas!",
        "keywords": "deep flatten, achatamento de lista, Python, manipulação de dados, listas aninhadas, transformar lista, achatar lista python"
      },
      "details": {
        "steps": [
          {
            "title": "Deep Flatten List (Achatamento Profundo de Lista)",
            "text": "pt/step1.md",
            "verify": [
              {
                "name": "Verificar Script Python de Achatamento Profundo",
                "file": "verify1-1.sh",
                "hint": "Por favor, certifique-se de ter concluído as ações necessárias."
              }
            ]
          }
        ],
        "intro": {
          "text": "pt/intro.md",
          "title": "Introdução"
        },
        "finish": {
          "text": "pt/finish.md",
          "title": "Resumo"
        }
      }
    }
  ]
}
