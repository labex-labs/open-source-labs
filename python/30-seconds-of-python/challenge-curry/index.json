{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Currying in Python with functools.partial",
  "description": "In functional programming, currying is a technique of transforming a function that takes multiple arguments into a sequence of functions that each take a single argument. In Python, we can use the functools.partial() function to implement currying.",
  "meta": {
    "title": "Functional Programming | Currying in Python",
    "description": "Learn how to implement currying in Python using the functools.partial() function. Curry functions to create reusable and composable code.",
    "keywords": "functional programming, currying, Python, functools.partial, reusable code, composable code"
  },
  "difficulty": "Beginner",
  "time": 15,
  "hidden": true,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Curry Function",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Student's Python Curry Function Implementation",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have completed the required actions.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "python/comments",
          "python/function_definition",
          "python/importing_modules",
          "python/keyword_arguments",
          "python/lambda_functions",
          "python/standard_libraries",
          "python/tuples",
          "python/using_packages"
        ],
        "solutions": ["curry.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "test_curry.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "curry.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812", "jiaosenvip"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-python/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-python"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "使用 functools.partial 在 Python 中进行柯里化",
      "description": "在函数式编程中，柯里化是一种将接受多个参数的函数转换为一系列每个只接受一个参数的函数的技术。在 Python 中，我们可以使用 functools.partial() 函数来实现柯里化。",
      "meta": {
        "title": "函数式编程 | Python 中的柯里化",
        "description": "学习如何使用 functools.partial() 函数在 Python 中实现柯里化。对函数进行柯里化以创建可重用和可组合的代码。",
        "keywords": "函数式编程，柯里化，Python, functools.partial, 可重用代码，可组合代码"
      },
      "details": {
        "steps": [
          {
            "title": "柯里化函数",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证学生的 Python 柯里化函数实现",
                "file": "verify1-1.sh",
                "hint": "请确保你已完成所需操作。"
              }
            ],
            "solutions": ["curry.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Currying en Python con functools.partial",
      "description": "En la programación funcional, la currying es una técnica que consiste en transformar una función que toma múltiples argumentos en una secuencia de funciones que cada una toma un solo argumento. En Python, podemos usar la función functools.partial() para implementar la currying.",
      "meta": {
        "title": "Programación Funcional | Currying en Python",
        "description": "Aprende cómo implementar la currying en Python usando la función functools.partial(). Curre funciones para crear código reutilizable y composable.",
        "keywords": "programación funcional, currying, Python, functools.partial, código reutilizable, código composable"
      },
      "details": {
        "steps": [
          {
            "title": "Función Curry",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar la implementación de la función Curry de Python del estudiante",
                "file": "verify1-1.sh",
                "hint": "Asegúrese de haber completado las acciones requeridas."
              }
            ],
            "solutions": ["curry.py"]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Le curry en Python avec functools.partial",
      "description": "En programmation fonctionnelle, le curry est une technique consistant à transformer une fonction prenant plusieurs arguments en une séquence de fonctions prenant chacun un seul argument. En Python, on peut utiliser la fonction functools.partial() pour implémenter le curry.",
      "meta": {
        "title": "Programmation fonctionnelle | Le curry en Python",
        "description": "Découvrez comment implémenter le curry en Python à l'aide de la fonction functools.partial(). Créez des fonctions curry pour générer du code réutilisable et composé.",
        "keywords": "programmation fonctionnelle, curry, Python, functools.partial, code réutilisable, code composé"
      },
      "details": {
        "steps": [
          {
            "title": "Fonction Curry",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier l'implémentation de la fonction Curry en Python de l'étudiant",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir effectué les actions requises."
              }
            ],
            "solutions": ["curry.py"]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Currying in Python mit functools.partial",
      "description": "In der funktionalen Programmierung ist das Curryieren eine Technik, um eine Funktion, die mehrere Argumente annimmt, in eine Sequenz von Funktionen zu transformieren, von denen jede nur ein einzelnes Argument annimmt. In Python können wir die functools.partial()-Funktion verwenden, um das Curryieren zu implementieren.",
      "meta": {
        "title": "Funktionale Programmierung | Currying in Python",
        "description": "Lernen Sie, wie Sie das Curryieren in Python mit der functools.partial()-Funktion implementieren. Curryieren Sie Funktionen, um wiederverwendbaren und komposierbaren Code zu erstellen.",
        "keywords": "funktionale Programmierung, Curryieren, Python, functools.partial, wiederverwendbarer Code, komposierbarer Code"
      },
      "details": {
        "steps": [
          {
            "title": "Curry-Funktion",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen der Python-Implementierung der Curry-Funktion des Studenten",
                "file": "verify1-1.sh",
                "hint": "Bitte stellen Sie sicher, dass Sie die erforderlichen Aktionen ausgeführt haben."
              }
            ],
            "solutions": ["curry.py"]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Python における functools.partial を用いたカリング",
      "description": "関数型プログラミングにおいて、カリングは、複数の引数を取る関数を、それぞれが 1 つの引数を取る関数のシーケンスに変換する技術です。Python では、functools.partial() 関数を使ってカリングを実装することができます。",
      "meta": {
        "title": "関数型プログラミング | Python におけるカリング",
        "description": "functools.partial() 関数を使って Python においてカリングを実装する方法を学びましょう。カリング関数を使って再利用可能でコンポーザブルなコードを作成しましょう。",
        "keywords": "関数型プログラミング，カリング，Python, functools.partial, 再利用可能なコード，コンポーザブルなコード"
      },
      "details": {
        "steps": [
          {
            "title": "カリング関数",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "学生の Python のカリング関数の実装を確認する",
                "file": "verify1-1.sh",
                "hint": "必要な操作を完了していることを確認してください。"
              }
            ],
            "solutions": ["curry.py"]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Каррирование в Python с использованием functools.partial",
      "description": "В функциональном программировании каррирование - это техника преобразования функции, которая принимает несколько аргументов, в последовательность функций, каждая из которых принимает только один аргумент. В Python мы можем использовать функцию functools.partial() для реализации каррирования.",
      "meta": {
        "title": "Функциональное программирование | Каррирование в Python",
        "description": "Изучите, как реализовать каррирование в Python с использованием функции functools.partial(). Каррируйте функции для создания повторногоиспользуемого и композируемого кода.",
        "keywords": "функциональное программирование, каррирование, Python, functools.partial, повторныйиспользуемый код, композируемый код"
      },
      "details": {
        "steps": [
          {
            "title": "Функция каррирования",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить реализацию функции каррирования на Python студента",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что вы выполнили все необходимые действия."
              }
            ],
            "solutions": ["curry.py"]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
