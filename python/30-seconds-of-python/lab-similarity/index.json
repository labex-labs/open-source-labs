{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Python List Comprehension Comparison",
  "description": "In Python, it is often necessary to compare two lists and find the elements that exist in both lists. This can be achieved by using list comprehension, a powerful feature of Python that allows us to create new lists based on existing lists.",
  "meta": {
    "title": "Python List Similarity | List Comprehension",
    "description": "Learn how to compare and find common elements between two lists in Python using list comprehension, a powerful feature for creating new lists.",
    "keywords": "Python, List Similarity, List Comprehension, Programming Tutorials, Python Lists"
  },
  "difficulty": "Beginner",
  "time": 15,
  "hidden": true,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "List Similarity",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Python Script Execution in Temporary Directory",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have completed the required actions.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "python/comments",
          "python/conditional_statements",
          "python/for_loops",
          "python/function_definition",
          "python/list_comprehensions",
          "python/lists",
          "python/tuples"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "test_similarity.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "similarity.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812", "jiaosenvip"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-python/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-python"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Python 列表推导式比较",
      "description": "在 Python 中，经常需要比较两个列表并找出两个列表中都存在的元素。这可以通过使用列表推导式来实现，列表推导式是 Python 的一项强大功能，它允许我们基于现有列表创建新列表。",
      "meta": {
        "title": "Python 列表相似度 | 列表推导式",
        "description": "学习如何使用列表推导式在 Python 中比较并找到两个列表之间的共同元素，列表推导式是创建新列表的强大功能。",
        "keywords": "Python, 列表相似度，列表推导式，编程教程，Python 列表"
      },
      "details": {
        "steps": [
          {
            "title": "列表相似度",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "在临时目录中验证 Python 脚本执行情况",
                "file": "verify1-1.sh",
                "hint": "请确保你已完成所需操作。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Comparación de comprensión de listas en Python",
      "description": "En Python, a menudo es necesario comparar dos listas y encontrar los elementos que existen en ambas listas. Esto se puede lograr mediante la comprensión de listas, una característica poderosa de Python que nos permite crear nuevas listas basadas en listas existentes.",
      "meta": {
        "title": "Similitud de listas en Python | Comprensión de listas",
        "description": "Aprende cómo comparar y encontrar elementos comunes entre dos listas en Python utilizando la comprensión de listas, una característica poderosa para crear nuevas listas.",
        "keywords": "Python, Similitud de listas, Comprensión de listas, Tutoriales de programación, Listas de Python"
      },
      "details": {
        "steps": [
          {
            "title": "Similitud de listas",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar la ejecución del script de Python en el directorio temporal",
                "file": "verify1-1.sh",
                "hint": "Asegúrese de haber completado las acciones requeridas."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Comparaison des compréhensions de liste en Python",
      "description": "En Python, il est souvent nécessaire de comparer deux listes et de trouver les éléments qui existent dans les deux listes. Cela peut être réalisé en utilisant la compréhension de liste, une fonction puissante de Python qui nous permet de créer de nouvelles listes à partir de listes existantes.",
      "meta": {
        "title": "Similarité de listes en Python | Compréhension de liste",
        "description": "Découvrez comment comparer et trouver les éléments communs entre deux listes en Python en utilisant la compréhension de liste, une fonction puissante pour créer de nouvelles listes.",
        "keywords": "Python, Similarité de listes, Compréhension de liste, Didacticiels de programmation, Listes en Python"
      },
      "details": {
        "steps": [
          {
            "title": "Similarité de listes",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier l'exécution du script Python dans le répertoire temporaire",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir effectué les actions requises."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Python のリスト内包表記による比較",
      "description": "Python では、2 つのリストを比較して、両方のリストに存在する要素を見つける必要があることがよくあります。これは、Python の強力な機能であるリスト内包表記を使用することで達成できます。これにより、既存のリストに基づいて新しいリストを作成できます。",
      "meta": {
        "title": "Python のリスト類似性 | リスト内包表記",
        "description": "Python でリスト内包表記を使って 2 つのリスト間の比較と共通要素の検索方法を学びましょう。新しいリストを作成するための強力な機能です。",
        "keywords": "Python, リスト類似性，リスト内包表記，プログラミングチュートリアル，Python リスト"
      },
      "details": {
        "steps": [
          {
            "title": "リストの類似性",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "一時ディレクトリでの Python スクリプトの実行を確認する",
                "file": "verify1-1.sh",
                "hint": "必要な操作を完了していることを確認してください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Сравнение списков в Python с использованием списочного выражения",
      "description": "В Python часто необходимо сравнить два списка и найти элементы, которые присутствуют в обоих списках. Это можно сделать с использованием списочного выражения, мощной функции Python, которая позволяет создавать новые списки на основе существующих списков.",
      "meta": {
        "title": "Схожесть списков в Python | Списочное выражение",
        "description": "Изучите, как сравнивать и находить общие элементы между двумя списками в Python с использованием списочного выражения, мощной функции для создания новых списков.",
        "keywords": "Python, Схожесть списков, Списочное выражение, Руководства по программированию, Списки в Python"
      },
      "details": {
        "steps": [
          {
            "title": "Схожесть списков",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить выполнение Python-скрипта в временной директории",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что вы выполнили все необходимые действия."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "de",
      "title": "Vergleich von Python-Listenkomprehension",
      "description": "In Python ist es oft erforderlich, zwei Listen zu vergleichen und die Elemente zu finden, die in beiden Listen vorhanden sind. Dies kann durch die Verwendung von List Comprehension erreicht werden, einem leistungsstarken Feature von Python, das uns ermöglicht, neue Listen auf der Grundlage von bestehenden Listen zu erstellen.",
      "meta": {
        "title": "Python-Listenähnlichkeit | Listenkomprehension",
        "description": "Lernen Sie, wie Sie in Python zwei Listen vergleichen und gemeinsame Elemente finden, indem Sie die Listenkomprehension verwenden, ein leistungsstarkes Feature zur Erstellung neuer Listen.",
        "keywords": "Python, Listenähnlichkeit, Listenkomprehension, Programmierungstutorials, Python-Listen"
      },
      "details": {
        "steps": [
          {
            "title": "Listenähnlichkeit",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren der Ausführung eines Python-Skripts im temporären Verzeichnis",
                "file": "verify1-1.sh",
                "hint": "Bitte stellen Sie sicher, dass Sie die erforderlichen Aktionen abgeschlossen haben."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    }
  ]
}
