{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "lab",
  "title": "Efficient Prime Number Detection",
  "description": "In mathematics, a prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. For example, 5 is prime because the only ways of writing it as a product, 1 × 5 or 5 × 1, involve 5 itself. However, 4 is not prime because it is a product (2 × 2) in which both numbers are smaller than 4. In this challenge, you need to write a Python function to check if a given number is prime or not.",
  "meta": {
    "title": "Efficient Prime Number Detection in Python",
    "description": "Learn how to write a Python function to check if a given number is prime or not. Discover the mathematical concepts behind prime numbers.",
    "keywords": "python, mathematics, prime number, algorithm, programming"
  },
  "difficulty": "Beginner",
  "time": 15,
  "hidden": true,
  "fee_type": "free",
  "show_in_tutorial": true,
  "details": {
    "steps": [
      {
        "title": "Number is Prime",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Python Script Execution",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have completed the required actions.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "python/booleans",
          "python/build_in_functions",
          "python/comments",
          "python/conditional_statements",
          "python/for_loops",
          "python/function_definition",
          "python/importing_modules",
          "python/math_random",
          "python/numeric_types",
          "python/standard_libraries",
          "python/tuples",
          "python/type_conversion",
          "python/using_packages",
          "python/variables_data_types"
        ]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "title": "Introduction",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md",
      "title": "Summary"
    },
    "assets": {
      "host01": [
        {
          "file": "test_is_prime.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "is_prime.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812", "jiaosenvip"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-python/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-python"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "高效质数检测",
      "description": "在数学中，质数是大于1的自然数，且不是两个较小自然数的乘积。例如，5是质数，因为将它写成乘积的唯一方式1×5或5×1都涉及到5本身。然而，4不是质数，因为它是两个都比4小的数的乘积（2×2）。在这个挑战中，你需要编写一个Python函数来检查给定的数是否为质数。",
      "meta": {
        "title": "Python中的高效质数检测",
        "description": "学习如何编写一个Python函数来检查给定的数是否为质数。探索质数背后的数学概念。",
        "keywords": "Python, 数学, 质数, 算法, 编程"
      },
      "details": {
        "steps": [
          {
            "title": "数字是否为质数",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证Python脚本执行情况",
                "file": "verify1-1.sh",
                "hint": "请确保你已完成所需操作。"
              }
            ]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Detección eficiente de números primos",
      "description": "En matemáticas, un número primo es un número natural mayor que 1 que no es el producto de dos números naturales más pequeños. Por ejemplo, 5 es primo porque las únicas maneras de escribirlo como un producto, 1 × 5 o 5 × 1, implican a 5 mismo. Sin embargo, 4 no es primo porque es un producto (2 × 2) en el que ambos números son más pequeños que 4. En este desafío, debes escribir una función de Python para comprobar si un número dado es primo o no.",
      "meta": {
        "title": "Detección eficiente de números primos en Python",
        "description": "Aprende cómo escribir una función de Python para comprobar si un número dado es primo o no. Descubre los conceptos matemáticos detrás de los números primos.",
        "keywords": "python, matemáticas, número primo, algoritmo, programación"
      },
      "details": {
        "steps": [
          {
            "title": "Número es primo",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar la ejecución del script de Python",
                "file": "verify1-1.sh",
                "hint": "Asegúrese de haber completado las acciones requeridas."
              }
            ]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Détection efficace de nombres premiers",
      "description": "En mathématiques, un nombre premier est un nombre naturel supérieur à 1 qui n'est pas le produit de deux nombres naturels plus petits. Par exemple, 5 est premier car les seules manières de l'écrire comme un produit, 1 × 5 ou 5 × 1, impliquent 5 lui-même. Cependant, 4 n'est pas premier car c'est un produit (2 × 2) dans lequel les deux nombres sont plus petits que 4. Dans ce défi, vous devez écrire une fonction Python pour vérifier si un nombre donné est premier ou non.",
      "meta": {
        "title": "Détection efficace de nombres premiers en Python",
        "description": "Apprenez à écrire une fonction Python pour vérifier si un nombre donné est premier ou non. Découvrez les concepts mathématiques derrière les nombres premiers.",
        "keywords": "python, mathématiques, nombre premier, algorithme, programmation"
      },
      "details": {
        "steps": [
          {
            "title": "Le nombre est premier",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier l'exécution du script Python",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir effectué les actions requises."
              }
            ]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Effiziente Primzahl-Erkennung",
      "description": "In der Mathematik ist eine Primzahl eine natürliche Zahl größer als 1, die kein Produkt von zwei kleineren natürlichen Zahlen ist. Beispielsweise ist 5 eine Primzahl, weil die einzigen Möglichkeiten, es als Produkt zu schreiben, 1 × 5 oder 5 × 1, 5 selbst beinhalten. 4 ist jedoch keine Primzahl, weil es ein Produkt (2 × 2) ist, bei dem beide Zahlen kleiner als 4 sind. In dieser Herausforderung müssen Sie eine Python-Funktion schreiben, um zu überprüfen, ob eine gegebene Zahl eine Primzahl ist oder nicht.",
      "meta": {
        "title": "Effiziente Primzahl-Erkennung in Python",
        "description": "Lernen Sie, wie Sie eine Python-Funktion schreiben, um zu überprüfen, ob eine gegebene Zahl eine Primzahl ist oder nicht. Entdecken Sie die mathematischen Konzepte hinter Primzahlen.",
        "keywords": "python, mathematik, primzahl, algorithmus, programmierung"
      },
      "details": {
        "steps": [
          {
            "title": "Zahl ist Primzahl",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren der Ausführung des Python-Skripts",
                "file": "verify1-1.sh",
                "hint": "Bitte stellen Sie sicher, dass Sie die erforderlichen Aktionen abgeschlossen haben."
              }
            ]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "効率的な素数検出",
      "description": "数学において、素数とは1より大きい自然数であって、2つの小さな自然数の積ではない数のことを指します。たとえば、5は素数です。なぜなら、5を積として書く唯一の方法は1×5または5×1であり、これらの場合には5自身が含まれるからです。一方、4は素数ではありません。なぜなら、4は2×2という積であり、この場合の両数は4より小さいからです。このチャレンジでは、与えられた数が素数かどうかをチェックするPython関数を書く必要があります。",
      "meta": {
        "title": "Pythonにおける効率的な素数検出",
        "description": "与えられた数が素数かどうかをチェックするPython関数を書く方法を学びましょう。素数の背後にある数学的概念を発見しましょう。",
        "keywords": "python, 数学, 素数, アルゴリズム, プログラミング"
      },
      "details": {
        "steps": [
          {
            "title": "数が素数であるかどうか",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "Pythonスクリプトの実行を確認する",
                "file": "verify1-1.sh",
                "hint": "必要な操作を完了していることを確認してください。"
              }
            ]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Эффективное обнаружение простых чисел",
      "description": "В математике простое число - это натуральное число, большее 1, которое не является произведением двух более мелких натуральных чисел. Например, 5 - простое число, потому что единственные способы представить его в виде произведения, 1 × 5 или 5 × 1, включают само число 5. Однако, 4 не является простым числом, потому что это произведение (2 × 2), в котором оба числа меньше 4. В этом испытании вам нужно написать функцию на Python для проверки, является ли заданное число простым.",
      "meta": {
        "title": "Эффективное обнаружение простых чисел в Python",
        "description": "Изучите, как написать функцию на Python для проверки, является ли заданное число простым. Откройте математические концепции, лежащие в основе простых чисел.",
        "keywords": "python, математика, простое число, алгоритм, программирование"
      },
      "details": {
        "steps": [
          {
            "title": "Число является простым",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить выполнение скрипта на Python",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что вы выполнили все необходимые действия."
              }
            ]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
