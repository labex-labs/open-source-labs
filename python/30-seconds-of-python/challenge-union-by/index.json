{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "List Union Based on Function | Challenge",
  "description": "In Python, we can use the set() function to get the union of two lists. However, sometimes we need to apply a function to each element of both lists before getting the union. In this challenge, you will create a function that returns the union of two lists based on a provided function.",
  "meta": {
    "title": "Python Union Function | Programming Tutorials",
    "description": "Learn how to use the Python set() function to get the union of two lists, and apply a custom function to each element before getting the union.",
    "keywords": "Python, set, union, list, function, programming, tutorials"
  },
  "difficulty": "Beginner",
  "time": 15,
  "hidden": true,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "List Union Based on Function",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify Python3 Script Execution in Temporary Directory",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have completed the required actions.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "python/build_in_functions",
          "python/comments",
          "python/conditional_statements",
          "python/data_collections",
          "python/for_loops",
          "python/function_definition",
          "python/importing_modules",
          "python/list_comprehensions",
          "python/lists",
          "python/math_random",
          "python/standard_libraries",
          "python/tuples",
          "python/using_packages",
          "python/variables_data_types"
        ],
        "solutions": ["union_by.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "test_union_by.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "union_by.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812", "jiaosenvip"],
  "license": {
    "name": "CC-BY-4.0",
    "url": "https://github.com/30-seconds/30-seconds-of-python/blob/master/LICENSE",
    "repo": "https://github.com/30-seconds/30-seconds-of-python"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "基于函数的列表并集 | 挑战",
      "description": "在 Python 中，我们可以使用 set() 函数来获取两个列表的并集。然而，有时我们需要在获取并集之前对两个列表中的每个元素应用一个函数。在这个挑战中，你将创建一个函数，该函数根据提供的函数返回两个列表的并集。",
      "meta": {
        "title": "Python 并集函数 | 编程教程",
        "description": "学习如何使用 Python 的 set() 函数获取两个列表的并集，并在获取并集之前对每个元素应用自定义函数。",
        "keywords": "Python, 集合，并集，列表，函数，编程，教程"
      },
      "details": {
        "steps": [
          {
            "title": "基于函数的列表并集",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "在临时目录中验证 Python3 脚本执行情况",
                "file": "verify1-1.sh",
                "hint": "请确保你已完成所需操作。"
              }
            ],
            "solutions": ["union_by.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Unión de listas basada en función | Desafío",
      "description": "En Python, podemos usar la función set() para obtener la unión de dos listas. Sin embargo, a veces necesitamos aplicar una función a cada elemento de ambas listas antes de obtener la unión. En este desafío, crearás una función que devuelva la unión de dos listas basada en una función proporcionada.",
      "meta": {
        "title": "Función de unión de Python | Tutoriales de programación",
        "description": "Aprende cómo usar la función set() de Python para obtener la unión de dos listas, y aplica una función personalizada a cada elemento antes de obtener la unión.",
        "keywords": "Python, set, unión, lista, función, programación, tutoriales"
      },
      "details": {
        "steps": [
          {
            "title": "Unión de listas basada en función",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar la ejecución del script de Python3 en el directorio temporal",
                "file": "verify1-1.sh",
                "hint": "Asegúrese de haber completado las acciones requeridas."
              }
            ],
            "solutions": ["union_by.py"]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Union de listes basée sur une fonction | Défi",
      "description": "En Python, nous pouvons utiliser la fonction set() pour obtenir l'union de deux listes. Cependant, parfois nous devons appliquer une fonction à chaque élément des deux listes avant d'obtenir l'union. Dans ce défi, vous devrez créer une fonction qui renvoie l'union de deux listes sur la base d'une fonction fournie.",
      "meta": {
        "title": "Fonction d'union Python | Didacticiels de programmation",
        "description": "Découvrez comment utiliser la fonction set() de Python pour obtenir l'union de deux listes et appliquer une fonction personnalisée à chaque élément avant d'obtenir l'union.",
        "keywords": "Python, ensemble, union, liste, fonction, programmation, didacticiels"
      },
      "details": {
        "steps": [
          {
            "title": "Union de listes basée sur une fonction",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier l'exécution du script Python3 dans le répertoire temporaire",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir effectué les actions requises."
              }
            ],
            "solutions": ["union_by.py"]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Liste-Vereinigung basierend auf Funktion | Challenge",
      "description": "In Python können wir die set()-Funktion verwenden, um die Vereinigung zweier Listen zu erhalten. Manchmal müssen wir jedoch eine Funktion auf jedes Element beider Listen anwenden, bevor wir die Vereinigung bilden. In dieser Challenge werden Sie eine Funktion erstellen, die die Vereinigung zweier Listen basierend auf einer bereitgestellten Funktion zurückgibt.",
      "meta": {
        "title": "Python-Vereinigungsfunktion | Programmierungstutorials",
        "description": "Lernen Sie, wie Sie die Python set()-Funktion verwenden, um die Vereinigung zweier Listen zu erhalten, und wie Sie eine benutzerdefinierte Funktion auf jedes Element anwenden, bevor Sie die Vereinigung bilden.",
        "keywords": "Python, Menge, Vereinigung, Liste, Funktion, Programmierung, Tutorials"
      },
      "details": {
        "steps": [
          {
            "title": "Liste-Vereinigung basierend auf Funktion",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren der Ausführung eines Python3-Skripts im temporären Verzeichnis",
                "file": "verify1-1.sh",
                "hint": "Bitte stellen Sie sicher, dass Sie die erforderlichen Aktionen ausgeführt haben."
              }
            ],
            "solutions": ["union_by.py"]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "関数に基づくリストの和集合 | チャレンジ",
      "description": "Python では、2 つのリストの和集合を取得するには set() 関数を使用できます。ただし、場合によっては和集合を取得する前に、両方のリストの各要素に関数を適用する必要があります。このチャレンジでは、提供された関数に基づいて 2 つのリストの和集合を返す関数を作成します。",
      "meta": {
        "title": "Python の和集合関数 | プログラミング チュートリアル",
        "description": "Python の set() 関数を使用して 2 つのリストの和集合を取得する方法と、和集合を取得する前に各要素にカスタム関数を適用する方法を学びましょう。",
        "keywords": "Python, set, 和集合，リスト，関数，プログラミング，チュートリアル"
      },
      "details": {
        "steps": [
          {
            "title": "関数に基づくリストの和集合",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "一時ディレクトリでの Python3 スクリプト実行の検証",
                "file": "verify1-1.sh",
                "hint": "必要な操作を完了していることを確認してください。"
              }
            ],
            "solutions": ["union_by.py"]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Объединение списков на основе функции | Вызов",
      "description": "В Python мы можем использовать функцию set() для получения объединения двух списков. Однако, иногда нам нужно применить функцию к каждому элементу обоих списков, прежде чем получить объединение. В этом вызове вы создадите функцию, которая возвращает объединение двух списков на основе предоставленной функции.",
      "meta": {
        "title": "Функция объединения Python | Руководства по программированию",
        "description": "Изучите, как использовать функцию set() Python для получения объединения двух списков и применить пользовательскую функцию к каждому элементу, прежде чем получить объединение.",
        "keywords": "Python, множество, объединение, список, функция, программирование, руководства"
      },
      "details": {
        "steps": [
          {
            "title": "Объединение списков на основе функции",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить выполнение сценария Python3 в временной директории",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что вы выполнили требуемые действия."
              }
            ],
            "solutions": ["union_by.py"]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
