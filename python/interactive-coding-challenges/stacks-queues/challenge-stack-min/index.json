{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Implement O(1) Stack with Push, Pop, Min",
  "description": "In computer science, a stack is an abstract data type that serves as a collection of elements, with two main operations: push, which adds an element to the collection, and pop, which removes the most recently added element that was not yet removed. In this challenge, we will implement a stack with push, pop, and min methods running O(1) time.",
  "meta": {
    "title": "Stack Implementation | Data Structures | Coding Challenges",
    "description": "Learn how to implement a stack data structure with push, pop, and min methods running in O(1) time. Explore coding challenges and solutions for efficient stack management.",
    "keywords": "stack, data structures, coding challenges, push, pop, min, time complexity"
  },
  "difficulty": "Beginner",
  "time": 15,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Stack Min",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify if all tests are passed",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have the correct output format.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "algorithm/stacks_queues",
          "python/build_in_functions",
          "python/classes_objects",
          "python/conditional_statements",
          "python/constructor",
          "python/default_arguments",
          "python/encapsulation",
          "python/function_definition",
          "python/importing_modules",
          "python/iterators",
          "python/os_system",
          "python/polymorphism",
          "python/standard_libraries",
          "python/tuples"
        ],
        "solutions": ["stack_min.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "test_stack_min.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "stack_min.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812"],
  "license": {
    "name": "Apache-2.0",
    "url": "https://github.com/donnemartin/interactive-coding-challenges/blob/master/LICENSE",
    "repo": "https://github.com/donnemartin/interactive-coding-challenges"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "实现具有入栈、出栈、最小值操作且时间复杂度为O(1) 的栈",
      "description": "在计算机科学中，栈是一种抽象数据类型，它作为一组元素的集合，有两个主要操作：push（将一个元素添加到集合中）和pop（移除最近添加且尚未移除的元素）。在这个挑战中，我们将实现一个具有push、pop和min方法且运行时间为O(1) 的栈。",
      "meta": {
        "title": "栈的实现 | 数据结构 | 编码挑战",
        "description": "学习如何实现一个栈数据结构，其入栈、出栈和最小值操作的时间复杂度为O(1)。探索高效栈管理的编码挑战及解决方案。",
        "keywords": "栈, 数据结构, 编码挑战, 入栈, 出栈, 最小值, 时间复杂度"
      },
      "details": {
        "steps": [
          {
            "title": "带有最小值操作的栈",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证所有测试是否通过",
                "file": "verify1-1.sh",
                "hint": "请确保你有正确的输出格式。"
              }
            ],
            "solutions": ["stack_min.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Implementar una pila O(1) con push, pop, min",
      "description": "En informática, una pila es un tipo de dato abstracto que sirve como una colección de elementos, con dos operaciones principales: push, que agrega un elemento a la colección, y pop, que elimina el elemento más recientemente agregado que no ha sido eliminado aún. En este desafío, implementaremos una pila con métodos push, pop y min que funcionen en O(1) tiempo.",
      "meta": {
        "title": "Implementación de pila | Estructuras de datos | Retos de codificación",
        "description": "Aprende cómo implementar una estructura de datos de pila con métodos push, pop y min que funcionen en O(1) tiempo. Explora retos de codificación y soluciones para la gestión eficiente de pilas.",
        "keywords": "pila, estructuras de datos, retos de codificación, push, pop, min, complejidad de tiempo"
      },
      "details": {
        "steps": [
          {
            "title": "Pila con mínimo",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar si todas las pruebas pasan",
                "file": "verify1-1.sh",
                "hint": "Asegúrese de tener el formato de salida correcto."
              }
            ],
            "solutions": ["stack_min.py"]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Implémenter une pile avec O(1) pour push, pop et min",
      "description": "En informatique, une pile est un type abstrait de données qui sert de collection d'éléments, avec deux principales opérations : push, qui ajoute un élément à la collection, et pop, qui supprime l'élément le plus récemment ajouté qui n'a pas encore été supprimé. Dans ce défi, nous allons implémenter une pile avec les méthodes push, pop et min qui fonctionnent en O(1) temps.",
      "meta": {
        "title": "Implémentation de pile | Structures de données | Défis de codage",
        "description": "Découvrez comment implémenter une structure de données de pile avec les méthodes push, pop et min qui fonctionnent en O(1) temps. Explorez les défis de codage et les solutions pour une gestion efficace de la pile.",
        "keywords": "pile, structures de données, défis de codage, push, pop, min, complexité temporelle"
      },
      "details": {
        "steps": [
          {
            "title": "Stack Min",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez si tous les tests ont réussi",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir le bon format de sortie."
              }
            ],
            "solutions": ["stack_min.py"]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Implementiere einen Stapel mit Push, Pop, Min in O(1) Zeit",
      "description": "In der Informatik ist ein Stapel ein abstrakter Datentyp, der als Sammlung von Elementen fungiert, mit zwei Hauptoperationen: push, die ein Element zur Sammlung hinzufügt, und pop, die das zuletzt hinzugefügte Element entfernt, das noch nicht entfernt wurde. In dieser Herausforderung werden wir einen Stapel mit push-, pop- und min-Methoden implementieren, die in O(1)-Zeit laufen.",
      "meta": {
        "title": "Stapelimplementierung | Datenstrukturen | Codierungschallenges",
        "description": "Lernen Sie, wie Sie eine Stapel-Datenstruktur mit push-, pop- und min-Methoden implementieren, die in O(1)-Zeit laufen. Entdecken Sie Codierungschallenges und Lösungen für eine effiziente Stapelverwaltung.",
        "keywords": "Stapel, Datenstrukturen, Codierungschallenges, Push, Pop, Min, Zeitkomplexität"
      },
      "details": {
        "steps": [
          {
            "title": "Stapel Min",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren Sie, ob alle Tests bestanden sind",
                "file": "verify1-1.sh",
                "hint": "Bitte stellen Sie sicher, dass Sie das richtige Ausgabeformat haben."
              }
            ],
            "solutions": ["stack_min.py"]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Push、Pop、Minを持つO(1)のスタックを実装する",
      "description": "コンピュータサイエンスにおいて、スタックは要素のコレクションとして機能する抽象データ型で、2つの主な操作があります。pushはコレクションに要素を追加し、popはまだ削除されていない最も新しく追加された要素を削除します。このチャレンジでは、push、pop、およびminメソッドがO(1)の時間で動作するスタックを実装します。",
      "meta": {
        "title": "スタックの実装 | データ構造 | コーディングチャレンジ",
        "description": "push、pop、およびminメソッドがO(1)の時間で動作するスタックデータ構造をどのように実装するか学びましょう。効率的なスタック管理のためのコーディングチャレンジとソリューションを探求しましょう。",
        "keywords": "スタック、データ構造、コーディングチャレンジ、push、pop、min、時間計算量"
      },
      "details": {
        "steps": [
          {
            "title": "スタックの最小値",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "すべてのテストが通過したかどうかを確認する",
                "file": "verify1-1.sh",
                "hint": "出力形式が正しいことを確認してください。"
              }
            ],
            "solutions": ["stack_min.py"]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Реализация стека с O(1) временем для push, pop, min",
      "description": "В информатике стек - это абстрактный тип данных, представляющий собой коллекцию элементов с двумя основными операциями: push (добавление элемента в коллекцию) и pop (удаление наиболее недавно добавленного элемента, который еще не был удален). В этом испытании мы реализуем стек с методами push, pop и min, работающими за O(1) время.",
      "meta": {
        "title": "Реализация стека | Структуры данных | Задачи по программированию",
        "description": "Изучите, как реализовать структуру данных стек с методами push, pop и min, работающими за O(1) время. Исследуйте задачи по программированию и решения для эффективного управления стеком.",
        "keywords": "стек, структуры данных, задачи по программированию, push, pop, min, временная сложность"
      },
      "details": {
        "steps": [
          {
            "title": "Стек с минимальным элементом",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить, пройдены ли все тесты",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что у вас правильный формат вывода."
              }
            ],
            "solutions": ["stack_min.py"]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
