{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Queue From Stacks",
  "description": "In computer science, a queue is a data structure that follows the First-In-First-Out (FIFO) principle. It is an ordered list of elements where an element is inserted at one end and removed from the other end. A stack, on the other hand, follows the Last-In-First-Out (LIFO) principle. It is an ordered list of elements where an element is inserted and removed from the same end. In this challenge, we will implement a queue using two stacks.",
  "meta": {
    "title": "Mastering Queue with Stacks",
    "description": "Explore the intricacies of implementing a queue using two stacks, a fundamental data structure challenge in computer science.",
    "keywords": "python playground, lifo, stack, fifo, algorithm playground, python, queue, algorithm, data structure"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Queue From Stacks",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify if all tests are passed",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have the correct output format.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [],
        "solutions": ["queue_from_stacks.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "test_queue_from_stacks.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "queue_from_stacks.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812"],
  "license": {
    "name": "Apache-2.0",
    "url": "https://github.com/donnemartin/interactive-coding-challenges/blob/master/LICENSE",
    "repo": "https://github.com/donnemartin/interactive-coding-challenges"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "用栈实现队列",
      "description": "在计算机科学中，队列是一种遵循先进先出（FIFO，First-In-First-Out）原则的数据结构。它是一个元素的有序列表，其中元素在一端插入，并在另一端移除。另一方面，栈遵循后进先出（LIFO，Last-In-First-Out）原则。它是一个元素的有序列表，其中元素在同一端插入和移除。在这个挑战中，我们将使用两个栈来实现一个队列。",
      "meta": {
        "title": "用栈精通队列",
        "description": "探索使用两个栈实现队列的复杂性，这是计算机科学中一个基本的数据结构挑战。",
        "keywords": "Python 实践，后进先出，栈，先进先出，算法实践，Python, 队列，算法，数据结构"
      },
      "details": {
        "steps": [
          {
            "title": "用栈实现队列",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证所有测试是否通过",
                "file": "verify1-1.sh",
                "hint": "请确保你有正确的输出格式。"
              }
            ],
            "solutions": ["queue_from_stacks.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Cola a partir de Pilas",
      "description": "En informática, una cola es una estructura de datos que sigue el principio de Primer en Entrar, Primer en Salir (FIFO, por sus siglas en inglés). Es una lista ordenada de elementos donde un elemento se inserta por un extremo y se elimina por el otro. Por otro lado, una pila sigue el principio de Último en Entrar, Primer en Salir (LIFO, por sus siglas en inglés). Es una lista ordenada de elementos donde un elemento se inserta y se elimina por el mismo extremo. En este desafío, implementaremos una cola utilizando dos pilas.",
      "meta": {
        "title": "Dominando la Cola con Pilas",
        "description": "Explora las complejidades de implementar una cola utilizando dos pilas, un desafío fundamental de estructuras de datos en informática.",
        "keywords": "python playground, lifo, pila, fifo, algoritmo playground, python, cola, algoritmo, estructura de datos"
      },
      "details": {
        "steps": [
          {
            "title": "Cola a partir de Pilas",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verifica si todas las pruebas han pasado",
                "file": "verify1-1.sh",
                "hint": "Asegúrate de tener el formato de salida correcto."
              }
            ],
            "solutions": ["queue_from_stacks.py"]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "File à partir de piles",
      "description": "En informatique, une file est une structure de données qui suit le principe First-In-First-Out (FIFO). C'est une liste ordonnée d'éléments où un élément est inséré à une extrémité et retiré de l'autre extrémité. Une pile, en revanche, suit le principe Last-In-First-Out (LIFO). C'est une liste ordonnée d'éléments où un élément est inséré et retiré de la même extrémité. Dans ce défi, nous allons implémenter une file à l'aide de deux piles.",
      "meta": {
        "title": "Maîtriser la file avec des piles",
        "description": "Explorez les complexités de l'implémentation d'une file à l'aide de deux piles, un défi fondamental de structure de données en informatique.",
        "keywords": "python playground, lifo, pile, fifo, algorithme playground, python, file, algorithme, structure de données"
      },
      "details": {
        "steps": [
          {
            "title": "File à partir de piles",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez si tous les tests ont réussi",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer que vous avez le bon format de sortie."
              }
            ],
            "solutions": ["queue_from_stacks.py"]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Warteschlange aus Stapelstrukturen",
      "description": "In der Informatik ist eine Warteschlange (Queue) eine Datenstruktur, die dem First-In-First-Out (FIFO)-Prinzip folgt. Es ist eine geordnete Liste von Elementen, wobei ein Element am einen Ende eingefügt und am anderen Ende entfernt wird. Eine Stapelstruktur (Stack), anderseits, folgt dem Last-In-First-Out (LIFO)-Prinzip. Es ist eine geordnete Liste von Elementen, wobei ein Element am selben Ende eingefügt und entfernt wird. In dieser Herausforderung werden wir eine Warteschlange mit zwei Stapelstrukturen implementieren.",
      "meta": {
        "title": "Warteschlange mit Stapelstrukturen meistern",
        "description": "Erkunde die Feinheiten der Implementierung einer Warteschlange mit zwei Stapelstrukturen, eine grundlegende Herausforderung bei der Datenstruktur in der Informatik.",
        "keywords": "Python-Spielplatz, LIFO, Stapelstruktur, FIFO, Algorithmus-Spielplatz, Python, Warteschlange, Algorithmus, Datenstruktur"
      },
      "details": {
        "steps": [
          {
            "title": "Warteschlange aus Stapelstrukturen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen, ob alle Tests bestanden sind",
                "file": "verify1-1.sh",
                "hint": "Stellen Sie bitte sicher, dass Sie das richtige Ausgabeformat haben."
              }
            ],
            "solutions": ["queue_from_stacks.py"]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "スタックからのキュー",
      "description": "コンピュータサイエンスにおいて、キューは、先入れ先出し（FIFO: First-In-First-Out）の原則に従うデータ構造です。それは、要素が一端に挿入され、他端から削除される要素の順序付きリストです。一方、スタックは、後入れ先出し（LIFO: Last-In-First-Out）の原則に従います。それは、要素が同じ端から挿入および削除される要素の順序付きリストです。このチャレンジでは、2 つのスタックを使ってキューを実装します。",
      "meta": {
        "title": "スタックを使ったキューのマスター",
        "description": "コンピュータサイエンスにおける基本的なデータ構造の課題である、2 つのスタックを使ったキューの実装の複雑さを探ります。",
        "keywords": "python プレイグラウンド，LIFO, スタック，FIFO, アルゴリズム プレイグラウンド，python, キュー, アルゴリズム，データ構造"
      },
      "details": {
        "steps": [
          {
            "title": "スタックからのキュー",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "すべてのテストが通過したかどうかを確認する",
                "file": "verify1-1.sh",
                "hint": "出力形式が正しいことを確認してください。"
              }
            ],
            "solutions": ["queue_from_stacks.py"]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Очередь из стеков",
      "description": "В информатике очередь - это структура данных, которая работает по принципу «первым пришёл - первым вышел» (FIFO). Это упорядоченный список элементов, где элемент вставляется в один конец и удаляется из другого конца. С другой стороны, стек работает по принципу «последним пришёл - первым вышел» (LIFO). Это упорядоченный список элементов, где элемент вставляется и удаляется из одного и того же конца. В этом испытании мы реализуем очередь с использованием двух стеков.",
      "meta": {
        "title": "Мастерство в использовании очереди с стеком",
        "description": "Исследуйте сложности реализации очереди с использованием двух стеков - фундаментальной задачи по структуре данных в информатике.",
        "keywords": "python playground, lifo, стек, fifo, алгоритм playground, python, очередь, алгоритм, структура данных"
      },
      "details": {
        "steps": [
          {
            "title": "Очередь из стеков",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить, пройдены ли все тесты",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что у вас правильный формат вывода."
              }
            ],
            "solutions": ["queue_from_stacks.py"]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
