{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Concise Introduction to Stacks",
  "description": "In computer science, a stack is an abstract data type that serves as a collection of elements, with two main operations: push, which adds an element to the collection, and pop, which removes the most recently added element that was not yet removed. Other operations include peek, which returns the most recently added element without removing it, and is_empty, which checks if the stack is empty.",
  "meta": {
    "title": "Python | Linked List | Stack Implementation",
    "description": "Learn how to implement a stack using a linked list in Python, with push, pop, peek, and is_empty methods. Detailed programming tutorial with examples.",
    "keywords": "Python, Linked List, Stack, Data Structure, Programming, Tutorial"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Stack",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify if all tests are passed",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have the correct output format.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [],
        "solutions": ["stack.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "test_stack.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "stack.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812"],
  "license": {
    "name": "Apache-2.0",
    "url": "https://github.com/donnemartin/interactive-coding-challenges/blob/master/LICENSE",
    "repo": "https://github.com/donnemartin/interactive-coding-challenges"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "栈的简明介绍",
      "description": "在计算机科学中，栈是一种抽象数据类型，它作为一组元素的集合，有两个主要操作：push（将一个元素添加到集合中）和 pop（移除最近添加且尚未移除的元素）。其他操作包括 peek（返回最近添加的元素而不移除它）和 is_empty（检查栈是否为空）。",
      "meta": {
        "title": "Python | 链表 | 栈的实现",
        "description": "学习如何在 Python 中使用链表实现栈，包括 push、pop、peek 和 is_empty 方法。带有示例的详细编程教程。",
        "keywords": "Python, 链表，栈，数据结构，编程，教程"
      },
      "details": {
        "steps": [
          {
            "title": "栈",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证所有测试是否通过",
                "file": "verify1-1.sh",
                "hint": "请确保你有正确的输出格式。"
              }
            ],
            "solutions": ["stack.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Introducción concisa a las pilas",
      "description": "En informática, una pila es un tipo de dato abstracto que sirve como una colección de elementos, con dos operaciones principales: push, que agrega un elemento a la colección, y pop, que elimina el elemento más recientemente agregado que no ha sido eliminado todavía. Otras operaciones incluyen peek, que devuelve el elemento más recientemente agregado sin eliminarlo, y is_empty, que verifica si la pila está vacía.",
      "meta": {
        "title": "Python | Lista enlazada | Implementación de pila",
        "description": "Aprende cómo implementar una pila utilizando una lista enlazada en Python, con los métodos push, pop, peek y is_empty. Tutorial detallado de programación con ejemplos.",
        "keywords": "Python, Lista enlazada, Pila, Estructura de datos, Programación, Tutorial"
      },
      "details": {
        "steps": [
          {
            "title": "Pila",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verifica si todas las pruebas han pasado",
                "file": "verify1-1.sh",
                "hint": "Asegúrate de tener el formato de salida correcto."
              }
            ],
            "solutions": ["stack.py"]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Présentation concise des piles",
      "description": "En informatique, une pile est un type abstrait de données qui sert de collection d'éléments, avec deux principales opérations : push, qui ajoute un élément à la collection, et pop, qui supprime l'élément le plus récemment ajouté qui n'a pas encore été supprimé. D'autres opérations incluent peek, qui renvoie l'élément le plus récemment ajouté sans le supprimer, et is_empty, qui vérifie si la pile est vide.",
      "meta": {
        "title": "Python | Liste chaînée | Implémentation de la pile",
        "description": "Découvrez comment implémenter une pile en utilisant une liste chaînée en Python, avec les méthodes push, pop, peek et is_empty. Tutoriel de programmation détaillé avec des exemples.",
        "keywords": "Python, Liste chaînée, Pile, Structure de données, Programmation, Tutoriel"
      },
      "details": {
        "steps": [
          {
            "title": "Pile",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez si tous les tests ont réussi",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir le bon format de sortie."
              }
            ],
            "solutions": ["stack.py"]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Kurzfassung über Stapel",
      "description": "In der Informatik ist ein Stapel ein abstrakter Datentyp, der als Sammlung von Elementen fungiert, mit zwei Hauptoperationen: push, die ein Element zur Sammlung hinzufügt, und pop, die das zuletzt hinzugefügte Element entfernt, das noch nicht entfernt wurde. Andere Operationen umfassen peek, die das zuletzt hinzugefügte Element zurückgibt, ohne es zu entfernen, und is_empty, die überprüft, ob der Stapel leer ist.",
      "meta": {
        "title": "Python | Verkettete Liste | Stapelimplementierung",
        "description": "Lernen Sie, wie Sie einen Stapel mit einer verketteten Liste in Python implementieren, mit push-, pop-, peek- und is_empty-Methoden. Ausführlicher Programmier-Tutorial mit Beispielen.",
        "keywords": "Python, Verkettete Liste, Stapel, Datenstruktur, Programmierung, Tutorial"
      },
      "details": {
        "steps": [
          {
            "title": "Stapel",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen, ob alle Tests bestanden sind",
                "file": "verify1-1.sh",
                "hint": "Stellen Sie sicher, dass Sie das richtige Ausgabeformat haben."
              }
            ],
            "solutions": ["stack.py"]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "スタックの簡潔な紹介",
      "description": "コンピュータサイエンスにおいて、スタックは抽象データ型の一種で、要素のコレクションとして機能します。主な操作は 2 つあり、push（要素をコレクションに追加する）と pop（まだ削除されていない最新の追加要素を削除する）です。その他の操作には、要素を削除せずに最新の追加要素を返す peek と、スタックが空かどうかをチェックする is_empty があります。",
      "meta": {
        "title": "Python | 連結リスト | スタックの実装",
        "description": "Python で連結リストを使ってスタックを実装する方法を学びましょう。push、pop、peek、is_empty メソッド付き。例付きの詳細なプログラミングチュートリアル。",
        "keywords": "Python, 連結リスト，スタック，データ構造，プログラミング，チュートリアル"
      },
      "details": {
        "steps": [
          {
            "title": "スタック",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "すべてのテストが通過したことを確認する",
                "file": "verify1-1.sh",
                "hint": "出力形式が正しいことを確認してください。"
              }
            ],
            "solutions": ["stack.py"]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Краткое введение в стеки",
      "description": "В информатике стек - это абстрактный тип данных, представляющий собой коллекцию элементов с двумя основными операциями: push (добавление элемента в коллекцию) и pop (удаление наиболее недавно добавленного элемента, который еще не был удален). Другие операции включают peek (возвращение наиболее недавно добавленного элемента без его удаления) и is_empty (проверка, пуст ли стек).",
      "meta": {
        "title": "Python | Связанный список | Реализация стека",
        "description": "Изучите, как реализовать стек на основе связанного списка в Python, с методами push, pop, peek и is_empty. Подробный учебник по программированию с примерами.",
        "keywords": "Python, Связанный список, Стек, Датаструктура, Программирование, Руководство"
      },
      "details": {
        "steps": [
          {
            "title": "Стек",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить, пройдены ли все тесты",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что у вас правильный формат вывода."
              }
            ],
            "solutions": ["stack.py"]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
