{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Set of Stacks",
  "description": "In computer science, a stack is an abstract data type that serves as a collection of elements, with two main operations: push, which adds an element to the collection, and pop, which removes the most recently added element that was not yet removed. In some cases, we may need to implement a set of stacks, where each stack has a limited capacity. When a stack reaches its capacity, a new stack is created to store additional elements. In this challenge, we will implement a SetOfStacks class that wraps a list of stacks, where each stack is bound by a capacity.",
  "meta": {
    "title": "Mastering the Art of Stack Management",
    "description": "Explore the intricacies of implementing a Set of Stacks, a versatile data structure that optimizes memory usage and streamlines stack operations.",
    "keywords": "python playground, algorithm playground, python, stack management, set of stacks, algorithm, programming, computer science, data structure"
  },
  "difficulty": "Beginner",
  "time": 15,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Set of Stacks",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify if all tests are passed",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have the correct output format.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "algorithm/stacks_queues",
          "python/build_in_functions",
          "python/classes_objects",
          "python/conditional_statements",
          "python/constructor",
          "python/default_arguments",
          "python/encapsulation",
          "python/function_definition",
          "python/iterators",
          "python/lists",
          "python/polymorphism",
          "python/raising_exceptions",
          "python/tuples"
        ],
        "solutions": ["set_of_stacks.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "test_set_of_stacks.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "set_of_stacks.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812"],
  "license": {
    "name": "Apache-2.0",
    "url": "https://github.com/donnemartin/interactive-coding-challenges/blob/master/LICENSE",
    "repo": "https://github.com/donnemartin/interactive-coding-challenges"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "栈集合",
      "description": "在计算机科学中，栈是一种抽象数据类型，它作为一组元素的集合，有两个主要操作：push（将一个元素添加到集合中）和 pop（移除最近添加且尚未移除的元素）。在某些情况下，我们可能需要实现一组栈，其中每个栈都有有限的容量。当一个栈达到其容量时，会创建一个新栈来存储额外的元素。在这个挑战中，我们将实现一个 `SetOfStacks` 类，它包装了一个栈列表，其中每个栈都有一个容量限制。",
      "meta": {
        "title": "掌握栈管理的艺术",
        "description": "探索实现栈集合的复杂性，这是一种多功能的数据结构，可优化内存使用并简化栈操作。",
        "keywords": "Python 游乐场，算法游乐场，Python, 栈管理，栈集合，算法，编程，计算机科学，数据结构"
      },
      "details": {
        "steps": [
          {
            "title": "栈集合",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证所有测试是否通过",
                "file": "verify1-1.sh",
                "hint": "请确保你有正确的输出格式。"
              }
            ],
            "solutions": ["set_of_stacks.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Conjunto de Pilas",
      "description": "En informática, una pila es un tipo de dato abstracto que sirve como una colección de elementos, con dos operaciones principales: push, que agrega un elemento a la colección, y pop, que elimina el elemento más recientemente agregado que aún no ha sido eliminado. En algunos casos, es posible que necesitemos implementar un conjunto de pilas, donde cada pila tiene una capacidad limitada. Cuando una pila alcanza su capacidad, se crea una nueva pila para almacenar elementos adicionales. En este desafío, implementaremos una clase SetOfStacks que envuelva una lista de pilas, donde cada pila está limitada por una capacidad.",
      "meta": {
        "title": "Dominando el Arte de la Gestión de Pilas",
        "description": "Explora las complejidades de implementar un Conjunto de Pilas, una estructura de datos versátil que optimiza el uso de memoria y simplifica las operaciones de pila.",
        "keywords": "python playground, algorithm playground, python, gestión de pilas, conjunto de pilas, algoritmo, programación, informática, estructura de datos"
      },
      "details": {
        "steps": [
          {
            "title": "Conjunto de Pilas",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verifica si todas las pruebas han pasado",
                "file": "verify1-1.sh",
                "hint": "Asegúrate de tener el formato de salida correcto."
              }
            ],
            "solutions": ["set_of_stacks.py"]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Ensemble de piles",
      "description": "En informatique, une pile est un type abstrait de données qui sert de collection d'éléments, avec deux principales opérations : push, qui ajoute un élément à la collection, et pop, qui supprime l'élément le plus récemment ajouté qui n'a pas encore été supprimé. Dans certains cas, nous pouvons avoir besoin d'implémenter un ensemble de piles, où chaque pile a une capacité limitée. Lorsqu'une pile atteint sa capacité, une nouvelle pile est créée pour stocker les éléments supplémentaires. Dans ce défi, nous allons implémenter une classe SetOfStacks qui encapsule une liste de piles, où chaque pile est limitée par une capacité.",
      "meta": {
        "title": "Maîtriser l'art de la gestion des piles",
        "description": "Explorez les subtilités de l'implémentation d'un ensemble de piles, une structure de données polyvalente qui optimise l'utilisation de la mémoire et simplifie les opérations de pile.",
        "keywords": "python playground, algorithm playground, python, gestion des piles, ensemble de piles, algorithme, programmation, informatique, structure de données"
      },
      "details": {
        "steps": [
          {
            "title": "Ensemble de piles",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez si tous les tests sont passés",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir le bon format de sortie."
              }
            ],
            "solutions": ["set_of_stacks.py"]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Menge von Stapeln",
      "description": "In der Informatik ist ein Stapel (Stack) ein abstrakter Datentyp, der als Sammlung von Elementen fungiert und zwei Hauptoperationen hat: push, mit der ein Element zur Sammlung hinzugefügt wird, und pop, mit der das zuletzt hinzugefügte noch nicht entfernte Element entfernt wird. In einigen Fällen müssen wir möglicherweise eine Menge von Stapeln implementieren, wobei jeder Stapel eine begrenzte Kapazität hat. Wenn ein Stapel seine Kapazität erreicht, wird ein neuer Stapel erstellt, um zusätzliche Elemente zu speichern. In dieser Herausforderung werden wir eine SetOfStacks-Klasse implementieren, die eine Liste von Stapeln umschließt, wobei jeder Stapel durch eine Kapazität begrenzt ist.",
      "meta": {
        "title": "Meister der Stapelverwaltung",
        "description": "Erkunde die Feinheiten der Implementierung einer Menge von Stapeln, einer vielseitigen Datenstruktur, die die Arbeitsspeicher-Nutzung optimiert und die Stapeloperationen vereinfacht.",
        "keywords": "Python-Spielfeld, Algorithmus-Spielfeld, Python, Stapelverwaltung, Menge von Stapeln, Algorithmus, Programmierung, Informatik, Datenstruktur"
      },
      "details": {
        "steps": [
          {
            "title": "Menge von Stapeln",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren, ob alle Tests bestanden sind",
                "file": "verify1-1.sh",
                "hint": "Stellen Sie bitte sicher, dass Sie das richtige Ausgabeformat haben."
              }
            ],
            "solutions": ["set_of_stacks.py"]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "スタックのセット",
      "description": "コンピュータサイエンスにおいて、スタックは抽象データ型の一種で、要素のコレクションとして機能します。主な操作は 2 つあり、push（要素をコレクションに追加する）と pop（まだ削除されていない最新の追加要素を削除する）です。場合によっては、各スタックが制限された容量を持つ一連のスタックを実装する必要があります。スタックがその容量に達すると、追加要素を格納するために新しいスタックが作成されます。このチャレンジでは、各スタックが容量によって制限されるスタックのリストをラップする SetOfStacks クラスを実装します。",
      "meta": {
        "title": "スタック管理の技術をマスターする",
        "description": "スタックのセットを実装する複雑さを探求しましょう。これは、メモリ使用を最適化し、スタック操作を合理化する多用途なデータ構造です。",
        "keywords": "python プレイグラウンド，アルゴリズム プレイグラウンド，python, スタック管理，スタックのセット，アルゴリズム，プログラミング，コンピュータサイエンス，データ構造"
      },
      "details": {
        "steps": [
          {
            "title": "スタックのセット",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "すべてのテストが通過したかどうかを確認する",
                "file": "verify1-1.sh",
                "hint": "出力形式が正しいことを確認してください。"
              }
            ],
            "solutions": ["set_of_stacks.py"]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Набор стеков",
      "description": "В информатике стек - это абстрактный тип данных, представляющий собой коллекцию элементов с двумя основными операциями: push (добавление элемента в коллекцию) и pop (удаление наиболее недавно добавленного элемента, который еще не был удален). В некоторых случаях может потребоваться реализовать набор стеков, где каждый стек имеет ограниченную емкость. Когда стек достигает своей емкости, создается новый стек для хранения дополнительных элементов. В этом испытании мы реализуем класс SetOfStacks, который оборачивает список стеков, где каждый стек ограничен емкостью.",
      "meta": {
        "title": "Осваиваем искусство управления стеками",
        "description": "Изучайте сложности реализации набора стеков - гибкой структуры данных, которая оптимизирует использование памяти и упрощает операции со стеками.",
        "keywords": "python playground, algorithm playground, python, управление стеками, набор стеков, алгоритм, программирование, информатика, структура данных"
      },
      "details": {
        "steps": [
          {
            "title": "Набор стеков",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить, пройдены ли все тесты",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что у вас правильный формат вывода."
              }
            ],
            "solutions": ["set_of_stacks.py"]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
