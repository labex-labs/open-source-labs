{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Efficient Insertion Sort Algorithm",
  "description": "Insertion sort is a simple sorting algorithm that works by repeatedly inserting the next element in the sorted array. It is an in-place comparison-based sorting algorithm that builds the final sorted array one item at a time.",
  "meta": {
    "title": "Insertion Sort Algorithm | Python Programming",
    "description": "Learn the Insertion Sort algorithm in Python. This simple sorting technique builds the final sorted array one item at a time, making it an efficient in-place comparison-based sorting solution.",
    "keywords": "Insertion Sort, Python, Sorting Algorithm, Programming, Comparison-based Sorting"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Insertion Sort",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify if all tests are passed",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have the correct output format.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "algorithm/sorting_searching",
          "python/build_in_functions",
          "python/classes_objects",
          "python/conditional_statements",
          "python/encapsulation",
          "python/for_loops",
          "python/function_definition",
          "python/lists",
          "python/raising_exceptions",
          "python/tuples"
        ],
        "solutions": ["insertion_sort.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "test_insertion_sort.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "insertion_sort.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812"],
  "license": {
    "name": "Apache-2.0",
    "url": "https://github.com/donnemartin/interactive-coding-challenges/blob/master/LICENSE",
    "repo": "https://github.com/donnemartin/interactive-coding-challenges"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "高效插入排序算法",
      "description": "插入排序是一种简单的排序算法，其工作原理是将下一个元素反复插入到已排序的数组中。它是一种基于比较的原地排序算法，每次构建一个最终的已排序数组。",
      "meta": {
        "title": "插入排序算法 | Python 编程",
        "description": "学习 Python 中的插入排序算法。这种简单的排序技术每次构建一个最终的已排序数组，使其成为一种高效的基于比较的原地排序解决方案。",
        "keywords": "插入排序，Python, 排序算法，编程，基于比较的排序"
      },
      "details": {
        "steps": [
          {
            "title": "插入排序",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证所有测试是否通过",
                "file": "verify1-1.sh",
                "hint": "请确保你有正确的输出格式。"
              }
            ],
            "solutions": ["insertion_sort.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Algoritmo de clasificación por inserción eficiente",
      "description": "El algoritmo de clasificación por inserción es un algoritmo de clasificación simple que funciona insertando repetidamente el siguiente elemento en el array ordenado. Es un algoritmo de clasificación basado en comparaciones en el lugar que construye el array ordenado final uno a la vez.",
      "meta": {
        "title": "Algoritmo de clasificación por inserción | Programación en Python",
        "description": "Aprende el algoritmo de clasificación por inserción en Python. Esta técnica de clasificación simple construye el array ordenado final uno a la vez, lo que la convierte en una solución de clasificación eficiente basada en comparaciones en el lugar.",
        "keywords": "Clasificación por inserción, Python, Algoritmo de clasificación, Programación, Clasificación basada en comparaciones"
      },
      "details": {
        "steps": [
          {
            "title": "Clasificación por inserción",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar si todas las pruebas han pasado",
                "file": "verify1-1.sh",
                "hint": "Asegúrese de tener el formato de salida correcto."
              }
            ],
            "solutions": ["insertion_sort.py"]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Algorithme de tri par insertion efficace",
      "description": "Le tri par insertion est un algorithme de tri simple qui fonctionne en insérant répétitivement l'élément suivant dans le tableau trié. C'est un algorithme de tri basé sur les comparaisons en place qui construit le tableau trié final un élément à la fois.",
      "meta": {
        "title": "Algorithme de tri par insertion | Programmation Python",
        "description": "Découvrez l'algorithme de tri par insertion en Python. Cette technique de tri simple construit le tableau trié final un élément à la fois, ce qui en fait une solution de tri efficace basée sur les comparaisons en place.",
        "keywords": "Tri par insertion, Python, Algorithme de tri, Programmation, Tri basé sur les comparaisons"
      },
      "details": {
        "steps": [
          {
            "title": "Tri par insertion",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez si tous les tests sont passés",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir le bon format de sortie."
              }
            ],
            "solutions": ["insertion_sort.py"]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Effizienter EinfügeSortieralgorithmus",
      "description": "Der EinfügeSortieralgorithmus ist ein einfacher Sortieralgorithmus, der funktioniert, indem er das nächste Element wiederholt in das sortierte Array einfügt. Es ist ein in-place-vergleichsbasierter Sortieralgorithmus, der das endgültig sortierte Array ein Element nach dem anderen aufbaut.",
      "meta": {
        "title": "EinfügeSortieralgorithmus | Python-Programmierung",
        "description": "Lernen Sie den EinfügeSortieralgorithmus in Python. Diese einfache Sortiertechnik baut das endgültig sortierte Array ein Element nach dem anderen auf, was es zu einer effizienten in-place-vergleichsbasierten Sortierlösung macht.",
        "keywords": "EinfügeSortierung, Python, Sortieralgorithmus, Programmierung, vergleichsbasierte Sortierung"
      },
      "details": {
        "steps": [
          {
            "title": "EinfügeSortierung",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen, ob alle Tests bestanden sind",
                "file": "verify1-1.sh",
                "hint": "Stellen Sie bitte sicher, dass Sie das richtige Ausgabeformat haben."
              }
            ],
            "solutions": ["insertion_sort.py"]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "効率的な挿入ソートアルゴリズム",
      "description": "挿入ソートは、ソート済みの配列に次の要素を繰り返し挿入することで動作する単純なソートアルゴリズムです。これは、1 つずつ最終的なソート済み配列を構築する、インプレースで比較ベースのソートアルゴリズムです。",
      "meta": {
        "title": "挿入ソートアルゴリズム | Python プログラミング",
        "description": "Python で挿入ソートアルゴリズムを学びましょう。この単純なソート技術は、1 つずつ最終的なソート済み配列を構築するため、インプレースで比較ベースの効率的なソートソリューションになっています。",
        "keywords": "挿入ソート，Python, ソートアルゴリズム，プログラミング，比較ベースのソート"
      },
      "details": {
        "steps": [
          {
            "title": "挿入ソート",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "すべてのテストが通過したかどうかを確認する",
                "file": "verify1-1.sh",
                "hint": "出力形式が正しいことを確認してください。"
              }
            ],
            "solutions": ["insertion_sort.py"]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Эффективный алгоритм сортировки вставками",
      "description": "Сортировка вставками - это простой алгоритм сортировки, который работает путём последовательной вставки следующего элемента в отсортированный массив. Это алгоритм сортировки, основанный на сравнении, который формирует окончательный отсортированный массив по одному элементу за раз.",
      "meta": {
        "title": "Алгоритм сортировки вставками | Программирование на Python",
        "description": "Изучите алгоритм сортировки вставками на Python. Эта простая техника сортировки формирует окончательный отсортированный массив по одному элементу за раз, превращая её в эффективное решение сортировки, основанное на сравнении, которое занимает минимальное место в памяти.",
        "keywords": "Сортировка вставками, Python, Алгоритм сортировки, Программирование, Сортировка, основанная на сравнении"
      },
      "details": {
        "steps": [
          {
            "title": "Сортировка вставками",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить, пройдены ли все тесты",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что у вас правильный формат вывода."
              }
            ],
            "solutions": ["insertion_sort.py"]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
