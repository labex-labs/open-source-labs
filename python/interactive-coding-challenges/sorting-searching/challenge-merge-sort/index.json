{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Efficient Merge Sort Algorithm Implementation",
  "description": "Merge sort is a popular sorting algorithm that uses the divide-and-conquer approach to sort an array. It is a stable, comparison-based algorithm that has a time complexity of O(n log n).",
  "meta": {
    "title": "Merge Sort Algorithm | Python Sorting Techniques",
    "description": "Learn the efficient Merge Sort algorithm in Python. Understand the divide-and-conquer approach, time complexity, and practical examples for sorting arrays of integers and strings.",
    "keywords": "merge sort, sorting algorithm, python, divide-and-conquer, time complexity, integers, strings"
  },
  "difficulty": "Beginner",
  "time": 15,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Merge Sort",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify if all tests are passed",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have the correct output format.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "algorithm/sorting_searching",
          "python/build_in_functions",
          "python/classes_objects",
          "python/comments",
          "python/conditional_statements",
          "python/encapsulation",
          "python/function_definition",
          "python/lists",
          "python/raising_exceptions",
          "python/tuples",
          "python/while_loops"
        ],
        "solutions": ["merge_sort.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "test_merge_sort.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "merge_sort.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812"],
  "license": {
    "name": "Apache-2.0",
    "url": "https://github.com/donnemartin/interactive-coding-challenges/blob/master/LICENSE",
    "repo": "https://github.com/donnemartin/interactive-coding-challenges"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "高效归并排序算法实现",
      "description": "归并排序是一种流行的排序算法，它采用分治方法对数组进行排序。它是一种稳定的、基于比较的算法，时间复杂度为O(n log n)。",
      "meta": {
        "title": "归并排序算法 | Python排序技术",
        "description": "学习Python中高效的归并排序算法。了解分治方法、时间复杂度以及对整数和字符串数组进行排序的实际示例。",
        "keywords": "归并排序, 排序算法, Python, 分治, 时间复杂度, 整数, 字符串"
      },
      "details": {
        "steps": [
          {
            "title": "归并排序",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证所有测试是否通过",
                "file": "verify1-1.sh",
                "hint": "请确保你有正确的输出格式。"
              }
            ],
            "solutions": ["merge_sort.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
