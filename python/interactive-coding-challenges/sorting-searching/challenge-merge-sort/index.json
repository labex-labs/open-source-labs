{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Efficient Merge Sort Algorithm Implementation",
  "description": "Merge sort is a popular sorting algorithm that uses the divide-and-conquer approach to sort an array. It is a stable, comparison-based algorithm that has a time complexity of O(n log n).",
  "meta": {
    "title": "Merge Sort Algorithm | Python Sorting Techniques",
    "description": "Learn the efficient Merge Sort algorithm in Python. Understand the divide-and-conquer approach, time complexity, and practical examples for sorting arrays of integers and strings.",
    "keywords": "merge sort, sorting algorithm, python, divide-and-conquer, time complexity, integers, strings"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Merge Sort",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify if all tests are passed",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have the correct output format.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [],
        "solutions": ["merge_sort.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "test_merge_sort.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "merge_sort.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812"],
  "license": {
    "name": "Apache-2.0",
    "url": "https://github.com/donnemartin/interactive-coding-challenges/blob/master/LICENSE",
    "repo": "https://github.com/donnemartin/interactive-coding-challenges"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "高效归并排序算法实现",
      "description": "归并排序是一种流行的排序算法，它采用分治方法对数组进行排序。它是一种稳定的、基于比较的算法，时间复杂度为 O(n log n)。",
      "meta": {
        "title": "归并排序算法 | Python 排序技术",
        "description": "学习 Python 中高效的归并排序算法。了解分治方法、时间复杂度以及对整数和字符串数组进行排序的实际示例。",
        "keywords": "归并排序，排序算法，Python, 分治，时间复杂度，整数，字符串"
      },
      "details": {
        "steps": [
          {
            "title": "归并排序",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证所有测试是否通过",
                "file": "verify1-1.sh",
                "hint": "请确保你有正确的输出格式。"
              }
            ],
            "solutions": ["merge_sort.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Implementación eficiente del algoritmo de Merge Sort",
      "description": "El merge sort es un algoritmo de clasificación popular que utiliza el enfoque divide y vencerás para ordenar una matriz. Es un algoritmo estable basado en comparaciones que tiene una complejidad temporal de O(n log n).",
      "meta": {
        "title": "Algoritmo de Merge Sort | Técnicas de clasificación en Python",
        "description": "Aprende el eficiente algoritmo de Merge Sort en Python. Entiende el enfoque divide y vencerás, la complejidad temporal y ejemplos prácticos para ordenar matrices de enteros y cadenas.",
        "keywords": "merge sort, algoritmo de clasificación, python, divide y vencerás, complejidad temporal, enteros, cadenas"
      },
      "details": {
        "steps": [
          {
            "title": "Merge Sort",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar si todas las pruebas han pasado",
                "file": "verify1-1.sh",
                "hint": "Asegúrese de tener el formato de salida correcto."
              }
            ],
            "solutions": ["merge_sort.py"]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Implémentation efficace de l'algorithme de tri fusion",
      "description": "Le tri fusion est un algorithme de tri populaire qui utilise l'approche diviser pour régner pour trier un tableau. C'est un algorithme stable basé sur les comparaisons qui a une complexité temporelle de O(n log n).",
      "meta": {
        "title": "Algorithme de tri fusion | Techniques de tri en Python",
        "description": "Découvrez l'efficace algorithme de tri fusion en Python. Comprenez l'approche diviser pour régner, la complexité temporelle et des exemples pratiques pour trier des tableaux d'entiers et de chaînes de caractères.",
        "keywords": "tri fusion, algorithme de tri, python, diviser pour régner, complexité temporelle, entiers, chaînes de caractères"
      },
      "details": {
        "steps": [
          {
            "title": "Tri fusion",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez si tous les tests ont réussi",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir le bon format de sortie."
              }
            ],
            "solutions": ["merge_sort.py"]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Effiziente Implementierung des Merge Sort-Algorithmus",
      "description": "Merge sort ist ein beliebiger Sortieralgorithmus, der die Divide-and-Conquer-Methode verwendet, um ein Array zu sortieren. Es ist ein stabiler, auf Vergleichen basierender Algorithmus mit einer Zeitkomplexität von O(n log n).",
      "meta": {
        "title": "Merge Sort-Algorithmus | Python Sortiertechniken",
        "description": "Lernen Sie den effizienten Merge Sort-Algorithmus in Python. Verstehen Sie die Divide-and-Conquer-Methode, die Zeitkomplexität und praktische Beispiele zum Sortieren von Arrays von ganzen Zahlen und Zeichenketten.",
        "keywords": "Merge Sort, Sortieralgorithmus, Python, Divide-and-Conquer, Zeitkomplexität, ganze Zahlen, Zeichenketten"
      },
      "details": {
        "steps": [
          {
            "title": "Merge Sort",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren, ob alle Tests bestanden sind",
                "file": "verify1-1.sh",
                "hint": "Bitte stellen Sie sicher, dass Sie das richtige Ausgabeformat haben."
              }
            ],
            "solutions": ["merge_sort.py"]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "効率的なマージソートアルゴリズムの実装",
      "description": "マージソートは、配列をソートするために分割統治法を使用する人気のあるソートアルゴリズムです。これは、安定した比較ベースのアルゴリズムで、O(n log n) の時間計算量を持っています。",
      "meta": {
        "title": "マージソートアルゴリズム | Python ソート技術",
        "description": "Python での効率的なマージソートアルゴリズムを学びましょう。分割統治法、時間計算量、および整数と文字列の配列をソートするための実際の例を理解しましょう。",
        "keywords": "マージソート，ソートアルゴリズム，Python, 分割統治法，時間計算量，整数，文字列"
      },
      "details": {
        "steps": [
          {
            "title": "マージソート",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "すべてのテストが通過したかどうかを確認する",
                "file": "verify1-1.sh",
                "hint": "出力形式が正しいことを確認してください。"
              }
            ],
            "solutions": ["merge_sort.py"]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Эффективная реализация алгоритма Merge Sort",
      "description": "Merge sort - это популярный алгоритм сортировки, который использует подход \"разделяй и властвуй\" для сортировки массива. Это стабильный алгоритм, основанный на сравнении, который имеет временную сложность O(n log n).",
      "meta": {
        "title": "Алгоритм Merge Sort | Техники сортировки в Python",
        "description": "Изучите эффективный алгоритм Merge Sort в Python. Разберитесь в подходе \"разделяй и властвуй\", временной сложности и практических примерах сортировки массивов целых чисел и строк.",
        "keywords": "merge sort, алгоритм сортировки, python, разделяй и властвуй, временная сложность, целые числа, строки"
      },
      "details": {
        "steps": [
          {
            "title": "Merge Sort",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить, пройдены ли все тесты",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что у вас правильный формат вывода."
              }
            ],
            "solutions": ["merge_sort.py"]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
