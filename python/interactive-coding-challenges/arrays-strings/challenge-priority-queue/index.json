{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Efficient Array-Backed Priority Queue Implementation",
  "description": "A priority queue is a data structure that allows for efficient access to the minimum (or maximum) element in a collection. It is commonly used in algorithms such as Dijkstra's shortest path algorithm and Huffman coding. In this challenge, we will implement a priority queue backed by an array.",
  "meta": {
    "title": "Priority Queue | Data Structure | Algorithms",
    "description": "Learn how to implement a priority queue data structure with efficient insert, extract_min, and decrease_key operations. Ideal for algorithms like Dijkstra's shortest path and Huffman coding.",
    "keywords": "priority queue, data structure, algorithms, Dijkstra, Huffman coding"
  },
  "difficulty": "Beginner",
  "time": 15,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Priority Queue",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify if all tests are passed",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have the correct output format.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "algorithm/arrays_strings",
          "python/build_in_functions",
          "python/classes_objects",
          "python/conditional_statements",
          "python/constructor",
          "python/encapsulation",
          "python/for_loops",
          "python/function_definition",
          "python/importing_modules",
          "python/lists",
          "python/os_system",
          "python/polymorphism",
          "python/standard_libraries",
          "python/strings",
          "python/tuples",
          "python/type_conversion",
          "python/variables_data_types"
        ],
        "solutions": ["priority_queue.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "test_priority_queue.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "priority_queue.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812"],
  "license": {
    "name": "Apache-2.0",
    "url": "https://github.com/donnemartin/interactive-coding-challenges/blob/master/LICENSE",
    "repo": "https://github.com/donnemartin/interactive-coding-challenges"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "高效的基于数组的优先队列实现",
      "description": "优先队列是一种数据结构，它允许高效地访问集合中的最小（或最大）元素。它通常用于诸如迪杰斯特拉最短路径算法和哈夫曼编码等算法中。在这个挑战中，我们将实现一个由数组支持的优先队列。",
      "meta": {
        "title": "优先队列 | 数据结构 | 算法",
        "description": "学习如何使用高效的插入、提取最小值和降低键值操作来实现优先队列数据结构。适用于迪杰斯特拉最短路径和哈夫曼编码等算法。",
        "keywords": "优先队列, 数据结构, 算法, 迪杰斯特拉, 哈夫曼编码"
      },
      "details": {
        "steps": [
          {
            "title": "优先队列",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证所有测试是否通过",
                "file": "verify1-1.sh",
                "hint": "请确保你有正确的输出格式。"
              }
            ],
            "solutions": ["priority_queue.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
