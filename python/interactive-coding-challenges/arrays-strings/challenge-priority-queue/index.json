{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Efficient Array-Backed Priority Queue Implementation",
  "description": "A priority queue is a data structure that allows for efficient access to the minimum (or maximum) element in a collection. It is commonly used in algorithms such as Dijkstra's shortest path algorithm and Huffman coding. In this challenge, we will implement a priority queue backed by an array.",
  "meta": {
    "title": "Priority Queue | Data Structure | Algorithms",
    "description": "Learn how to implement a priority queue data structure with efficient insert, extract_min, and decrease_key operations. Ideal for algorithms like Dijkstra's shortest path and Huffman coding.",
    "keywords": "priority queue, data structure, algorithms, Dijkstra, Huffman coding"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Priority Queue",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify if all tests are passed",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have the correct output format.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "algorithm/arrays_strings",
          "python/build_in_functions",
          "python/classes_objects",
          "python/conditional_statements",
          "python/constructor",
          "python/encapsulation",
          "python/for_loops",
          "python/function_definition",
          "python/importing_modules",
          "python/lists",
          "python/os_system",
          "python/polymorphism",
          "python/standard_libraries",
          "python/strings",
          "python/tuples",
          "python/type_conversion",
          "python/variables_data_types"
        ],
        "solutions": ["priority_queue.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "test_priority_queue.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "priority_queue.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812"],
  "license": {
    "name": "Apache-2.0",
    "url": "https://github.com/donnemartin/interactive-coding-challenges/blob/master/LICENSE",
    "repo": "https://github.com/donnemartin/interactive-coding-challenges"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "高效的基于数组的优先队列实现",
      "description": "优先队列是一种数据结构，它允许高效地访问集合中的最小（或最大）元素。它通常用于诸如迪杰斯特拉最短路径算法和哈夫曼编码等算法中。在这个挑战中，我们将实现一个由数组支持的优先队列。",
      "meta": {
        "title": "优先队列 | 数据结构 | 算法",
        "description": "学习如何使用高效的插入、提取最小值和降低键值操作来实现优先队列数据结构。适用于迪杰斯特拉最短路径和哈夫曼编码等算法。",
        "keywords": "优先队列，数据结构，算法，迪杰斯特拉，哈夫曼编码"
      },
      "details": {
        "steps": [
          {
            "title": "优先队列",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证所有测试是否通过",
                "file": "verify1-1.sh",
                "hint": "请确保你有正确的输出格式。"
              }
            ],
            "solutions": ["priority_queue.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Implementación eficiente de una cola de prioridad respaldada por una matriz",
      "description": "Una cola de prioridad es una estructura de datos que permite un acceso eficiente al elemento mínimo (o máximo) de una colección. Se utiliza comúnmente en algoritmos como el algoritmo de búsqueda de caminos más cortos de Dijkstra y la codificación Huffman. En este desafío, implementaremos una cola de prioridad respaldada por una matriz.",
      "meta": {
        "title": "Cola de prioridad | Estructura de datos | Algoritmos",
        "description": "Aprende cómo implementar una estructura de datos de cola de prioridad con operaciones eficientes de inserción, extracción del mínimo y disminución de la clave. Ideal para algoritmos como el camino más corto de Dijkstra y la codificación Huffman.",
        "keywords": "cola de prioridad, estructura de datos, algoritmos, Dijkstra, codificación Huffman"
      },
      "details": {
        "steps": [
          {
            "title": "Cola de prioridad",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verifica si todas las pruebas han pasado",
                "file": "verify1-1.sh",
                "hint": "Asegúrate de tener el formato de salida correcto."
              }
            ],
            "solutions": ["priority_queue.py"]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Implémentation d'une file d'attente prioritaire efficace supportée par un tableau",
      "description": "Une file d'attente prioritaire est une structure de données qui permet un accès efficace à l'élément minimum (ou maximum) d'une collection. Elle est couramment utilisée dans des algorithmes tels que l'algorithme du plus court chemin de Dijkstra et le codage Huffman. Dans ce défi, nous allons implémenter une file d'attente prioritaire supportée par un tableau.",
      "meta": {
        "title": "File d'attente prioritaire | Structure de données | Algorithmes",
        "description": "Découvrez comment implémenter une structure de données de file d'attente prioritaire avec des opérations d'insertion, d'extraction du minimum et de diminution de clé efficaces. Idéal pour des algorithmes comme le plus court chemin de Dijkstra et le codage Huffman.",
        "keywords": "file d'attente prioritaire, structure de données, algorithmes, Dijkstra, codage Huffman"
      },
      "details": {
        "steps": [
          {
            "title": "File d'attente prioritaire",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez si tous les tests ont réussi",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir le bon format de sortie."
              }
            ],
            "solutions": ["priority_queue.py"]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Effiziente Implementierung einer Prioritätswarteschlange mit Array-Backend",
      "description": "Eine Prioritätswarteschlange ist eine Datenstruktur, die effizienten Zugang zum kleinsten (oder größten) Element in einer Sammlung ermöglicht. Sie wird häufig in Algorithmen wie Dijkstras kürzester-Pfad-Algorithmus und Huffman-Codierung verwendet. In dieser Herausforderung werden wir eine Prioritätswarteschlange implementieren, die von einem Array unterstützt wird.",
      "meta": {
        "title": "Prioritätswarteschlange | Datenstruktur | Algorithmen",
        "description": "Lernen Sie, wie Sie eine Prioritätswarteschlange-Datenstruktur mit effizienten Insert-, Extract_min- und Decrease_key-Operationen implementieren. Ideal für Algorithmen wie Dijkstras kürzester Pfad und Huffman-Codierung.",
        "keywords": "Prioritätswarteschlange, Datenstruktur, Algorithmen, Dijkstra, Huffman-Codierung"
      },
      "details": {
        "steps": [
          {
            "title": "Prioritätswarteschlange",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren Sie, ob alle Tests bestanden sind",
                "file": "verify1-1.sh",
                "hint": "Bitte stellen Sie sicher, dass Sie das richtige Ausgabeformat haben."
              }
            ],
            "solutions": ["priority_queue.py"]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "効率的な配列ベースの優先度付きキューの実装",
      "description": "優先度付きキューは、コレクション内の最小（または最大）要素に効率的にアクセスできるデータ構造です。これは、ダイクストラの最短経路アルゴリズムやハフマン符号化などのアルゴリズムで一般的に使用されます。このチャレンジでは、配列によってサポートされる優先度付きキューを実装します。",
      "meta": {
        "title": "優先度付きキュー | データ構造 | アルゴリズム",
        "description": "効率的な insert、extract_min、および decrease_key 操作を備えた優先度付きキューデータ構造の実装方法を学びましょう。ダイクストラの最短経路やハフマン符号化などのアルゴリズムに最適。",
        "keywords": "優先度付きキュー, データ構造，アルゴリズム，ダイクストラ，ハフマン符号化"
      },
      "details": {
        "steps": [
          {
            "title": "優先度付きキュー",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "すべてのテストが通過したかどうかを確認する",
                "file": "verify1-1.sh",
                "hint": "出力形式が正しいことを確認してください。"
              }
            ],
            "solutions": ["priority_queue.py"]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Эффективная реализация приоритетной очереди, основанной на массиве",
      "description": "Приоритетная очередь - это структура данных, которая позволяет эффективно получать доступ к минимальному (или максимальному) элементу в коллекции. Она широко используется в алгоритмах, таких как алгоритм Дейкстры поиска кратчайшего пути и кодирование Хаффмана. В этом испытании мы реализуем приоритетную очередь, основанную на массиве.",
      "meta": {
        "title": "Приоритетная очередь | Структура данных | Алгоритмы",
        "description": "Изучите, как реализовать структуру данных приоритетной очереди с эффективными операциями вставки, извлечения минимального элемента и уменьшения ключа. Ideal для алгоритмов, таких как алгоритм Дейкстры поиска кратчайшего пути и кодирование Хаффмана.",
        "keywords": "приоритетная очередь, структура данных, алгоритмы, Дейкстра, кодирование Хаффмана"
      },
      "details": {
        "steps": [
          {
            "title": "Приоритетная очередь",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить, пройдены ли все тесты",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что у вас правильный формат вывода."
              }
            ],
            "solutions": ["priority_queue.py"]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
