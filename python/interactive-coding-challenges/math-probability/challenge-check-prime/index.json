{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Primality Test in Python",
  "description": "In mathematics, a prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. In other words, a prime number is a positive integer that has no positive integer divisors other than 1 and itself. In this Python challenge, we will write a program to check if a given number is prime or not.",
  "meta": {
    "title": "Primality Test in Python: Identify Prime Numbers Efficiently",
    "description": "Learn how to write a Python function to check if a given number is prime or not, with detailed requirements and example usage.",
    "keywords": "algorithm playground, primality test, python, coding, prime numbers, algorithm, programming"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Check Prime",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify if all tests are passed",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have the correct output format.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "algorithm/math_probability",
          "python/booleans",
          "python/build_in_functions",
          "python/classes_objects",
          "python/conditional_statements",
          "python/encapsulation",
          "python/for_loops",
          "python/function_definition",
          "python/importing_modules",
          "python/math_random",
          "python/numeric_types",
          "python/raising_exceptions",
          "python/standard_libraries",
          "python/tuples",
          "python/type_conversion",
          "python/variables_data_types"
        ],
        "solutions": ["check_prime.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "test_check_prime.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "check_prime.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812"],
  "license": {
    "name": "Apache-2.0",
    "url": "https://github.com/donnemartin/interactive-coding-challenges/blob/master/LICENSE",
    "repo": "https://github.com/donnemartin/interactive-coding-challenges"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Python 中的质数测试",
      "description": "在数学中，质数是大于 1 的自然数，且不是两个较小自然数的乘积。换句话说，质数是一个正整数，除了 1 和它本身之外没有其他正整数因数。在这个 Python 挑战中，我们将编写一个程序来检查给定的数是否为质数。",
      "meta": {
        "title": "Python 中的质数测试：高效识别质数",
        "description": "学习如何编写一个 Python 函数来检查给定的数是否为质数，包括详细的要求和示例用法。",
        "keywords": "算法游乐场，质数测试，Python, 编码，质数，算法，编程"
      },
      "details": {
        "steps": [
          {
            "title": "检查质数",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证所有测试是否通过",
                "file": "verify1-1.sh",
                "hint": "请确保你有正确的输出格式。"
              }
            ],
            "solutions": ["check_prime.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Prueba de primalidad en Python",
      "description": "En matemáticas, un número primo es un número natural mayor que 1 que no es el producto de dos números naturales más pequeños. En otras palabras, un número primo es un entero positivo que no tiene divisores enteros positivos distintos de 1 y sí mismo. En este desafío de Python, escribiremos un programa para comprobar si un número dado es primo o no.",
      "meta": {
        "title": "Prueba de primalidad en Python: Identificar números primos de manera eficiente",
        "description": "Aprende cómo escribir una función de Python para comprobar si un número dado es primo o no, con requisitos detallados y uso de ejemplo.",
        "keywords": "algoritmo playground, prueba de primalidad, python, codificación, números primos, algoritmo, programación"
      },
      "details": {
        "steps": [
          {
            "title": "Comprobar si es primo",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar si todas las pruebas han pasado",
                "file": "verify1-1.sh",
                "hint": "Asegúrese de tener el formato de salida correcto."
              }
            ],
            "solutions": ["check_prime.py"]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Test de primalité en Python",
      "description": "En mathématiques, un nombre premier est un nombre naturel supérieur à 1 qui n'est pas le produit de deux nombres naturels plus petits. En d'autres termes, un nombre premier est un entier positif qui n'a pas de diviseurs positifs autres que 1 et lui-même. Dans ce défi Python, nous allons écrire un programme pour vérifier si un nombre donné est premier ou non.",
      "meta": {
        "title": "Test de primalité en Python : Identifier efficacement les nombres premiers",
        "description": "Apprenez à écrire une fonction Python pour vérifier si un nombre donné est premier ou non, avec des exigences détaillées et des exemples d'utilisation.",
        "keywords": "plateforme d'algorithmes, test de primalité, python, codage, nombres premiers, algorithme, programmation"
      },
      "details": {
        "steps": [
          {
            "title": "Vérifier si un nombre est premier",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier si tous les tests sont passés",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir le bon format de sortie."
              }
            ],
            "solutions": ["check_prime.py"]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Primzahlprüfung in Python",
      "description": "In der Mathematik ist eine Primzahl eine natürliche Zahl größer als 1, die kein Produkt von zwei kleineren natürlichen Zahlen ist. Mit anderen Worten, eine Primzahl ist eine positive ganze Zahl, die keine positiven ganzzahligen Teiler außer 1 und sich selbst hat. In dieser Python-Aufgabe werden wir ein Programm schreiben, um zu überprüfen, ob eine gegebene Zahl eine Primzahl ist oder nicht.",
      "meta": {
        "title": "Primzahlprüfung in Python: Identifizieren Sie Primzahlen effizient",
        "description": "Lernen Sie, wie Sie eine Python-Funktion zum Überprüfen schreiben, ob eine gegebene Zahl eine Primzahl ist oder nicht, mit detaillierten Anforderungen und Beispielverwendung.",
        "keywords": "Algorithmus-Spielfeld, Primzahlprüfung, Python, Programmierung, Primzahlen, Algorithmus, Programmierung"
      },
      "details": {
        "steps": [
          {
            "title": "Primzahl überprüfen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren Sie, ob alle Tests bestanden sind",
                "file": "verify1-1.sh",
                "hint": "Stellen Sie bitte sicher, dass Sie das richtige Ausgabeformat haben."
              }
            ],
            "solutions": ["check_prime.py"]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Python における素数判定",
      "description": "数学において、素数とは 1 より大きい自然数であって、2 つの小さな自然数の積ではない数です。言い換えると、素数とは 1 とそれ自身以外に正の整数の約数を持たない正の整数です。この Python チャレンジでは、与えられた数が素数かどうかをチェックするプログラムを書きます。",
      "meta": {
        "title": "Python における素数判定：素数を効率的に識別する",
        "description": "与えられた数が素数かどうかをチェックする Python 関数を書く方法を学び、詳細な要件と例の使用法を含めます。",
        "keywords": "アルゴリズム プレイグラウンド，素数判定，Python, コーディング，素数，アルゴリズム，プログラミング"
      },
      "details": {
        "steps": [
          {
            "title": "素数をチェックする",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "すべてのテストが合格したことを確認する",
                "file": "verify1-1.sh",
                "hint": "出力形式が正しいことを確認してください。"
              }
            ],
            "solutions": ["check_prime.py"]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Тест на простоту на Python",
      "description": "В математике простое число - это натуральное число, большее 1, которое не является произведением двух меньших натуральных чисел. Другими словами, простое число - это положительное целое число, у которого нет положительных целых делителей, кроме 1 и самого себя. В этом Python-вызовах мы напишем программу для проверки, является ли заданное число простым или нет.",
      "meta": {
        "title": "Тест на простоту на Python: Эффективно определить простые числа",
        "description": "Изучите, как написать функцию на Python для проверки, является ли заданное число простым или нет, с детальными требованиями и примерами использования.",
        "keywords": "алгоритм, площадка для экспериментов, тест на простоту, Python, программирование, простые числа, алгоритм, кодинг"
      },
      "details": {
        "steps": [
          {
            "title": "Проверить простоту",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить, пройдены ли все тесты",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что у вас правильный формат вывода."
              }
            ],
            "solutions": ["check_prime.py"]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
