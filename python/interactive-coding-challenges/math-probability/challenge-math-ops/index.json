{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Efficient List Operations in Python",
  "description": "In this Python challenge, we will create a class that can insert an integer to a list and calculate the maximum, minimum, mean, and mode of the list in O(1) time complexity.",
  "meta": {
    "title": "Python Challenge | Data Structures | Time Complexity",
    "description": "Explore a Python challenge that creates a class to insert integers, calculate max, min, mean, and mode in O(1) time complexity. Ideal for learning data structures and algorithm optimization.",
    "keywords": "Python, Data Structures, Time Complexity, Max, Min, Mean, Mode"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Math Ops",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify if all tests are passed",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have the correct output format.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "algorithm/math_probability",
          "python/classes_objects",
          "python/comments",
          "python/conditional_statements",
          "python/constructor",
          "python/default_arguments",
          "python/encapsulation",
          "python/function_definition",
          "python/lists",
          "python/polymorphism",
          "python/raising_exceptions",
          "python/tuples"
        ],
        "solutions": ["math_ops.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "test_math_ops.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "math_ops.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812"],
  "license": {
    "name": "Apache-2.0",
    "url": "https://github.com/donnemartin/interactive-coding-challenges/blob/master/LICENSE",
    "repo": "https://github.com/donnemartin/interactive-coding-challenges"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Python 中的高效列表操作",
      "description": "在这个 Python 挑战中，我们将创建一个类，该类可以在 O(1) 时间复杂度内将一个整数插入到列表中，并计算该列表的最大值、最小值、平均值和众数。",
      "meta": {
        "title": "Python 挑战 | 数据结构 | 时间复杂度",
        "description": "探索一个 Python 挑战，该挑战创建一个类来插入整数，在 O(1) 时间复杂度内计算最大值、最小值、平均值和众数。非常适合学习数据结构和算法优化。",
        "keywords": "Python, 数据结构，时间复杂度，最大值，最小值，平均值，众数"
      },
      "details": {
        "steps": [
          {
            "title": "数学运算",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证所有测试是否通过",
                "file": "verify1-1.sh",
                "hint": "请确保你有正确的输出格式。"
              }
            ],
            "solutions": ["math_ops.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Operaciones eficientes con listas en Python",
      "description": "En este desafío de Python, crearemos una clase que pueda insertar un entero en una lista y calcular el máximo, mínimo, promedio y moda de la lista con una complejidad de tiempo O(1).",
      "meta": {
        "title": "Desafío de Python | Estructuras de datos | Complejidad de tiempo",
        "description": "Explora un desafío de Python que crea una clase para insertar enteros, calcular el máximo, mínimo, promedio y moda con una complejidad de tiempo O(1). Ideal para aprender estructuras de datos y optimización de algoritmos.",
        "keywords": "Python, Estructuras de datos, Complejidad de tiempo, Máximo, Mínimo, Promedio, Moda"
      },
      "details": {
        "steps": [
          {
            "title": "Operaciones matemáticas",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar si todas las pruebas han pasado",
                "file": "verify1-1.sh",
                "hint": "Asegúrese de tener el formato de salida correcto."
              }
            ],
            "solutions": ["math_ops.py"]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Opérations efficaces sur les listes en Python",
      "description": "Dans ce défi Python, nous allons créer une classe qui peut insérer un entier dans une liste et calculer le maximum, le minimum, la moyenne et le mode de la liste avec une complexité temporelle de O(1).",
      "meta": {
        "title": "Défi Python | Structures de données | Complexité temporelle",
        "description": "Explorez un défi Python qui crée une classe pour insérer des entiers, calculer le max, le min, la moyenne et le mode avec une complexité temporelle de O(1). Idéal pour apprendre les structures de données et l'optimisation des algorithmes.",
        "keywords": "Python, Structures de données, Complexité temporelle, Max, Min, Moyenne, Mode"
      },
      "details": {
        "steps": [
          {
            "title": "Opérations mathématiques",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez si tous les tests ont réussi",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer que vous avez le bon format de sortie."
              }
            ],
            "solutions": ["math_ops.py"]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Effiziente Listenoperationen in Python",
      "description": "In dieser Python-Aufgabe werden wir eine Klasse erstellen, die es ermöglicht, eine ganze Zahl in eine Liste einzufügen und die maximale, minimale, durchschnittliche und modale Zahl der Liste in einer Zeitkomplexität von O(1) zu berechnen.",
      "meta": {
        "title": "Python-Aufgabe | Datenstrukturen | Zeitkomplexität",
        "description": "Entdecken Sie eine Python-Aufgabe, die eine Klasse erstellt, um ganze Zahlen einzufügen und das Maximum, Minimum, Mittelwert und Modus in einer Zeitkomplexität von O(1) zu berechnen. Ideal zum Lernen von Datenstrukturen und Algorithmusoptimierung.",
        "keywords": "Python, Datenstrukturen, Zeitkomplexität, Max, Min, Mittelwert, Modus"
      },
      "details": {
        "steps": [
          {
            "title": "Mathematische Operationen",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen, ob alle Tests bestanden sind",
                "file": "verify1-1.sh",
                "hint": "Stellen Sie bitte sicher, dass Sie das richtige Ausgabeformat haben."
              }
            ],
            "solutions": ["math_ops.py"]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Python における効率的なリスト操作",
      "description": "この Python チャレンジでは、整数をリストに挿入し、O(1) の時間計算量でリストの最大値、最小値、平均値、最頻値を計算できるクラスを作成します。",
      "meta": {
        "title": "Python チャレンジ | データ構造 | 時間計算量",
        "description": "整数を挿入し、O(1) の時間計算量で最大値、最小値、平均値、最頻値を計算するクラスを作成する Python チャレンジを探ってみましょう。データ構造とアルゴリズム最適化の学習に最適。",
        "keywords": "Python, データ構造，時間計算量，最大値，最小値，平均値，最頻値"
      },
      "details": {
        "steps": [
          {
            "title": "数学演算",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "すべてのテストが合格したかどうかを確認する",
                "file": "verify1-1.sh",
                "hint": "出力形式が正しいことを確認してください。"
              }
            ],
            "solutions": ["math_ops.py"]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Эффективные операции со списками в Python",
      "description": "В этом Python-вызове мы создадим класс, который может вставлять целое число в список и вычислять максимум, минимум, среднее значение и моду списка с временной сложностью O(1).",
      "meta": {
        "title": "Python-вызов | Структуры данных | Временная сложность",
        "description": "Изучите Python-вызов, который создает класс для вставки целых чисел, вычисления максимума, минимума, среднего значения и моды с временной сложностью O(1). Ideal для изучения структур данных и оптимизации алгоритмов.",
        "keywords": "Python, Структуры данных, Временная сложность, Максимум, Минимум, Среднее значение, Мода"
      },
      "details": {
        "steps": [
          {
            "title": "Математические операции",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить, пройдены ли все тесты",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что у вас правильный формат вывода."
              }
            ],
            "solutions": ["math_ops.py"]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
