{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Binary Tree Lowest Common Ancestor",
  "description": "In computer science, a binary tree is a tree data structure in which each node has at most two children, which are referred to as the left child and the right child. The lowest common ancestor (LCA) of two nodes v and w in a tree or directed acyclic graph (DAG) is the lowest (i.e. deepest) node that has both v and w as descendants, where we define each node to be a descendant of itself (so if v has a direct connection from w, w is the lowest common ancestor). In this challenge, we will find the lowest common ancestor in a binary tree.",
  "meta": {
    "title": "Mastering Binary Tree Lowest Common Ancestor",
    "description": "Explore the fundamentals of binary trees and discover the techniques to find the lowest common ancestor of two nodes.",
    "keywords": "python playground, python, binary tree, lowest common ancestor, algorithm, data structure, computer science"
  },
  "difficulty": "Beginner",
  "time": 15,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Tree Lca",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify if all tests are passed",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have the correct output format.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "algorithm/graphs_trees",
          "algorithm/recursion_dynamic",
          "python/booleans",
          "python/build_in_functions",
          "python/classes_objects",
          "python/conditional_statements",
          "python/constructor",
          "python/default_arguments",
          "python/encapsulation",
          "python/function_definition",
          "python/polymorphism",
          "python/raising_exceptions",
          "python/strings",
          "python/tuples",
          "python/type_conversion",
          "python/variables_data_types"
        ],
        "solutions": ["lca.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "test_lca.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "lca.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812"],
  "license": {
    "name": "Apache-2.0",
    "url": "https://github.com/donnemartin/interactive-coding-challenges/blob/master/LICENSE",
    "repo": "https://github.com/donnemartin/interactive-coding-challenges"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "二叉树的最近公共祖先",
      "description": "在计算机科学中，二叉树是一种树状数据结构，其中每个节点最多有两个子节点，分别称为左子节点和右子节点。树或有向无环图（DAG）中两个节点 v 和 w 的最近公共祖先（LCA）是同时具有 v 和 w 作为后代的最低（即最深）节点，这里我们定义每个节点都是其自身的后代（所以如果 v 与 w 有直接连接，w 就是最近公共祖先）。在这个挑战中，我们将在二叉树中找到最近公共祖先。",
      "meta": {
        "title": "掌握二叉树的最近公共祖先",
        "description": "探索二叉树的基础知识，并发现找到两个节点最近公共祖先的技巧。",
        "keywords": "Python 实践，Python, 二叉树，最近公共祖先，算法，数据结构，计算机科学"
      },
      "details": {
        "steps": [
          {
            "title": "树的最近公共祖先",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证所有测试是否通过",
                "file": "verify1-1.sh",
                "hint": "请确保你有正确的输出格式。"
              }
            ],
            "solutions": ["lca.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Ancestor Común Más Bajo en un Árbol Binario",
      "description": "En informática, un árbol binario es una estructura de datos de árbol en la que cada nodo tiene como máximo dos hijos, que se denominan hijo izquierdo y hijo derecho. El ancestro común más bajo (LCA, por sus siglas en inglés) de dos nodos v y w en un árbol o grafo dirigido acíclico (DAG) es el nodo más bajo (es decir, el más profundo) que tiene a v y w como descendientes, donde definimos que cada nodo es un descendiente de sí mismo (por lo tanto, si v tiene una conexión directa desde w, w es el ancestro común más bajo). En este desafío, encontraremos el ancestro común más bajo en un árbol binario.",
      "meta": {
        "title": "Dominando el Ancestro Común Más Bajo en un Árbol Binario",
        "description": "Explora los fundamentos de los árboles binarios y descubre las técnicas para encontrar el ancestro común más bajo de dos nodos.",
        "keywords": "python playground, python, árbol binario, ancestro común más bajo, algoritmo, estructura de datos, informática"
      },
      "details": {
        "steps": [
          {
            "title": "Árbol Lca",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verifica si todas las pruebas han pasado",
                "file": "verify1-1.sh",
                "hint": "Asegúrate de tener el formato de salida correcto."
              }
            ],
            "solutions": ["lca.py"]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Ancêtre Commun le Plus Proche dans un Arbre Binaire",
      "description": "En informatique, un arbre binaire est une structure de données arborescente dans laquelle chaque nœud a au plus deux enfants, appelés l'enfant gauche et l'enfant droit. L'ascendant commun le plus proche (LCA) de deux nœuds v et w dans un arbre ou un graphe dirigé acyclique (DAG) est le nœud le plus bas (c'est-à-dire le plus profond) qui a à la fois v et w comme descendants, où nous définissons chaque nœud comme descendant de lui-même (donc si v a une connexion directe à partir de w, w est l'ascendant commun le plus proche). Dans ce défi, nous trouverons l'ascendant commun le plus proche dans un arbre binaire.",
      "meta": {
        "title": "Maîtriser l'Ascendant Commun le Plus Proche dans un Arbre Binaire",
        "description": "Explorez les bases des arbres binaires et découvrez les techniques pour trouver l'ascendant commun le plus proche de deux nœuds.",
        "keywords": "python playground, python, arbre binaire, ancêtre commun le plus proche, algorithme, structure de données, informatique"
      },
      "details": {
        "steps": [
          {
            "title": "Arbre Binaire - LCA",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez si tous les tests ont réussi",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir le bon format de sortie."
              }
            ],
            "solutions": ["lca.py"]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Binärbaum: niedrigster gemeinsamer Vorfahre",
      "description": "In der Informatik ist ein Binärbaum eine Bäume-Datenstruktur, in der jeder Knoten maximal zwei Kinder hat, die als linker und rechter Kind bezeichnet werden. Der niedrigste gemeinsame Vorfahre (LCA) von zwei Knoten v und w in einem Baum oder gerichteten zyklischen Graphen (DAG) ist der niedrigste (d.h. tiefste) Knoten, der sowohl v als auch w als Nachkommen hat, wobei wir definieren, dass jeder Knoten ein Nachkomme von sich selbst ist (also wenn v eine direkte Verbindung von w hat, ist w der niedrigste gemeinsame Vorfahre). In dieser Herausforderung werden wir den niedrigsten gemeinsamen Vorfahren in einem Binärbaum finden.",
      "meta": {
        "title": "Meister der Binärbaum-Niedrigsten-Gemeinsamen-Vorfahren",
        "description": "Erkunde die Grundlagen von Binärbäumen und entdecke die Techniken, um den niedrigsten gemeinsamen Vorfahren von zwei Knoten zu finden.",
        "keywords": "python playground, python, Binärbaum, niedrigster gemeinsamer Vorfahre, Algorithmus, Datenstruktur, Informatik"
      },
      "details": {
        "steps": [
          {
            "title": "Baum LCA",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren, ob alle Tests bestanden sind",
                "file": "verify1-1.sh",
                "hint": "Stellen Sie bitte sicher, dass Sie das richtige Ausgabeformat haben."
              }
            ],
            "solutions": ["lca.py"]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "2 分木の最小共通祖先",
      "description": "コンピュータサイエンスにおいて、2 分木は、各ノードが最大 2 つの子を持つ木構造であり、それぞれ左の子と右の子と呼ばれます。木または有向非巡回グラフ (DAG) の 2 つのノード v と w の最小共通祖先 (LCA) は、v と w の両方を子孫とする最下位 (つまり最も深い) ノードであり、ここでは各ノードをそれ自身の子孫と定義します (したがって、v が w から直接の接続を持つ場合、w が最小共通祖先です)。このチャレンジでは、2 分木における最小共通祖先を見つけます。",
      "meta": {
        "title": "2 分木の最小共通祖先をマスターする",
        "description": "2 分木の基本を探り、2 つのノードの最小共通祖先を見つける技術を発見しましょう。",
        "keywords": "python の演習場，python, 2 分木，最小共通祖先，アルゴリズム，データ構造，コンピュータサイエンス"
      },
      "details": {
        "steps": [
          {
            "title": "木の Lca",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "すべてのテストが合格したかどうかを確認する",
                "file": "verify1-1.sh",
                "hint": "出力形式が正しいことを確認してください。"
              }
            ],
            "solutions": ["lca.py"]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Наименьший общий предок в двоичном дереве",
      "description": "В информатике двоичное дерево — это древовидная структура данных, в которой каждый узел имеет не более двух дочерних элементов, называемых левым и правым потомками. Наименьшим общим предком (LCA) двух узлов v и w в дереве или направленном ациклическом графе (DAG) является самый нижний (т.е. глубокий) узел, имеющий как v, так и w в качестве потомков, где каждый узел считается своим собственным потомком (так что если от v есть прямой путь к w, то w является наименьшим общим предком). В этом испытании мы найдем наименьший общий предок в двоичном дереве.",
      "meta": {
        "title": "Осваиваем нахождение наименьшего общего предка в двоичном дереве",
        "description": "Изучайте основы двоичных деревьев и открывайте методы нахождения наименьшего общего предка двух узлов.",
        "keywords": "python playground, python, двоичное дерево, наименьший общий предок, алгоритм, структура данных, информатика"
      },
      "details": {
        "steps": [
          {
            "title": "Дерево Lca",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить, пройдены ли все тесты",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что у вас правильный формат вывода."
              }
            ],
            "solutions": ["lca.py"]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
