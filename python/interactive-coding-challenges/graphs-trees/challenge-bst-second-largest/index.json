{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Bst Second Largest",
  "description": "A binary search tree is a data structure that is used to store data in a sorted manner. Each node in the tree has at most two children, and the left child is always less than the parent, while the right child is always greater than the parent. In this challenge, we will be finding the second largest node in a binary search tree.",
  "meta": {
    "title": "Mastering Binary Search Tree: Finding the Second Largest Node",
    "description": "Explore the efficient solution to locate the second largest node in a binary search tree, a crucial data structure for sorted data storage.",
    "keywords": "binary search tree, python playground, algorithm playground, python, programming tutorial, sorted data, algorithm, second largest node, data structure"
  },
  "difficulty": "Beginner",
  "time": 15,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Bst Second Largest",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify if all tests are passed",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have the correct output format.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "algorithm/graphs_trees",
          "algorithm/recursion_dynamic",
          "python/build_in_functions",
          "python/classes_objects",
          "python/conditional_statements",
          "python/constructor",
          "python/default_arguments",
          "python/encapsulation",
          "python/function_definition",
          "python/polymorphism",
          "python/raising_exceptions",
          "python/strings",
          "python/tuples",
          "python/type_conversion",
          "python/variables_data_types"
        ],
        "solutions": ["bst_second_largest.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "test_bst_second_largest.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "bst_second_largest.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812"],
  "license": {
    "name": "Apache-2.0",
    "url": "https://github.com/donnemartin/interactive-coding-challenges/blob/master/LICENSE",
    "repo": "https://github.com/donnemartin/interactive-coding-challenges"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "二叉搜索树中的第二大节点",
      "description": "二叉搜索树是一种用于以有序方式存储数据的数据结构。树中的每个节点最多有两个子节点，左子节点始终小于父节点，而右子节点始终大于父节点。在这个挑战中，我们将找到二叉搜索树中的第二大节点。",
      "meta": {
        "title": "掌握二叉搜索树：找到第二大节点",
        "description": "探索在二叉搜索树中定位第二大节点的高效解决方案，二叉搜索树是用于存储有序数据的关键数据结构。",
        "keywords": "二叉搜索树, Python 实践场, 算法实践场, Python, 编程教程, 有序数据, 算法, 第二大节点, 数据结构"
      },
      "details": {
        "steps": [
          {
            "title": "二叉搜索树中的第二大节点",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证所有测试是否通过",
                "file": "verify1-1.sh",
                "hint": "请确保你有正确的输出格式。"
              }
            ],
            "solutions": ["bst_second_largest.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
