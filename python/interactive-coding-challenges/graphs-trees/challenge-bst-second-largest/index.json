{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Bst Second Largest",
  "description": "A binary search tree is a data structure that is used to store data in a sorted manner. Each node in the tree has at most two children, and the left child is always less than the parent, while the right child is always greater than the parent. In this challenge, we will be finding the second largest node in a binary search tree.",
  "meta": {
    "title": "Mastering Binary Search Tree: Finding the Second Largest Node",
    "description": "Explore the efficient solution to locate the second largest node in a binary search tree, a crucial data structure for sorted data storage.",
    "keywords": "binary search tree, python playground, algorithm playground, python, programming tutorial, sorted data, algorithm, second largest node, data structure"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Bst Second Largest",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify if all tests are passed",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have the correct output format.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [],
        "solutions": ["bst_second_largest.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "test_bst_second_largest.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "bst_second_largest.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812"],
  "license": {
    "name": "Apache-2.0",
    "url": "https://github.com/donnemartin/interactive-coding-challenges/blob/master/LICENSE",
    "repo": "https://github.com/donnemartin/interactive-coding-challenges"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "二叉搜索树中的第二大节点",
      "description": "二叉搜索树是一种用于以有序方式存储数据的数据结构。树中的每个节点最多有两个子节点，左子节点始终小于父节点，而右子节点始终大于父节点。在这个挑战中，我们将找到二叉搜索树中的第二大节点。",
      "meta": {
        "title": "掌握二叉搜索树：找到第二大节点",
        "description": "探索在二叉搜索树中定位第二大节点的高效解决方案，二叉搜索树是用于存储有序数据的关键数据结构。",
        "keywords": "二叉搜索树，Python 实践场，算法实践场，Python, 编程教程，有序数据，算法，第二大节点，数据结构"
      },
      "details": {
        "steps": [
          {
            "title": "二叉搜索树中的第二大节点",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证所有测试是否通过",
                "file": "verify1-1.sh",
                "hint": "请确保你有正确的输出格式。"
              }
            ],
            "solutions": ["bst_second_largest.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "El segundo nodo más grande en un árbol de búsqueda binaria",
      "description": "Un árbol de búsqueda binaria es una estructura de datos que se utiliza para almacenar datos de manera ordenada. Cada nodo en el árbol tiene como máximo dos hijos, y el hijo izquierdo siempre es menor que el padre, mientras que el hijo derecho siempre es mayor que el padre. En este desafío, encontraremos el segundo nodo más grande en un árbol de búsqueda binaria.",
      "meta": {
        "title": "Dominando el árbol de búsqueda binaria: Encontrando el segundo nodo más grande",
        "description": "Explora la solución eficiente para localizar el segundo nodo más grande en un árbol de búsqueda binaria, una estructura de datos crucial para el almacenamiento de datos ordenados.",
        "keywords": "árbol de búsqueda binaria, playground de Python, playground de algoritmos, Python, tutorial de programación, datos ordenados, algoritmo, segundo nodo más grande, estructura de datos"
      },
      "details": {
        "steps": [
          {
            "title": "El segundo nodo más grande en un árbol de búsqueda binaria",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verifica si todas las pruebas han pasado",
                "file": "verify1-1.sh",
                "hint": "Asegúrate de tener el formato de salida correcto."
              }
            ],
            "solutions": ["bst_second_largest.py"]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Bst Second Largest",
      "description": "Un arbre binaire de recherche est une structure de données utilisée pour stocker des données de manière triée. Chaque nœud de l'arbre a au plus deux enfants, et l'enfant gauche est toujours inférieur au parent, tandis que l'enfant droit est toujours supérieur au parent. Dans ce défi, nous allons trouver le deuxième nœud le plus grand dans un arbre binaire de recherche.",
      "meta": {
        "title": "Maîtriser l'arbre binaire de recherche : Trouver le deuxième nœud le plus grand",
        "description": "Explorez la solution efficace pour localiser le deuxième nœud le plus grand dans un arbre binaire de recherche, une structure de données cruciale pour le stockage de données triées.",
        "keywords": "arbre binaire de recherche, terrain de jeu Python, terrain de jeu d'algorithme, Python, tutoriel de programmation, données triées, algorithme, deuxième nœud le plus grand, structure de données"
      },
      "details": {
        "steps": [
          {
            "title": "Bst Second Largest",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez si tous les tests sont passés",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir le bon format de sortie."
              }
            ],
            "solutions": ["bst_second_largest.py"]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "ja",
      "title": "二分探索木の 2 番目に大きいノード",
      "description": "二分探索木は、データをソートされた状態で格納するために使用されるデータ構造です。木の各ノードは最大 2 つの子を持ち、左の子は常に親より小さく、右の子は常に親より大きくなります。このチャレンジでは、二分探索木の 2 番目に大きいノードを見つけます。",
      "meta": {
        "title": "二分探索木をマスター：2 番目に大きいノードを見つける",
        "description": "ソート済みデータの格納に重要なデータ構造である二分探索木において、2 番目に大きいノードを見つける効率的なソリューションを探ってみましょう。",
        "keywords": "二分探索木，python プレイグラウンド，アルゴリズムプレイグラウンド，python, プログラミングチュートリアル，ソート済みデータ，アルゴリズム，2 番目に大きいノード，データ構造"
      },
      "details": {
        "steps": [
          {
            "title": "二分探索木の 2 番目に大きいノード",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "すべてのテストが合格したかどうかを確認する",
                "file": "verify1-1.sh",
                "hint": "出力形式が正しいことを確認してください。"
              }
            ],
            "solutions": ["bst_second_largest.py"]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Второе по величине в BST",
      "description": "Двоичное дерево поиска - это структура данных, которая используется для хранения данных в отсортированном виде. Каждая вершина в дереве имеет не более двух дочерних вершин, и левая дочерняя вершина всегда меньше родительской, а правая дочерняя вершина всегда больше родительской. В этом испытании мы будем искать вторую по величине вершину в двоичном дереве поиска.",
      "meta": {
        "title": "Мастерство в двоичном дереве поиска: Поиск второй по величине вершины",
        "description": "Изучите эффективное решение для нахождения второй по величине вершины в двоичном дереве поиска, важной структуре данных для хранения отсортированных данных.",
        "keywords": "двоичное дерево поиска, python playground, алгоритм playground, python, программирование учебник, отсортированные данные, алгоритм, вторая по величине вершина, структура данных"
      },
      "details": {
        "steps": [
          {
            "title": "Второе по величине в BST",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить, пройдены ли все тесты",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что у вас правильный формат вывода."
              }
            ],
            "solutions": ["bst_second_largest.py"]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    },
    {
      "lang": "de",
      "title": "Zweiter größter Knoten in einem BST",
      "description": "Ein binärer Suchbaum ist eine Datenstruktur, die verwendet wird, um Daten in aufsteigender Reihenfolge zu speichern. Jeder Knoten im Baum hat maximal zwei Kinder, wobei das linke Kind immer kleiner als der Elternknoten ist, während das rechte Kind immer größer als der Elternknoten ist. In dieser Herausforderung werden wir den zweitgrößten Knoten in einem binären Suchbaum finden.",
      "meta": {
        "title": "Meisterung des binären Suchbaums: Finden des zweitgrößten Knotens",
        "description": "Entdecken Sie die effiziente Lösung, um den zweitgrößten Knoten in einem binären Suchbaum zu finden, einer wichtigen Datenstruktur für die aufsteigende Datenspeicherung.",
        "keywords": "binärer Suchbaum, Python-Playground, Algorithmus-Playground, Python, Programmierungstutorial, aufsteigende Daten, Algorithmus, zweitgrößter Knoten, Datenstruktur"
      },
      "details": {
        "steps": [
          {
            "title": "Zweiter größter Knoten in einem BST",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen, ob alle Tests bestanden sind",
                "file": "verify1-1.sh",
                "hint": "Stellen Sie sicher, dass Sie das richtige Ausgabeformat verwenden."
              }
            ],
            "solutions": ["bst_second_largest.py"]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    }
  ]
}
