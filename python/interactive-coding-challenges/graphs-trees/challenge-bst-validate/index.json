{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Validating Binary Search Tree",
  "description": "A binary search tree (BST) is a tree data structure in which each node has at most two children, which are referred to as the left child and the right child. A valid BST is a tree in which all the nodes in the left subtree of a node have a value less than the node's value, and all the nodes in the right subtree have a value greater than the node's value. In this challenge, we will determine if a given tree is a valid binary search tree.",
  "meta": {
    "title": "Validating Binary Search Tree",
    "description": "Learn how to determine if a given binary tree is a valid binary search tree using Python.",
    "keywords": "binary search tree, python, algorithm, bst, tree data structure"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Bst Validate",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify if all tests are passed",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have the correct output format.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "algorithm/graphs_trees",
          "algorithm/recursion_dynamic",
          "python/booleans",
          "python/build_in_functions",
          "python/classes_objects",
          "python/conditional_statements",
          "python/constructor",
          "python/default_arguments",
          "python/encapsulation",
          "python/function_definition",
          "python/importing_modules",
          "python/os_system",
          "python/polymorphism",
          "python/raising_exceptions",
          "python/standard_libraries",
          "python/strings",
          "python/tuples",
          "python/type_conversion",
          "python/variables_data_types"
        ],
        "solutions": ["bst_validate.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "test_bst_validate.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "bst_validate.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812"],
  "license": {
    "name": "Apache-2.0",
    "url": "https://github.com/donnemartin/interactive-coding-challenges/blob/master/LICENSE",
    "repo": "https://github.com/donnemartin/interactive-coding-challenges"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "验证二叉搜索树",
      "description": "二叉搜索树（BST）是一种树状数据结构，其中每个节点最多有两个子节点，分别称为左子节点和右子节点。有效的 BST 是这样一种树，其中节点左子树中的所有节点的值都小于该节点的值，而右子树中的所有节点的值都大于该节点的值。在这个挑战中，我们将确定给定的树是否是有效的二叉搜索树。",
      "meta": {
        "title": "验证二叉搜索树",
        "description": "学习如何使用 Python 确定给定的二叉树是否是有效的二叉搜索树。",
        "keywords": "二叉搜索树，Python, 算法，BST, 树状数据结构"
      },
      "details": {
        "steps": [
          {
            "title": "验证二叉搜索树",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证所有测试是否通过",
                "file": "verify1-1.sh",
                "hint": "请确保你有正确的输出格式。"
              }
            ],
            "solutions": ["bst_validate.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Validación de árboles de búsqueda binaria",
      "description": "Un árbol de búsqueda binaria (BST) es una estructura de datos de árbol en la que cada nodo tiene como máximo dos hijos, a los que se les denomina hijo izquierdo y hijo derecho. Un BST válido es un árbol en el que todos los nodos del subárbol izquierdo de un nodo tienen un valor menor que el valor del nodo, y todos los nodos del subárbol derecho tienen un valor mayor que el valor del nodo. En este desafío, determinaremos si un árbol dado es un árbol de búsqueda binaria válido.",
      "meta": {
        "title": "Validación de árboles de búsqueda binaria",
        "description": "Aprende cómo determinar si un árbol binario dado es un árbol de búsqueda binaria válido utilizando Python.",
        "keywords": "árbol de búsqueda binaria, python, algoritmo, BST, estructura de datos de árbol"
      },
      "details": {
        "steps": [
          {
            "title": "Validación de BST",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar si todas las pruebas han pasado",
                "file": "verify1-1.sh",
                "hint": "Asegúrese de tener el formato de salida correcto."
              }
            ],
            "solutions": ["bst_validate.py"]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Validation d'un arbre binaire de recherche",
      "description": "Un arbre binaire de recherche (ABR) est une structure de données arborescente dans laquelle chaque nœud a au plus deux enfants, appelés l'enfant gauche et l'enfant droit. Un ABR valide est un arbre dans lequel tous les nœuds du sous-arbre gauche d'un nœud ont une valeur inférieure à la valeur du nœud, et tous les nœuds du sous-arbre droit ont une valeur supérieure à la valeur du nœud. Dans ce défi, nous déterminerons si un arbre donné est un arbre binaire de recherche valide.",
      "meta": {
        "title": "Validation d'un arbre binaire de recherche",
        "description": "Apprenez à déterminer si un arbre binaire donné est un arbre binaire de recherche valide en utilisant Python.",
        "keywords": "arbre binaire de recherche, python, algorithme, ABR, structure de données arborescente"
      },
      "details": {
        "steps": [
          {
            "title": "Validation d'un ABR",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez si tous les tests ont réussi",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir le bon format de sortie."
              }
            ],
            "solutions": ["bst_validate.py"]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Überprüfung eines binären Suchbaums",
      "description": "Ein binärer Suchbaum (BST) ist eine Bäume-Datenstruktur, bei der jeder Knoten maximal zwei Kinder hat, die als linker und rechter Kind bezeichnet werden. Ein gültiger BST ist ein Baum, bei dem alle Knoten im linken Teilbaum eines Knotens einen Wert haben, der kleiner als der Wert des Knotens ist, und alle Knoten im rechten Teilbaum einen Wert haben, der größer als der Wert des Knotens ist. In dieser Herausforderung werden wir bestimmen, ob ein gegebener Baum ein gültiger binärer Suchbaum ist.",
      "meta": {
        "title": "Überprüfung eines binären Suchbaums",
        "description": "Lernen Sie, wie Sie mit Python bestimmen, ob ein gegebener binärer Baum ein gültiger binärer Suchbaum ist.",
        "keywords": "binärer Suchbaum, Python, Algorithmus, BST, Bäume-Datenstruktur"
      },
      "details": {
        "steps": [
          {
            "title": "Bst Validieren",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren, ob alle Tests bestanden sind",
                "file": "verify1-1.sh",
                "hint": "Stellen Sie sicher, dass Sie das richtige Ausgabeformat haben."
              }
            ],
            "solutions": ["bst_validate.py"]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "二分探索木の検証",
      "description": "二分探索木（BST：Binary Search Tree）は、各ノードが最大 2 つの子を持つ木構造であり、それぞれ左の子と右の子と呼ばれます。有効な BST とは、ノードの左部分木のすべてのノードの値がそのノードの値より小さく、右部分木のすべてのノードの値がそのノードの値より大きい木です。このチャレンジでは、与えられた木が有効な二分探索木であるかどうかを判断します。",
      "meta": {
        "title": "二分探索木の検証",
        "description": "Python を使って、与えられたバイナリツリーが有効な二分探索木であるかどうかを判断する方法を学びましょう。",
        "keywords": "二分探索木，Python, アルゴリズム，BST, 木構造"
      },
      "details": {
        "steps": [
          {
            "title": "Bst 検証",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "すべてのテストが合格したかどうかを確認する",
                "file": "verify1-1.sh",
                "hint": "出力形式が正しいことを確認してください。"
              }
            ],
            "solutions": ["bst_validate.py"]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Проверка двоичного дерева поиска",
      "description": "Двоичное дерево поиска (BST) — это древовидная структура данных, в которой каждый узел имеет не более двух дочерних элементов, называемых левым и правым дочерними элементами. Корректное BST — это дерево, в котором все узлы в левом поддереве узла имеют значение, меньшее значения узла, а все узлы в правом поддереве имеют значение, большее значения узла. В этом испытании мы определим, является ли данное дерево корректным двоичным деревом поиска.",
      "meta": {
        "title": "Проверка двоичного дерева поиска",
        "description": "Изучите, как определить, является ли данное двоичное дерево корректным двоичным деревом поиска с использованием Python.",
        "keywords": "двоичное дерево поиска, python, алгоритм, bst, древовидная структура данных"
      },
      "details": {
        "steps": [
          {
            "title": "Проверка BST",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить, пройдены ли все тесты",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что у вас правильный формат вывода."
              }
            ],
            "solutions": ["bst_validate.py"]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
