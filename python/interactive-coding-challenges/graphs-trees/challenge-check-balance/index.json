{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Balanced Binary Tree in Python",
  "description": "In computer science, a binary tree is a tree data structure in which each node has at most two children, which are referred to as the left child and the right child. A balanced binary tree is a tree in which the heights of the two subtrees of any node differ by at most one. In this challenge, we will write a Python program to check if a binary tree is balanced.",
  "meta": {
    "title": "Binary Tree | Balanced Binary Tree | Python Programming",
    "description": "Learn how to write a Python program to check if a binary tree is balanced. Explore the requirements and examples of this coding challenge.",
    "keywords": "binary tree, balanced binary tree, python programming, data structures, coding challenge"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Check Balance",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify if all tests are passed",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have the correct output format.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [],
        "solutions": ["check_balance.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "test_check_balance.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "check_balance.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812"],
  "license": {
    "name": "Apache-2.0",
    "url": "https://github.com/donnemartin/interactive-coding-challenges/blob/master/LICENSE",
    "repo": "https://github.com/donnemartin/interactive-coding-challenges"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "Python 中的平衡二叉树",
      "description": "在计算机科学中，二叉树是一种树状数据结构，其中每个节点最多有两个子节点，分别称为左子节点和右子节点。平衡二叉树是指任何节点的两个子树的高度差最多为 1 的树。在这个挑战中，我们将编写一个 Python 程序来检查一棵二叉树是否平衡。",
      "meta": {
        "title": "二叉树 | 平衡二叉树 | Python 编程",
        "description": "学习如何编写一个 Python 程序来检查一棵二叉树是否平衡。探索这个编码挑战的要求和示例。",
        "keywords": "二叉树，平衡二叉树，Python 编程，数据结构，编码挑战"
      },
      "details": {
        "steps": [
          {
            "title": "检查平衡性",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证所有测试是否通过",
                "file": "verify1-1.sh",
                "hint": "请确保你有正确的输出格式。"
              }
            ],
            "solutions": ["check_balance.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Árbol binario equilibrado en Python",
      "description": "En informática, un árbol binario es una estructura de datos de árbol en la que cada nodo tiene como máximo dos hijos, que se denominan hijo izquierdo y hijo derecho. Un árbol binario equilibrado es un árbol en el que las alturas de los dos subárboles de cualquier nodo difieren como máximo en uno. En este desafío, escribiremos un programa de Python para comprobar si un árbol binario está equilibrado.",
      "meta": {
        "title": "Árbol binario | Árbol binario equilibrado | Programación en Python",
        "description": "Aprende cómo escribir un programa de Python para comprobar si un árbol binario está equilibrado. Explora los requisitos y los ejemplos de este desafío de codificación.",
        "keywords": "árbol binario, árbol binario equilibrado, programación en Python, estructuras de datos, desafío de codificación"
      },
      "details": {
        "steps": [
          {
            "title": "Comprobar el equilibrio",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verificar si todas las pruebas han pasado",
                "file": "verify1-1.sh",
                "hint": "Asegúrese de tener el formato de salida correcto."
              }
            ],
            "solutions": ["check_balance.py"]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Arbre binaire équilibré en Python",
      "description": "En informatique, un arbre binaire est une structure de données arborescente dans laquelle chaque nœud a au plus deux enfants, appelés l'enfant gauche et l'enfant droit. Un arbre binaire équilibré est un arbre dans lequel les hauteurs des deux sous-arbres de tout nœud diffèrent d'au plus un. Dans ce défi, nous allons écrire un programme Python pour vérifier si un arbre binaire est équilibré.",
      "meta": {
        "title": "Arbre binaire | Arbre binaire équilibré | Programmation Python",
        "description": "Découvrez comment écrire un programme Python pour vérifier si un arbre binaire est équilibré. Explorez les exigences et les exemples de ce défi de codage.",
        "keywords": "arbre binaire, arbre binaire équilibré, programmation python, structures de données, défi de codage"
      },
      "details": {
        "steps": [
          {
            "title": "Vérifier l'équilibre",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifier si tous les tests sont passés",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir le bon format de sortie."
              }
            ],
            "solutions": ["check_balance.py"]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Gleichgewichtiger Binärbaum in Python",
      "description": "In der Informatik ist ein Binärbaum eine Bäume-Datenstruktur, in der jeder Knoten maximal zwei Kinder hat, die als linker und rechter Kind bezeichnet werden. Ein balancierter Binärbaum ist ein Baum, in dem die Höhen der beiden Teilbäume eines beliebigen Knotens um höchstens eins voneinander abweichen. In dieser Herausforderung werden wir ein Python-Programm schreiben, um zu überprüfen, ob ein Binärbaum balanciert ist.",
      "meta": {
        "title": "Binärbaum | Gleichgewichtiger Binärbaum | Python-Programmierung",
        "description": "Lernen Sie, wie Sie ein Python-Programm schreiben, um zu überprüfen, ob ein Binärbaum balanciert ist. Entdecken Sie die Anforderungen und Beispiele dieser Codierungschallenge.",
        "keywords": "Binärbaum, gleichgewichtiger Binärbaum, Python-Programmierung, Datenstrukturen, Codierungschallenge"
      },
      "details": {
        "steps": [
          {
            "title": "Überprüfe die Balance",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifiziere, ob alle Tests bestanden sind",
                "file": "verify1-1.sh",
                "hint": "Stellen Sie bitte sicher, dass Sie das richtige Ausgabeformat haben."
              }
            ],
            "solutions": ["check_balance.py"]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "Python における平衡二分木",
      "description": "コンピュータサイエンスにおいて、二分木は、各ノードが最大 2 つの子ノードを持つ木構造であり、それぞれ左の子ノードと右の子ノードと呼ばれます。平衡二分木は、任意のノードの 2 つの部分木の高さの差が最大 1 である木です。このチャレンジでは、Python プログラムを書いて二分木が平衡しているかどうかをチェックします。",
      "meta": {
        "title": "二分木 | 平衡二分木 | Python プログラミング",
        "description": "Python プログラムを書いて二分木が平衡しているかどうかをチェックする方法を学びましょう。このコーディングチャレンジの要件と例を探りましょう。",
        "keywords": "二分木，平衡二分木，Python プログラミング，データ構造，コーディングチャレンジ"
      },
      "details": {
        "steps": [
          {
            "title": "バランスをチェックする",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "すべてのテストが合格したことを確認する",
                "file": "verify1-1.sh",
                "hint": "出力形式が正しいことを確認してください。"
              }
            ],
            "solutions": ["check_balance.py"]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Сбалансированное двоичное дерево на Python",
      "description": "В информатике двоичное дерево — это древовидная структура данных, в которой каждый узел имеет не более двух дочерних элементов, называемых левым и правым потомками. Сбалансированное двоичное дерево — это дерево, в котором высоты двух поддеревьев любого узла различаются не более чем на единицу. В этом испытании мы напишем программу на Python для проверки, является ли двоичное дерево сбалансированным.",
      "meta": {
        "title": "Двоичное дерево | Сбалансированное двоичное дерево | Программирование на Python",
        "description": "Изучите, как написать программу на Python для проверки, является ли двоичное дерево сбалансированным. Исследуйте требования и примеры этого кодирования испытания.",
        "keywords": "двоичное дерево, сбалансированное двоичное дерево, программирование на Python, структуры данных, кодирование испытания"
      },
      "details": {
        "steps": [
          {
            "title": "Проверить сбалансированность",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить, пройдены ли все тесты",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что у вас правильный формат вывода."
              }
            ],
            "solutions": ["check_balance.py"]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
