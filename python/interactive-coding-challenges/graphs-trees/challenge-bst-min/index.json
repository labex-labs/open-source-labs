{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Minimal Height Binary Search Tree",
  "description": "In computer science, a binary search tree (BST) is a binary tree data structure in which each node has at most two children, which are referred to as the left child and the right child. A binary search tree is a binary tree where the value of each node is greater than or equal to the values in its left subtree and less than or equal to the values in its right subtree. The height of a binary search tree is the number of edges between the tree's root and its furthest leaf. In this challenge, we will create a binary search tree with minimal height from a sorted array.",
  "meta": {
    "title": "Binary Search Tree | Minimal Height Algorithm",
    "description": "Learn how to create a binary search tree with minimal height from a sorted array in computer science. Optimize your data structure for efficient search and retrieval.",
    "keywords": "binary search tree, minimal height, data structure, algorithm, sorted array, computer science"
  },
  "difficulty": "Beginner",
  "time": 15,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Bst Min",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify if all tests are passed",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have the correct output format.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "algorithm/graphs_trees",
          "algorithm/recursion_dynamic",
          "python/build_in_functions",
          "python/classes_objects",
          "python/conditional_statements",
          "python/constructor",
          "python/default_arguments",
          "python/encapsulation",
          "python/function_definition",
          "python/lists",
          "python/polymorphism",
          "python/raising_exceptions",
          "python/strings",
          "python/tuples",
          "python/type_conversion",
          "python/variables_data_types"
        ],
        "solutions": ["bst_min.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "test_bst_min.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "bst_min.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812"],
  "license": {
    "name": "Apache-2.0",
    "url": "https://github.com/donnemartin/interactive-coding-challenges/blob/master/LICENSE",
    "repo": "https://github.com/donnemartin/interactive-coding-challenges"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "最小高度二叉搜索树",
      "description": "在计算机科学中，二叉搜索树（BST）是一种二叉树数据结构，其中每个节点最多有两个子节点，分别称为左子节点和右子节点。二叉搜索树是一种二叉树，其中每个节点的值大于或等于其左子树中的值，并且小于或等于其右子树中的值。二叉搜索树的高度是树根与其最远叶子之间的边数。在这个挑战中，我们将从一个有序数组创建一个高度最小的二叉搜索树。",
      "meta": {
        "title": "二叉搜索树 | 最小高度算法",
        "description": "学习如何在计算机科学中从有序数组创建高度最小的二叉搜索树。优化您的数据结构以实现高效的搜索和检索。",
        "keywords": "二叉搜索树, 最小高度, 数据结构, 算法, 有序数组, 计算机科学"
      },
      "details": {
        "steps": [
          {
            "title": "最小高度二叉搜索树",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证所有测试是否通过",
                "file": "verify1-1.sh",
                "hint": "请确保你有正确的输出格式。"
              }
            ],
            "solutions": ["bst_min.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
