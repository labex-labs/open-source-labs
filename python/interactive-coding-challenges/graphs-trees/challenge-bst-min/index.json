{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Minimal Height Binary Search Tree",
  "description": "In computer science, a binary search tree (BST) is a binary tree data structure in which each node has at most two children, which are referred to as the left child and the right child. A binary search tree is a binary tree where the value of each node is greater than or equal to the values in its left subtree and less than or equal to the values in its right subtree. The height of a binary search tree is the number of edges between the tree's root and its furthest leaf. In this challenge, we will create a binary search tree with minimal height from a sorted array.",
  "meta": {
    "title": "Binary Search Tree | Minimal Height Algorithm",
    "description": "Learn how to create a binary search tree with minimal height from a sorted array in computer science. Optimize your data structure for efficient search and retrieval.",
    "keywords": "binary search tree, minimal height, data structure, algorithm, sorted array, computer science"
  },
  "difficulty": "Beginner",
  "time": 15,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Bst Min",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify if all tests are passed",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have the correct output format.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "algorithm/graphs_trees",
          "algorithm/recursion_dynamic",
          "python/build_in_functions",
          "python/classes_objects",
          "python/conditional_statements",
          "python/constructor",
          "python/default_arguments",
          "python/encapsulation",
          "python/function_definition",
          "python/lists",
          "python/polymorphism",
          "python/raising_exceptions",
          "python/strings",
          "python/tuples",
          "python/type_conversion",
          "python/variables_data_types"
        ],
        "solutions": ["bst_min.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "test_bst_min.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "bst_min.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812"],
  "license": {
    "name": "Apache-2.0",
    "url": "https://github.com/donnemartin/interactive-coding-challenges/blob/master/LICENSE",
    "repo": "https://github.com/donnemartin/interactive-coding-challenges"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "最小高度二叉搜索树",
      "description": "在计算机科学中，二叉搜索树（BST）是一种二叉树数据结构，其中每个节点最多有两个子节点，分别称为左子节点和右子节点。二叉搜索树是一种二叉树，其中每个节点的值大于或等于其左子树中的值，并且小于或等于其右子树中的值。二叉搜索树的高度是树根与其最远叶子之间的边数。在这个挑战中，我们将从一个有序数组创建一个高度最小的二叉搜索树。",
      "meta": {
        "title": "二叉搜索树 | 最小高度算法",
        "description": "学习如何在计算机科学中从有序数组创建高度最小的二叉搜索树。优化您的数据结构以实现高效的搜索和检索。",
        "keywords": "二叉搜索树, 最小高度, 数据结构, 算法, 有序数组, 计算机科学"
      },
      "details": {
        "steps": [
          {
            "title": "最小高度二叉搜索树",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证所有测试是否通过",
                "file": "verify1-1.sh",
                "hint": "请确保你有正确的输出格式。"
              }
            ],
            "solutions": ["bst_min.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Árbol de Búsqueda Binario de Altura Mínima",
      "description": "En informática, un árbol de búsqueda binario (BST, por sus siglas en inglés) es una estructura de datos de árbol binario en la que cada nodo tiene como máximo dos hijos, a los que se les denomina hijo izquierdo y hijo derecho. Un árbol de búsqueda binario es un árbol binario donde el valor de cada nodo es mayor o igual que los valores en su subárbol izquierdo y menor o igual que los valores en su subárbol derecho. La altura de un árbol de búsqueda binario es el número de aristas entre la raíz del árbol y su hoja más alejada. En este desafío, crearemos un árbol de búsqueda binario con la altura mínima a partir de una matriz ordenada.",
      "meta": {
        "title": "Árbol de Búsqueda Binario | Algoritmo de Altura Mínima",
        "description": "Aprende cómo crear un árbol de búsqueda binario con la altura mínima a partir de una matriz ordenada en informática. Optimiza tu estructura de datos para una búsqueda y recuperación eficientes.",
        "keywords": "árbol de búsqueda binario, altura mínima, estructura de datos, algoritmo, matriz ordenada, informática"
      },
      "details": {
        "steps": [
          {
            "title": "Bst Min",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verifica si todas las pruebas han pasado",
                "file": "verify1-1.sh",
                "hint": "Asegúrate de tener el formato de salida correcto."
              }
            ],
            "solutions": ["bst_min.py"]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Arbre de recherche binaire de hauteur minimale",
      "description": "En informatique, un arbre de recherche binaire (ARB) est une structure de données d'arbre binaire dans laquelle chaque nœud a au plus deux enfants, appelés l'enfant gauche et l'enfant droit. Un arbre de recherche binaire est un arbre binaire où la valeur de chaque nœud est supérieure ou égale aux valeurs de son sous-arbre gauche et inférieure ou égale aux valeurs de son sous-arbre droit. La hauteur d'un arbre de recherche binaire est le nombre d'arêtes entre la racine de l'arbre et sa feuille la plus éloignée. Dans ce défi, nous allons créer un arbre de recherche binaire de hauteur minimale à partir d'un tableau trié.",
      "meta": {
        "title": "Arbre de recherche binaire | Algorithme de hauteur minimale",
        "description": "Apprenez à créer un arbre de recherche binaire de hauteur minimale à partir d'un tableau trié en informatique. Optimisez votre structure de données pour une recherche et une récupération efficaces.",
        "keywords": "arbre de recherche binaire, hauteur minimale, structure de données, algorithme, tableau trié, informatique"
      },
      "details": {
        "steps": [
          {
            "title": "Bst Min",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez si tous les tests ont réussi",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir le bon format de sortie."
              }
            ],
            "solutions": ["bst_min.py"]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Binärer Suchbaum mit minimaler Höhe",
      "description": "In der Informatik ist ein binärer Suchbaum (englisch: binary search tree, BST) eine binäre Baumdatenstruktur, bei der jeder Knoten maximal zwei Kinder hat, die als linker und rechter Kind bezeichnet werden. Ein binärer Suchbaum ist ein binärer Baum, bei dem der Wert jedes Knotens größer oder gleich den Werten in seinem linken Teilbaum und kleiner oder gleich den Werten in seinem rechten Teilbaum ist. Die Höhe eines binären Suchbaums ist die Anzahl der Kanten zwischen der Wurzel des Baums und seinem weitesten Blatt. In dieser Herausforderung werden wir einen binären Suchbaum mit minimaler Höhe aus einem sortierten Array erstellen.",
      "meta": {
        "title": "Binärer Suchbaum | Algorithmus mit minimaler Höhe",
        "description": "Lernen Sie, wie man in der Informatik einen binären Suchbaum mit minimaler Höhe aus einem sortierten Array erstellt. Optimieren Sie Ihre Datenstruktur für effizientes Suchen und Abrufen.",
        "keywords": "binärer Suchbaum, minimale Höhe, Datenstruktur, Algorithmus, sortiertes Array, Informatik"
      },
      "details": {
        "steps": [
          {
            "title": "Bst Min",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren, ob alle Tests bestanden sind",
                "file": "verify1-1.sh",
                "hint": "Stellen Sie bitte sicher, dass Sie das richtige Ausgabeformat haben."
              }
            ],
            "solutions": ["bst_min.py"]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "最小高さの二分探索木",
      "description": "コンピュータサイエンスにおいて、二分探索木（BST：Binary Search Tree）は、各ノードが最大2つの子を持つ二分木データ構造であり、それぞれ左の子と右の子と呼ばれます。二分探索木は、各ノードの値がその左部分木の値より大きく等しく、かつその右部分木の値より小さく等しい二分木です。二分探索木の高さは、木の根と最も遠い葉の間の辺の数です。このチャレンジでは、ソート済み配列から最小の高さを持つ二分探索木を作成します。",
      "meta": {
        "title": "二分探索木 | 最小高さアルゴリズム",
        "description": "コンピュータサイエンスにおいて、ソート済み配列から最小の高さを持つ二分探索木を作成する方法を学びましょう。効率的な検索と取得のためにデータ構造を最適化しましょう。",
        "keywords": "二分探索木, 最小高さ, データ構造, アルゴリズム, ソート済み配列, コンピュータサイエンス"
      },
      "details": {
        "steps": [
          {
            "title": "Bst Min",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "すべてのテストが通過したかどうかを確認する",
                "file": "verify1-1.sh",
                "hint": "出力形式が正しいことを確認してください。"
              }
            ],
            "solutions": ["bst_min.py"]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Двоичное дерево поиска с минимальной высотой",
      "description": "В информатике двоичное дерево поиска (BST) — это двоичное дерево данных, в котором каждый узел имеет не более двух дочерних элементов, называемых левым и правым дочерними элементами. Двоичное дерево поиска — это двоичное дерево, в котором значение каждого узла больше или равно значениям в его левом поддереве и меньше или равно значениям в его правом поддереве. Высота двоичного дерева поиска — это количество ребер между корнем дерева и его самой удалённой листовой вершиной. В этом испытании мы создадим двоичное дерево поиска с минимальной высотой из отсортированного массива.",
      "meta": {
        "title": "Двоичное дерево поиска | Алгоритм с минимальной высотой",
        "description": "Изучите, как создать двоичное дерево поиска с минимальной высотой из отсортированного массива в информатике. Оптимизируйте свою структуру данных для эффективного поиска и извлечения.",
        "keywords": "двоичное дерево поиска, минимальная высота, структура данных, алгоритм, отсортированный массив, информатика"
      },
      "details": {
        "steps": [
          {
            "title": "Минимальное значение в BST",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить, пройдены ли все тесты",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что у вас правильный формат вывода."
              }
            ],
            "solutions": ["bst_min.py"]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
