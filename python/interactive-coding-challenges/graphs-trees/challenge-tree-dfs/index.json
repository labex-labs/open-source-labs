{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Depth-First Traversal of Binary Trees",
  "description": "Tree traversal is a common operation in computer science and is used to visit each node in a tree exactly once. Depth-first search (DFS) is a popular algorithm for traversing trees and graphs. In this challenge, we will implement DFS on a binary tree.",
  "meta": {
    "title": "Tree Traversal | Depth-First Search | Binary Tree",
    "description": "Learn how to implement depth-first traversals (in-order, pre-order, post-order) on a binary tree using the Depth-First Search (DFS) algorithm.",
    "keywords": "tree traversal, depth-first search, binary tree, in-order, pre-order, post-order"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Tree Dfs",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify if all tests are passed",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have the correct output format.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [],
        "solutions": ["dfs.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "test_dfs.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "dfs.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812"],
  "license": {
    "name": "Apache-2.0",
    "url": "https://github.com/donnemartin/interactive-coding-challenges/blob/master/LICENSE",
    "repo": "https://github.com/donnemartin/interactive-coding-challenges"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "二叉树的深度优先遍历",
      "description": "树遍历是计算机科学中的一项常见操作，用于恰好访问树中的每个节点一次。深度优先搜索（DFS）是一种用于遍历树和图的流行算法。在这个挑战中，我们将在二叉树上实现 DFS。",
      "meta": {
        "title": "树遍历 | 深度优先搜索 | 二叉树",
        "description": "学习如何使用深度优先搜索（DFS）算法在二叉树上实现深度优先遍历（中序、前序、后序）。",
        "keywords": "树遍历，深度优先搜索，二叉树，中序，前序，后序"
      },
      "details": {
        "steps": [
          {
            "title": "树的深度优先搜索",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证所有测试是否通过",
                "file": "verify1-1.sh",
                "hint": "请确保你有正确的输出格式。"
              }
            ],
            "solutions": ["dfs.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Recorrido en profundidad de árboles binarios",
      "description": "El recorrido de árboles es una operación común en la ciencia de la computación y se utiliza para visitar cada nodo de un árbol exactamente una vez. La búsqueda en profundidad (DFS, por sus siglas en inglés) es un algoritmo popular para recorrer árboles y grafos. En este desafío, implementaremos la DFS en un árbol binario.",
      "meta": {
        "title": "Recorrido de árboles | Búsqueda en profundidad | Árbol binario",
        "description": "Aprende cómo implementar recorridos en profundidad (en orden, pre-orden, post-orden) en un árbol binario utilizando el algoritmo de búsqueda en profundidad (DFS).",
        "keywords": "recorrido de árboles, búsqueda en profundidad, árbol binario, en orden, pre-orden, post-orden"
      },
      "details": {
        "steps": [
          {
            "title": "Búsqueda en profundidad en árboles",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verifica si todas las pruebas han pasado",
                "file": "verify1-1.sh",
                "hint": "Asegúrate de tener el formato de salida correcto."
              }
            ],
            "solutions": ["dfs.py"]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Parcours en profondeur des arbres binaires",
      "description": "La traversée d'arbre est une opération courante en informatique et est utilisée pour visiter chaque nœud d'un arbre exactement une fois. La recherche en profondeur (DFS) est un algorithme populaire pour parcourir des arbres et des graphes. Dans ce défi, nous allons implémenter la DFS sur un arbre binaire.",
      "meta": {
        "title": "Traversée d'arbre | Recherche en profondeur | Arbre binaire",
        "description": "Apprenez à implémenter des parcours en profondeur (en ordre, pré-ordre, post-ordre) sur un arbre binaire à l'aide de l'algorithme de recherche en profondeur (DFS).",
        "keywords": "traversée d'arbre, recherche en profondeur, arbre binaire, en ordre, pré-ordre, post-ordre"
      },
      "details": {
        "steps": [
          {
            "title": "Parcours DFS d'un arbre",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez si tous les tests sont passés",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir le bon format de sortie."
              }
            ],
            "solutions": ["dfs.py"]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Tiefendurchlauf von binären Bäumen",
      "description": "Das Baumdurchlaufen ist eine häufige Operation in der Informatik und wird verwendet, um jeden Knoten in einem Baum genau einmal zu besuchen. Die Tiefensuche (Depth-First Search, DFS) ist ein beliebiger Algorithmus zum Durchlaufen von Bäumen und Graphen. In dieser Herausforderung werden wir die Tiefensuche auf einem binären Baum implementieren.",
      "meta": {
        "title": "Baumdurchlauf | Tiefensuche | Binärer Baum",
        "description": "Lernen Sie, wie man Tiefendurchläufe (in-order, pre-order, post-order) auf einem binären Baum mit dem Algorithmus Tiefensuche (Depth-First Search, DFS) implementiert.",
        "keywords": "Baumdurchlauf, Tiefensuche, Binärer Baum, in-order, pre-order, post-order"
      },
      "details": {
        "steps": [
          {
            "title": "Baum Tiefensuche",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren Sie, ob alle Tests bestanden sind",
                "file": "verify1-1.sh",
                "hint": "Bitte stellen Sie sicher, dass Sie das richtige Ausgabeformat haben."
              }
            ],
            "solutions": ["dfs.py"]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "2 分木の深さ優先探索",
      "description": "木の探索は、コンピュータサイエンスにおける一般的な操作であり、木の各ノードを正確に 1 回だけ訪問するために使用されます。深さ優先探索（DFS）は、木とグラフを探索するための人気のあるアルゴリズムです。このチャレンジでは、2 分木に対して DFS を実装します。",
      "meta": {
        "title": "木の探索 | 深さ優先探索 | 2 分木",
        "description": "深さ優先探索（DFS）アルゴリズムを使用して、2 分木に対して深さ優先探索（中順、前順、後順）を実装する方法を学びましょう。",
        "keywords": "木の探索，深さ優先探索，2 分木，中順，前順，後順"
      },
      "details": {
        "steps": [
          {
            "title": "木の DFS",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "すべてのテストが合格したかどうかを確認する",
                "file": "verify1-1.sh",
                "hint": "出力形式が正しいことを確認してください。"
              }
            ],
            "solutions": ["dfs.py"]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Обход двоичного дерева в глубину",
      "description": "Просмотр дерева - это распространенная операция в информатике и используется для посещения каждого узла в дереве ровно один раз. Обход в глубину (Depth-First Search, DFS) - популярный алгоритм для обхода деревьев и графов. В этом испытании мы реализуем DFS для двоичного дерева.",
      "meta": {
        "title": "Просмотр дерева | Обход в глубину | Двоичное дерево",
        "description": "Изучите, как реализовать обход в глубину (in-order, pre-order, post-order) для двоичного дерева с использованием алгоритма Depth-First Search (DFS).",
        "keywords": "просмотр дерева, обход в глубину, двоичное дерево, in-order, pre-order, post-order"
      },
      "details": {
        "steps": [
          {
            "title": "Обход дерева в глубину",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить, пройдены ли все тесты",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что у вас правильный формат вывода."
              }
            ],
            "solutions": ["dfs.py"]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
