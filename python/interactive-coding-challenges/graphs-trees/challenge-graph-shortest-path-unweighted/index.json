{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Graph Shortest Path Unweighted",
  "description": "In graph theory, the shortest path problem is the problem of finding a path between two vertices (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized. The problem of finding the shortest path between two nodes in an unweighted graph can be solved using a breadth-first search algorithm.",
  "meta": {
    "title": "Graph Theory | Shortest Path | Unweighted Graph",
    "description": "Explore the shortest path problem in graph theory, learn how to solve it in unweighted graphs using a breadth-first search algorithm.",
    "keywords": "graph theory, shortest path, unweighted graph, breadth-first search, algorithm"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Graph Shortest Path Unweighted",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify if all tests are passed",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have the correct output format.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "algorithm/graphs_trees",
          "python/build_in_functions",
          "python/classes_objects",
          "python/comments",
          "python/conditional_statements",
          "python/constructor",
          "python/default_arguments",
          "python/dictionaries",
          "python/encapsulation",
          "python/for_loops",
          "python/function_definition",
          "python/importing_modules",
          "python/lists",
          "python/polymorphism",
          "python/raising_exceptions",
          "python/standard_libraries",
          "python/strings",
          "python/tuples",
          "python/type_conversion",
          "python/using_packages",
          "python/variables_data_types",
          "python/while_loops"
        ],
        "solutions": ["shortest_path.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "test_shortest_path.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "shortest_path.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812"],
  "license": {
    "name": "Apache-2.0",
    "url": "https://github.com/donnemartin/interactive-coding-challenges/blob/master/LICENSE",
    "repo": "https://github.com/donnemartin/interactive-coding-challenges"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "无权图的图最短路径",
      "description": "在图论中，最短路径问题是指在一个图中找到两个顶点（或节点）之间的一条路径，使得其组成边的权重之和最小。在无权图中找到两个节点之间的最短路径问题，可以使用广度优先搜索算法来解决。",
      "meta": {
        "title": "图论 | 最短路径 | 无权图",
        "description": "探索图论中的最短路径问题，了解如何使用广度优先搜索算法在无权图中解决该问题。",
        "keywords": "图论，最短路径，无权图，广度优先搜索，算法"
      },
      "details": {
        "steps": [
          {
            "title": "无权图的图最短路径",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证所有测试是否通过",
                "file": "verify1-1.sh",
                "hint": "请确保你有正确的输出格式。"
              }
            ],
            "solutions": ["shortest_path.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Camino más corto en un grafo no ponderado",
      "description": "En teoría de grafos, el problema del camino más corto es el problema de encontrar un camino entre dos vértices (o nodos) en un grafo de modo que la suma de los pesos de sus aristas componentes sea minimizada. El problema de encontrar el camino más corto entre dos nodos en un grafo no ponderado se puede resolver utilizando un algoritmo de búsqueda en anchura.",
      "meta": {
        "title": "Teoría de grafos | Camino más corto | Grafo no ponderado",
        "description": "Explora el problema del camino más corto en teoría de grafos, aprende cómo resolverlo en grafos no ponderados utilizando un algoritmo de búsqueda en anchura.",
        "keywords": "teoría de grafos, camino más corto, grafo no ponderado, búsqueda en anchura, algoritmo"
      },
      "details": {
        "steps": [
          {
            "title": "Camino más corto en un grafo no ponderado",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verifica si todas las pruebas han pasado",
                "file": "verify1-1.sh",
                "hint": "Asegúrate de tener el formato de salida correcto."
              }
            ],
            "solutions": ["shortest_path.py"]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Plus court chemin dans un graphe non pondéré",
      "description": "En théorie des graphes, le problème du plus court chemin consiste à trouver un chemin entre deux sommets (ou nœuds) dans un graphe de manière à minimiser la somme des poids de ses arêtes constituantes. Le problème de trouver le plus court chemin entre deux nœuds dans un graphe non pondéré peut être résolu à l'aide d'un algorithme de recherche en largeur.",
      "meta": {
        "title": "Théorie des graphes | Plus court chemin | Graphe non pondéré",
        "description": "Explorez le problème du plus court chemin en théorie des graphes, apprenez à le résoudre dans les graphes non pondérés à l'aide d'un algorithme de recherche en largeur.",
        "keywords": "théorie des graphes, plus court chemin, graphe non pondéré, recherche en largeur, algorithme"
      },
      "details": {
        "steps": [
          {
            "title": "Plus court chemin dans un graphe non pondéré",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez si tous les tests ont réussi",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir le bon format de sortie."
              }
            ],
            "solutions": ["shortest_path.py"]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Ungewichteter Graphkürzester Pfad",
      "description": "In der Graphentheorie ist das kürzeste-Pfad-Problem das Problem, einen Pfad zwischen zwei Knotenpunkten (oder Knoten) in einem Graphen zu finden, sodass die Summe der Gewichte seiner zusammengesetzten Kanten minimiert ist. Das Problem, den kürzesten Pfad zwischen zwei Knoten in einem ungewichteten Graphen zu finden, kann mit einem Breitensuche-Algorithmus gelöst werden.",
      "meta": {
        "title": "Graphentheorie | Kürzester Pfad | Ungewichteter Graph",
        "description": "Erkunde das kürzeste-Pfad-Problem in der Graphentheorie, lerne, wie es in ungewichteten Graphen mit einem Breitensuche-Algorithmus gelöst wird.",
        "keywords": "Graphentheorie, kürzester Pfad, ungewichteter Graph, Breitensuche, Algorithmus"
      },
      "details": {
        "steps": [
          {
            "title": "Ungewichteter Graphkürzester Pfad",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Überprüfen, ob alle Tests bestanden sind",
                "file": "verify1-1.sh",
                "hint": "Stellen Sie sicher, dass Sie das richtige Ausgabeformat haben."
              }
            ],
            "solutions": ["shortest_path.py"]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "無重みグラフの最短経路",
      "description": "グラフ理論において、最短経路問題とは、グラフ内の 2 つの頂点（またはノード）間の経路を見つける問題であり、その構成要素である辺の重みの合計が最小になるようにすることが求められます。無重みグラフ内の 2 つのノード間の最短経路を見つける問題は、幅優先探索アルゴリズムを使用して解くことができます。",
      "meta": {
        "title": "グラフ理論 | 最短経路 | 無重みグラフ",
        "description": "グラフ理論における最短経路問題を探り、幅優先探索アルゴリズムを使って無重みグラフでそれを解く方法を学びましょう。",
        "keywords": "グラフ理論，最短経路，無重みグラフ，幅優先探索，アルゴリズム"
      },
      "details": {
        "steps": [
          {
            "title": "無重みグラフの最短経路",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "すべてのテストが通過したかどうかを確認する",
                "file": "verify1-1.sh",
                "hint": "出力形式が正しいことを確認してください。"
              }
            ],
            "solutions": ["shortest_path.py"]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Кратчайший путь в невзвешенном графе",
      "description": "В теории графов задача нахождения кратчайшего пути заключается в поиске пути между двумя вершинами (или узлами) в графе таким образом, чтобы сумма весов его составляющих ребер была минимальной. Задачу нахождения кратчайшего пути между двумя узлами в невзвешенном графе можно решить с использованием алгоритма поиска в ширину.",
      "meta": {
        "title": "Теория графов | Кратчайший путь | Невзвешенный граф",
        "description": "Изучите задачу нахождения кратчайшего пути в теории графов, узнайте, как решать ее в невзвешенных графах с использованием алгоритма поиска в ширину.",
        "keywords": "теория графов, кратчайший путь, невзвешенный граф, поиск в ширину, алгоритм"
      },
      "details": {
        "steps": [
          {
            "title": "Кратчайший путь в невзвешенном графе",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить, пройдены ли все тесты",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что у вас правильный формат вывода."
              }
            ],
            "solutions": ["shortest_path.py"]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
