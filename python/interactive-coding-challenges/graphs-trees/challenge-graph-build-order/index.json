{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Graph Build Order",
  "description": "In software development, it is common to have projects that depend on other projects. In order to build these projects, we need to determine the order in which they should be built. This is known as the build order problem.",
  "meta": {
    "title": "Mastering Build Order in Software Development",
    "description": "Discover the essential techniques for determining the optimal build order for your software projects and dependencies.",
    "keywords": "python playground, algorithm playground, software development, python, project dependencies, algorithm, graph theory, topological sorting, build order"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Graph Build Order",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify if all tests are passed",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have the correct output format.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "algorithm/graphs_trees",
          "python/build_in_functions",
          "python/classes_objects",
          "python/comments",
          "python/conditional_statements",
          "python/constructor",
          "python/data_collections",
          "python/default_arguments",
          "python/encapsulation",
          "python/for_loops",
          "python/function_definition",
          "python/importing_modules",
          "python/lists",
          "python/polymorphism",
          "python/raising_exceptions",
          "python/standard_libraries",
          "python/strings",
          "python/tuples",
          "python/type_conversion",
          "python/using_packages",
          "python/variables_data_types",
          "python/while_loops",
          "python/with_statement"
        ],
        "solutions": ["build_order.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "test_build_order.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "build_order.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812"],
  "license": {
    "name": "Apache-2.0",
    "url": "https://github.com/donnemartin/interactive-coding-challenges/blob/master/LICENSE",
    "repo": "https://github.com/donnemartin/interactive-coding-challenges"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "图的构建顺序",
      "description": "在软件开发中，依赖其他项目的项目很常见。为了构建这些项目，我们需要确定它们的构建顺序。这就是所谓的构建顺序问题。",
      "meta": {
        "title": "掌握软件开发中的构建顺序",
        "description": "探索确定软件项目及其依赖项的最佳构建顺序的基本技术。",
        "keywords": "Python 实践场，算法实践场，软件开发，Python, 项目依赖项，算法，图论，拓扑排序，构建顺序"
      },
      "details": {
        "steps": [
          {
            "title": "图的构建顺序",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证所有测试是否通过",
                "file": "verify1-1.sh",
                "hint": "请确保你有正确的输出格式。"
              }
            ],
            "solutions": ["build_order.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Orden de compilación de gráficas",
      "description": "En el desarrollo de software, es común tener proyectos que dependen de otros proyectos. Para construir estos proyectos, necesitamos determinar el orden en el que deben construirse. Esto se conoce como el problema del orden de compilación.",
      "meta": {
        "title": "Dominando el orden de compilación en el desarrollo de software",
        "description": "Descubre las técnicas esenciales para determinar el orden de compilación óptimo para tus proyectos de software y dependencias.",
        "keywords": "python playground, algorithm playground, desarrollo de software, python, dependencias de proyectos, algoritmo, teoría de grafos, clasificación topológica, orden de compilación"
      },
      "details": {
        "steps": [
          {
            "title": "Orden de compilación de gráficas",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verifica si todas las pruebas han pasado",
                "file": "verify1-1.sh",
                "hint": "Asegúrate de tener el formato de salida correcto."
              }
            ],
            "solutions": ["build_order.py"]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Ordre de construction du graphe",
      "description": "En développement logiciel, il est courant d'avoir des projets qui dépendent d'autres projets. Pour construire ces projets, nous devons déterminer l'ordre dans lequel ils doivent être construits. Ceci est connu sous le nom de problème d'ordre de construction.",
      "meta": {
        "title": "Maîtriser l'ordre de construction en développement logiciel",
        "description": "Découvrez les techniques essentielles pour déterminer l'ordre de construction optimal pour vos projets logiciels et leurs dépendances.",
        "keywords": "python playground, algorithm playground, développement logiciel, python, dépendances de projet, algorithme, théorie des graphes, tri topologique, ordre de construction"
      },
      "details": {
        "steps": [
          {
            "title": "Ordre de construction du graphe",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez si tous les tests ont réussi",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir le bon format de sortie."
              }
            ],
            "solutions": ["build_order.py"]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Graph Build Order",
      "description": "Beim Softwareentwicklung ist es üblich, Projekte zu haben, die von anderen Projekten abhängen. Um diese Projekte zu bauen, müssen wir die Reihenfolge bestimmen, in der sie gebaut werden sollen. Dies wird als Build-Order-Problem bezeichnet.",
      "meta": {
        "title": "Meisterung der Build-Order in der Softwareentwicklung",
        "description": "Entdecken Sie die essentiellen Techniken zum Bestimmen der optimalen Build-Order für Ihre Softwareprojekte und Abhängigkeiten.",
        "keywords": "python playground, algorithm playground, software development, python, project dependencies, algorithm, graph theory, topological sorting, build order"
      },
      "details": {
        "steps": [
          {
            "title": "Graph Build Order",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren, ob alle Tests bestanden wurden",
                "file": "verify1-1.sh",
                "hint": "Stellen Sie sicher, dass Sie das richtige Ausgabeformat haben."
              }
            ],
            "solutions": ["build_order.py"]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "グラフのビルド順序",
      "description": "ソフトウェア開発において、他のプロジェクトに依存するプロジェクトがあるのは一般的です。これらのプロジェクトをビルドするには、それらをビルドする順序を決定する必要があります。これは、ビルド順序問題として知られています。",
      "meta": {
        "title": "ソフトウェア開発におけるビルド順序のマスター",
        "description": "ソフトウェア プロジェクトとその依存関係に対する最適なビルド順序を決定するための必須技術を見つけましょう。",
        "keywords": "python プレイグラウンド，アルゴリズム プレイグラウンド，ソフトウェア開発，python, プロジェクト依存関係，アルゴリズム，グラフ理論，トポロジカルソート，ビルド順序"
      },
      "details": {
        "steps": [
          {
            "title": "グラフのビルド順序",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "すべてのテストが通過したか確認する",
                "file": "verify1-1.sh",
                "hint": "出力形式が正しいことを確認してください。"
              }
            ],
            "solutions": ["build_order.py"]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Построение графа в порядке",
      "description": "В разработке программного обеспечения часто возникают проекты, зависящие от других проектов. Чтобы собрать эти проекты, необходимо определить порядок их сборки. Это называется задачей порядка сборки.",
      "meta": {
        "title": "Мастерство в порядке сборки в разработке программного обеспечения",
        "description": "Откройте важные методы для определения оптимального порядка сборки для ваших программных проектов и зависимостей.",
        "keywords": "python playground, algorithm playground, software development, python, project dependencies, algorithm, graph theory, topological sorting, build order"
      },
      "details": {
        "steps": [
          {
            "title": "Построение графа в порядке",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить, пройдены ли все тесты",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что у вас правильный формат вывода."
              }
            ],
            "solutions": ["build_order.py"]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
