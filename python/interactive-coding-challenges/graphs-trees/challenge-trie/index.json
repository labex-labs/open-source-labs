{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Trie Data Structure for String Storage",
  "description": "A trie, also known as a prefix tree, is a tree-like data structure used to store and retrieve a set of strings. It is commonly used in search engines, spell checkers, and IP routers. In a trie, each node represents a character in a string, and the path from the root to a leaf node represents a complete string.",
  "meta": {
    "title": "Trie Data Structure | Prefix Tree | Search Engine Optimization",
    "description": "Explore the trie data structure, a powerful tree-like data structure used in search engines, spell checkers, and IP routers. Learn how to implement find, insert, remove, and list_words methods.",
    "keywords": "trie, prefix tree, data structure, search engine, spell checker, IP router, find, insert, remove, list_words"
  },
  "difficulty": "Beginner",
  "time": 5,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Trie",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify if all tests are passed",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have the correct output format.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [],
        "solutions": ["trie.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "test_trie.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "trie.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812"],
  "license": {
    "name": "Apache-2.0",
    "url": "https://github.com/donnemartin/interactive-coding-challenges/blob/master/LICENSE",
    "repo": "https://github.com/donnemartin/interactive-coding-challenges"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "用于字符串存储的字典树数据结构",
      "description": "字典树（Trie），也称为前缀树，是一种树形数据结构，用于存储和检索一组字符串。它常用于搜索引擎、拼写检查器和 IP 路由器中。在字典树中，每个节点代表字符串中的一个字符，从根节点到叶节点的路径代表一个完整的字符串。",
      "meta": {
        "title": "字典树数据结构 | 前缀树 | 搜索引擎优化",
        "description": "探索字典树数据结构，这是一种用于搜索引擎、拼写检查器和 IP 路由器的强大树形数据结构。了解如何实现查找、插入、删除和列出单词的方法。",
        "keywords": "字典树，前缀树，数据结构，搜索引擎，拼写检查器，IP 路由器，查找，插入，删除，列出单词"
      },
      "details": {
        "steps": [
          {
            "title": "字典树（Trie）",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证所有测试是否通过",
                "file": "verify1-1.sh",
                "hint": "请确保你有正确的输出格式。"
              }
            ],
            "solutions": ["trie.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    },
    {
      "lang": "es",
      "title": "Estructura de datos Trie para el almacenamiento de cadenas",
      "description": "Un trie, también conocido como árbol de prefijos, es una estructura de datos en forma de árbol que se utiliza para almacenar y recuperar un conjunto de cadenas. Se utiliza comúnmente en motores de búsqueda, verificadores ortográficos y routers IP. En un trie, cada nodo representa un carácter en una cadena, y el camino desde la raíz hasta un nodo hoja representa una cadena completa.",
      "meta": {
        "title": "Estructura de datos Trie | Árbol de prefijos | Optimización para motores de búsqueda",
        "description": "Explora la estructura de datos trie, una potente estructura de datos en forma de árbol utilizada en motores de búsqueda, verificadores ortográficos y routers IP. Aprende cómo implementar los métodos find, insert, remove y list_words.",
        "keywords": "trie, árbol de prefijos, estructura de datos, motor de búsqueda, verificador ortográfico, router IP, find, insert, remove, list_words"
      },
      "details": {
        "steps": [
          {
            "title": "Trie",
            "text": "es/step1.md",
            "verify": [
              {
                "name": "Verifica si todas las pruebas han pasado",
                "file": "verify1-1.sh",
                "hint": "Asegúrate de tener el formato de salida correcto."
              }
            ],
            "solutions": ["trie.py"]
          }
        ],
        "intro": {
          "text": "es/intro.md",
          "title": "Introducción"
        },
        "finish": {
          "text": "es/finish.md",
          "title": "Resumen"
        }
      }
    },
    {
      "lang": "fr",
      "title": "Structure de données Trie pour le stockage de chaînes",
      "description": "Un trie, également connu sous le nom d'arbre prédécesseur, est une structure de données en forme d'arbre utilisée pour stocker et récupérer un ensemble de chaînes de caractères. Il est couramment utilisé dans les moteurs de recherche, les correcteurs orthographiques et les routeurs IP. Dans un trie, chaque nœud représente un caractère dans une chaîne, et le chemin depuis la racine jusqu'à un nœud feuille représente une chaîne complète.",
      "meta": {
        "title": "Structure de données Trie | Arbre prédécesseur | Optimisation du moteur de recherche",
        "description": "Explorez la structure de données trie, une puissante structure de données en forme d'arbre utilisée dans les moteurs de recherche, les correcteurs orthographiques et les routeurs IP. Apprenez à implémenter les méthodes find, insert, remove et list_words.",
        "keywords": "trie, arbre prédécesseur, structure de données, moteur de recherche, correcteur orthographique, routeur IP, find, insert, remove, list_words"
      },
      "details": {
        "steps": [
          {
            "title": "Trie",
            "text": "fr/step1.md",
            "verify": [
              {
                "name": "Vérifiez si tous les tests sont passés",
                "file": "verify1-1.sh",
                "hint": "Veuillez vous assurer d'avoir le bon format de sortie."
              }
            ],
            "solutions": ["trie.py"]
          }
        ],
        "intro": {
          "text": "fr/intro.md",
          "title": "Introduction"
        },
        "finish": {
          "text": "fr/finish.md",
          "title": "Résumé"
        }
      }
    },
    {
      "lang": "de",
      "title": "Trie-Datenstruktur für die Speicherung von Zeichenketten",
      "description": "Ein Trie, auch als Präfixbaum bekannt, ist eine baumartige Datenstruktur, die verwendet wird, um eine Menge von Zeichenketten zu speichern und abzurufen. Es wird häufig in Suchmaschinen, Rechtschreibprüfern und IP-Routern verwendet. In einem Trie repräsentiert jeder Knoten ein Zeichen in einer Zeichenkette, und der Pfad vom Stamm zu einem Blattknoten repräsentiert eine vollständige Zeichenkette.",
      "meta": {
        "title": "Trie-Datenstruktur | Präfixbaum | Suchmaschinenoptimierung",
        "description": "Erkunden Sie die Trie-Datenstruktur, eine leistungsstarke baumartige Datenstruktur, die in Suchmaschinen, Rechtschreibprüfern und IP-Routern verwendet wird. Lernen Sie, wie Sie die Methoden find, insert, remove und list_words implementieren.",
        "keywords": "Trie, Präfixbaum, Datenstruktur, Suchmaschine, Rechtschreibprüfer, IP-Router, find, insert, remove, list_words"
      },
      "details": {
        "steps": [
          {
            "title": "Trie",
            "text": "de/step1.md",
            "verify": [
              {
                "name": "Verifizieren, ob alle Tests bestanden sind",
                "file": "verify1-1.sh",
                "hint": "Stellen Sie bitte sicher, dass Sie das richtige Ausgabeformat haben."
              }
            ],
            "solutions": ["trie.py"]
          }
        ],
        "intro": {
          "text": "de/intro.md",
          "title": "Einführung"
        },
        "finish": {
          "text": "de/finish.md",
          "title": "Zusammenfassung"
        }
      }
    },
    {
      "lang": "ja",
      "title": "文字列格納用のトライ木データ構造",
      "description": "トライ木（trie、プレフィックスツリーとも呼ばれる）は、文字列を格納したり検索したりするために使用される木構造のデータ構造です。検索エンジン、スペルチェッカー、IP ルータなどで一般的に使用されます。トライ木では、各ノードは文字列の 1 文字を表し、根から葉ノードまでのパスが完全な文字列を表します。",
      "meta": {
        "title": "トライ木データ構造 | プレフィックスツリー | サーチエンジン最適化",
        "description": "検索エンジン、スペルチェッカー、IP ルータで使用される強力な木構造のデータ構造であるトライ木データ構造をご紹介します。find、insert、remove、および list_words メソッドの実装方法を学びましょう。",
        "keywords": "トライ木，プレフィックスツリー, データ構造，検索エンジン，スペルチェッカー, IP ルータ，find, insert, remove, list_words"
      },
      "details": {
        "steps": [
          {
            "title": "トライ木",
            "text": "ja/step1.md",
            "verify": [
              {
                "name": "すべてのテストが合格したかどうかを確認する",
                "file": "verify1-1.sh",
                "hint": "出力形式が正しいことを確認してください。"
              }
            ],
            "solutions": ["trie.py"]
          }
        ],
        "intro": {
          "text": "ja/intro.md",
          "title": "はじめに"
        },
        "finish": {
          "text": "ja/finish.md",
          "title": "まとめ"
        }
      }
    },
    {
      "lang": "ru",
      "title": "Дерево префиксов для хранения строк",
      "description": "Trie, также известная как префиксное дерево, — это древовидная структура данных, используемая для хранения и извлечения набора строк. Она широко используется в поисковых системах, проверяющих орфографию, и IP-роутерах. В trie каждый узел представляет собой символ в строке, а путь от корня до листового узла представляет собой полную строку.",
      "meta": {
        "title": "Дерево префиксов | Структура данных | Оптимизация поисковых систем",
        "description": "Изучите структуру данных trie, мощную древовидную структуру, используемую в поисковых системах, проверяющих орфографию, и IP-роутерах. Найдите, как реализовать методы find, insert, remove и list_words.",
        "keywords": "trie, префиксное дерево, структура данных, поисковая система, проверка орфографии, IP-роутер, find, insert, remove, list_words"
      },
      "details": {
        "steps": [
          {
            "title": "Trie",
            "text": "ru/step1.md",
            "verify": [
              {
                "name": "Проверить, пройдены ли все тесты",
                "file": "verify1-1.sh",
                "hint": "Пожалуйста, убедитесь, что у вас правильный формат вывода."
              }
            ],
            "solutions": ["trie.py"]
          }
        ],
        "intro": {
          "text": "ru/intro.md",
          "title": "Введение"
        },
        "finish": {
          "text": "ru/finish.md",
          "title": "Резюме"
        }
      }
    }
  ]
}
