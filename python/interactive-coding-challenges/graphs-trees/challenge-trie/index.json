{
  "$schema": "https://cdn.jsdelivr.net/gh/labex-labs/schema/index.json",
  "type": "challenge",
  "title": "Trie Data Structure for String Storage",
  "description": "A trie, also known as a prefix tree, is a tree-like data structure used to store and retrieve a set of strings. It is commonly used in search engines, spell checkers, and IP routers. In a trie, each node represents a character in a string, and the path from the root to a leaf node represents a complete string.",
  "meta": {
    "title": "Trie Data Structure | Prefix Tree | Search Engine Optimization",
    "description": "Explore the trie data structure, a powerful tree-like data structure used in search engines, spell checkers, and IP routers. Learn how to implement find, insert, remove, and list_words methods.",
    "keywords": "trie, prefix tree, data structure, search engine, spell checker, IP router, find, insert, remove, list_words"
  },
  "difficulty": "Beginner",
  "time": 15,
  "hidden": false,
  "fee_type": "free",
  "show_in_tutorial": false,
  "details": {
    "steps": [
      {
        "title": "Trie",
        "text": "en/step1.md",
        "verify": [
          {
            "name": "Verify if all tests are passed",
            "file": "verify1-1.sh",
            "hint": "Please make sure you have the correct output format.",
            "timeout": 0,
            "showstderr": true
          }
        ],
        "skills": [
          "algorithm/graphs_trees",
          "algorithm/recursion_dynamic",
          "python/booleans",
          "python/classes_objects",
          "python/comments",
          "python/conditional_statements",
          "python/constructor",
          "python/default_arguments",
          "python/encapsulation",
          "python/for_loops",
          "python/function_definition",
          "python/importing_modules",
          "python/lists",
          "python/polymorphism",
          "python/raising_exceptions",
          "python/standard_libraries",
          "python/tuples",
          "python/using_packages",
          "python/while_loops"
        ],
        "solutions": ["trie.py"]
      }
    ],
    "intro": {
      "text": "en/intro.md",
      "background": "setup.sh"
    },
    "finish": {
      "text": "en/finish.md"
    },
    "assets": {
      "host01": [
        {
          "file": "test_trie.py",
          "target": "/tmp",
          "chmod": "ugo+rwx"
        },
        {
          "file": "trie.py",
          "target": "/home/labex/project",
          "chmod": "ugo+rwx"
        }
      ]
    }
  },
  "backend": {
    "imageid": "webide-ubuntu:2204"
  },
  "contributors": ["huduo0812"],
  "license": {
    "name": "Apache-2.0",
    "url": "https://github.com/donnemartin/interactive-coding-challenges/blob/master/LICENSE",
    "repo": "https://github.com/donnemartin/interactive-coding-challenges"
  },
  "i18n": [
    {
      "lang": "zh",
      "title": "用于字符串存储的字典树数据结构",
      "description": "字典树（Trie），也称为前缀树，是一种树形数据结构，用于存储和检索一组字符串。它常用于搜索引擎、拼写检查器和IP路由器中。在字典树中，每个节点代表字符串中的一个字符，从根节点到叶节点的路径代表一个完整的字符串。",
      "meta": {
        "title": "字典树数据结构 | 前缀树 | 搜索引擎优化",
        "description": "探索字典树数据结构，这是一种用于搜索引擎、拼写检查器和IP路由器的强大树形数据结构。了解如何实现查找、插入、删除和列出单词的方法。",
        "keywords": "字典树, 前缀树, 数据结构, 搜索引擎, 拼写检查器, IP路由器, 查找, 插入, 删除, 列出单词"
      },
      "details": {
        "steps": [
          {
            "title": "字典树（Trie）",
            "text": "zh/step1.md",
            "verify": [
              {
                "name": "验证所有测试是否通过",
                "file": "verify1-1.sh",
                "hint": "请确保你有正确的输出格式。"
              }
            ],
            "solutions": ["trie.py"]
          }
        ],
        "intro": {
          "text": "zh/intro.md",
          "title": "介绍"
        },
        "finish": {
          "text": "zh/finish.md",
          "title": "总结"
        }
      }
    }
  ]
}
